
Mandarin_base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c0c4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00017190  0801c368  0801c368  0002c368  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080334f8  080334f8  000434f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08033500  08033500  00043500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08033504  08033504  00043504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000234  24000000  08033508  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000234  0803373c  00050234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000294  0803379c  00050294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00030ed8  240002f4  080337fc  000502f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240311cc  080337fc  000511cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000502f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003d8bd  00000000  00000000  00050322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006910  00000000  00000000  0008dbdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002248  00000000  00000000  000944f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fa0  00000000  00000000  00096738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00040aeb  00000000  00000000  000986d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000339e4  00000000  00000000  000d91c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00186eb7  00000000  00000000  0010cba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c9  00000000  00000000  00293a5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aa00  00000000  00000000  00293b28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00002730  00000000  00000000  0029e528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002f4 	.word	0x240002f4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801c34c 	.word	0x0801c34c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002f8 	.word	0x240002f8
 80002dc:	0801c34c 	.word	0x0801c34c

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295
 8000738:	f04f 30ff 	movne.w	r0, #4294967295
 800073c:	f000 b9ac 	b.w	8000a98 <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9d08      	ldr	r5, [sp, #32]
 80007ce:	4604      	mov	r4, r0
 80007d0:	468e      	mov	lr, r1
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d14d      	bne.n	8000872 <__udivmoddi4+0xaa>
 80007d6:	428a      	cmp	r2, r1
 80007d8:	4694      	mov	ip, r2
 80007da:	d969      	bls.n	80008b0 <__udivmoddi4+0xe8>
 80007dc:	fab2 f282 	clz	r2, r2
 80007e0:	b152      	cbz	r2, 80007f8 <__udivmoddi4+0x30>
 80007e2:	fa01 f302 	lsl.w	r3, r1, r2
 80007e6:	f1c2 0120 	rsb	r1, r2, #32
 80007ea:	fa20 f101 	lsr.w	r1, r0, r1
 80007ee:	fa0c fc02 	lsl.w	ip, ip, r2
 80007f2:	ea41 0e03 	orr.w	lr, r1, r3
 80007f6:	4094      	lsls	r4, r2
 80007f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007fc:	0c21      	lsrs	r1, r4, #16
 80007fe:	fbbe f6f8 	udiv	r6, lr, r8
 8000802:	fa1f f78c 	uxth.w	r7, ip
 8000806:	fb08 e316 	mls	r3, r8, r6, lr
 800080a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800080e:	fb06 f107 	mul.w	r1, r6, r7
 8000812:	4299      	cmp	r1, r3
 8000814:	d90a      	bls.n	800082c <__udivmoddi4+0x64>
 8000816:	eb1c 0303 	adds.w	r3, ip, r3
 800081a:	f106 30ff 	add.w	r0, r6, #4294967295
 800081e:	f080 811f 	bcs.w	8000a60 <__udivmoddi4+0x298>
 8000822:	4299      	cmp	r1, r3
 8000824:	f240 811c 	bls.w	8000a60 <__udivmoddi4+0x298>
 8000828:	3e02      	subs	r6, #2
 800082a:	4463      	add	r3, ip
 800082c:	1a5b      	subs	r3, r3, r1
 800082e:	b2a4      	uxth	r4, r4
 8000830:	fbb3 f0f8 	udiv	r0, r3, r8
 8000834:	fb08 3310 	mls	r3, r8, r0, r3
 8000838:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800083c:	fb00 f707 	mul.w	r7, r0, r7
 8000840:	42a7      	cmp	r7, r4
 8000842:	d90a      	bls.n	800085a <__udivmoddi4+0x92>
 8000844:	eb1c 0404 	adds.w	r4, ip, r4
 8000848:	f100 33ff 	add.w	r3, r0, #4294967295
 800084c:	f080 810a 	bcs.w	8000a64 <__udivmoddi4+0x29c>
 8000850:	42a7      	cmp	r7, r4
 8000852:	f240 8107 	bls.w	8000a64 <__udivmoddi4+0x29c>
 8000856:	4464      	add	r4, ip
 8000858:	3802      	subs	r0, #2
 800085a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800085e:	1be4      	subs	r4, r4, r7
 8000860:	2600      	movs	r6, #0
 8000862:	b11d      	cbz	r5, 800086c <__udivmoddi4+0xa4>
 8000864:	40d4      	lsrs	r4, r2
 8000866:	2300      	movs	r3, #0
 8000868:	e9c5 4300 	strd	r4, r3, [r5]
 800086c:	4631      	mov	r1, r6
 800086e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000872:	428b      	cmp	r3, r1
 8000874:	d909      	bls.n	800088a <__udivmoddi4+0xc2>
 8000876:	2d00      	cmp	r5, #0
 8000878:	f000 80ef 	beq.w	8000a5a <__udivmoddi4+0x292>
 800087c:	2600      	movs	r6, #0
 800087e:	e9c5 0100 	strd	r0, r1, [r5]
 8000882:	4630      	mov	r0, r6
 8000884:	4631      	mov	r1, r6
 8000886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800088a:	fab3 f683 	clz	r6, r3
 800088e:	2e00      	cmp	r6, #0
 8000890:	d14a      	bne.n	8000928 <__udivmoddi4+0x160>
 8000892:	428b      	cmp	r3, r1
 8000894:	d302      	bcc.n	800089c <__udivmoddi4+0xd4>
 8000896:	4282      	cmp	r2, r0
 8000898:	f200 80f9 	bhi.w	8000a8e <__udivmoddi4+0x2c6>
 800089c:	1a84      	subs	r4, r0, r2
 800089e:	eb61 0303 	sbc.w	r3, r1, r3
 80008a2:	2001      	movs	r0, #1
 80008a4:	469e      	mov	lr, r3
 80008a6:	2d00      	cmp	r5, #0
 80008a8:	d0e0      	beq.n	800086c <__udivmoddi4+0xa4>
 80008aa:	e9c5 4e00 	strd	r4, lr, [r5]
 80008ae:	e7dd      	b.n	800086c <__udivmoddi4+0xa4>
 80008b0:	b902      	cbnz	r2, 80008b4 <__udivmoddi4+0xec>
 80008b2:	deff      	udf	#255	; 0xff
 80008b4:	fab2 f282 	clz	r2, r2
 80008b8:	2a00      	cmp	r2, #0
 80008ba:	f040 8092 	bne.w	80009e2 <__udivmoddi4+0x21a>
 80008be:	eba1 010c 	sub.w	r1, r1, ip
 80008c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008c6:	fa1f fe8c 	uxth.w	lr, ip
 80008ca:	2601      	movs	r6, #1
 80008cc:	0c20      	lsrs	r0, r4, #16
 80008ce:	fbb1 f3f7 	udiv	r3, r1, r7
 80008d2:	fb07 1113 	mls	r1, r7, r3, r1
 80008d6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008da:	fb0e f003 	mul.w	r0, lr, r3
 80008de:	4288      	cmp	r0, r1
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x12c>
 80008e2:	eb1c 0101 	adds.w	r1, ip, r1
 80008e6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x12a>
 80008ec:	4288      	cmp	r0, r1
 80008ee:	f200 80cb 	bhi.w	8000a88 <__udivmoddi4+0x2c0>
 80008f2:	4643      	mov	r3, r8
 80008f4:	1a09      	subs	r1, r1, r0
 80008f6:	b2a4      	uxth	r4, r4
 80008f8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008fc:	fb07 1110 	mls	r1, r7, r0, r1
 8000900:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000904:	fb0e fe00 	mul.w	lr, lr, r0
 8000908:	45a6      	cmp	lr, r4
 800090a:	d908      	bls.n	800091e <__udivmoddi4+0x156>
 800090c:	eb1c 0404 	adds.w	r4, ip, r4
 8000910:	f100 31ff 	add.w	r1, r0, #4294967295
 8000914:	d202      	bcs.n	800091c <__udivmoddi4+0x154>
 8000916:	45a6      	cmp	lr, r4
 8000918:	f200 80bb 	bhi.w	8000a92 <__udivmoddi4+0x2ca>
 800091c:	4608      	mov	r0, r1
 800091e:	eba4 040e 	sub.w	r4, r4, lr
 8000922:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000926:	e79c      	b.n	8000862 <__udivmoddi4+0x9a>
 8000928:	f1c6 0720 	rsb	r7, r6, #32
 800092c:	40b3      	lsls	r3, r6
 800092e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000932:	ea4c 0c03 	orr.w	ip, ip, r3
 8000936:	fa20 f407 	lsr.w	r4, r0, r7
 800093a:	fa01 f306 	lsl.w	r3, r1, r6
 800093e:	431c      	orrs	r4, r3
 8000940:	40f9      	lsrs	r1, r7
 8000942:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000946:	fa00 f306 	lsl.w	r3, r0, r6
 800094a:	fbb1 f8f9 	udiv	r8, r1, r9
 800094e:	0c20      	lsrs	r0, r4, #16
 8000950:	fa1f fe8c 	uxth.w	lr, ip
 8000954:	fb09 1118 	mls	r1, r9, r8, r1
 8000958:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800095c:	fb08 f00e 	mul.w	r0, r8, lr
 8000960:	4288      	cmp	r0, r1
 8000962:	fa02 f206 	lsl.w	r2, r2, r6
 8000966:	d90b      	bls.n	8000980 <__udivmoddi4+0x1b8>
 8000968:	eb1c 0101 	adds.w	r1, ip, r1
 800096c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000970:	f080 8088 	bcs.w	8000a84 <__udivmoddi4+0x2bc>
 8000974:	4288      	cmp	r0, r1
 8000976:	f240 8085 	bls.w	8000a84 <__udivmoddi4+0x2bc>
 800097a:	f1a8 0802 	sub.w	r8, r8, #2
 800097e:	4461      	add	r1, ip
 8000980:	1a09      	subs	r1, r1, r0
 8000982:	b2a4      	uxth	r4, r4
 8000984:	fbb1 f0f9 	udiv	r0, r1, r9
 8000988:	fb09 1110 	mls	r1, r9, r0, r1
 800098c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000990:	fb00 fe0e 	mul.w	lr, r0, lr
 8000994:	458e      	cmp	lr, r1
 8000996:	d908      	bls.n	80009aa <__udivmoddi4+0x1e2>
 8000998:	eb1c 0101 	adds.w	r1, ip, r1
 800099c:	f100 34ff 	add.w	r4, r0, #4294967295
 80009a0:	d26c      	bcs.n	8000a7c <__udivmoddi4+0x2b4>
 80009a2:	458e      	cmp	lr, r1
 80009a4:	d96a      	bls.n	8000a7c <__udivmoddi4+0x2b4>
 80009a6:	3802      	subs	r0, #2
 80009a8:	4461      	add	r1, ip
 80009aa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009ae:	fba0 9402 	umull	r9, r4, r0, r2
 80009b2:	eba1 010e 	sub.w	r1, r1, lr
 80009b6:	42a1      	cmp	r1, r4
 80009b8:	46c8      	mov	r8, r9
 80009ba:	46a6      	mov	lr, r4
 80009bc:	d356      	bcc.n	8000a6c <__udivmoddi4+0x2a4>
 80009be:	d053      	beq.n	8000a68 <__udivmoddi4+0x2a0>
 80009c0:	b15d      	cbz	r5, 80009da <__udivmoddi4+0x212>
 80009c2:	ebb3 0208 	subs.w	r2, r3, r8
 80009c6:	eb61 010e 	sbc.w	r1, r1, lr
 80009ca:	fa01 f707 	lsl.w	r7, r1, r7
 80009ce:	fa22 f306 	lsr.w	r3, r2, r6
 80009d2:	40f1      	lsrs	r1, r6
 80009d4:	431f      	orrs	r7, r3
 80009d6:	e9c5 7100 	strd	r7, r1, [r5]
 80009da:	2600      	movs	r6, #0
 80009dc:	4631      	mov	r1, r6
 80009de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e2:	f1c2 0320 	rsb	r3, r2, #32
 80009e6:	40d8      	lsrs	r0, r3
 80009e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009ec:	fa21 f303 	lsr.w	r3, r1, r3
 80009f0:	4091      	lsls	r1, r2
 80009f2:	4301      	orrs	r1, r0
 80009f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009f8:	fa1f fe8c 	uxth.w	lr, ip
 80009fc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a00:	fb07 3610 	mls	r6, r7, r0, r3
 8000a04:	0c0b      	lsrs	r3, r1, #16
 8000a06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000a0e:	429e      	cmp	r6, r3
 8000a10:	fa04 f402 	lsl.w	r4, r4, r2
 8000a14:	d908      	bls.n	8000a28 <__udivmoddi4+0x260>
 8000a16:	eb1c 0303 	adds.w	r3, ip, r3
 8000a1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a1e:	d22f      	bcs.n	8000a80 <__udivmoddi4+0x2b8>
 8000a20:	429e      	cmp	r6, r3
 8000a22:	d92d      	bls.n	8000a80 <__udivmoddi4+0x2b8>
 8000a24:	3802      	subs	r0, #2
 8000a26:	4463      	add	r3, ip
 8000a28:	1b9b      	subs	r3, r3, r6
 8000a2a:	b289      	uxth	r1, r1
 8000a2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a30:	fb07 3316 	mls	r3, r7, r6, r3
 8000a34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a38:	fb06 f30e 	mul.w	r3, r6, lr
 8000a3c:	428b      	cmp	r3, r1
 8000a3e:	d908      	bls.n	8000a52 <__udivmoddi4+0x28a>
 8000a40:	eb1c 0101 	adds.w	r1, ip, r1
 8000a44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a48:	d216      	bcs.n	8000a78 <__udivmoddi4+0x2b0>
 8000a4a:	428b      	cmp	r3, r1
 8000a4c:	d914      	bls.n	8000a78 <__udivmoddi4+0x2b0>
 8000a4e:	3e02      	subs	r6, #2
 8000a50:	4461      	add	r1, ip
 8000a52:	1ac9      	subs	r1, r1, r3
 8000a54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a58:	e738      	b.n	80008cc <__udivmoddi4+0x104>
 8000a5a:	462e      	mov	r6, r5
 8000a5c:	4628      	mov	r0, r5
 8000a5e:	e705      	b.n	800086c <__udivmoddi4+0xa4>
 8000a60:	4606      	mov	r6, r0
 8000a62:	e6e3      	b.n	800082c <__udivmoddi4+0x64>
 8000a64:	4618      	mov	r0, r3
 8000a66:	e6f8      	b.n	800085a <__udivmoddi4+0x92>
 8000a68:	454b      	cmp	r3, r9
 8000a6a:	d2a9      	bcs.n	80009c0 <__udivmoddi4+0x1f8>
 8000a6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a74:	3801      	subs	r0, #1
 8000a76:	e7a3      	b.n	80009c0 <__udivmoddi4+0x1f8>
 8000a78:	4646      	mov	r6, r8
 8000a7a:	e7ea      	b.n	8000a52 <__udivmoddi4+0x28a>
 8000a7c:	4620      	mov	r0, r4
 8000a7e:	e794      	b.n	80009aa <__udivmoddi4+0x1e2>
 8000a80:	4640      	mov	r0, r8
 8000a82:	e7d1      	b.n	8000a28 <__udivmoddi4+0x260>
 8000a84:	46d0      	mov	r8, sl
 8000a86:	e77b      	b.n	8000980 <__udivmoddi4+0x1b8>
 8000a88:	3b02      	subs	r3, #2
 8000a8a:	4461      	add	r1, ip
 8000a8c:	e732      	b.n	80008f4 <__udivmoddi4+0x12c>
 8000a8e:	4630      	mov	r0, r6
 8000a90:	e709      	b.n	80008a6 <__udivmoddi4+0xde>
 8000a92:	4464      	add	r4, ip
 8000a94:	3802      	subs	r0, #2
 8000a96:	e742      	b.n	800091e <__udivmoddi4+0x156>

08000a98 <__aeabi_idiv0>:
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000aa4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000aa8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000aac:	f003 0301 	and.w	r3, r3, #1
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d013      	beq.n	8000adc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ab4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ab8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000abc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d00b      	beq.n	8000adc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ac4:	e000      	b.n	8000ac8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ac6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ac8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d0f9      	beq.n	8000ac6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000ad2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	b2d2      	uxtb	r2, r2
 8000ada:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000adc:	687b      	ldr	r3, [r7, #4]
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <removeSilence>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

float *removeSilence(uint16_t size_in, float32_t *buff_in, uint16_t *size_out)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b092      	sub	sp, #72	; 0x48
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	4603      	mov	r3, r0
 8000af2:	60b9      	str	r1, [r7, #8]
 8000af4:	607a      	str	r2, [r7, #4]
 8000af6:	81fb      	strh	r3, [r7, #14]
	int slide_start, slide_end, start=0, end=size_in, max_idx;
 8000af8:	2300      	movs	r3, #0
 8000afa:	647b      	str	r3, [r7, #68]	; 0x44
 8000afc:	89fb      	ldrh	r3, [r7, #14]
 8000afe:	643b      	str	r3, [r7, #64]	; 0x40
	float max_val=0, avg_power = 0,slide_power = 0.0, threshold = 0.0;
 8000b00:	f04f 0300 	mov.w	r3, #0
 8000b04:	63bb      	str	r3, [r7, #56]	; 0x38
 8000b06:	f04f 0300 	mov.w	r3, #0
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b0c:	f04f 0300 	mov.w	r3, #0
 8000b10:	623b      	str	r3, [r7, #32]
 8000b12:	f04f 0300 	mov.w	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
	float *buff_out;
	for(int i=0; i<size_in - 64; i++){
 8000b18:	2300      	movs	r3, #0
 8000b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8000b1c:	e01f      	b.n	8000b5e <removeSilence+0x74>
		slide_start = i;
 8000b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b20:	61bb      	str	r3, [r7, #24]
		slide_end = i + 64;
 8000b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b24:	3340      	adds	r3, #64	; 0x40
 8000b26:	617b      	str	r3, [r7, #20]
		avg_power = compute_power(64, &buff_in[slide_start]);
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	68ba      	ldr	r2, [r7, #8]
 8000b2e:	4413      	add	r3, r2
 8000b30:	4619      	mov	r1, r3
 8000b32:	2040      	movs	r0, #64	; 0x40
 8000b34:	f000 f8b1 	bl	8000c9a <compute_power>
 8000b38:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
		if(avg_power > max_val){
 8000b3c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000b40:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000b44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b4c:	dd04      	ble.n	8000b58 <removeSilence+0x6e>

			max_idx = i+32;
 8000b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b50:	3320      	adds	r3, #32
 8000b52:	63fb      	str	r3, [r7, #60]	; 0x3c
			max_val = avg_power;
 8000b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b56:	63bb      	str	r3, [r7, #56]	; 0x38
	for(int i=0; i<size_in - 64; i++){
 8000b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8000b5e:	89fb      	ldrh	r3, [r7, #14]
 8000b60:	3b40      	subs	r3, #64	; 0x40
 8000b62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b64:	429a      	cmp	r2, r3
 8000b66:	dbda      	blt.n	8000b1e <removeSilence+0x34>
		}
	}

    slide_start = max_idx - 32;
 8000b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b6a:	3b20      	subs	r3, #32
 8000b6c:	61bb      	str	r3, [r7, #24]
    slide_end = max_idx + 32;
 8000b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b70:	3320      	adds	r3, #32
 8000b72:	617b      	str	r3, [r7, #20]
    avg_power = compute_power(64, &buff_in[slide_start]);
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	68ba      	ldr	r2, [r7, #8]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	2040      	movs	r0, #64	; 0x40
 8000b80:	f000 f88b 	bl	8000c9a <compute_power>
 8000b84:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

    threshold = 0.125 * avg_power;
 8000b88:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000b8c:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8000b90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b94:	edc7 7a07 	vstr	s15, [r7, #28]
    for(int i=max_idx; i<(size_in-32); i++){
 8000b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b9a:	633b      	str	r3, [r7, #48]	; 0x30
 8000b9c:	e01e      	b.n	8000bdc <removeSilence+0xf2>
        slide_start = i - 32;
 8000b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ba0:	3b20      	subs	r3, #32
 8000ba2:	61bb      	str	r3, [r7, #24]
        slide_end = i + 32;
 8000ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ba6:	3320      	adds	r3, #32
 8000ba8:	617b      	str	r3, [r7, #20]
        slide_power = compute_power(64, &buff_in[slide_start]);
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	2040      	movs	r0, #64	; 0x40
 8000bb6:	f000 f870 	bl	8000c9a <compute_power>
 8000bba:	ed87 0a08 	vstr	s0, [r7, #32]
		if (slide_power < threshold){
 8000bbe:	ed97 7a08 	vldr	s14, [r7, #32]
 8000bc2:	edd7 7a07 	vldr	s15, [r7, #28]
 8000bc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bce:	d502      	bpl.n	8000bd6 <removeSilence+0xec>
			end = slide_end;
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	643b      	str	r3, [r7, #64]	; 0x40
			break;
 8000bd4:	e007      	b.n	8000be6 <removeSilence+0xfc>
    for(int i=max_idx; i<(size_in-32); i++){
 8000bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bd8:	3301      	adds	r3, #1
 8000bda:	633b      	str	r3, [r7, #48]	; 0x30
 8000bdc:	89fb      	ldrh	r3, [r7, #14]
 8000bde:	3b20      	subs	r3, #32
 8000be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000be2:	429a      	cmp	r2, r3
 8000be4:	dbdb      	blt.n	8000b9e <removeSilence+0xb4>
		}
    }
    for(int i=max_idx; i>32; i--){
 8000be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000be8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bea:	e01e      	b.n	8000c2a <removeSilence+0x140>

        slide_start = i - 32;
 8000bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bee:	3b20      	subs	r3, #32
 8000bf0:	61bb      	str	r3, [r7, #24]
        slide_end = i + 32;
 8000bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bf4:	3320      	adds	r3, #32
 8000bf6:	617b      	str	r3, [r7, #20]

        slide_power = compute_power(64, &buff_in[slide_start]);
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	68ba      	ldr	r2, [r7, #8]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4619      	mov	r1, r3
 8000c02:	2040      	movs	r0, #64	; 0x40
 8000c04:	f000 f849 	bl	8000c9a <compute_power>
 8000c08:	ed87 0a08 	vstr	s0, [r7, #32]
        if (slide_power < threshold){
 8000c0c:	ed97 7a08 	vldr	s14, [r7, #32]
 8000c10:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c1c:	d502      	bpl.n	8000c24 <removeSilence+0x13a>
            start = slide_start;
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	647b      	str	r3, [r7, #68]	; 0x44
            break;
 8000c22:	e005      	b.n	8000c30 <removeSilence+0x146>
    for(int i=max_idx; i>32; i--){
 8000c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c26:	3b01      	subs	r3, #1
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c2c:	2b20      	cmp	r3, #32
 8000c2e:	dcdd      	bgt.n	8000bec <removeSilence+0x102>
        }
    }


	*size_out = end - start;
 8000c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	801a      	strh	r2, [r3, #0]
	if(*size_out > 3*FFTSize){
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000c48:	d921      	bls.n	8000c8e <removeSilence+0x1a4>
		// allocate memory for buff_out
		buff_out = (float32_t *)malloc(sizeof(float32_t)*(*size_out));
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	4618      	mov	r0, r3
 8000c52:	f017 fb5b 	bl	801830c <malloc>
 8000c56:	4603      	mov	r3, r0
 8000c58:	613b      	str	r3, [r7, #16]
		for(int i=0; i<*size_out; i++){
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c5e:	e00e      	b.n	8000c7e <removeSilence+0x194>
			buff_out[i] = buff_in[i+start];
 8000c60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c64:	4413      	add	r3, r2
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	68ba      	ldr	r2, [r7, #8]
 8000c6a:	441a      	add	r2, r3
 8000c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	6939      	ldr	r1, [r7, #16]
 8000c72:	440b      	add	r3, r1
 8000c74:	6812      	ldr	r2, [r2, #0]
 8000c76:	601a      	str	r2, [r3, #0]
		for(int i=0; i<*size_out; i++){
 8000c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	881b      	ldrh	r3, [r3, #0]
 8000c82:	461a      	mov	r2, r3
 8000c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c86:	4293      	cmp	r3, r2
 8000c88:	dbea      	blt.n	8000c60 <removeSilence+0x176>
//			n = i;
		}


		return buff_out;
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	e001      	b.n	8000c92 <removeSilence+0x1a8>
	} else {
		 Error_Handler();
 8000c8e:	f001 fbf5 	bl	800247c <Error_Handler>





}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3748      	adds	r7, #72	; 0x48
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <compute_power>:
float compute_power(uint16_t size_in, float32_t *buff_in)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b084      	sub	sp, #16
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	6039      	str	r1, [r7, #0]
 8000ca4:	80fb      	strh	r3, [r7, #6]
	float acc=0.0;
 8000ca6:	f04f 0300 	mov.w	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<size_in; i++){
 8000cac:	2300      	movs	r3, #0
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	e016      	b.n	8000ce0 <compute_power+0x46>
		acc += buff_in[i] * buff_in[i];
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	683a      	ldr	r2, [r7, #0]
 8000cb8:	4413      	add	r3, r2
 8000cba:	ed93 7a00 	vldr	s14, [r3]
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	683a      	ldr	r2, [r7, #0]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	edd3 7a00 	vldr	s15, [r3]
 8000cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cce:	ed97 7a03 	vldr	s14, [r7, #12]
 8000cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cd6:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i=0; i<size_in; i++){
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	88fb      	ldrh	r3, [r7, #6]
 8000ce2:	68ba      	ldr	r2, [r7, #8]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	dbe4      	blt.n	8000cb2 <compute_power+0x18>
	}
	return sqrtf(acc)/size_in;
 8000ce8:	ed97 0a03 	vldr	s0, [r7, #12]
 8000cec:	f017 f9e6 	bl	80180bc <sqrtf>
 8000cf0:	eeb0 7a40 	vmov.f32	s14, s0
 8000cf4:	88fb      	ldrh	r3, [r7, #6]
 8000cf6:	ee07 3a90 	vmov	s15, r3
 8000cfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cfe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000d02:	eef0 7a66 	vmov.f32	s15, s13
}
 8000d06:	eeb0 0a67 	vmov.f32	s0, s15
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <normalizeSignal>:

//
void normalizeSignal(int size, uint16_t *buff_in, float32_t *buff_out);
void normalizeSignal(int size, uint16_t *buff_in, float32_t *buff_out)

{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
	int i;
	float mean_val = 0.0, std_val= 0.0;
 8000d1c:	f04f 0300 	mov.w	r3, #0
 8000d20:	61bb      	str	r3, [r7, #24]
 8000d22:	f04f 0300 	mov.w	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]

	for(i = 0; i < size; i++) {
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61fb      	str	r3, [r7, #28]
 8000d2c:	e011      	b.n	8000d52 <normalizeSignal+0x42>
		mean_val += buff_in[i];
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	4413      	add	r3, r2
 8000d36:	881b      	ldrh	r3, [r3, #0]
 8000d38:	ee07 3a90 	vmov	s15, r3
 8000d3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d40:	ed97 7a06 	vldr	s14, [r7, #24]
 8000d44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d48:	edc7 7a06 	vstr	s15, [r7, #24]
	for(i = 0; i < size; i++) {
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	61fb      	str	r3, [r7, #28]
 8000d52:	69fa      	ldr	r2, [r7, #28]
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	dbe9      	blt.n	8000d2e <normalizeSignal+0x1e>
	}
	mean_val = mean_val /size;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	ee07 3a90 	vmov	s15, r3
 8000d60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d64:	edd7 6a06 	vldr	s13, [r7, #24]
 8000d68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d6c:	edc7 7a06 	vstr	s15, [r7, #24]

	for(i = 0; i < size; i++) {
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
 8000d74:	e01d      	b.n	8000db2 <normalizeSignal+0xa2>
		std_val += powf(buff_in[i] - mean_val,2.0);
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	ee07 3a90 	vmov	s15, r3
 8000d84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d88:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d90:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000d94:	eeb0 0a67 	vmov.f32	s0, s15
 8000d98:	f017 f802 	bl	8017da0 <powf>
 8000d9c:	eeb0 7a40 	vmov.f32	s14, s0
 8000da0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000da4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000da8:	edc7 7a05 	vstr	s15, [r7, #20]
	for(i = 0; i < size; i++) {
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	3301      	adds	r3, #1
 8000db0:	61fb      	str	r3, [r7, #28]
 8000db2:	69fa      	ldr	r2, [r7, #28]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	dbdd      	blt.n	8000d76 <normalizeSignal+0x66>
	}
	std_val = sqrtf(std_val /size);
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	ee07 3a90 	vmov	s15, r3
 8000dc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dc4:	ed97 7a05 	vldr	s14, [r7, #20]
 8000dc8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000dcc:	eeb0 0a66 	vmov.f32	s0, s13
 8000dd0:	f017 f974 	bl	80180bc <sqrtf>
 8000dd4:	ed87 0a05 	vstr	s0, [r7, #20]

	for(i=0; i<size; i++){
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
 8000ddc:	e019      	b.n	8000e12 <normalizeSignal+0x102>
		buff_out[i] = ((float32_t)buff_in[i] - mean_val)/(std_val);
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	4413      	add	r3, r2
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	ee07 3a90 	vmov	s15, r3
 8000dec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000df0:	edd7 7a06 	vldr	s15, [r7, #24]
 8000df4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	4413      	add	r3, r2
 8000e00:	ed97 7a05 	vldr	s14, [r7, #20]
 8000e04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e08:	edc3 7a00 	vstr	s15, [r3]
	for(i=0; i<size; i++){
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	61fb      	str	r3, [r7, #28]
 8000e12:	69fa      	ldr	r2, [r7, #28]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	dbe1      	blt.n	8000dde <normalizeSignal+0xce>
	}

}
 8000e1a:	bf00      	nop
 8000e1c:	bf00      	nop
 8000e1e:	3720      	adds	r7, #32
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <convertToComplex>:
 * example:
 * input real_buff=[1.1, 1.2, 1.3, 1.4, 1.5]
 * output complex_buff=[1.1, 0, 1.2, 0, 1.3, 0, 1.4, 0, 1.5, 0]
 */
void convertToComplex(int size, const float32_t *real_buff, float32_t *complex_buff)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b087      	sub	sp, #28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
	  for(int i = 0; i < size; i++){
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	e014      	b.n	8000e60 <convertToComplex+0x3c>
		  complex_buff[2*i] = real_buff[i];
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	441a      	add	r2, r3
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	6879      	ldr	r1, [r7, #4]
 8000e44:	440b      	add	r3, r1
 8000e46:	6812      	ldr	r2, [r2, #0]
 8000e48:	601a      	str	r2, [r3, #0]
		  complex_buff[2*i + 1] = 0;
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	3304      	adds	r3, #4
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	4413      	add	r3, r2
 8000e54:	f04f 0200 	mov.w	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
	  for(int i = 0; i < size; i++){
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	617b      	str	r3, [r7, #20]
 8000e60:	697a      	ldr	r2, [r7, #20]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	dbe6      	blt.n	8000e36 <convertToComplex+0x12>
	  }
}
 8000e68:	bf00      	nop
 8000e6a:	bf00      	nop
 8000e6c:	371c      	adds	r7, #28
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <powerSpectrum>:
 * compute power spectrum from FFT complex buff
 * |complex_buff|^2
 * since FFT complex buff is symmetric, only half of this buff is needed
 */
void powerSpectrum(uint32_t size, const float32_t *complex_buff, float32_t *real_buff)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	ed2d 8b02 	vpush	{d8}
 8000e7c:	b086      	sub	sp, #24
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	60f8      	str	r0, [r7, #12]
 8000e82:	60b9      	str	r1, [r7, #8]
 8000e84:	607a      	str	r2, [r7, #4]
	  for(int i=0; i < (size/2+1); i++){
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
 8000e8a:	e02b      	b.n	8000ee4 <powerSpectrum+0x6e>
		  real_buff[i] = powf(fabsf(complex_buff[2*i]), 2) + powf(fabsf(complex_buff[2*i + 1]), 2);
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	68ba      	ldr	r2, [r7, #8]
 8000e92:	4413      	add	r3, r2
 8000e94:	edd3 7a00 	vldr	s15, [r3]
 8000e98:	eef0 7ae7 	vabs.f32	s15, s15
 8000e9c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000ea0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ea4:	f016 ff7c 	bl	8017da0 <powf>
 8000ea8:	eeb0 8a40 	vmov.f32	s16, s0
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	00db      	lsls	r3, r3, #3
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	68ba      	ldr	r2, [r7, #8]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	edd3 7a00 	vldr	s15, [r3]
 8000eba:	eef0 7ae7 	vabs.f32	s15, s15
 8000ebe:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000ec2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ec6:	f016 ff6b 	bl	8017da0 <powf>
 8000eca:	eef0 7a40 	vmov.f32	s15, s0
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000eda:	edc3 7a00 	vstr	s15, [r3]
	  for(int i=0; i < (size/2+1); i++){
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	085b      	lsrs	r3, r3, #1
 8000ee8:	1c5a      	adds	r2, r3, #1
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d8cd      	bhi.n	8000e8c <powerSpectrum+0x16>
	  }
}
 8000ef0:	bf00      	nop
 8000ef2:	bf00      	nop
 8000ef4:	3718      	adds	r7, #24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	ecbd 8b02 	vpop	{d8}
 8000efc:	bd80      	pop	{r7, pc}

08000efe <powerToDB>:
/**
 * log transformation
 * real_buff = log(real_buff)
 * in-place operation, real_buff will be updated
 * **/
void powerToDB(uint32_t size, float32_t *real_buff){
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b084      	sub	sp, #16
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
 8000f06:	6039      	str	r1, [r7, #0]
	for(int i=0; i<size; i++){
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	e026      	b.n	8000f5c <powerToDB+0x5e>
		if(real_buff[i] < 0){
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	683a      	ldr	r2, [r7, #0]
 8000f14:	4413      	add	r3, r2
 8000f16:	edd3 7a00 	vldr	s15, [r3]
 8000f1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f22:	d502      	bpl.n	8000f2a <powerToDB+0x2c>
			exit(0); // power spectrum must be non-negative
 8000f24:	2000      	movs	r0, #0
 8000f26:	f017 f9b9 	bl	801829c <exit>
		}
		real_buff[i] = 10*log10f(real_buff[i]);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	683a      	ldr	r2, [r7, #0]
 8000f30:	4413      	add	r3, r2
 8000f32:	edd3 7a00 	vldr	s15, [r3]
 8000f36:	eeb0 0a67 	vmov.f32	s0, s15
 8000f3a:	f017 f891 	bl	8018060 <log10f>
 8000f3e:	eef0 7a40 	vmov.f32	s15, s0
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	683a      	ldr	r2, [r7, #0]
 8000f48:	4413      	add	r3, r2
 8000f4a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000f4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f52:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<size; i++){
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d8d4      	bhi.n	8000f0e <powerToDB+0x10>

//		real_buff[i] = 10*log10f(real_buff[i]);
	}
}
 8000f64:	bf00      	nop
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <dctTransform>:
/**
 * Discrete Cosine Transform (DCT type-II)
 * More details refer to https://docs.scipy.org/doc/scipy/reference/generated/scipy.fftpack.dct.html
 */
void dctTransform(uint32_t size, float32_t *buff_in, float32_t *buff_out)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	ed2d 8b02 	vpush	{d8}
 8000f76:	b088      	sub	sp, #32
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
	float acc, scale;

	for (int i = 0; i < size; i++) {
 8000f80:	2300      	movs	r3, #0
 8000f82:	61bb      	str	r3, [r7, #24]
 8000f84:	e07e      	b.n	8001084 <dctTransform+0x114>
		acc = 0.0;
 8000f86:	f04f 0300 	mov.w	r3, #0
 8000f8a:	61fb      	str	r3, [r7, #28]
		for (int j = 0; j < size; j++) {
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
 8000f90:	e033      	b.n	8000ffa <dctTransform+0x8a>
			acc += buff_in[j] * cosf(pi * (j + 0.5) * i / size);
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	4413      	add	r3, r2
 8000f9a:	ed93 8a00 	vldr	s16, [r3]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	ee07 3a90 	vmov	s15, r3
 8000fa4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000fa8:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8000fac:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000fb0:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 80010a0 <dctTransform+0x130>
 8000fb4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	ee07 3a90 	vmov	s15, r3
 8000fbe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000fc2:	ee26 5b07 	vmul.f64	d5, d6, d7
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	ee07 3a90 	vmov	s15, r3
 8000fcc:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000fd0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fd4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fd8:	eeb0 0a67 	vmov.f32	s0, s15
 8000fdc:	f016 fad8 	bl	8017590 <cosf>
 8000fe0:	eef0 7a40 	vmov.f32	s15, s0
 8000fe4:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000fe8:	ed97 7a07 	vldr	s14, [r7, #28]
 8000fec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff0:	edc7 7a07 	vstr	s15, [r7, #28]
		for (int j = 0; j < size; j++) {
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	68fa      	ldr	r2, [r7, #12]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d8c7      	bhi.n	8000f92 <dctTransform+0x22>
		}
		scale = (i==0) ? sqrtf(1.0/(4.0 * size)) * 2: sqrtf(1.0/(2.0 *size)) * 2;
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d117      	bne.n	8001038 <dctTransform+0xc8>
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	ee07 3a90 	vmov	s15, r3
 800100e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001012:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001016:	ee27 6b06 	vmul.f64	d6, d7, d6
 800101a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800101e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001022:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001026:	eeb0 0a67 	vmov.f32	s0, s15
 800102a:	f017 f847 	bl	80180bc <sqrtf>
 800102e:	eef0 7a40 	vmov.f32	s15, s0
 8001032:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001036:	e014      	b.n	8001062 <dctTransform+0xf2>
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	ee07 3a90 	vmov	s15, r3
 800103e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001042:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001046:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800104a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800104e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001052:	eeb0 0a67 	vmov.f32	s0, s15
 8001056:	f017 f831 	bl	80180bc <sqrtf>
 800105a:	eef0 7a40 	vmov.f32	s15, s0
 800105e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001062:	edc7 7a04 	vstr	s15, [r7, #16]
		buff_out[i] = acc * scale;
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001072:	edd7 7a04 	vldr	s15, [r7, #16]
 8001076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800107a:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < size; i++) {
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	3301      	adds	r3, #1
 8001082:	61bb      	str	r3, [r7, #24]
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	429a      	cmp	r2, r3
 800108a:	f63f af7c 	bhi.w	8000f86 <dctTransform+0x16>
	}
}
 800108e:	bf00      	nop
 8001090:	bf00      	nop
 8001092:	3720      	adds	r7, #32
 8001094:	46bd      	mov	sp, r7
 8001096:	ecbd 8b02 	vpop	{d8}
 800109a:	bd80      	pop	{r7, pc}
 800109c:	f3af 8000 	nop.w
 80010a0:	54442d18 	.word	0x54442d18
 80010a4:	400921fb 	.word	0x400921fb

080010a8 <filteredSpectrum>:
/**
 * triangular filter band
 */
void filteredSpectrum( uint32_t sr, uint32_t n_fft, uint32_t n_mels, float32_t freq_min,
						float32_t freq_max, const float *power_spec_buff,float *filtered_spec)
{
 80010a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010ac:	b0b3      	sub	sp, #204	; 0xcc
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	66f8      	str	r0, [r7, #108]	; 0x6c
 80010b2:	66b9      	str	r1, [r7, #104]	; 0x68
 80010b4:	667a      	str	r2, [r7, #100]	; 0x64
 80010b6:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
 80010ba:	edc7 0a17 	vstr	s1, [r7, #92]	; 0x5c
 80010be:	65bb      	str	r3, [r7, #88]	; 0x58
 80010c0:	466b      	mov	r3, sp
 80010c2:	461e      	mov	r6, r3
	float fmin_mel, fmax_mel, mel_step, linear_freq_step, inner_sum;

	int i=0, jth_filter=0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80010ca:	2300      	movs	r3, #0
 80010cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

	float filter[n_fft/2+1];  			// size 257
 80010d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80010d2:	085b      	lsrs	r3, r3, #1
 80010d4:	1c59      	adds	r1, r3, #1
 80010d6:	460b      	mov	r3, r1
 80010d8:	3b01      	subs	r3, #1
 80010da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80010de:	2300      	movs	r3, #0
 80010e0:	460c      	mov	r4, r1
 80010e2:	461d      	mov	r5, r3
 80010e4:	f04f 0200 	mov.w	r2, #0
 80010e8:	f04f 0300 	mov.w	r3, #0
 80010ec:	016b      	lsls	r3, r5, #5
 80010ee:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80010f2:	0162      	lsls	r2, r4, #5
 80010f4:	2300      	movs	r3, #0
 80010f6:	4688      	mov	r8, r1
 80010f8:	4699      	mov	r9, r3
 80010fa:	f04f 0200 	mov.w	r2, #0
 80010fe:	f04f 0300 	mov.w	r3, #0
 8001102:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001106:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800110a:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800110e:	008b      	lsls	r3, r1, #2
 8001110:	3307      	adds	r3, #7
 8001112:	08db      	lsrs	r3, r3, #3
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	ebad 0d03 	sub.w	sp, sp, r3
 800111a:	466b      	mov	r3, sp
 800111c:	3303      	adds	r3, #3
 800111e:	089b      	lsrs	r3, r3, #2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	float mels[n_mels+2];        		// size 22
 8001126:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001128:	1c99      	adds	r1, r3, #2
 800112a:	460b      	mov	r3, r1
 800112c:	3b01      	subs	r3, #1
 800112e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001132:	2300      	movs	r3, #0
 8001134:	468a      	mov	sl, r1
 8001136:	469b      	mov	fp, r3
 8001138:	f04f 0200 	mov.w	r2, #0
 800113c:	f04f 0300 	mov.w	r3, #0
 8001140:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8001144:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8001148:	ea4f 124a 	mov.w	r2, sl, lsl #5
 800114c:	2300      	movs	r3, #0
 800114e:	6539      	str	r1, [r7, #80]	; 0x50
 8001150:	657b      	str	r3, [r7, #84]	; 0x54
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	f04f 0300 	mov.w	r3, #0
 800115a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800115e:	4628      	mov	r0, r5
 8001160:	0143      	lsls	r3, r0, #5
 8001162:	4620      	mov	r0, r4
 8001164:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001168:	4620      	mov	r0, r4
 800116a:	0142      	lsls	r2, r0, #5
 800116c:	008b      	lsls	r3, r1, #2
 800116e:	3307      	adds	r3, #7
 8001170:	08db      	lsrs	r3, r3, #3
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	ebad 0d03 	sub.w	sp, sp, r3
 8001178:	466b      	mov	r3, sp
 800117a:	3303      	adds	r3, #3
 800117c:	089b      	lsrs	r3, r3, #2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	float mels_f[n_mels+2];        	// size 22
 8001184:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001186:	1c99      	adds	r1, r3, #2
 8001188:	460b      	mov	r3, r1
 800118a:	3b01      	subs	r3, #1
 800118c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001190:	2300      	movs	r3, #0
 8001192:	64b9      	str	r1, [r7, #72]	; 0x48
 8001194:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	f04f 0300 	mov.w	r3, #0
 800119e:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80011a2:	4628      	mov	r0, r5
 80011a4:	0143      	lsls	r3, r0, #5
 80011a6:	4620      	mov	r0, r4
 80011a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80011ac:	4620      	mov	r0, r4
 80011ae:	0142      	lsls	r2, r0, #5
 80011b0:	2300      	movs	r3, #0
 80011b2:	6439      	str	r1, [r7, #64]	; 0x40
 80011b4:	647b      	str	r3, [r7, #68]	; 0x44
 80011b6:	f04f 0200 	mov.w	r2, #0
 80011ba:	f04f 0300 	mov.w	r3, #0
 80011be:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80011c2:	4628      	mov	r0, r5
 80011c4:	0143      	lsls	r3, r0, #5
 80011c6:	4620      	mov	r0, r4
 80011c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80011cc:	4620      	mov	r0, r4
 80011ce:	0142      	lsls	r2, r0, #5
 80011d0:	008b      	lsls	r3, r1, #2
 80011d2:	3307      	adds	r3, #7
 80011d4:	08db      	lsrs	r3, r3, #3
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	ebad 0d03 	sub.w	sp, sp, r3
 80011dc:	466b      	mov	r3, sp
 80011de:	3303      	adds	r3, #3
 80011e0:	089b      	lsrs	r3, r3, #2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float linar_freq[n_fft/2+1];
 80011e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011ea:	085b      	lsrs	r3, r3, #1
 80011ec:	1c59      	adds	r1, r3, #1
 80011ee:	460b      	mov	r3, r1
 80011f0:	3b01      	subs	r3, #1
 80011f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80011f6:	2300      	movs	r3, #0
 80011f8:	63b9      	str	r1, [r7, #56]	; 0x38
 80011fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	f04f 0300 	mov.w	r3, #0
 8001204:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001208:	4628      	mov	r0, r5
 800120a:	0143      	lsls	r3, r0, #5
 800120c:	4620      	mov	r0, r4
 800120e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001212:	4620      	mov	r0, r4
 8001214:	0142      	lsls	r2, r0, #5
 8001216:	2300      	movs	r3, #0
 8001218:	6339      	str	r1, [r7, #48]	; 0x30
 800121a:	637b      	str	r3, [r7, #52]	; 0x34
 800121c:	f04f 0200 	mov.w	r2, #0
 8001220:	f04f 0300 	mov.w	r3, #0
 8001224:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001228:	4628      	mov	r0, r5
 800122a:	0143      	lsls	r3, r0, #5
 800122c:	4620      	mov	r0, r4
 800122e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001232:	4620      	mov	r0, r4
 8001234:	0142      	lsls	r2, r0, #5
 8001236:	008b      	lsls	r3, r1, #2
 8001238:	3307      	adds	r3, #7
 800123a:	08db      	lsrs	r3, r3, #3
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	ebad 0d03 	sub.w	sp, sp, r3
 8001242:	466b      	mov	r3, sp
 8001244:	3303      	adds	r3, #3
 8001246:	089b      	lsrs	r3, r3, #2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float upper[n_fft/2+1], lower[n_fft/2+1];
 800124e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001250:	085b      	lsrs	r3, r3, #1
 8001252:	1c59      	adds	r1, r3, #1
 8001254:	460b      	mov	r3, r1
 8001256:	3b01      	subs	r3, #1
 8001258:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800125c:	2300      	movs	r3, #0
 800125e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001260:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	f04f 0300 	mov.w	r3, #0
 800126a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800126e:	4628      	mov	r0, r5
 8001270:	0143      	lsls	r3, r0, #5
 8001272:	4620      	mov	r0, r4
 8001274:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001278:	4620      	mov	r0, r4
 800127a:	0142      	lsls	r2, r0, #5
 800127c:	2300      	movs	r3, #0
 800127e:	6239      	str	r1, [r7, #32]
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	f04f 0300 	mov.w	r3, #0
 800128a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800128e:	4628      	mov	r0, r5
 8001290:	0143      	lsls	r3, r0, #5
 8001292:	4620      	mov	r0, r4
 8001294:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001298:	4620      	mov	r0, r4
 800129a:	0142      	lsls	r2, r0, #5
 800129c:	008b      	lsls	r3, r1, #2
 800129e:	3307      	adds	r3, #7
 80012a0:	08db      	lsrs	r3, r3, #3
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	ebad 0d03 	sub.w	sp, sp, r3
 80012a8:	466b      	mov	r3, sp
 80012aa:	3303      	adds	r3, #3
 80012ac:	089b      	lsrs	r3, r3, #2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80012b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012b6:	085b      	lsrs	r3, r3, #1
 80012b8:	1c59      	adds	r1, r3, #1
 80012ba:	460b      	mov	r3, r1
 80012bc:	3b01      	subs	r3, #1
 80012be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80012c2:	2300      	movs	r3, #0
 80012c4:	61b9      	str	r1, [r7, #24]
 80012c6:	61fb      	str	r3, [r7, #28]
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	f04f 0300 	mov.w	r3, #0
 80012d0:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80012d4:	4628      	mov	r0, r5
 80012d6:	0143      	lsls	r3, r0, #5
 80012d8:	4620      	mov	r0, r4
 80012da:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80012de:	4620      	mov	r0, r4
 80012e0:	0142      	lsls	r2, r0, #5
 80012e2:	2300      	movs	r3, #0
 80012e4:	6139      	str	r1, [r7, #16]
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	f04f 0200 	mov.w	r2, #0
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80012f4:	4628      	mov	r0, r5
 80012f6:	0143      	lsls	r3, r0, #5
 80012f8:	4620      	mov	r0, r4
 80012fa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80012fe:	4620      	mov	r0, r4
 8001300:	0142      	lsls	r2, r0, #5
 8001302:	008b      	lsls	r3, r1, #2
 8001304:	3307      	adds	r3, #7
 8001306:	08db      	lsrs	r3, r3, #3
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	ebad 0d03 	sub.w	sp, sp, r3
 800130e:	466b      	mov	r3, sp
 8001310:	3303      	adds	r3, #3
 8001312:	089b      	lsrs	r3, r3, #2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	float enorm[n_mels];                // size 20
 800131a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800131c:	460b      	mov	r3, r1
 800131e:	3b01      	subs	r3, #1
 8001320:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001324:	2300      	movs	r3, #0
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	f04f 0300 	mov.w	r3, #0
 8001332:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001336:	4628      	mov	r0, r5
 8001338:	0143      	lsls	r3, r0, #5
 800133a:	4620      	mov	r0, r4
 800133c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001340:	4620      	mov	r0, r4
 8001342:	0142      	lsls	r2, r0, #5
 8001344:	2300      	movs	r3, #0
 8001346:	6039      	str	r1, [r7, #0]
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001356:	4628      	mov	r0, r5
 8001358:	0143      	lsls	r3, r0, #5
 800135a:	4620      	mov	r0, r4
 800135c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001360:	4620      	mov	r0, r4
 8001362:	0142      	lsls	r2, r0, #5
 8001364:	008b      	lsls	r3, r1, #2
 8001366:	3307      	adds	r3, #7
 8001368:	08db      	lsrs	r3, r3, #3
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	ebad 0d03 	sub.w	sp, sp, r3
 8001370:	466b      	mov	r3, sp
 8001372:	3303      	adds	r3, #3
 8001374:	089b      	lsrs	r3, r3, #2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	fmin_mel = freqToMel(freq_min); 		// 0.0
 800137c:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8001380:	f000 fa06 	bl	8001790 <freqToMel>
 8001384:	ed87 0a20 	vstr	s0, [r7, #128]	; 0x80
	fmax_mel = freqToMel(freq_max); 		// 2840.0377
 8001388:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 800138c:	f000 fa00 	bl	8001790 <freqToMel>
 8001390:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c

	/** Center freqs of each FFT bin **/
	linear_freq_step =  (sr/2.0 - freq_min)/(n_fft/2);
 8001394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001396:	ee07 3a90 	vmov	s15, r3
 800139a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800139e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80013a2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80013a6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80013aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013ae:	ee36 5b47 	vsub.f64	d5, d6, d7
 80013b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013b4:	085b      	lsrs	r3, r3, #1
 80013b6:	ee07 3a90 	vmov	s15, r3
 80013ba:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80013be:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80013c2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80013c6:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	for(i=0; i<(n_fft/2+1); i++){
 80013ca:	2300      	movs	r3, #0
 80013cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80013d0:	e016      	b.n	8001400 <filteredSpectrum+0x358>
		linar_freq[i] = i*linear_freq_step;
 80013d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80013d6:	ee07 3a90 	vmov	s15, r3
 80013da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013de:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80013e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013e6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80013ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4413      	add	r3, r2
 80013f2:	edc3 7a00 	vstr	s15, [r3]
	for(i=0; i<(n_fft/2+1); i++){
 80013f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80013fa:	3301      	adds	r3, #1
 80013fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001400:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001402:	085b      	lsrs	r3, r3, #1
 8001404:	1c5a      	adds	r2, r3, #1
 8001406:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800140a:	429a      	cmp	r2, r3
 800140c:	d8e1      	bhi.n	80013d2 <filteredSpectrum+0x32a>
	}

	/** 'Center freqs' of mel bands - uniformly spaced between limits **/
	mel_step =  (fmax_mel - fmin_mel)/(n_mels + 1);
 800140e:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8001412:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001416:	ee77 6a67 	vsub.f32	s13, s14, s15
 800141a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800141c:	3301      	adds	r3, #1
 800141e:	ee07 3a90 	vmov	s15, r3
 8001422:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001426:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800142a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	for(i=0; i<(n_mels+2); i++){
 800142e:	2300      	movs	r3, #0
 8001430:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001434:	e016      	b.n	8001464 <filteredSpectrum+0x3bc>
		mels[i] = i*mel_step;
 8001436:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800143a:	ee07 3a90 	vmov	s15, r3
 800143e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001442:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800144a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800144e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	edc3 7a00 	vstr	s15, [r3]
	for(i=0; i<(n_mels+2); i++){
 800145a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800145e:	3301      	adds	r3, #1
 8001460:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001464:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001466:	1c9a      	adds	r2, r3, #2
 8001468:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800146c:	429a      	cmp	r2, r3
 800146e:	d8e2      	bhi.n	8001436 <filteredSpectrum+0x38e>
	}
	for(i=0; i<(n_mels+2); i++){
 8001470:	2300      	movs	r3, #0
 8001472:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001476:	e01a      	b.n	80014ae <filteredSpectrum+0x406>
		mels_f[i] = melToFreq(mels[i]);
 8001478:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800147c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	edd3 7a00 	vldr	s15, [r3]
 8001488:	eeb0 0a67 	vmov.f32	s0, s15
 800148c:	f000 f9ac 	bl	80017e8 <melToFreq>
 8001490:	eef0 7a40 	vmov.f32	s15, s0
 8001494:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001498:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	edc3 7a00 	vstr	s15, [r3]
	for(i=0; i<(n_mels+2); i++){
 80014a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80014a8:	3301      	adds	r3, #1
 80014aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80014ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014b0:	1c9a      	adds	r2, r3, #2
 80014b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d8de      	bhi.n	8001478 <filteredSpectrum+0x3d0>
	}

	/** Slaney-style mel is scaled to be approx constant energy per channel **/
	for(i=0; i<n_mels; i++){
 80014ba:	2300      	movs	r3, #0
 80014bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80014c0:	e023      	b.n	800150a <filteredSpectrum+0x462>
		enorm[i] = 2.0 / (mels_f[i+2] - mels_f[i]);
 80014c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80014c6:	3302      	adds	r3, #2
 80014c8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	ed93 7a00 	vldr	s14, [r3]
 80014d4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80014d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4413      	add	r3, r2
 80014e0:	edd3 7a00 	vldr	s15, [r3]
 80014e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014e8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80014ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014f0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80014f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	edc3 7a00 	vstr	s15, [r3]
	for(i=0; i<n_mels; i++){
 8001500:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001504:	3301      	adds	r3, #1
 8001506:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800150a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800150e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001510:	429a      	cmp	r2, r3
 8001512:	d8d6      	bhi.n	80014c2 <filteredSpectrum+0x41a>
	}

	/**
	 * iterate all filters
	 */
	for(jth_filter=0; jth_filter<n_mels; jth_filter++){
 8001514:	2300      	movs	r3, #0
 8001516:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800151a:	e129      	b.n	8001770 <filteredSpectrum+0x6c8>

		/** update upper/lower slop of filter bins**/
		for(i=0; i<(n_fft/2+1); i++){
 800151c:	2300      	movs	r3, #0
 800151e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001522:	e033      	b.n	800158c <filteredSpectrum+0x4e4>
			lower[i] = (linar_freq[i] - mels_f[jth_filter]) / (mels_f[jth_filter+1]-mels_f[jth_filter]);
 8001524:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001528:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	ed93 7a00 	vldr	s14, [r3]
 8001534:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001538:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	edd3 7a00 	vldr	s15, [r3]
 8001544:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001548:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800154c:	3301      	adds	r3, #1
 800154e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	ed93 7a00 	vldr	s14, [r3]
 800155a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800155e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	edd3 7a00 	vldr	s15, [r3]
 800156a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800156e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001572:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001576:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	edc3 7a00 	vstr	s15, [r3]
		for(i=0; i<(n_fft/2+1); i++){
 8001582:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001586:	3301      	adds	r3, #1
 8001588:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800158c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800158e:	085b      	lsrs	r3, r3, #1
 8001590:	1c5a      	adds	r2, r3, #1
 8001592:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001596:	429a      	cmp	r2, r3
 8001598:	d8c4      	bhi.n	8001524 <filteredSpectrum+0x47c>
		}
		for(i=0; i<(n_fft/2+1); i++){
 800159a:	2300      	movs	r3, #0
 800159c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80015a0:	e035      	b.n	800160e <filteredSpectrum+0x566>
			upper[i] = (mels_f[jth_filter+2] - linar_freq[i])/ (mels_f[jth_filter+2]-mels_f[jth_filter+1]);
 80015a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80015a6:	3302      	adds	r3, #2
 80015a8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	ed93 7a00 	vldr	s14, [r3]
 80015b4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80015b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	edd3 7a00 	vldr	s15, [r3]
 80015c4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80015c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80015cc:	3302      	adds	r3, #2
 80015ce:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	ed93 7a00 	vldr	s14, [r3]
 80015da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80015de:	3301      	adds	r3, #1
 80015e0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	edd3 7a00 	vldr	s15, [r3]
 80015ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015f4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80015f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	edc3 7a00 	vstr	s15, [r3]
		for(i=0; i<(n_fft/2+1); i++){
 8001604:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001608:	3301      	adds	r3, #1
 800160a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800160e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001610:	085b      	lsrs	r3, r3, #1
 8001612:	1c5a      	adds	r2, r3, #1
 8001614:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001618:	429a      	cmp	r2, r3
 800161a:	d8c2      	bhi.n	80015a2 <filteredSpectrum+0x4fa>
		}

		/** compute filter matrix **/
		for(i=0; i<(n_fft/2+1); i++){
 800161c:	2300      	movs	r3, #0
 800161e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001622:	e02c      	b.n	800167e <filteredSpectrum+0x5d6>
			filter[i] = fmaxf(0, fminf(upper[i], lower[i]));
 8001624:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001628:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	edd3 7a00 	vldr	s15, [r3]
 8001634:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001638:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	ed93 7a00 	vldr	s14, [r3]
 8001644:	eef0 0a47 	vmov.f32	s1, s14
 8001648:	eeb0 0a67 	vmov.f32	s0, s15
 800164c:	f016 fb57 	bl	8017cfe <fminf>
 8001650:	eef0 7a40 	vmov.f32	s15, s0
 8001654:	eef0 0a67 	vmov.f32	s1, s15
 8001658:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8001788 <filteredSpectrum+0x6e0>
 800165c:	f016 fb34 	bl	8017cc8 <fmaxf>
 8001660:	eef0 7a40 	vmov.f32	s15, s0
 8001664:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001668:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	edc3 7a00 	vstr	s15, [r3]
		for(i=0; i<(n_fft/2+1); i++){
 8001674:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001678:	3301      	adds	r3, #1
 800167a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800167e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001680:	085b      	lsrs	r3, r3, #1
 8001682:	1c5a      	adds	r2, r3, #1
 8001684:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001688:	429a      	cmp	r2, r3
 800168a:	d8cb      	bhi.n	8001624 <filteredSpectrum+0x57c>
		}

		/** normalize filter matrix **/
		for(i=0; i<(n_fft/2+1); i++){
 800168c:	2300      	movs	r3, #0
 800168e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001692:	e01e      	b.n	80016d2 <filteredSpectrum+0x62a>
			filter[i] *=  enorm[jth_filter];
 8001694:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001698:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	ed93 7a00 	vldr	s14, [r3]
 80016a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80016a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	edd3 7a00 	vldr	s15, [r3]
 80016b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80016bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	edc3 7a00 	vstr	s15, [r3]
		for(i=0; i<(n_fft/2+1); i++){
 80016c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80016cc:	3301      	adds	r3, #1
 80016ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80016d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016d4:	085b      	lsrs	r3, r3, #1
 80016d6:	1c5a      	adds	r2, r3, #1
 80016d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80016dc:	429a      	cmp	r2, r3
 80016de:	d8d9      	bhi.n	8001694 <filteredSpectrum+0x5ec>
		}

		/** compute filtered spectrum **/
		inner_sum = 0;
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		for(i=0; i<(n_fft/2+1); i++){
 80016e8:	2300      	movs	r3, #0
 80016ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80016ee:	e02a      	b.n	8001746 <filteredSpectrum+0x69e>
			if(filter[i] == 0){
 80016f0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80016f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	edd3 7a00 	vldr	s15, [r3]
 8001700:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001708:	d017      	beq.n	800173a <filteredSpectrum+0x692>
				continue;        //skip zero multiplication
			} else {
				inner_sum += filter[i] * power_spec_buff[i];
 800170a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800170e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	ed93 7a00 	vldr	s14, [r3]
 800171a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001722:	4413      	add	r3, r2
 8001724:	edd3 7a00 	vldr	s15, [r3]
 8001728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800172c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001734:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
 8001738:	e000      	b.n	800173c <filteredSpectrum+0x694>
				continue;        //skip zero multiplication
 800173a:	bf00      	nop
		for(i=0; i<(n_fft/2+1); i++){
 800173c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001740:	3301      	adds	r3, #1
 8001742:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001746:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001748:	085b      	lsrs	r3, r3, #1
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001750:	429a      	cmp	r2, r3
 8001752:	d8cd      	bhi.n	80016f0 <filteredSpectrum+0x648>
			}
		}
		filtered_spec[jth_filter] = inner_sum;
 8001754:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800175e:	4413      	add	r3, r2
 8001760:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001764:	601a      	str	r2, [r3, #0]
	for(jth_filter=0; jth_filter<n_mels; jth_filter++){
 8001766:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800176a:	3301      	adds	r3, #1
 800176c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001770:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001774:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001776:	429a      	cmp	r2, r3
 8001778:	f63f aed0 	bhi.w	800151c <filteredSpectrum+0x474>
 800177c:	46b5      	mov	sp, r6
	}

}
 800177e:	bf00      	nop
 8001780:	37cc      	adds	r7, #204	; 0xcc
 8001782:	46bd      	mov	sp, r7
 8001784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001790 <freqToMel>:



float freqToMel(float freq)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	ed87 0a01 	vstr	s0, [r7, #4]
	return 1127.01048 * log(1 + freq / 700.0);
 800179a:	edd7 7a01 	vldr	s15, [r7, #4]
 800179e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80017a2:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 80017d8 <freqToMel+0x48>
 80017a6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80017aa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80017ae:	ee37 7b06 	vadd.f64	d7, d7, d6
 80017b2:	eeb0 0b47 	vmov.f64	d0, d7
 80017b6:	f016 f863 	bl	8017880 <log>
 80017ba:	eeb0 7b40 	vmov.f64	d7, d0
 80017be:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80017e0 <freqToMel+0x50>
 80017c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80017c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 80017ca:	eeb0 0a67 	vmov.f32	s0, s15
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	f3af 8000 	nop.w
 80017d8:	00000000 	.word	0x00000000
 80017dc:	4085e000 	.word	0x4085e000
 80017e0:	bb44e50c 	.word	0xbb44e50c
 80017e4:	40919c0a 	.word	0x40919c0a

080017e8 <melToFreq>:


float melToFreq(float mel)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	ed87 0a01 	vstr	s0, [r7, #4]
	return 700 * (exp(mel / 1127.01048) - 1);
 80017f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80017f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017fa:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8001830 <melToFreq+0x48>
 80017fe:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001802:	eeb0 0b46 	vmov.f64	d0, d6
 8001806:	f015 ff67 	bl	80176d8 <exp>
 800180a:	eeb0 7b40 	vmov.f64	d7, d0
 800180e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001812:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001816:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8001838 <melToFreq+0x50>
 800181a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800181e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 8001822:	eeb0 0a67 	vmov.f32	s0, s15
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	f3af 8000 	nop.w
 8001830:	bb44e50c 	.word	0xbb44e50c
 8001834:	40919c0a 	.word	0x40919c0a
 8001838:	00000000 	.word	0x00000000
 800183c:	4085e000 	.word	0x4085e000

08001840 <hammingWindow>:
/**
 * add hamming window to input signal
 * in-place operation
 */
void hammingWindow(int size, float *real_buff)
{
 8001840:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001844:	b087      	sub	sp, #28
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	6039      	str	r1, [r7, #0]
 800184c:	466b      	mov	r3, sp
 800184e:	461e      	mov	r6, r3
	float hamming[size];
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	1e4b      	subs	r3, r1, #1
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	460a      	mov	r2, r1
 8001858:	2300      	movs	r3, #0
 800185a:	4690      	mov	r8, r2
 800185c:	4699      	mov	r9, r3
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	f04f 0300 	mov.w	r3, #0
 8001866:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800186a:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800186e:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001872:	460a      	mov	r2, r1
 8001874:	2300      	movs	r3, #0
 8001876:	4614      	mov	r4, r2
 8001878:	461d      	mov	r5, r3
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	f04f 0300 	mov.w	r3, #0
 8001882:	016b      	lsls	r3, r5, #5
 8001884:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001888:	0162      	lsls	r2, r4, #5
 800188a:	460b      	mov	r3, r1
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	3307      	adds	r3, #7
 8001890:	08db      	lsrs	r3, r3, #3
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	ebad 0d03 	sub.w	sp, sp, r3
 8001898:	466b      	mov	r3, sp
 800189a:	3303      	adds	r3, #3
 800189c:	089b      	lsrs	r3, r3, #2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < size; i++){
 80018a2:	2300      	movs	r3, #0
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	e02c      	b.n	8001902 <hammingWindow+0xc2>
		hamming[i] = 0.54 - 0.46 * cosf(2.0 * (22.0/7.0) * i / (size));
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	ee07 3a90 	vmov	s15, r3
 80018ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80018b2:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8001958 <hammingWindow+0x118>
 80018b6:	ee27 5b06 	vmul.f64	d5, d7, d6
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	ee07 3a90 	vmov	s15, r3
 80018c0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80018c4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80018c8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80018cc:	eeb0 0a67 	vmov.f32	s0, s15
 80018d0:	f015 fe5e 	bl	8017590 <cosf>
 80018d4:	eef0 7a40 	vmov.f32	s15, s0
 80018d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018dc:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8001960 <hammingWindow+0x120>
 80018e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80018e4:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8001968 <hammingWindow+0x128>
 80018e8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80018ec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80018f0:	68ba      	ldr	r2, [r7, #8]
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < size; i++){
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	3301      	adds	r3, #1
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	429a      	cmp	r2, r3
 8001908:	dbce      	blt.n	80018a8 <hammingWindow+0x68>
	}

	for (int i = 0; i < size; i++){
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	e016      	b.n	800193e <hammingWindow+0xfe>
		real_buff[i] *= hamming[i];
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	4413      	add	r3, r2
 8001918:	ed93 7a00 	vldr	s14, [r3]
 800191c:	68ba      	ldr	r2, [r7, #8]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	edd3 7a00 	vldr	s15, [r3]
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	4413      	add	r3, r2
 8001930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001934:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < size; i++){
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	3301      	adds	r3, #1
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	429a      	cmp	r2, r3
 8001944:	dbe4      	blt.n	8001910 <hammingWindow+0xd0>
 8001946:	46b5      	mov	sp, r6
	}
}
 8001948:	bf00      	nop
 800194a:	371c      	adds	r7, #28
 800194c:	46bd      	mov	sp, r7
 800194e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001952:	bf00      	nop
 8001954:	f3af 8000 	nop.w
 8001958:	49249249 	.word	0x49249249
 800195c:	40192492 	.word	0x40192492
 8001960:	d70a3d71 	.word	0xd70a3d71
 8001964:	3fdd70a3 	.word	0x3fdd70a3
 8001968:	147ae148 	.word	0x147ae148
 800196c:	3fe147ae 	.word	0x3fe147ae

08001970 <normalizeFeature>:



void normalizeFeature(int size, float *feature, float *scaler_min, float *scaler_max)
{
 8001970:	b480      	push	{r7}
 8001972:	b087      	sub	sp, #28
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
 800197c:	603b      	str	r3, [r7, #0]

// (X_train.to_numpy()[0] - scaler.data_min_)/(scaler.data_max_ - scaler.data_min_)
	for(int i=0; i<size; i++){
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	e026      	b.n	80019d2 <normalizeFeature+0x62>
		feature[i] = (feature[i] - scaler_min[i])/(scaler_max[i] - scaler_min[i]);
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	68ba      	ldr	r2, [r7, #8]
 800198a:	4413      	add	r3, r2
 800198c:	ed93 7a00 	vldr	s14, [r3]
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	4413      	add	r3, r2
 8001998:	edd3 7a00 	vldr	s15, [r3]
 800199c:	ee77 6a67 	vsub.f32	s13, s14, s15
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	4413      	add	r3, r2
 80019a8:	ed93 7a00 	vldr	s14, [r3]
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	4413      	add	r3, r2
 80019b4:	edd3 7a00 	vldr	s15, [r3]
 80019b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	68ba      	ldr	r2, [r7, #8]
 80019c2:	4413      	add	r3, r2
 80019c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019c8:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<size; i++){
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	3301      	adds	r3, #1
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	dbd4      	blt.n	8001984 <normalizeFeature+0x14>
	}
}
 80019da:	bf00      	nop
 80019dc:	bf00      	nop
 80019de:	371c      	adds	r7, #28
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019ec:	f5ad 6d14 	sub.w	sp, sp, #2368	; 0x940
 80019f0:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80019f2:	f001 fc99 	bl	8003328 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019f6:	f000 fa0f 	bl	8001e18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019fa:	f000 fc1b 	bl	8002234 <MX_GPIO_Init>
  MX_DMA_Init();
 80019fe:	f000 fbf9 	bl	80021f4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001a02:	f000 fbab 	bl	800215c <MX_USART3_UART_Init>
  MX_ETH_Init();
 8001a06:	f000 fb09 	bl	800201c <MX_ETH_Init>
  MX_ADC1_Init();
 8001a0a:	f000 fa8b 	bl	8001f24 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001a0e:	f000 fb51 	bl	80020b4 <MX_TIM1_Init>
  MX_USB_HOST_Init();
 8001a12:	f014 fb5f 	bl	80160d4 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 8001a16:	f00e fc45 	bl	80102a4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK){
 8001a1a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001a1e:	2100      	movs	r1, #0
 8001a20:	48d0      	ldr	r0, [pc, #832]	; (8001d64 <main+0x37c>)
 8001a22:	f003 f95b 	bl	8004cdc <HAL_ADCEx_Calibration_Start>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <main+0x48>
	  Error_Handler();
 8001a2c:	f000 fd26 	bl	800247c <Error_Handler>
  }
  HAL_TIM_Base_Start(&htim1);
 8001a30:	48cd      	ldr	r0, [pc, #820]	; (8001d68 <main+0x380>)
 8001a32:	f00c f823 	bl	800da7c <HAL_TIM_Base_Start>

  int tests_res = -1;
 8001a36:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3a:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
  // set it to read certain chords from flashdrive
 // tests = 1 -> C, tests = 2 -> C#, etc...
 // tests = 12 -> B
  int tests =2;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c

  // load SVM parameters from USB
	svm_model model;

	while(1){
		MX_USB_HOST_Process();
 8001a44:	f014 fb6c 	bl	8016120 <MX_USB_HOST_Process>

		if(Appli_state == APPLICATION_READY) {
 8001a48:	4bc8      	ldr	r3, [pc, #800]	; (8001d6c <main+0x384>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d1f9      	bne.n	8001a44 <main+0x5c>
//		    	ADC_buff[i] = voice_buff[i];
//		    }
//		    free(voice_buff);

		    // load SVM parameters
			loadSVMParams("svmmodel.txt", &model);
 8001a50:	f607 03b4 	addw	r3, r7, #2228	; 0x8b4
 8001a54:	4619      	mov	r1, r3
 8001a56:	48c6      	ldr	r0, [pc, #792]	; (8001d70 <main+0x388>)
 8001a58:	f013 ff9c 	bl	8015994 <loadSVMParams>
			break; 		// load parameter successfully, break while loop
 8001a5c:	bf00      	nop

		}
	}

// place breakpoint before recording
	if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&ADC_buff, ADC_BUF_SIZE) != HAL_OK){
 8001a5e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001a62:	49c4      	ldr	r1, [pc, #784]	; (8001d74 <main+0x38c>)
 8001a64:	48bf      	ldr	r0, [pc, #764]	; (8001d64 <main+0x37c>)
 8001a66:	f002 f90f 	bl	8003c88 <HAL_ADC_Start_DMA>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <main+0x8c>

		Error_Handler();
 8001a70:	f000 fd04 	bl	800247c <Error_Handler>
	}
	while(1) {
		if (record_done == 1) {
 8001a74:	4bc0      	ldr	r3, [pc, #768]	; (8001d78 <main+0x390>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d1fb      	bne.n	8001a74 <main+0x8c>
			record_done = 0;
 8001a7c:	4bbe      	ldr	r3, [pc, #760]	; (8001d78 <main+0x390>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
			break;
 8001a82:	bf00      	nop
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001a84:	f014 fb4c 	bl	8016120 <MX_USB_HOST_Process>
    /* USER CODE BEGIN 3 */


	/**  Normalize signal, same range to training set **/

	normalizeSignal(ADC_BUF_SIZE, ADC_buff, ADC_buff_norm);
 8001a88:	4abc      	ldr	r2, [pc, #752]	; (8001d7c <main+0x394>)
 8001a8a:	49ba      	ldr	r1, [pc, #744]	; (8001d74 <main+0x38c>)
 8001a8c:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8001a90:	f7ff f93e 	bl	8000d10 <normalizeSignal>

	/** Remove silence **/
	float32_t *voice_signal;
	uint16_t size_out = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f8a7 38b2 	strh.w	r3, [r7, #2226]	; 0x8b2
	voice_signal = removeSilence(ADC_BUF_SIZE, ADC_buff_norm, &size_out);   // not robust
 8001a9a:	f607 03b2 	addw	r3, r7, #2226	; 0x8b2
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	49b6      	ldr	r1, [pc, #728]	; (8001d7c <main+0x394>)
 8001aa2:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8001aa6:	f7ff f820 	bl	8000aea <removeSilence>
 8001aaa:	f8c7 0908 	str.w	r0, [r7, #2312]	; 0x908


	/** Framing **/


	int overlap_size = 128;
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	f8c7 3904 	str.w	r3, [r7, #2308]	; 0x904
	int n_frames = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
	while(size_out - FFTSize + overlap_size > 0) {
 8001aba:	e010      	b.n	8001ade <main+0xf6>
		size_out -= FFTSize - overlap_size;
 8001abc:	f8d7 3904 	ldr.w	r3, [r7, #2308]	; 0x904
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	f8b7 38b2 	ldrh.w	r3, [r7, #2226]	; 0x8b2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	f8a7 38b2 	strh.w	r3, [r7, #2226]	; 0x8b2
		n_frames++;
 8001ad4:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8001ad8:	3301      	adds	r3, #1
 8001ada:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
	while(size_out - FFTSize + overlap_size > 0) {
 8001ade:	f8b7 38b2 	ldrh.w	r3, [r7, #2226]	; 0x8b2
 8001ae2:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 8001ae6:	f8d7 3904 	ldr.w	r3, [r7, #2308]	; 0x904
 8001aea:	4413      	add	r3, r2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	dce5      	bgt.n	8001abc <main+0xd4>
	}
	if(n_frames < 3){
 8001af0:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	dc01      	bgt.n	8001afc <main+0x114>
		Error_Handler();  // we need concatenate 3 frames' MFCC as input features
 8001af8:	f000 fcc0 	bl	800247c <Error_Handler>
	}

	int n_res=n_frames/3-1, res;
 8001afc:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8001b00:	4a9f      	ldr	r2, [pc, #636]	; (8001d80 <main+0x398>)
 8001b02:	fb82 1203 	smull	r1, r2, r2, r3
 8001b06:	17db      	asrs	r3, r3, #31
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	f8c7 3900 	str.w	r3, [r7, #2304]	; 0x900
	int vote_res[model.n_class];
 8001b10:	f8d7 18b8 	ldr.w	r1, [r7, #2232]	; 0x8b8
 8001b14:	1e4b      	subs	r3, r1, #1
 8001b16:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
 8001b1a:	460a      	mov	r2, r1
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	4690      	mov	r8, r2
 8001b20:	4699      	mov	r9, r3
 8001b22:	f04f 0200 	mov.w	r2, #0
 8001b26:	f04f 0300 	mov.w	r3, #0
 8001b2a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001b2e:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001b32:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001b36:	460a      	mov	r2, r1
 8001b38:	2300      	movs	r3, #0
 8001b3a:	4614      	mov	r4, r2
 8001b3c:	461d      	mov	r5, r3
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	f04f 0300 	mov.w	r3, #0
 8001b46:	016b      	lsls	r3, r5, #5
 8001b48:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001b4c:	0162      	lsls	r2, r4, #5
 8001b4e:	460b      	mov	r3, r1
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	3307      	adds	r3, #7
 8001b54:	08db      	lsrs	r3, r3, #3
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	ebad 0d03 	sub.w	sp, sp, r3
 8001b5c:	ab02      	add	r3, sp, #8
 8001b5e:	3303      	adds	r3, #3
 8001b60:	089b      	lsrs	r3, r3, #2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
	for(int i=0; i<model.n_class; i++)
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f8c7 3928 	str.w	r3, [r7, #2344]	; 0x928
 8001b6e:	e00b      	b.n	8001b88 <main+0x1a0>
		vote_res[i] = 0;
 8001b70:	f8d7 38f8 	ldr.w	r3, [r7, #2296]	; 0x8f8
 8001b74:	f8d7 2928 	ldr.w	r2, [r7, #2344]	; 0x928
 8001b78:	2100      	movs	r1, #0
 8001b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i=0; i<model.n_class; i++)
 8001b7e:	f8d7 3928 	ldr.w	r3, [r7, #2344]	; 0x928
 8001b82:	3301      	adds	r3, #1
 8001b84:	f8c7 3928 	str.w	r3, [r7, #2344]	; 0x928
 8001b88:	f8d7 38b8 	ldr.w	r3, [r7, #2232]	; 0x8b8
 8001b8c:	f8d7 2928 	ldr.w	r2, [r7, #2344]	; 0x928
 8001b90:	429a      	cmp	r2, r3
 8001b92:	dbed      	blt.n	8001b70 <main+0x188>
	float32_t mfcc_feature[3*n_mfcc];
//	float32_t mfcc_feature[n_mfcc];
	float32_t frame[FFTSize];

	arm_cfft_instance_f32 fft_handler;
	arm_cfft_init_f32(&fft_handler, 512);
 8001b94:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 8001b98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f014 fdf3 	bl	8016788 <arm_cfft_init_f32>


	for(int k=0; k<n_res; k++) {
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f8c7 392c 	str.w	r3, [r7, #2348]	; 0x92c
 8001ba8:	e0c9      	b.n	8001d3e <main+0x356>

		for(int i=0; i<3; i++)
 8001baa:	2300      	movs	r3, #0
 8001bac:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
 8001bb0:	e09c      	b.n	8001cec <main+0x304>
//		for (int i = 0 ; i < n_frames; i++)
		{

			/** get a frame**/
			for(int j=0; j<FFTSize; j++){
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
 8001bb8:	e026      	b.n	8001c08 <main+0x220>
				frame[j] = voice_signal[k*(1280-overlap_size) + i*(FFTSize-overlap_size) + j];
 8001bba:	f8d7 3904 	ldr.w	r3, [r7, #2308]	; 0x904
 8001bbe:	f5c3 63a0 	rsb	r3, r3, #1280	; 0x500
 8001bc2:	f8d7 292c 	ldr.w	r2, [r7, #2348]	; 0x92c
 8001bc6:	fb03 f202 	mul.w	r2, r3, r2
 8001bca:	f8d7 3904 	ldr.w	r3, [r7, #2308]	; 0x904
 8001bce:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001bd2:	f8d7 1930 	ldr.w	r1, [r7, #2352]	; 0x930
 8001bd6:	fb01 f303 	mul.w	r3, r1, r3
 8001bda:	441a      	add	r2, r3
 8001bdc:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	f8d7 2908 	ldr.w	r2, [r7, #2312]	; 0x908
 8001be8:	4413      	add	r3, r2
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8001bf0:	f6a3 0198 	subw	r1, r3, #2200	; 0x898
 8001bf4:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	601a      	str	r2, [r3, #0]
			for(int j=0; j<FFTSize; j++){
 8001bfe:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8001c02:	3301      	adds	r3, #1
 8001c04:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
 8001c08:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8001c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c10:	dbd3      	blt.n	8001bba <main+0x1d2>
//				frame[j] = voice_signal[i*(FFTSize-overlap_size) + j];
			}

			/** add hamming window to a frame**/
			hammingWindow(FFTSize, frame);
 8001c12:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001c16:	4619      	mov	r1, r3
 8001c18:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c1c:	f7ff fe10 	bl	8001840 <hammingWindow>
	//		rmse_check(debug, win_ref, FFTSize, 0.01);

			/** FFT **/
			convertToComplex(FFTSize, frame, complex_buff);
 8001c20:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001c24:	4a57      	ldr	r2, [pc, #348]	; (8001d84 <main+0x39c>)
 8001c26:	4619      	mov	r1, r3
 8001c28:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c2c:	f7ff f8fa 	bl	8000e24 <convertToComplex>

			arm_cfft_f32(&fft_handler, complex_buff, 0, 1);
 8001c30:	f507 600a 	add.w	r0, r7, #2208	; 0x8a0
 8001c34:	2301      	movs	r3, #1
 8001c36:	2200      	movs	r2, #0
 8001c38:	4952      	ldr	r1, [pc, #328]	; (8001d84 <main+0x39c>)
 8001c3a:	f015 f921 	bl	8016e80 <arm_cfft_f32>

			/** compute power spectrum**/
			powerSpectrum(FFTSize, complex_buff, power_spec_buff); // power_spec_buff size: FFTSize/2 + 1 = 257
 8001c3e:	4a52      	ldr	r2, [pc, #328]	; (8001d88 <main+0x3a0>)
 8001c40:	4950      	ldr	r1, [pc, #320]	; (8001d84 <main+0x39c>)
 8001c42:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c46:	f7ff f916 	bl	8000e76 <powerSpectrum>

			/** compute filter bank, and use it to get filtered spectrum **/
			filteredSpectrum(sample_rate, FFTSize, n_mels, freq_min, freq_max, power_spec_buff, filt_spec_buff);
 8001c4a:	4b50      	ldr	r3, [pc, #320]	; (8001d8c <main+0x3a4>)
 8001c4c:	6818      	ldr	r0, [r3, #0]
 8001c4e:	4b50      	ldr	r3, [pc, #320]	; (8001d90 <main+0x3a8>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	4b50      	ldr	r3, [pc, #320]	; (8001d94 <main+0x3ac>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	ee07 3a90 	vmov	s15, r3
 8001c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c5e:	4b4e      	ldr	r3, [pc, #312]	; (8001d98 <main+0x3b0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	ee07 3a10 	vmov	s14, r3
 8001c66:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001c6a:	4b4c      	ldr	r3, [pc, #304]	; (8001d9c <main+0x3b4>)
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	4b46      	ldr	r3, [pc, #280]	; (8001d88 <main+0x3a0>)
 8001c70:	eef0 0a47 	vmov.f32	s1, s14
 8001c74:	eeb0 0a67 	vmov.f32	s0, s15
 8001c78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c7c:	f7ff fa14 	bl	80010a8 <filteredSpectrum>

			/** log transformation **/
		 	powerToDB(n_mels, filt_spec_buff);
 8001c80:	4b43      	ldr	r3, [pc, #268]	; (8001d90 <main+0x3a8>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4945      	ldr	r1, [pc, #276]	; (8001d9c <main+0x3b4>)
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff f939 	bl	8000efe <powerToDB>

			/**  Discrete Cosine Transform (DCT type-II) **/
			dctTransform(n_mels, filt_spec_buff, dct_spec_buff);
 8001c8c:	4b40      	ldr	r3, [pc, #256]	; (8001d90 <main+0x3a8>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a43      	ldr	r2, [pc, #268]	; (8001da0 <main+0x3b8>)
 8001c92:	4942      	ldr	r1, [pc, #264]	; (8001d9c <main+0x3b4>)
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff f96b 	bl	8000f70 <dctTransform>

			/**  Concate 3 frame's MFCC features**/
			for(int j=0; j<n_mfcc; j++){
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 8001ca0:	e01b      	b.n	8001cda <main+0x2f2>
				mfcc_feature[i * n_mfcc + j] = dct_spec_buff[j];
 8001ca2:	f8d7 2930 	ldr.w	r2, [r7, #2352]	; 0x930
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4413      	add	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	441a      	add	r2, r3
 8001cb0:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8001cb4:	4413      	add	r3, r2
 8001cb6:	493a      	ldr	r1, [pc, #232]	; (8001da0 <main+0x3b8>)
 8001cb8:	f8d7 2920 	ldr.w	r2, [r7, #2336]	; 0x920
 8001cbc:	0092      	lsls	r2, r2, #2
 8001cbe:	440a      	add	r2, r1
 8001cc0:	6812      	ldr	r2, [r2, #0]
 8001cc2:	f607 1138 	addw	r1, r7, #2360	; 0x938
 8001cc6:	f6a1 1134 	subw	r1, r1, #2356	; 0x934
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	440b      	add	r3, r1
 8001cce:	601a      	str	r2, [r3, #0]
			for(int j=0; j<n_mfcc; j++){
 8001cd0:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 8001cda:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8001cde:	2b0c      	cmp	r3, #12
 8001ce0:	dddf      	ble.n	8001ca2 <main+0x2ba>
		for(int i=0; i<3; i++)
 8001ce2:	f8d7 3930 	ldr.w	r3, [r7, #2352]	; 0x930
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
 8001cec:	f8d7 3930 	ldr.w	r3, [r7, #2352]	; 0x930
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	f77f af5e 	ble.w	8001bb2 <main+0x1ca>
			}

		}

		/**  normalize MFCC feature **/
		normalizeFeature(model.n_feature, mfcc_feature, model.scaler_min, model.scaler_max);
 8001cf6:	f8d7 08cc 	ldr.w	r0, [r7, #2252]	; 0x8cc
 8001cfa:	f8d7 28d0 	ldr.w	r2, [r7, #2256]	; 0x8d0
 8001cfe:	f8d7 38d4 	ldr.w	r3, [r7, #2260]	; 0x8d4
 8001d02:	1d39      	adds	r1, r7, #4
 8001d04:	f7ff fe34 	bl	8001970 <normalizeFeature>

		 // testing voice result
		 res = svmPredict(mfcc_feature, &model);
 8001d08:	f607 02b4 	addw	r2, r7, #2228	; 0x8b4
 8001d0c:	1d3b      	adds	r3, r7, #4
 8001d0e:	4611      	mov	r1, r2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f000 fe5b 	bl	80029cc <svmPredict>
 8001d16:	f8c7 08f4 	str.w	r0, [r7, #2292]	; 0x8f4
		 vote_res[res]++;
 8001d1a:	f8d7 38f8 	ldr.w	r3, [r7, #2296]	; 0x8f8
 8001d1e:	f8d7 28f4 	ldr.w	r2, [r7, #2292]	; 0x8f4
 8001d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d26:	1c59      	adds	r1, r3, #1
 8001d28:	f8d7 38f8 	ldr.w	r3, [r7, #2296]	; 0x8f8
 8001d2c:	f8d7 28f4 	ldr.w	r2, [r7, #2292]	; 0x8f4
 8001d30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int k=0; k<n_res; k++) {
 8001d34:	f8d7 392c 	ldr.w	r3, [r7, #2348]	; 0x92c
 8001d38:	3301      	adds	r3, #1
 8001d3a:	f8c7 392c 	str.w	r3, [r7, #2348]	; 0x92c
 8001d3e:	f8d7 292c 	ldr.w	r2, [r7, #2348]	; 0x92c
 8001d42:	f8d7 3900 	ldr.w	r3, [r7, #2304]	; 0x900
 8001d46:	429a      	cmp	r2, r3
 8001d48:	f6ff af2f 	blt.w	8001baa <main+0x1c2>

  }
//	find the chord with most votes
	int wwcd = 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
	int the_winner = -1;
 8001d52:	f04f 33ff 	mov.w	r3, #4294967295
 8001d56:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918

	for(int i = 0; i < model.n_class; i++) {
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
 8001d60:	e03b      	b.n	8001dda <main+0x3f2>
 8001d62:	bf00      	nop
 8001d64:	240305f4 	.word	0x240305f4
 8001d68:	24030780 	.word	0x24030780
 8001d6c:	24030eb4 	.word	0x24030eb4
 8001d70:	0801c368 	.word	0x0801c368
 8001d74:	24000310 	.word	0x24000310
 8001d78:	2402f110 	.word	0x2402f110
 8001d7c:	2400fd10 	.word	0x2400fd10
 8001d80:	55555556 	.word	0x55555556
 8001d84:	2402f118 	.word	0x2402f118
 8001d88:	24030118 	.word	0x24030118
 8001d8c:	24000028 	.word	0x24000028
 8001d90:	24000000 	.word	0x24000000
 8001d94:	2402f114 	.word	0x2402f114
 8001d98:	2400002c 	.word	0x2400002c
 8001d9c:	2403051c 	.word	0x2403051c
 8001da0:	2403056c 	.word	0x2403056c
		if(vote_res[i] > the_winner) {
 8001da4:	f8d7 38f8 	ldr.w	r3, [r7, #2296]	; 0x8f8
 8001da8:	f8d7 2914 	ldr.w	r2, [r7, #2324]	; 0x914
 8001dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db0:	f8d7 2918 	ldr.w	r2, [r7, #2328]	; 0x918
 8001db4:	429a      	cmp	r2, r3
 8001db6:	da0b      	bge.n	8001dd0 <main+0x3e8>
			wwcd = i;
 8001db8:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 8001dbc:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
			the_winner = vote_res[i];
 8001dc0:	f8d7 38f8 	ldr.w	r3, [r7, #2296]	; 0x8f8
 8001dc4:	f8d7 2914 	ldr.w	r2, [r7, #2324]	; 0x914
 8001dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dcc:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
	for(int i = 0; i < model.n_class; i++) {
 8001dd0:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
 8001dda:	f8d7 38b8 	ldr.w	r3, [r7, #2232]	; 0x8b8
 8001dde:	f8d7 2914 	ldr.w	r2, [r7, #2324]	; 0x914
 8001de2:	429a      	cmp	r2, r3
 8001de4:	dbde      	blt.n	8001da4 <main+0x3bc>
		}
	}

	printf("%s major chord.\n", chords[wwcd]);
 8001de6:	f8d7 291c 	ldr.w	r2, [r7, #2332]	; 0x91c
 8001dea:	4613      	mov	r3, r2
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	4413      	add	r3, r2
 8001df0:	4a07      	ldr	r2, [pc, #28]	; (8001e10 <main+0x428>)
 8001df2:	4413      	add	r3, r2
 8001df4:	4619      	mov	r1, r3
 8001df6:	4807      	ldr	r0, [pc, #28]	; (8001e14 <main+0x42c>)
 8001df8:	f016 ffd0 	bl	8018d9c <iprintf>


	wwcd++;
 8001dfc:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8001e00:	3301      	adds	r3, #1
 8001e02:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
	tests_res = wwcd;
 8001e06:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8001e0a:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910

	while(1);
 8001e0e:	e7fe      	b.n	8001e0e <main+0x426>
 8001e10:	24000004 	.word	0x24000004
 8001e14:	0801c378 	.word	0x0801c378

08001e18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b09c      	sub	sp, #112	; 0x70
 8001e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e22:	224c      	movs	r2, #76	; 0x4c
 8001e24:	2100      	movs	r1, #0
 8001e26:	4618      	mov	r0, r3
 8001e28:	f016 fa8e 	bl	8018348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e2c:	1d3b      	adds	r3, r7, #4
 8001e2e:	2220      	movs	r2, #32
 8001e30:	2100      	movs	r1, #0
 8001e32:	4618      	mov	r0, r3
 8001e34:	f016 fa88 	bl	8018348 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001e38:	2002      	movs	r0, #2
 8001e3a:	f008 f899 	bl	8009f70 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e3e:	2300      	movs	r3, #0
 8001e40:	603b      	str	r3, [r7, #0]
 8001e42:	4b35      	ldr	r3, [pc, #212]	; (8001f18 <SystemClock_Config+0x100>)
 8001e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e46:	4a34      	ldr	r2, [pc, #208]	; (8001f18 <SystemClock_Config+0x100>)
 8001e48:	f023 0301 	bic.w	r3, r3, #1
 8001e4c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001e4e:	4b32      	ldr	r3, [pc, #200]	; (8001f18 <SystemClock_Config+0x100>)
 8001e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	4b30      	ldr	r3, [pc, #192]	; (8001f1c <SystemClock_Config+0x104>)
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e60:	4a2e      	ldr	r2, [pc, #184]	; (8001f1c <SystemClock_Config+0x104>)
 8001e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e66:	6193      	str	r3, [r2, #24]
 8001e68:	4b2c      	ldr	r3, [pc, #176]	; (8001f1c <SystemClock_Config+0x104>)
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e70:	603b      	str	r3, [r7, #0]
 8001e72:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001e74:	bf00      	nop
 8001e76:	4b29      	ldr	r3, [pc, #164]	; (8001f1c <SystemClock_Config+0x104>)
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e82:	d1f8      	bne.n	8001e76 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001e84:	4b26      	ldr	r3, [pc, #152]	; (8001f20 <SystemClock_Config+0x108>)
 8001e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e88:	f023 0303 	bic.w	r3, r3, #3
 8001e8c:	4a24      	ldr	r2, [pc, #144]	; (8001f20 <SystemClock_Config+0x108>)
 8001e8e:	f043 0302 	orr.w	r3, r3, #2
 8001e92:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e94:	2301      	movs	r3, #1
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001e98:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001e9c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 30;
 8001eaa:	231e      	movs	r3, #30
 8001eac:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001eb2:	2304      	movs	r3, #4
 8001eb4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001eba:	230c      	movs	r3, #12
 8001ebc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f008 f89a 	bl	800a004 <HAL_RCC_OscConfig>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001ed6:	f000 fad1 	bl	800247c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eda:	233f      	movs	r3, #63	; 0x3f
 8001edc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8001ee2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ee6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001efc:	1d3b      	adds	r3, r7, #4
 8001efe:	2101      	movs	r1, #1
 8001f00:	4618      	mov	r0, r3
 8001f02:	f008 fcd9 	bl	800a8b8 <HAL_RCC_ClockConfig>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001f0c:	f000 fab6 	bl	800247c <Error_Handler>
  }
}
 8001f10:	bf00      	nop
 8001f12:	3770      	adds	r7, #112	; 0x70
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	58000400 	.word	0x58000400
 8001f1c:	58024800 	.word	0x58024800
 8001f20:	58024400 	.word	0x58024400

08001f24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08a      	sub	sp, #40	; 0x28
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001f2a:	f107 031c 	add.w	r3, r7, #28
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001f36:	463b      	mov	r3, r7
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
 8001f44:	615a      	str	r2, [r3, #20]
 8001f46:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001f48:	4b31      	ldr	r3, [pc, #196]	; (8002010 <MX_ADC1_Init+0xec>)
 8001f4a:	4a32      	ldr	r2, [pc, #200]	; (8002014 <MX_ADC1_Init+0xf0>)
 8001f4c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001f4e:	4b30      	ldr	r3, [pc, #192]	; (8002010 <MX_ADC1_Init+0xec>)
 8001f50:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f54:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001f56:	4b2e      	ldr	r3, [pc, #184]	; (8002010 <MX_ADC1_Init+0xec>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f5c:	4b2c      	ldr	r3, [pc, #176]	; (8002010 <MX_ADC1_Init+0xec>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f62:	4b2b      	ldr	r3, [pc, #172]	; (8002010 <MX_ADC1_Init+0xec>)
 8001f64:	2204      	movs	r2, #4
 8001f66:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001f68:	4b29      	ldr	r3, [pc, #164]	; (8002010 <MX_ADC1_Init+0xec>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f6e:	4b28      	ldr	r3, [pc, #160]	; (8002010 <MX_ADC1_Init+0xec>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8001f74:	4b26      	ldr	r3, [pc, #152]	; (8002010 <MX_ADC1_Init+0xec>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f7a:	4b25      	ldr	r3, [pc, #148]	; (8002010 <MX_ADC1_Init+0xec>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8001f80:	4b23      	ldr	r3, [pc, #140]	; (8002010 <MX_ADC1_Init+0xec>)
 8001f82:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8001f86:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001f88:	4b21      	ldr	r3, [pc, #132]	; (8002010 <MX_ADC1_Init+0xec>)
 8001f8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f8e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 8001f90:	4b1f      	ldr	r3, [pc, #124]	; (8002010 <MX_ADC1_Init+0xec>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001f96:	4b1e      	ldr	r3, [pc, #120]	; (8002010 <MX_ADC1_Init+0xec>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001f9c:	4b1c      	ldr	r3, [pc, #112]	; (8002010 <MX_ADC1_Init+0xec>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001fa2:	4b1b      	ldr	r3, [pc, #108]	; (8002010 <MX_ADC1_Init+0xec>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001faa:	4819      	ldr	r0, [pc, #100]	; (8002010 <MX_ADC1_Init+0xec>)
 8001fac:	f001 fcca 	bl	8003944 <HAL_ADC_Init>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8001fb6:	f000 fa61 	bl	800247c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001fbe:	f107 031c 	add.w	r3, r7, #28
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4812      	ldr	r0, [pc, #72]	; (8002010 <MX_ADC1_Init+0xec>)
 8001fc6:	f002 feed 	bl	8004da4 <HAL_ADCEx_MultiModeConfigChannel>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001fd0:	f000 fa54 	bl	800247c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001fd4:	4b10      	ldr	r3, [pc, #64]	; (8002018 <MX_ADC1_Init+0xf4>)
 8001fd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001fd8:	2306      	movs	r3, #6
 8001fda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001fe0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001fe4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001fe6:	2304      	movs	r3, #4
 8001fe8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ff2:	463b      	mov	r3, r7
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4806      	ldr	r0, [pc, #24]	; (8002010 <MX_ADC1_Init+0xec>)
 8001ff8:	f001 ff80 	bl	8003efc <HAL_ADC_ConfigChannel>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8002002:	f000 fa3b 	bl	800247c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002006:	bf00      	nop
 8002008:	3728      	adds	r7, #40	; 0x28
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	240305f4 	.word	0x240305f4
 8002014:	40022000 	.word	0x40022000
 8002018:	3ef08000 	.word	0x3ef08000

0800201c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002020:	4b1e      	ldr	r3, [pc, #120]	; (800209c <MX_ETH_Init+0x80>)
 8002022:	4a1f      	ldr	r2, [pc, #124]	; (80020a0 <MX_ETH_Init+0x84>)
 8002024:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8002026:	4b1f      	ldr	r3, [pc, #124]	; (80020a4 <MX_ETH_Init+0x88>)
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800202c:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <MX_ETH_Init+0x88>)
 800202e:	2280      	movs	r2, #128	; 0x80
 8002030:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8002032:	4b1c      	ldr	r3, [pc, #112]	; (80020a4 <MX_ETH_Init+0x88>)
 8002034:	22e1      	movs	r2, #225	; 0xe1
 8002036:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8002038:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <MX_ETH_Init+0x88>)
 800203a:	2200      	movs	r2, #0
 800203c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800203e:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <MX_ETH_Init+0x88>)
 8002040:	2200      	movs	r2, #0
 8002042:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8002044:	4b17      	ldr	r3, [pc, #92]	; (80020a4 <MX_ETH_Init+0x88>)
 8002046:	2200      	movs	r2, #0
 8002048:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800204a:	4b14      	ldr	r3, [pc, #80]	; (800209c <MX_ETH_Init+0x80>)
 800204c:	4a15      	ldr	r2, [pc, #84]	; (80020a4 <MX_ETH_Init+0x88>)
 800204e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002050:	4b12      	ldr	r3, [pc, #72]	; (800209c <MX_ETH_Init+0x80>)
 8002052:	2201      	movs	r2, #1
 8002054:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8002056:	4b11      	ldr	r3, [pc, #68]	; (800209c <MX_ETH_Init+0x80>)
 8002058:	4a13      	ldr	r2, [pc, #76]	; (80020a8 <MX_ETH_Init+0x8c>)
 800205a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800205c:	4b0f      	ldr	r3, [pc, #60]	; (800209c <MX_ETH_Init+0x80>)
 800205e:	4a13      	ldr	r2, [pc, #76]	; (80020ac <MX_ETH_Init+0x90>)
 8002060:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8002062:	4b0e      	ldr	r3, [pc, #56]	; (800209c <MX_ETH_Init+0x80>)
 8002064:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002068:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800206a:	480c      	ldr	r0, [pc, #48]	; (800209c <MX_ETH_Init+0x80>)
 800206c:	f005 fc7e 	bl	800796c <HAL_ETH_Init>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8002076:	f000 fa01 	bl	800247c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800207a:	2238      	movs	r2, #56	; 0x38
 800207c:	2100      	movs	r1, #0
 800207e:	480c      	ldr	r0, [pc, #48]	; (80020b0 <MX_ETH_Init+0x94>)
 8002080:	f016 f962 	bl	8018348 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002084:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <MX_ETH_Init+0x94>)
 8002086:	2221      	movs	r2, #33	; 0x21
 8002088:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800208a:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <MX_ETH_Init+0x94>)
 800208c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002090:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002092:	4b07      	ldr	r3, [pc, #28]	; (80020b0 <MX_ETH_Init+0x94>)
 8002094:	2200      	movs	r2, #0
 8002096:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}
 800209c:	240306d0 	.word	0x240306d0
 80020a0:	40028000 	.word	0x40028000
 80020a4:	24030860 	.word	0x24030860
 80020a8:	24000294 	.word	0x24000294
 80020ac:	24000234 	.word	0x24000234
 80020b0:	240305bc 	.word	0x240305bc

080020b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ba:	f107 0310 	add.w	r3, r7, #16
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	605a      	str	r2, [r3, #4]
 80020c4:	609a      	str	r2, [r3, #8]
 80020c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020c8:	1d3b      	adds	r3, r7, #4
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	605a      	str	r2, [r3, #4]
 80020d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020d2:	4b20      	ldr	r3, [pc, #128]	; (8002154 <MX_TIM1_Init+0xa0>)
 80020d4:	4a20      	ldr	r2, [pc, #128]	; (8002158 <MX_TIM1_Init+0xa4>)
 80020d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80020d8:	4b1e      	ldr	r3, [pc, #120]	; (8002154 <MX_TIM1_Init+0xa0>)
 80020da:	2200      	movs	r2, #0
 80020dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020de:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <MX_TIM1_Init+0xa0>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7500-1;
 80020e4:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <MX_TIM1_Init+0xa0>)
 80020e6:	f641 524b 	movw	r2, #7499	; 0x1d4b
 80020ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ec:	4b19      	ldr	r3, [pc, #100]	; (8002154 <MX_TIM1_Init+0xa0>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020f2:	4b18      	ldr	r3, [pc, #96]	; (8002154 <MX_TIM1_Init+0xa0>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f8:	4b16      	ldr	r3, [pc, #88]	; (8002154 <MX_TIM1_Init+0xa0>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020fe:	4815      	ldr	r0, [pc, #84]	; (8002154 <MX_TIM1_Init+0xa0>)
 8002100:	f00b fc64 	bl	800d9cc <HAL_TIM_Base_Init>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800210a:	f000 f9b7 	bl	800247c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800210e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002112:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002114:	f107 0310 	add.w	r3, r7, #16
 8002118:	4619      	mov	r1, r3
 800211a:	480e      	ldr	r0, [pc, #56]	; (8002154 <MX_TIM1_Init+0xa0>)
 800211c:	f00b fd1e 	bl	800db5c <HAL_TIM_ConfigClockSource>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002126:	f000 f9a9 	bl	800247c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800212a:	2320      	movs	r3, #32
 800212c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002136:	1d3b      	adds	r3, r7, #4
 8002138:	4619      	mov	r1, r3
 800213a:	4806      	ldr	r0, [pc, #24]	; (8002154 <MX_TIM1_Init+0xa0>)
 800213c:	f00b ff3e 	bl	800dfbc <HAL_TIMEx_MasterConfigSynchronization>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002146:	f000 f999 	bl	800247c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800214a:	bf00      	nop
 800214c:	3720      	adds	r7, #32
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	24030780 	.word	0x24030780
 8002158:	40010000 	.word	0x40010000

0800215c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002160:	4b22      	ldr	r3, [pc, #136]	; (80021ec <MX_USART3_UART_Init+0x90>)
 8002162:	4a23      	ldr	r2, [pc, #140]	; (80021f0 <MX_USART3_UART_Init+0x94>)
 8002164:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002166:	4b21      	ldr	r3, [pc, #132]	; (80021ec <MX_USART3_UART_Init+0x90>)
 8002168:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800216c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800216e:	4b1f      	ldr	r3, [pc, #124]	; (80021ec <MX_USART3_UART_Init+0x90>)
 8002170:	2200      	movs	r2, #0
 8002172:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002174:	4b1d      	ldr	r3, [pc, #116]	; (80021ec <MX_USART3_UART_Init+0x90>)
 8002176:	2200      	movs	r2, #0
 8002178:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800217a:	4b1c      	ldr	r3, [pc, #112]	; (80021ec <MX_USART3_UART_Init+0x90>)
 800217c:	2200      	movs	r2, #0
 800217e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002180:	4b1a      	ldr	r3, [pc, #104]	; (80021ec <MX_USART3_UART_Init+0x90>)
 8002182:	220c      	movs	r2, #12
 8002184:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002186:	4b19      	ldr	r3, [pc, #100]	; (80021ec <MX_USART3_UART_Init+0x90>)
 8002188:	2200      	movs	r2, #0
 800218a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800218c:	4b17      	ldr	r3, [pc, #92]	; (80021ec <MX_USART3_UART_Init+0x90>)
 800218e:	2200      	movs	r2, #0
 8002190:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002192:	4b16      	ldr	r3, [pc, #88]	; (80021ec <MX_USART3_UART_Init+0x90>)
 8002194:	2200      	movs	r2, #0
 8002196:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002198:	4b14      	ldr	r3, [pc, #80]	; (80021ec <MX_USART3_UART_Init+0x90>)
 800219a:	2200      	movs	r2, #0
 800219c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800219e:	4b13      	ldr	r3, [pc, #76]	; (80021ec <MX_USART3_UART_Init+0x90>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021a4:	4811      	ldr	r0, [pc, #68]	; (80021ec <MX_USART3_UART_Init+0x90>)
 80021a6:	f00b ff97 	bl	800e0d8 <HAL_UART_Init>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80021b0:	f000 f964 	bl	800247c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021b4:	2100      	movs	r1, #0
 80021b6:	480d      	ldr	r0, [pc, #52]	; (80021ec <MX_USART3_UART_Init+0x90>)
 80021b8:	f00c ff99 	bl	800f0ee <HAL_UARTEx_SetTxFifoThreshold>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80021c2:	f000 f95b 	bl	800247c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021c6:	2100      	movs	r1, #0
 80021c8:	4808      	ldr	r0, [pc, #32]	; (80021ec <MX_USART3_UART_Init+0x90>)
 80021ca:	f00c ffce 	bl	800f16a <HAL_UARTEx_SetRxFifoThreshold>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80021d4:	f000 f952 	bl	800247c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80021d8:	4804      	ldr	r0, [pc, #16]	; (80021ec <MX_USART3_UART_Init+0x90>)
 80021da:	f00c ff4f 	bl	800f07c <HAL_UARTEx_DisableFifoMode>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80021e4:	f000 f94a 	bl	800247c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80021e8:	bf00      	nop
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	240307cc 	.word	0x240307cc
 80021f0:	40004800 	.word	0x40004800

080021f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021fa:	4b0d      	ldr	r3, [pc, #52]	; (8002230 <MX_DMA_Init+0x3c>)
 80021fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002200:	4a0b      	ldr	r2, [pc, #44]	; (8002230 <MX_DMA_Init+0x3c>)
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800220a:	4b09      	ldr	r3, [pc, #36]	; (8002230 <MX_DMA_Init+0x3c>)
 800220c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	607b      	str	r3, [r7, #4]
 8002216:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002218:	2200      	movs	r2, #0
 800221a:	2100      	movs	r1, #0
 800221c:	200b      	movs	r0, #11
 800221e:	f002 ff7a 	bl	8005116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002222:	200b      	movs	r0, #11
 8002224:	f002 ff91 	bl	800514a <HAL_NVIC_EnableIRQ>

}
 8002228:	bf00      	nop
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	58024400 	.word	0x58024400

08002234 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08c      	sub	sp, #48	; 0x30
 8002238:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223a:	f107 031c 	add.w	r3, r7, #28
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	605a      	str	r2, [r3, #4]
 8002244:	609a      	str	r2, [r3, #8]
 8002246:	60da      	str	r2, [r3, #12]
 8002248:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800224a:	4b6b      	ldr	r3, [pc, #428]	; (80023f8 <MX_GPIO_Init+0x1c4>)
 800224c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002250:	4a69      	ldr	r2, [pc, #420]	; (80023f8 <MX_GPIO_Init+0x1c4>)
 8002252:	f043 0304 	orr.w	r3, r3, #4
 8002256:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800225a:	4b67      	ldr	r3, [pc, #412]	; (80023f8 <MX_GPIO_Init+0x1c4>)
 800225c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	61bb      	str	r3, [r7, #24]
 8002266:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002268:	4b63      	ldr	r3, [pc, #396]	; (80023f8 <MX_GPIO_Init+0x1c4>)
 800226a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800226e:	4a62      	ldr	r2, [pc, #392]	; (80023f8 <MX_GPIO_Init+0x1c4>)
 8002270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002274:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002278:	4b5f      	ldr	r3, [pc, #380]	; (80023f8 <MX_GPIO_Init+0x1c4>)
 800227a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800227e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002286:	4b5c      	ldr	r3, [pc, #368]	; (80023f8 <MX_GPIO_Init+0x1c4>)
 8002288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800228c:	4a5a      	ldr	r2, [pc, #360]	; (80023f8 <MX_GPIO_Init+0x1c4>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002296:	4b58      	ldr	r3, [pc, #352]	; (80023f8 <MX_GPIO_Init+0x1c4>)
 8002298:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a4:	4b54      	ldr	r3, [pc, #336]	; (80023f8 <MX_GPIO_Init+0x1c4>)
 80022a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022aa:	4a53      	ldr	r2, [pc, #332]	; (80023f8 <MX_GPIO_Init+0x1c4>)
 80022ac:	f043 0302 	orr.w	r3, r3, #2
 80022b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022b4:	4b50      	ldr	r3, [pc, #320]	; (80023f8 <MX_GPIO_Init+0x1c4>)
 80022b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022c2:	4b4d      	ldr	r3, [pc, #308]	; (80023f8 <MX_GPIO_Init+0x1c4>)
 80022c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022c8:	4a4b      	ldr	r2, [pc, #300]	; (80023f8 <MX_GPIO_Init+0x1c4>)
 80022ca:	f043 0308 	orr.w	r3, r3, #8
 80022ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022d2:	4b49      	ldr	r3, [pc, #292]	; (80023f8 <MX_GPIO_Init+0x1c4>)
 80022d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022e0:	4b45      	ldr	r3, [pc, #276]	; (80023f8 <MX_GPIO_Init+0x1c4>)
 80022e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022e6:	4a44      	ldr	r2, [pc, #272]	; (80023f8 <MX_GPIO_Init+0x1c4>)
 80022e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022f0:	4b41      	ldr	r3, [pc, #260]	; (80023f8 <MX_GPIO_Init+0x1c4>)
 80022f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022fa:	607b      	str	r3, [r7, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022fe:	4b3e      	ldr	r3, [pc, #248]	; (80023f8 <MX_GPIO_Init+0x1c4>)
 8002300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002304:	4a3c      	ldr	r2, [pc, #240]	; (80023f8 <MX_GPIO_Init+0x1c4>)
 8002306:	f043 0310 	orr.w	r3, r3, #16
 800230a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800230e:	4b3a      	ldr	r3, [pc, #232]	; (80023f8 <MX_GPIO_Init+0x1c4>)
 8002310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002314:	f003 0310 	and.w	r3, r3, #16
 8002318:	603b      	str	r3, [r7, #0]
 800231a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800231c:	2200      	movs	r2, #0
 800231e:	f244 0101 	movw	r1, #16385	; 0x4001
 8002322:	4836      	ldr	r0, [pc, #216]	; (80023fc <MX_GPIO_Init+0x1c8>)
 8002324:	f006 f8f6 	bl	8008514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8002328:	2200      	movs	r2, #0
 800232a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800232e:	4834      	ldr	r0, [pc, #208]	; (8002400 <MX_GPIO_Init+0x1cc>)
 8002330:	f006 f8f0 	bl	8008514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8002334:	2200      	movs	r2, #0
 8002336:	2140      	movs	r1, #64	; 0x40
 8002338:	4832      	ldr	r0, [pc, #200]	; (8002404 <MX_GPIO_Init+0x1d0>)
 800233a:	f006 f8eb 	bl	8008514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800233e:	2200      	movs	r2, #0
 8002340:	2102      	movs	r1, #2
 8002342:	4831      	ldr	r0, [pc, #196]	; (8002408 <MX_GPIO_Init+0x1d4>)
 8002344:	f006 f8e6 	bl	8008514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002348:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800234c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800234e:	2300      	movs	r3, #0
 8002350:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002356:	f107 031c 	add.w	r3, r7, #28
 800235a:	4619      	mov	r1, r3
 800235c:	482b      	ldr	r0, [pc, #172]	; (800240c <MX_GPIO_Init+0x1d8>)
 800235e:	f005 ff29 	bl	80081b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8002362:	f244 0301 	movw	r3, #16385	; 0x4001
 8002366:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002368:	2301      	movs	r3, #1
 800236a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002370:	2300      	movs	r3, #0
 8002372:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002374:	f107 031c 	add.w	r3, r7, #28
 8002378:	4619      	mov	r1, r3
 800237a:	4820      	ldr	r0, [pc, #128]	; (80023fc <MX_GPIO_Init+0x1c8>)
 800237c:	f005 ff1a 	bl	80081b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8002380:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002384:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002386:	2301      	movs	r3, #1
 8002388:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238e:	2300      	movs	r3, #0
 8002390:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002392:	f107 031c 	add.w	r3, r7, #28
 8002396:	4619      	mov	r1, r3
 8002398:	4819      	ldr	r0, [pc, #100]	; (8002400 <MX_GPIO_Init+0x1cc>)
 800239a:	f005 ff0b 	bl	80081b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800239e:	2340      	movs	r3, #64	; 0x40
 80023a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a2:	2301      	movs	r3, #1
 80023a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023aa:	2300      	movs	r3, #0
 80023ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023ae:	f107 031c 	add.w	r3, r7, #28
 80023b2:	4619      	mov	r1, r3
 80023b4:	4813      	ldr	r0, [pc, #76]	; (8002404 <MX_GPIO_Init+0x1d0>)
 80023b6:	f005 fefd 	bl	80081b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80023ba:	2380      	movs	r3, #128	; 0x80
 80023bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80023c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80023c8:	f107 031c 	add.w	r3, r7, #28
 80023cc:	4619      	mov	r1, r3
 80023ce:	480d      	ldr	r0, [pc, #52]	; (8002404 <MX_GPIO_Init+0x1d0>)
 80023d0:	f005 fef0 	bl	80081b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80023d4:	2302      	movs	r3, #2
 80023d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d8:	2301      	movs	r3, #1
 80023da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e0:	2300      	movs	r3, #0
 80023e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80023e4:	f107 031c 	add.w	r3, r7, #28
 80023e8:	4619      	mov	r1, r3
 80023ea:	4807      	ldr	r0, [pc, #28]	; (8002408 <MX_GPIO_Init+0x1d4>)
 80023ec:	f005 fee2 	bl	80081b4 <HAL_GPIO_Init>

}
 80023f0:	bf00      	nop
 80023f2:	3730      	adds	r7, #48	; 0x30
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	58024400 	.word	0x58024400
 80023fc:	58020400 	.word	0x58020400
 8002400:	58020c00 	.word	0x58020c00
 8002404:	58021800 	.word	0x58021800
 8002408:	58021000 	.word	0x58021000
 800240c:	58020800 	.word	0x58020800

08002410 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
	if(HAL_ADC_Stop_DMA(&hadc1) != HAL_OK){
 8002418:	4807      	ldr	r0, [pc, #28]	; (8002438 <HAL_ADC_ConvCpltCallback+0x28>)
 800241a:	f001 fcf9 	bl	8003e10 <HAL_ADC_Stop_DMA>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <HAL_ADC_ConvCpltCallback+0x18>
		Error_Handler();
 8002424:	f000 f82a 	bl	800247c <Error_Handler>
	}
	record_done = 1;
 8002428:	4b04      	ldr	r3, [pc, #16]	; (800243c <HAL_ADC_ConvCpltCallback+0x2c>)
 800242a:	2201      	movs	r2, #1
 800242c:	601a      	str	r2, [r3, #0]
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	240305f4 	.word	0x240305f4
 800243c:	2402f110 	.word	0x2402f110

08002440 <_write>:

int _write(int file, char *ptr, int len) {
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
	int i = 0;
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]
	for(i = 0; i < len; i++)
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]
 8002454:	e009      	b.n	800246a <_write+0x2a>
		ITM_SendChar((*ptr++));
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	60ba      	str	r2, [r7, #8]
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f7fe fb1c 	bl	8000a9c <ITM_SendChar>
	for(i = 0; i < len; i++)
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	3301      	adds	r3, #1
 8002468:	617b      	str	r3, [r7, #20]
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	429a      	cmp	r2, r3
 8002470:	dbf1      	blt.n	8002456 <_write+0x16>
	return len;
 8002472:	687b      	ldr	r3, [r7, #4]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002480:	b672      	cpsid	i
}
 8002482:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("error");
 8002484:	4803      	ldr	r0, [pc, #12]	; (8002494 <Error_Handler+0x18>)
 8002486:	f016 fc89 	bl	8018d9c <iprintf>
	  HAL_Delay(10000);
 800248a:	f242 7010 	movw	r0, #10000	; 0x2710
 800248e:	f000 ffdd 	bl	800344c <HAL_Delay>
	  printf("error");
 8002492:	e7f7      	b.n	8002484 <Error_Handler+0x8>
 8002494:	0801c38c 	.word	0x0801c38c

08002498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800249e:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <HAL_MspInit+0x30>)
 80024a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80024a4:	4a08      	ldr	r2, [pc, #32]	; (80024c8 <HAL_MspInit+0x30>)
 80024a6:	f043 0302 	orr.w	r3, r3, #2
 80024aa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80024ae:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <HAL_MspInit+0x30>)
 80024b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	607b      	str	r3, [r7, #4]
 80024ba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	58024400 	.word	0x58024400

080024cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b0ba      	sub	sp, #232	; 0xe8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	60da      	str	r2, [r3, #12]
 80024e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024e4:	f107 0310 	add.w	r3, r7, #16
 80024e8:	22c0      	movs	r2, #192	; 0xc0
 80024ea:	2100      	movs	r1, #0
 80024ec:	4618      	mov	r0, r3
 80024ee:	f015 ff2b 	bl	8018348 <memset>
  if(hadc->Instance==ADC1)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a43      	ldr	r2, [pc, #268]	; (8002604 <HAL_ADC_MspInit+0x138>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d17f      	bne.n	80025fc <HAL_ADC_MspInit+0x130>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80024fc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002500:	f04f 0300 	mov.w	r3, #0
 8002504:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8002508:	2301      	movs	r3, #1
 800250a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 800250c:	2312      	movs	r3, #18
 800250e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 3;
 8002510:	2303      	movs	r3, #3
 8002512:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002514:	2302      	movs	r3, #2
 8002516:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002518:	2302      	movs	r3, #2
 800251a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800251c:	23c0      	movs	r3, #192	; 0xc0
 800251e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8002520:	2320      	movs	r3, #32
 8002522:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8002524:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002528:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800252a:	2300      	movs	r3, #0
 800252c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002530:	f107 0310 	add.w	r3, r7, #16
 8002534:	4618      	mov	r0, r3
 8002536:	f008 fd4b 	bl	800afd0 <HAL_RCCEx_PeriphCLKConfig>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8002540:	f7ff ff9c 	bl	800247c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002544:	4b30      	ldr	r3, [pc, #192]	; (8002608 <HAL_ADC_MspInit+0x13c>)
 8002546:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800254a:	4a2f      	ldr	r2, [pc, #188]	; (8002608 <HAL_ADC_MspInit+0x13c>)
 800254c:	f043 0320 	orr.w	r3, r3, #32
 8002550:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002554:	4b2c      	ldr	r3, [pc, #176]	; (8002608 <HAL_ADC_MspInit+0x13c>)
 8002556:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800255a:	f003 0320 	and.w	r3, r3, #32
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002562:	4b29      	ldr	r3, [pc, #164]	; (8002608 <HAL_ADC_MspInit+0x13c>)
 8002564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002568:	4a27      	ldr	r2, [pc, #156]	; (8002608 <HAL_ADC_MspInit+0x13c>)
 800256a:	f043 0301 	orr.w	r3, r3, #1
 800256e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002572:	4b25      	ldr	r3, [pc, #148]	; (8002608 <HAL_ADC_MspInit+0x13c>)
 8002574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002580:	2308      	movs	r3, #8
 8002582:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002586:	2303      	movs	r3, #3
 8002588:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258c:	2300      	movs	r3, #0
 800258e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002592:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002596:	4619      	mov	r1, r3
 8002598:	481c      	ldr	r0, [pc, #112]	; (800260c <HAL_ADC_MspInit+0x140>)
 800259a:	f005 fe0b 	bl	80081b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800259e:	4b1c      	ldr	r3, [pc, #112]	; (8002610 <HAL_ADC_MspInit+0x144>)
 80025a0:	4a1c      	ldr	r2, [pc, #112]	; (8002614 <HAL_ADC_MspInit+0x148>)
 80025a2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80025a4:	4b1a      	ldr	r3, [pc, #104]	; (8002610 <HAL_ADC_MspInit+0x144>)
 80025a6:	2209      	movs	r2, #9
 80025a8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025aa:	4b19      	ldr	r3, [pc, #100]	; (8002610 <HAL_ADC_MspInit+0x144>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80025b0:	4b17      	ldr	r3, [pc, #92]	; (8002610 <HAL_ADC_MspInit+0x144>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80025b6:	4b16      	ldr	r3, [pc, #88]	; (8002610 <HAL_ADC_MspInit+0x144>)
 80025b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025bc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80025be:	4b14      	ldr	r3, [pc, #80]	; (8002610 <HAL_ADC_MspInit+0x144>)
 80025c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025c4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80025c6:	4b12      	ldr	r3, [pc, #72]	; (8002610 <HAL_ADC_MspInit+0x144>)
 80025c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025cc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80025ce:	4b10      	ldr	r3, [pc, #64]	; (8002610 <HAL_ADC_MspInit+0x144>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80025d4:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <HAL_ADC_MspInit+0x144>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025da:	4b0d      	ldr	r3, [pc, #52]	; (8002610 <HAL_ADC_MspInit+0x144>)
 80025dc:	2200      	movs	r2, #0
 80025de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80025e0:	480b      	ldr	r0, [pc, #44]	; (8002610 <HAL_ADC_MspInit+0x144>)
 80025e2:	f002 fdcd 	bl	8005180 <HAL_DMA_Init>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <HAL_ADC_MspInit+0x124>
    {
      Error_Handler();
 80025ec:	f7ff ff46 	bl	800247c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a07      	ldr	r2, [pc, #28]	; (8002610 <HAL_ADC_MspInit+0x144>)
 80025f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80025f6:	4a06      	ldr	r2, [pc, #24]	; (8002610 <HAL_ADC_MspInit+0x144>)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80025fc:	bf00      	nop
 80025fe:	37e8      	adds	r7, #232	; 0xe8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40022000 	.word	0x40022000
 8002608:	58024400 	.word	0x58024400
 800260c:	58020000 	.word	0x58020000
 8002610:	24030658 	.word	0x24030658
 8002614:	40020010 	.word	0x40020010

08002618 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08e      	sub	sp, #56	; 0x38
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]
 800262e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a59      	ldr	r2, [pc, #356]	; (800279c <HAL_ETH_MspInit+0x184>)
 8002636:	4293      	cmp	r3, r2
 8002638:	f040 80ab 	bne.w	8002792 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800263c:	4b58      	ldr	r3, [pc, #352]	; (80027a0 <HAL_ETH_MspInit+0x188>)
 800263e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002642:	4a57      	ldr	r2, [pc, #348]	; (80027a0 <HAL_ETH_MspInit+0x188>)
 8002644:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002648:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800264c:	4b54      	ldr	r3, [pc, #336]	; (80027a0 <HAL_ETH_MspInit+0x188>)
 800264e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002652:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002656:	623b      	str	r3, [r7, #32]
 8002658:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800265a:	4b51      	ldr	r3, [pc, #324]	; (80027a0 <HAL_ETH_MspInit+0x188>)
 800265c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002660:	4a4f      	ldr	r2, [pc, #316]	; (80027a0 <HAL_ETH_MspInit+0x188>)
 8002662:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002666:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800266a:	4b4d      	ldr	r3, [pc, #308]	; (80027a0 <HAL_ETH_MspInit+0x188>)
 800266c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002674:	61fb      	str	r3, [r7, #28]
 8002676:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8002678:	4b49      	ldr	r3, [pc, #292]	; (80027a0 <HAL_ETH_MspInit+0x188>)
 800267a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800267e:	4a48      	ldr	r2, [pc, #288]	; (80027a0 <HAL_ETH_MspInit+0x188>)
 8002680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002684:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002688:	4b45      	ldr	r3, [pc, #276]	; (80027a0 <HAL_ETH_MspInit+0x188>)
 800268a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	61bb      	str	r3, [r7, #24]
 8002694:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002696:	4b42      	ldr	r3, [pc, #264]	; (80027a0 <HAL_ETH_MspInit+0x188>)
 8002698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800269c:	4a40      	ldr	r2, [pc, #256]	; (80027a0 <HAL_ETH_MspInit+0x188>)
 800269e:	f043 0304 	orr.w	r3, r3, #4
 80026a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026a6:	4b3e      	ldr	r3, [pc, #248]	; (80027a0 <HAL_ETH_MspInit+0x188>)
 80026a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b4:	4b3a      	ldr	r3, [pc, #232]	; (80027a0 <HAL_ETH_MspInit+0x188>)
 80026b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ba:	4a39      	ldr	r2, [pc, #228]	; (80027a0 <HAL_ETH_MspInit+0x188>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026c4:	4b36      	ldr	r3, [pc, #216]	; (80027a0 <HAL_ETH_MspInit+0x188>)
 80026c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	613b      	str	r3, [r7, #16]
 80026d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d2:	4b33      	ldr	r3, [pc, #204]	; (80027a0 <HAL_ETH_MspInit+0x188>)
 80026d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026d8:	4a31      	ldr	r2, [pc, #196]	; (80027a0 <HAL_ETH_MspInit+0x188>)
 80026da:	f043 0302 	orr.w	r3, r3, #2
 80026de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026e2:	4b2f      	ldr	r3, [pc, #188]	; (80027a0 <HAL_ETH_MspInit+0x188>)
 80026e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80026f0:	4b2b      	ldr	r3, [pc, #172]	; (80027a0 <HAL_ETH_MspInit+0x188>)
 80026f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026f6:	4a2a      	ldr	r2, [pc, #168]	; (80027a0 <HAL_ETH_MspInit+0x188>)
 80026f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002700:	4b27      	ldr	r3, [pc, #156]	; (80027a0 <HAL_ETH_MspInit+0x188>)
 8002702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270a:	60bb      	str	r3, [r7, #8]
 800270c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800270e:	2332      	movs	r3, #50	; 0x32
 8002710:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002712:	2302      	movs	r3, #2
 8002714:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	2300      	movs	r3, #0
 8002718:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271a:	2300      	movs	r3, #0
 800271c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800271e:	230b      	movs	r3, #11
 8002720:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002726:	4619      	mov	r1, r3
 8002728:	481e      	ldr	r0, [pc, #120]	; (80027a4 <HAL_ETH_MspInit+0x18c>)
 800272a:	f005 fd43 	bl	80081b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800272e:	2386      	movs	r3, #134	; 0x86
 8002730:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002732:	2302      	movs	r3, #2
 8002734:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002736:	2300      	movs	r3, #0
 8002738:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273a:	2300      	movs	r3, #0
 800273c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800273e:	230b      	movs	r3, #11
 8002740:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002746:	4619      	mov	r1, r3
 8002748:	4817      	ldr	r0, [pc, #92]	; (80027a8 <HAL_ETH_MspInit+0x190>)
 800274a:	f005 fd33 	bl	80081b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800274e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002752:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002754:	2302      	movs	r3, #2
 8002756:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002758:	2300      	movs	r3, #0
 800275a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275c:	2300      	movs	r3, #0
 800275e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002760:	230b      	movs	r3, #11
 8002762:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002768:	4619      	mov	r1, r3
 800276a:	4810      	ldr	r0, [pc, #64]	; (80027ac <HAL_ETH_MspInit+0x194>)
 800276c:	f005 fd22 	bl	80081b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8002770:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002774:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002776:	2302      	movs	r3, #2
 8002778:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277a:	2300      	movs	r3, #0
 800277c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277e:	2300      	movs	r3, #0
 8002780:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002782:	230b      	movs	r3, #11
 8002784:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800278a:	4619      	mov	r1, r3
 800278c:	4808      	ldr	r0, [pc, #32]	; (80027b0 <HAL_ETH_MspInit+0x198>)
 800278e:	f005 fd11 	bl	80081b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002792:	bf00      	nop
 8002794:	3738      	adds	r7, #56	; 0x38
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40028000 	.word	0x40028000
 80027a0:	58024400 	.word	0x58024400
 80027a4:	58020800 	.word	0x58020800
 80027a8:	58020000 	.word	0x58020000
 80027ac:	58020400 	.word	0x58020400
 80027b0:	58021800 	.word	0x58021800

080027b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a0b      	ldr	r2, [pc, #44]	; (80027f0 <HAL_TIM_Base_MspInit+0x3c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d10e      	bne.n	80027e4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027c6:	4b0b      	ldr	r3, [pc, #44]	; (80027f4 <HAL_TIM_Base_MspInit+0x40>)
 80027c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027cc:	4a09      	ldr	r2, [pc, #36]	; (80027f4 <HAL_TIM_Base_MspInit+0x40>)
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80027d6:	4b07      	ldr	r3, [pc, #28]	; (80027f4 <HAL_TIM_Base_MspInit+0x40>)
 80027d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80027e4:	bf00      	nop
 80027e6:	3714      	adds	r7, #20
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	40010000 	.word	0x40010000
 80027f4:	58024400 	.word	0x58024400

080027f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b0ba      	sub	sp, #232	; 0xe8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002800:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	605a      	str	r2, [r3, #4]
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	60da      	str	r2, [r3, #12]
 800280e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002810:	f107 0310 	add.w	r3, r7, #16
 8002814:	22c0      	movs	r2, #192	; 0xc0
 8002816:	2100      	movs	r1, #0
 8002818:	4618      	mov	r0, r3
 800281a:	f015 fd95 	bl	8018348 <memset>
  if(huart->Instance==USART3)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a27      	ldr	r2, [pc, #156]	; (80028c0 <HAL_UART_MspInit+0xc8>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d146      	bne.n	80028b6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002828:	f04f 0202 	mov.w	r2, #2
 800282c:	f04f 0300 	mov.w	r3, #0
 8002830:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002834:	2300      	movs	r3, #0
 8002836:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800283a:	f107 0310 	add.w	r3, r7, #16
 800283e:	4618      	mov	r0, r3
 8002840:	f008 fbc6 	bl	800afd0 <HAL_RCCEx_PeriphCLKConfig>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800284a:	f7ff fe17 	bl	800247c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800284e:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <HAL_UART_MspInit+0xcc>)
 8002850:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002854:	4a1b      	ldr	r2, [pc, #108]	; (80028c4 <HAL_UART_MspInit+0xcc>)
 8002856:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800285a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800285e:	4b19      	ldr	r3, [pc, #100]	; (80028c4 <HAL_UART_MspInit+0xcc>)
 8002860:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002864:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800286c:	4b15      	ldr	r3, [pc, #84]	; (80028c4 <HAL_UART_MspInit+0xcc>)
 800286e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002872:	4a14      	ldr	r2, [pc, #80]	; (80028c4 <HAL_UART_MspInit+0xcc>)
 8002874:	f043 0308 	orr.w	r3, r3, #8
 8002878:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800287c:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <HAL_UART_MspInit+0xcc>)
 800287e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	60bb      	str	r3, [r7, #8]
 8002888:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800288a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800288e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002892:	2302      	movs	r3, #2
 8002894:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002898:	2300      	movs	r3, #0
 800289a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289e:	2300      	movs	r3, #0
 80028a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028a4:	2307      	movs	r3, #7
 80028a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028aa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80028ae:	4619      	mov	r1, r3
 80028b0:	4805      	ldr	r0, [pc, #20]	; (80028c8 <HAL_UART_MspInit+0xd0>)
 80028b2:	f005 fc7f 	bl	80081b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80028b6:	bf00      	nop
 80028b8:	37e8      	adds	r7, #232	; 0xe8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40004800 	.word	0x40004800
 80028c4:	58024400 	.word	0x58024400
 80028c8:	58020c00 	.word	0x58020c00

080028cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028d0:	e7fe      	b.n	80028d0 <NMI_Handler+0x4>

080028d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028d2:	b480      	push	{r7}
 80028d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028d6:	e7fe      	b.n	80028d6 <HardFault_Handler+0x4>

080028d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028dc:	e7fe      	b.n	80028dc <MemManage_Handler+0x4>

080028de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028de:	b480      	push	{r7}
 80028e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028e2:	e7fe      	b.n	80028e2 <BusFault_Handler+0x4>

080028e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028e8:	e7fe      	b.n	80028e8 <UsageFault_Handler+0x4>

080028ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028fc:	bf00      	nop
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002906:	b480      	push	{r7}
 8002908:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002918:	f000 fd78 	bl	800340c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800291c:	bf00      	nop
 800291e:	bd80      	pop	{r7, pc}

08002920 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002924:	4802      	ldr	r0, [pc, #8]	; (8002930 <DMA1_Stream0_IRQHandler+0x10>)
 8002926:	f003 fd0f 	bl	8006348 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	24030658 	.word	0x24030658

08002934 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002938:	4802      	ldr	r0, [pc, #8]	; (8002944 <OTG_FS_IRQHandler+0x10>)
 800293a:	f006 f86f 	bl	8008a1c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	24030eb8 	.word	0x24030eb8

08002948 <rbfKernel>:
/**
 * RBF Kernel Function
 * measure the similarity of two vector in L2 distance
 */
float rbfKernel(float *x1, float *x2, int size, float gamma)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b088      	sub	sp, #32
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
 8002954:	ed87 0a00 	vstr	s0, [r7]
	float acc=0, tmp;
 8002958:	f04f 0300 	mov.w	r3, #0
 800295c:	61fb      	str	r3, [r7, #28]
	for(int i=0; i<size; i++){
 800295e:	2300      	movs	r3, #0
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	e01c      	b.n	800299e <rbfKernel+0x56>
		tmp = x1[i] - x2[i];
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4413      	add	r3, r2
 800296c:	ed93 7a00 	vldr	s14, [r3]
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	4413      	add	r3, r2
 8002978:	edd3 7a00 	vldr	s15, [r3]
 800297c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002980:	edc7 7a05 	vstr	s15, [r7, #20]
		acc += tmp * tmp;
 8002984:	edd7 7a05 	vldr	s15, [r7, #20]
 8002988:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800298c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002994:	edc7 7a07 	vstr	s15, [r7, #28]
	for(int i=0; i<size; i++){
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	3301      	adds	r3, #1
 800299c:	61bb      	str	r3, [r7, #24]
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	dbde      	blt.n	8002964 <rbfKernel+0x1c>
	}
	return expf(-gamma * acc);
 80029a6:	edd7 7a00 	vldr	s15, [r7]
 80029aa:	eeb1 7a67 	vneg.f32	s14, s15
 80029ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80029b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029b6:	eeb0 0a67 	vmov.f32	s0, s15
 80029ba:	f015 f911 	bl	8017be0 <expf>
 80029be:	eef0 7a40 	vmov.f32	s15, s0
}
 80029c2:	eeb0 0a67 	vmov.f32	s0, s15
 80029c6:	3720      	adds	r7, #32
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <svmPredict>:
 */



int svmPredict(float *x, svm_model *model)
{
 80029cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029d0:	b0f1      	sub	sp, #452	; 0x1c4
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80029d8:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80029dc:	6018      	str	r0, [r3, #0]
 80029de:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80029e2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80029e6:	6019      	str	r1, [r3, #0]
 80029e8:	466b      	mov	r3, sp
 80029ea:	461e      	mov	r6, r3

	int i, res;
	int n_class = model->n_class;
 80029ec:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80029f0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
	int total_n_sv = model->total_n_sv;  										/* total #SV */
 80029fc:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002a00:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

	float kvalue[total_n_sv];
 8002a0c:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 8002a10:	1e4b      	subs	r3, r1, #1
 8002a12:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8002a16:	460a      	mov	r2, r1
 8002a18:	2300      	movs	r3, #0
 8002a1a:	4614      	mov	r4, r2
 8002a1c:	461d      	mov	r5, r3
 8002a1e:	f04f 0200 	mov.w	r2, #0
 8002a22:	f04f 0300 	mov.w	r3, #0
 8002a26:	016b      	lsls	r3, r5, #5
 8002a28:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002a2c:	0162      	lsls	r2, r4, #5
 8002a2e:	460a      	mov	r2, r1
 8002a30:	2300      	movs	r3, #0
 8002a32:	4690      	mov	r8, r2
 8002a34:	4699      	mov	r9, r3
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	f04f 0300 	mov.w	r3, #0
 8002a3e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8002a42:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8002a46:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	3307      	adds	r3, #7
 8002a50:	08db      	lsrs	r3, r3, #3
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	ebad 0d03 	sub.w	sp, sp, r3
 8002a58:	466b      	mov	r3, sp
 8002a5a:	3303      	adds	r3, #3
 8002a5c:	089b      	lsrs	r3, r3, #2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174

	for(int i = 0; i < total_n_sv; i++) {
 8002a64:	2300      	movs	r3, #0
 8002a66:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002a6a:	e00d      	b.n	8002a88 <svmPredict+0xbc>
		kvalue[i] = 0.0;
 8002a6c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002a70:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	441a      	add	r2, r3
 8002a78:	f04f 0300 	mov.w	r3, #0
 8002a7c:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < total_n_sv; i++) {
 8002a7e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002a82:	3301      	adds	r3, #1
 8002a84:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002a88:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8002a8c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8002a90:	429a      	cmp	r2, r3
 8002a92:	dbeb      	blt.n	8002a6c <svmPredict+0xa0>
	}
	for(i=0; i<total_n_sv;i++)
 8002a94:	2300      	movs	r3, #0
 8002a96:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002a9a:	e02f      	b.n	8002afc <svmPredict+0x130>
		kvalue[i] = rbfKernel(x, model->SV[i], model->n_feature, model->gamma);
 8002a9c:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002aa0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aa8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	6819      	ldr	r1, [r3, #0]
 8002ab2:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002ab6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699a      	ldr	r2, [r3, #24]
 8002abe:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002ac2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	edd3 7a00 	vldr	s15, [r3]
 8002acc:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002ad0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002ad4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ad8:	6818      	ldr	r0, [r3, #0]
 8002ada:	f7ff ff35 	bl	8002948 <rbfKernel>
 8002ade:	eef0 7a40 	vmov.f32	s15, s0
 8002ae2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002ae6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	edc3 7a00 	vstr	s15, [r3]
	for(i=0; i<total_n_sv;i++)
 8002af2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002af6:	3301      	adds	r3, #1
 8002af8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002afc:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8002b00:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8002b04:	429a      	cmp	r2, r3
 8002b06:	dbc9      	blt.n	8002a9c <svmPredict+0xd0>

	float intrcpt[66];
	for(i = 0; i < 66;i++)
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002b0e:	e018      	b.n	8002b42 <svmPredict+0x176>
		intrcpt[i] = model->intercept[i];
 8002b10:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002b14:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	6819      	ldr	r1, [r3, #0]
 8002b26:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002b2a:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8002b2e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	6019      	str	r1, [r3, #0]
	for(i = 0; i < 66;i++)
 8002b38:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002b42:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002b46:	2b41      	cmp	r3, #65	; 0x41
 8002b48:	dde2      	ble.n	8002b10 <svmPredict+0x144>
	/*************Write your code start***************/

	// implement more code for multi-class SVM Prediction
		int start[n_class];
 8002b4a:	f8d7 1180 	ldr.w	r1, [r7, #384]	; 0x180
 8002b4e:	466b      	mov	r3, sp
 8002b50:	461d      	mov	r5, r3
 8002b52:	1e4b      	subs	r3, r1, #1
 8002b54:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002b58:	460a      	mov	r2, r1
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	4692      	mov	sl, r2
 8002b5e:	469b      	mov	fp, r3
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8002b6c:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8002b70:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8002b74:	460a      	mov	r2, r1
 8002b76:	2300      	movs	r3, #0
 8002b78:	623a      	str	r2, [r7, #32]
 8002b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	f04f 0300 	mov.w	r3, #0
 8002b84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b88:	4648      	mov	r0, r9
 8002b8a:	0143      	lsls	r3, r0, #5
 8002b8c:	4640      	mov	r0, r8
 8002b8e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b92:	4640      	mov	r0, r8
 8002b94:	0142      	lsls	r2, r0, #5
 8002b96:	460b      	mov	r3, r1
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	3307      	adds	r3, #7
 8002b9c:	08db      	lsrs	r3, r3, #3
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	ebad 0d03 	sub.w	sp, sp, r3
 8002ba4:	466b      	mov	r3, sp
 8002ba6:	3303      	adds	r3, #3
 8002ba8:	089b      	lsrs	r3, r3, #2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
		for(int i = 0; i < n_class; i++) {
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8002bb6:	e00b      	b.n	8002bd0 <svmPredict+0x204>
			start[i] = 0;
 8002bb8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002bbc:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(int i = 0; i < n_class; i++) {
 8002bc6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002bca:	3301      	adds	r3, #1
 8002bcc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8002bd0:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8002bd4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	dbed      	blt.n	8002bb8 <svmPredict+0x1ec>
		}

		for(int i = 1; i < n_class; i++) {
 8002bdc:	2301      	movs	r3, #1
 8002bde:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8002be2:	e020      	b.n	8002c26 <svmPredict+0x25a>
			start[i] = start[i - 1] + model->n_sv[i - 1];
 8002be4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002be8:	1e5a      	subs	r2, r3, #1
 8002bea:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002bee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002bf2:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002bf6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6959      	ldr	r1, [r3, #20]
 8002bfe:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 8002c02:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8002c06:	4403      	add	r3, r0
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	440b      	add	r3, r1
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	18d1      	adds	r1, r2, r3
 8002c10:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002c14:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8002c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(int i = 1; i < n_class; i++) {
 8002c1c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002c20:	3301      	adds	r3, #1
 8002c22:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8002c26:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8002c2a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	dbd8      	blt.n	8002be4 <svmPredict+0x218>

		}

		int p = 0;
 8002c32:	2300      	movs	r3, #0
 8002c34:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
		int vote[n_class];
 8002c38:	f8d7 1180 	ldr.w	r1, [r7, #384]	; 0x180
 8002c3c:	466b      	mov	r3, sp
 8002c3e:	461c      	mov	r4, r3
 8002c40:	1e4b      	subs	r3, r1, #1
 8002c42:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8002c46:	460a      	mov	r2, r1
 8002c48:	2300      	movs	r3, #0
 8002c4a:	61ba      	str	r2, [r7, #24]
 8002c4c:	61fb      	str	r3, [r7, #28]
 8002c4e:	f04f 0200 	mov.w	r2, #0
 8002c52:	f04f 0300 	mov.w	r3, #0
 8002c56:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002c5a:	4648      	mov	r0, r9
 8002c5c:	0143      	lsls	r3, r0, #5
 8002c5e:	4640      	mov	r0, r8
 8002c60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c64:	4640      	mov	r0, r8
 8002c66:	0142      	lsls	r2, r0, #5
 8002c68:	460a      	mov	r2, r1
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	613a      	str	r2, [r7, #16]
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002c7c:	4648      	mov	r0, r9
 8002c7e:	0143      	lsls	r3, r0, #5
 8002c80:	4640      	mov	r0, r8
 8002c82:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c86:	4640      	mov	r0, r8
 8002c88:	0142      	lsls	r2, r0, #5
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	3307      	adds	r3, #7
 8002c90:	08db      	lsrs	r3, r3, #3
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	ebad 0d03 	sub.w	sp, sp, r3
 8002c98:	466b      	mov	r3, sp
 8002c9a:	3303      	adds	r3, #3
 8002c9c:	089b      	lsrs	r3, r3, #2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
		for(int i = 0; i < n_class; i++) {
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8002caa:	e00b      	b.n	8002cc4 <svmPredict+0x2f8>
			vote[i] = 0;
 8002cac:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002cb0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(int i = 0; i < n_class; i++) {
 8002cba:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8002cc4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002cc8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	dbed      	blt.n	8002cac <svmPredict+0x2e0>
		}
		for(int i = 0; i < n_class; i++) {
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002cd6:	e196      	b.n	8003006 <svmPredict+0x63a>
 8002cd8:	466b      	mov	r3, sp
 8002cda:	469c      	mov	ip, r3
			float acc_val[n_class - 1 - i];
 8002cdc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ce0:	1e5a      	subs	r2, r3, #1
 8002ce2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002ce6:	1ad1      	subs	r1, r2, r3
 8002ce8:	1e4b      	subs	r3, r1, #1
 8002cea:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002cee:	460a      	mov	r2, r1
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60ba      	str	r2, [r7, #8]
 8002cf4:	60fb      	str	r3, [r7, #12]
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	f04f 0300 	mov.w	r3, #0
 8002cfe:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8002d02:	4648      	mov	r0, r9
 8002d04:	0143      	lsls	r3, r0, #5
 8002d06:	4640      	mov	r0, r8
 8002d08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d0c:	4640      	mov	r0, r8
 8002d0e:	0142      	lsls	r2, r0, #5
 8002d10:	460a      	mov	r2, r1
 8002d12:	2300      	movs	r3, #0
 8002d14:	603a      	str	r2, [r7, #0]
 8002d16:	607b      	str	r3, [r7, #4]
 8002d18:	f04f 0200 	mov.w	r2, #0
 8002d1c:	f04f 0300 	mov.w	r3, #0
 8002d20:	e9d7 8900 	ldrd	r8, r9, [r7]
 8002d24:	4648      	mov	r0, r9
 8002d26:	0143      	lsls	r3, r0, #5
 8002d28:	4640      	mov	r0, r8
 8002d2a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d2e:	4640      	mov	r0, r8
 8002d30:	0142      	lsls	r2, r0, #5
 8002d32:	460b      	mov	r3, r1
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	3307      	adds	r3, #7
 8002d38:	08db      	lsrs	r3, r3, #3
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	ebad 0d03 	sub.w	sp, sp, r3
 8002d40:	466b      	mov	r3, sp
 8002d42:	3303      	adds	r3, #3
 8002d44:	089b      	lsrs	r3, r3, #2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
			for(int lo = 0; lo < n_class - 1 - i; lo++) {
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002d52:	e00d      	b.n	8002d70 <svmPredict+0x3a4>
				acc_val[lo] = 0.0;
 8002d54:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8002d58:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]
			for(int lo = 0; lo < n_class - 1 - i; lo++) {
 8002d66:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002d70:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d74:	1e5a      	subs	r2, r3, #1
 8002d76:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8002d80:	429a      	cmp	r2, r3
 8002d82:	dbe7      	blt.n	8002d54 <svmPredict+0x388>
			}
			for(int j = i + 1; j < n_class; j++) {
 8002d84:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002d88:	3301      	adds	r3, #1
 8002d8a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002d8e:	e12d      	b.n	8002fec <svmPredict+0x620>
				float acc = 0.0;
 8002d90:	f04f 0300 	mov.w	r3, #0
 8002d94:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
				int si = start[i];
 8002d98:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002d9c:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002da4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
				int sj = start[j];
 8002da8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002dac:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002db4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
				int ci = model->n_sv[i];
 8002db8:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002dbc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	695a      	ldr	r2, [r3, #20]
 8002dc4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
				int cj = model->n_sv[j];
 8002dd2:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002dd6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	695a      	ldr	r2, [r3, #20]
 8002dde:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
				float* coef1 = model->dual_coef[j - 1];
 8002dec:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002df0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002df8:	f8d7 11a4 	ldr.w	r1, [r7, #420]	; 0x1a4
 8002dfc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8002e00:	440b      	add	r3, r1
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
				float* coef2 = model->dual_coef[i];
 8002e0c:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002e10:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e18:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
				int ngt= 0;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
				int ptv = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
				float t_c= 0.0;
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
//				if(i == 5 && j == n_class - 1) {
//					printf("coef1\n");
//					HAL_Delay(1);
//				}

				for (int k = 0; k < ci; k++) {
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8002e40:	e033      	b.n	8002eaa <svmPredict+0x4de>
					t_c	+= coef1[si+k];
 8002e42:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002e46:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002e4a:	4413      	add	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002e52:	4413      	add	r3, r2
 8002e54:	edd3 7a00 	vldr	s15, [r3]
 8002e58:	ed97 7a6b 	vldr	s14, [r7, #428]	; 0x1ac
 8002e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e60:	edc7 7a6b 	vstr	s15, [r7, #428]	; 0x1ac
					acc += coef1[si + k] * kvalue[si + k];
 8002e64:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002e68:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002e6c:	4413      	add	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002e74:	4413      	add	r3, r2
 8002e76:	ed93 7a00 	vldr	s14, [r3]
 8002e7a:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002e7e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002e82:	4413      	add	r3, r2
 8002e84:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4413      	add	r3, r2
 8002e8c:	edd3 7a00 	vldr	s15, [r3]
 8002e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e94:	ed97 7a6a 	vldr	s14, [r7, #424]	; 0x1a8
 8002e98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e9c:	edc7 7a6a 	vstr	s15, [r7, #424]	; 0x1a8
				for (int k = 0; k < ci; k++) {
 8002ea0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8002eaa:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8002eae:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	dbc5      	blt.n	8002e42 <svmPredict+0x476>
				}
//				if(i == 5 && j == n_class - 1) {
//					printf("coef2\n");
//					HAL_Delay(1);
//				}
				for(int k = 0; k < cj; k++) {
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8002ebc:	e033      	b.n	8002f26 <svmPredict+0x55a>
					t_c += coef2[sj+k];
 8002ebe:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8002ec2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002ec6:	4413      	add	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002ece:	4413      	add	r3, r2
 8002ed0:	edd3 7a00 	vldr	s15, [r3]
 8002ed4:	ed97 7a6b 	vldr	s14, [r7, #428]	; 0x1ac
 8002ed8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002edc:	edc7 7a6b 	vstr	s15, [r7, #428]	; 0x1ac
					acc += coef2[sj + k] * kvalue[sj + k];
 8002ee0:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8002ee4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002ee8:	4413      	add	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002ef0:	4413      	add	r3, r2
 8002ef2:	ed93 7a00 	vldr	s14, [r3]
 8002ef6:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8002efa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002efe:	4413      	add	r3, r2
 8002f00:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	edd3 7a00 	vldr	s15, [r3]
 8002f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f10:	ed97 7a6a 	vldr	s14, [r7, #424]	; 0x1a8
 8002f14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f18:	edc7 7a6a 	vstr	s15, [r7, #424]	; 0x1a8
				for(int k = 0; k < cj; k++) {
 8002f1c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002f20:	3301      	adds	r3, #1
 8002f22:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8002f26:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002f2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	dbc5      	blt.n	8002ebe <svmPredict+0x4f2>
//					if(i == 5 && j == n_class - 1) {
//						printf("%.8f\n", acc);
//						HAL_Delay(1);
//					}
				}
				acc += model->intercept[p];
 8002f32:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002f36:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	edd3 7a00 	vldr	s15, [r3]
 8002f4a:	ed97 7a6a 	vldr	s14, [r7, #424]	; 0x1a8
 8002f4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f52:	edc7 7a6a 	vstr	s15, [r7, #424]	; 0x1a8
				t_c += model->intercept[p];
 8002f56:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002f5a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	edd3 7a00 	vldr	s15, [r3]
 8002f6e:	ed97 7a6b 	vldr	s14, [r7, #428]	; 0x1ac
 8002f72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f76:	edc7 7a6b 	vstr	s15, [r7, #428]	; 0x1ac
//					printf("intercept[p] \n");
//					printf("value intercept: %.8f\n", model->intercept[p]);
//					printf("%.8f\n",acc);
//					HAL_Delay(1);
//				}
				acc_val[j - i - 1] = acc;
 8002f7a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002f7e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	3b01      	subs	r3, #1
 8002f86:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8002f92:	601a      	str	r2, [r3, #0]
				if(acc > 0.0) {
 8002f94:	edd7 7a6a 	vldr	s15, [r7, #424]	; 0x1a8
 8002f98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa0:	dd0d      	ble.n	8002fbe <svmPredict+0x5f2>

					vote[i]++;
 8002fa2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002fa6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fae:	1c59      	adds	r1, r3, #1
 8002fb0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002fb4:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002fbc:	e00c      	b.n	8002fd8 <svmPredict+0x60c>
				} else {

					vote[j]++;
 8002fbe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002fc2:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fca:	1c59      	adds	r1, r3, #1
 8002fcc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002fd0:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				}
				p++;
 8002fd8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002fdc:	3301      	adds	r3, #1
 8002fde:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
			for(int j = i + 1; j < n_class; j++) {
 8002fe2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002fec:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002ff0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	f6ff aecb 	blt.w	8002d90 <svmPredict+0x3c4>
 8002ffa:	46e5      	mov	sp, ip
		for(int i = 0; i < n_class; i++) {
 8002ffc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8003000:	3301      	adds	r3, #1
 8003002:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003006:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800300a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800300e:	429a      	cmp	r2, r3
 8003010:	f6ff ae62 	blt.w	8002cd8 <svmPredict+0x30c>
			}

		}
	int vote_max_idx = 0;
 8003014:	2300      	movs	r3, #0
 8003016:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
		for(int i = 0; i < n_class; i++) {
 800301a:	2300      	movs	r3, #0
 800301c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003020:	e016      	b.n	8003050 <svmPredict+0x684>
			if(vote[i] > vote[vote_max_idx]) {
 8003022:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003026:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800302a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800302e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003032:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 8003036:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800303a:	429a      	cmp	r2, r3
 800303c:	dd03      	ble.n	8003046 <svmPredict+0x67a>
				vote_max_idx = i;
 800303e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8003042:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
		for(int i = 0; i < n_class; i++) {
 8003046:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800304a:	3301      	adds	r3, #1
 800304c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003050:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003054:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003058:	429a      	cmp	r2, r3
 800305a:	dbe2      	blt.n	8003022 <svmPredict+0x656>
		}




	return vote_max_idx;
 800305c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8003060:	46a5      	mov	sp, r4
 8003062:	46ad      	mov	sp, r5
 8003064:	46b5      	mov	sp, r6

	/*************Write your code End***************/

}
 8003066:	4618      	mov	r0, r3
 8003068:	f507 77e2 	add.w	r7, r7, #452	; 0x1c4
 800306c:	46bd      	mov	sp, r7
 800306e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003072 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003072:	b480      	push	{r7}
 8003074:	af00      	add	r7, sp, #0
	return 1;
 8003076:	2301      	movs	r3, #1
}
 8003078:	4618      	mov	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <_kill>:

int _kill(int pid, int sig)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b082      	sub	sp, #8
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
 800308a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800308c:	f015 f900 	bl	8018290 <__errno>
 8003090:	4603      	mov	r3, r0
 8003092:	2216      	movs	r2, #22
 8003094:	601a      	str	r2, [r3, #0]
	return -1;
 8003096:	f04f 33ff 	mov.w	r3, #4294967295
}
 800309a:	4618      	mov	r0, r3
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <_exit>:

void _exit (int status)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b082      	sub	sp, #8
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80030aa:	f04f 31ff 	mov.w	r1, #4294967295
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7ff ffe7 	bl	8003082 <_kill>
	while (1) {}		/* Make sure we hang here */
 80030b4:	e7fe      	b.n	80030b4 <_exit+0x12>

080030b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b086      	sub	sp, #24
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	60f8      	str	r0, [r7, #12]
 80030be:	60b9      	str	r1, [r7, #8]
 80030c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030c2:	2300      	movs	r3, #0
 80030c4:	617b      	str	r3, [r7, #20]
 80030c6:	e00a      	b.n	80030de <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80030c8:	f3af 8000 	nop.w
 80030cc:	4601      	mov	r1, r0
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	1c5a      	adds	r2, r3, #1
 80030d2:	60ba      	str	r2, [r7, #8]
 80030d4:	b2ca      	uxtb	r2, r1
 80030d6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	3301      	adds	r3, #1
 80030dc:	617b      	str	r3, [r7, #20]
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	dbf0      	blt.n	80030c8 <_read+0x12>
	}

return len;
 80030e6:	687b      	ldr	r3, [r7, #4]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3718      	adds	r7, #24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <_close>:
	}
	return len;
}

int _close(int file)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
	return -1;
 80030f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003118:	605a      	str	r2, [r3, #4]
	return 0;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <_isatty>:

int _isatty(int file)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
	return 1;
 8003130:	2301      	movs	r3, #1
}
 8003132:	4618      	mov	r0, r3
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800313e:	b480      	push	{r7}
 8003140:	b085      	sub	sp, #20
 8003142:	af00      	add	r7, sp, #0
 8003144:	60f8      	str	r0, [r7, #12]
 8003146:	60b9      	str	r1, [r7, #8]
 8003148:	607a      	str	r2, [r7, #4]
	return 0;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3714      	adds	r7, #20
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003160:	4a14      	ldr	r2, [pc, #80]	; (80031b4 <_sbrk+0x5c>)
 8003162:	4b15      	ldr	r3, [pc, #84]	; (80031b8 <_sbrk+0x60>)
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800316c:	4b13      	ldr	r3, [pc, #76]	; (80031bc <_sbrk+0x64>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d102      	bne.n	800317a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003174:	4b11      	ldr	r3, [pc, #68]	; (80031bc <_sbrk+0x64>)
 8003176:	4a12      	ldr	r2, [pc, #72]	; (80031c0 <_sbrk+0x68>)
 8003178:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800317a:	4b10      	ldr	r3, [pc, #64]	; (80031bc <_sbrk+0x64>)
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4413      	add	r3, r2
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	429a      	cmp	r2, r3
 8003186:	d207      	bcs.n	8003198 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003188:	f015 f882 	bl	8018290 <__errno>
 800318c:	4603      	mov	r3, r0
 800318e:	220c      	movs	r2, #12
 8003190:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003192:	f04f 33ff 	mov.w	r3, #4294967295
 8003196:	e009      	b.n	80031ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003198:	4b08      	ldr	r3, [pc, #32]	; (80031bc <_sbrk+0x64>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800319e:	4b07      	ldr	r3, [pc, #28]	; (80031bc <_sbrk+0x64>)
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4413      	add	r3, r2
 80031a6:	4a05      	ldr	r2, [pc, #20]	; (80031bc <_sbrk+0x64>)
 80031a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031aa:	68fb      	ldr	r3, [r7, #12]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	24080000 	.word	0x24080000
 80031b8:	00000400 	.word	0x00000400
 80031bc:	24030868 	.word	0x24030868
 80031c0:	240311d0 	.word	0x240311d0

080031c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80031c8:	4b37      	ldr	r3, [pc, #220]	; (80032a8 <SystemInit+0xe4>)
 80031ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ce:	4a36      	ldr	r2, [pc, #216]	; (80032a8 <SystemInit+0xe4>)
 80031d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80031d8:	4b34      	ldr	r3, [pc, #208]	; (80032ac <SystemInit+0xe8>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 030f 	and.w	r3, r3, #15
 80031e0:	2b06      	cmp	r3, #6
 80031e2:	d807      	bhi.n	80031f4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80031e4:	4b31      	ldr	r3, [pc, #196]	; (80032ac <SystemInit+0xe8>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f023 030f 	bic.w	r3, r3, #15
 80031ec:	4a2f      	ldr	r2, [pc, #188]	; (80032ac <SystemInit+0xe8>)
 80031ee:	f043 0307 	orr.w	r3, r3, #7
 80031f2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80031f4:	4b2e      	ldr	r3, [pc, #184]	; (80032b0 <SystemInit+0xec>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a2d      	ldr	r2, [pc, #180]	; (80032b0 <SystemInit+0xec>)
 80031fa:	f043 0301 	orr.w	r3, r3, #1
 80031fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003200:	4b2b      	ldr	r3, [pc, #172]	; (80032b0 <SystemInit+0xec>)
 8003202:	2200      	movs	r2, #0
 8003204:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003206:	4b2a      	ldr	r3, [pc, #168]	; (80032b0 <SystemInit+0xec>)
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	4929      	ldr	r1, [pc, #164]	; (80032b0 <SystemInit+0xec>)
 800320c:	4b29      	ldr	r3, [pc, #164]	; (80032b4 <SystemInit+0xf0>)
 800320e:	4013      	ands	r3, r2
 8003210:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003212:	4b26      	ldr	r3, [pc, #152]	; (80032ac <SystemInit+0xe8>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b00      	cmp	r3, #0
 800321c:	d007      	beq.n	800322e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800321e:	4b23      	ldr	r3, [pc, #140]	; (80032ac <SystemInit+0xe8>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f023 030f 	bic.w	r3, r3, #15
 8003226:	4a21      	ldr	r2, [pc, #132]	; (80032ac <SystemInit+0xe8>)
 8003228:	f043 0307 	orr.w	r3, r3, #7
 800322c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800322e:	4b20      	ldr	r3, [pc, #128]	; (80032b0 <SystemInit+0xec>)
 8003230:	2200      	movs	r2, #0
 8003232:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003234:	4b1e      	ldr	r3, [pc, #120]	; (80032b0 <SystemInit+0xec>)
 8003236:	2200      	movs	r2, #0
 8003238:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800323a:	4b1d      	ldr	r3, [pc, #116]	; (80032b0 <SystemInit+0xec>)
 800323c:	2200      	movs	r2, #0
 800323e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003240:	4b1b      	ldr	r3, [pc, #108]	; (80032b0 <SystemInit+0xec>)
 8003242:	4a1d      	ldr	r2, [pc, #116]	; (80032b8 <SystemInit+0xf4>)
 8003244:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003246:	4b1a      	ldr	r3, [pc, #104]	; (80032b0 <SystemInit+0xec>)
 8003248:	4a1c      	ldr	r2, [pc, #112]	; (80032bc <SystemInit+0xf8>)
 800324a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800324c:	4b18      	ldr	r3, [pc, #96]	; (80032b0 <SystemInit+0xec>)
 800324e:	4a1c      	ldr	r2, [pc, #112]	; (80032c0 <SystemInit+0xfc>)
 8003250:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003252:	4b17      	ldr	r3, [pc, #92]	; (80032b0 <SystemInit+0xec>)
 8003254:	2200      	movs	r2, #0
 8003256:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003258:	4b15      	ldr	r3, [pc, #84]	; (80032b0 <SystemInit+0xec>)
 800325a:	4a19      	ldr	r2, [pc, #100]	; (80032c0 <SystemInit+0xfc>)
 800325c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800325e:	4b14      	ldr	r3, [pc, #80]	; (80032b0 <SystemInit+0xec>)
 8003260:	2200      	movs	r2, #0
 8003262:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003264:	4b12      	ldr	r3, [pc, #72]	; (80032b0 <SystemInit+0xec>)
 8003266:	4a16      	ldr	r2, [pc, #88]	; (80032c0 <SystemInit+0xfc>)
 8003268:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800326a:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <SystemInit+0xec>)
 800326c:	2200      	movs	r2, #0
 800326e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003270:	4b0f      	ldr	r3, [pc, #60]	; (80032b0 <SystemInit+0xec>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a0e      	ldr	r2, [pc, #56]	; (80032b0 <SystemInit+0xec>)
 8003276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800327a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800327c:	4b0c      	ldr	r3, [pc, #48]	; (80032b0 <SystemInit+0xec>)
 800327e:	2200      	movs	r2, #0
 8003280:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003282:	4b10      	ldr	r3, [pc, #64]	; (80032c4 <SystemInit+0x100>)
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	4b10      	ldr	r3, [pc, #64]	; (80032c8 <SystemInit+0x104>)
 8003288:	4013      	ands	r3, r2
 800328a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800328e:	d202      	bcs.n	8003296 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003290:	4b0e      	ldr	r3, [pc, #56]	; (80032cc <SystemInit+0x108>)
 8003292:	2201      	movs	r2, #1
 8003294:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003296:	4b0e      	ldr	r3, [pc, #56]	; (80032d0 <SystemInit+0x10c>)
 8003298:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800329c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800329e:	bf00      	nop
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	e000ed00 	.word	0xe000ed00
 80032ac:	52002000 	.word	0x52002000
 80032b0:	58024400 	.word	0x58024400
 80032b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80032b8:	02020200 	.word	0x02020200
 80032bc:	01ff0000 	.word	0x01ff0000
 80032c0:	01010280 	.word	0x01010280
 80032c4:	5c001000 	.word	0x5c001000
 80032c8:	ffff0000 	.word	0xffff0000
 80032cc:	51008108 	.word	0x51008108
 80032d0:	52004000 	.word	0x52004000

080032d4 <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler:



  ldr   sp, =_estack      /* set stack pointer */
 80032d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800330c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80032d8:	f7ff ff74 	bl	80031c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032dc:	480c      	ldr	r0, [pc, #48]	; (8003310 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80032de:	490d      	ldr	r1, [pc, #52]	; (8003314 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80032e0:	4a0d      	ldr	r2, [pc, #52]	; (8003318 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80032e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032e4:	e002      	b.n	80032ec <LoopCopyDataInit>

080032e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032ea:	3304      	adds	r3, #4

080032ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032f0:	d3f9      	bcc.n	80032e6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032f2:	4a0a      	ldr	r2, [pc, #40]	; (800331c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80032f4:	4c0a      	ldr	r4, [pc, #40]	; (8003320 <LoopFillZerobss+0x22>)
  movs r3, #0
 80032f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032f8:	e001      	b.n	80032fe <LoopFillZerobss>

080032fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032fc:	3204      	adds	r2, #4

080032fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003300:	d3fb      	bcc.n	80032fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003302:	f014 ffdf 	bl	80182c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003306:	f7fe fb6f 	bl	80019e8 <main>
  bx  lr
 800330a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800330c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003310:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003314:	24000234 	.word	0x24000234
  ldr r2, =_sidata
 8003318:	08033508 	.word	0x08033508
  ldr r2, =_sbss
 800331c:	240002f4 	.word	0x240002f4
  ldr r4, =_ebss
 8003320:	240311cc 	.word	0x240311cc

08003324 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003324:	e7fe      	b.n	8003324 <ADC3_IRQHandler>
	...

08003328 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800332e:	2003      	movs	r0, #3
 8003330:	f001 fee6 	bl	8005100 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003334:	f007 fc76 	bl	800ac24 <HAL_RCC_GetSysClockFreq>
 8003338:	4602      	mov	r2, r0
 800333a:	4b15      	ldr	r3, [pc, #84]	; (8003390 <HAL_Init+0x68>)
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	0a1b      	lsrs	r3, r3, #8
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	4913      	ldr	r1, [pc, #76]	; (8003394 <HAL_Init+0x6c>)
 8003346:	5ccb      	ldrb	r3, [r1, r3]
 8003348:	f003 031f 	and.w	r3, r3, #31
 800334c:	fa22 f303 	lsr.w	r3, r2, r3
 8003350:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003352:	4b0f      	ldr	r3, [pc, #60]	; (8003390 <HAL_Init+0x68>)
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	4a0e      	ldr	r2, [pc, #56]	; (8003394 <HAL_Init+0x6c>)
 800335c:	5cd3      	ldrb	r3, [r2, r3]
 800335e:	f003 031f 	and.w	r3, r3, #31
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	fa22 f303 	lsr.w	r3, r2, r3
 8003368:	4a0b      	ldr	r2, [pc, #44]	; (8003398 <HAL_Init+0x70>)
 800336a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800336c:	4a0b      	ldr	r2, [pc, #44]	; (800339c <HAL_Init+0x74>)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003372:	2000      	movs	r0, #0
 8003374:	f000 f814 	bl	80033a0 <HAL_InitTick>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e002      	b.n	8003388 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003382:	f7ff f889 	bl	8002498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	58024400 	.word	0x58024400
 8003394:	0801c468 	.word	0x0801c468
 8003398:	24000034 	.word	0x24000034
 800339c:	24000030 	.word	0x24000030

080033a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80033a8:	4b15      	ldr	r3, [pc, #84]	; (8003400 <HAL_InitTick+0x60>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e021      	b.n	80033f8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80033b4:	4b13      	ldr	r3, [pc, #76]	; (8003404 <HAL_InitTick+0x64>)
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	4b11      	ldr	r3, [pc, #68]	; (8003400 <HAL_InitTick+0x60>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	4619      	mov	r1, r3
 80033be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80033c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ca:	4618      	mov	r0, r3
 80033cc:	f001 fecb 	bl	8005166 <HAL_SYSTICK_Config>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e00e      	b.n	80033f8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b0f      	cmp	r3, #15
 80033de:	d80a      	bhi.n	80033f6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033e0:	2200      	movs	r2, #0
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	f04f 30ff 	mov.w	r0, #4294967295
 80033e8:	f001 fe95 	bl	8005116 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033ec:	4a06      	ldr	r2, [pc, #24]	; (8003408 <HAL_InitTick+0x68>)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
 80033f4:	e000      	b.n	80033f8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3708      	adds	r7, #8
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	2400003c 	.word	0x2400003c
 8003404:	24000030 	.word	0x24000030
 8003408:	24000038 	.word	0x24000038

0800340c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003410:	4b06      	ldr	r3, [pc, #24]	; (800342c <HAL_IncTick+0x20>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	461a      	mov	r2, r3
 8003416:	4b06      	ldr	r3, [pc, #24]	; (8003430 <HAL_IncTick+0x24>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4413      	add	r3, r2
 800341c:	4a04      	ldr	r2, [pc, #16]	; (8003430 <HAL_IncTick+0x24>)
 800341e:	6013      	str	r3, [r2, #0]
}
 8003420:	bf00      	nop
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	2400003c 	.word	0x2400003c
 8003430:	2403086c 	.word	0x2403086c

08003434 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  return uwTick;
 8003438:	4b03      	ldr	r3, [pc, #12]	; (8003448 <HAL_GetTick+0x14>)
 800343a:	681b      	ldr	r3, [r3, #0]
}
 800343c:	4618      	mov	r0, r3
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	2403086c 	.word	0x2403086c

0800344c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003454:	f7ff ffee 	bl	8003434 <HAL_GetTick>
 8003458:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003464:	d005      	beq.n	8003472 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003466:	4b0a      	ldr	r3, [pc, #40]	; (8003490 <HAL_Delay+0x44>)
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	461a      	mov	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4413      	add	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003472:	bf00      	nop
 8003474:	f7ff ffde 	bl	8003434 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	429a      	cmp	r2, r3
 8003482:	d8f7      	bhi.n	8003474 <HAL_Delay+0x28>
  {
  }
}
 8003484:	bf00      	nop
 8003486:	bf00      	nop
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	2400003c 	.word	0x2400003c

08003494 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003498:	4b03      	ldr	r3, [pc, #12]	; (80034a8 <HAL_GetREVID+0x14>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	0c1b      	lsrs	r3, r3, #16
}
 800349e:	4618      	mov	r0, r3
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	5c001000 	.word	0x5c001000

080034ac <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80034b4:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80034bc:	4904      	ldr	r1, [pc, #16]	; (80034d0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	604b      	str	r3, [r1, #4]
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	58000400 	.word	0x58000400

080034d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	609a      	str	r2, [r3, #8]
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
 8003502:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	609a      	str	r2, [r3, #8]
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003530:	4618      	mov	r0, r3
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800353c:	b480      	push	{r7}
 800353e:	b087      	sub	sp, #28
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
 8003548:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	3360      	adds	r3, #96	; 0x60
 800354e:	461a      	mov	r2, r3
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	430b      	orrs	r3, r1
 800356a:	431a      	orrs	r2, r3
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003570:	bf00      	nop
 8003572:	371c      	adds	r7, #28
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	f003 031f 	and.w	r3, r3, #31
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	fa01 f303 	lsl.w	r3, r1, r3
 800359c:	431a      	orrs	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	611a      	str	r2, [r3, #16]
}
 80035a2:	bf00      	nop
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b087      	sub	sp, #28
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	60f8      	str	r0, [r7, #12]
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	3360      	adds	r3, #96	; 0x60
 80035be:	461a      	mov	r2, r3
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	431a      	orrs	r2, r3
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	601a      	str	r2, [r3, #0]
  }
}
 80035d8:	bf00      	nop
 80035da:	371c      	adds	r7, #28
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80035f8:	2301      	movs	r3, #1
 80035fa:	e000      	b.n	80035fe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800360a:	b480      	push	{r7}
 800360c:	b087      	sub	sp, #28
 800360e:	af00      	add	r7, sp, #0
 8003610:	60f8      	str	r0, [r7, #12]
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	3330      	adds	r3, #48	; 0x30
 800361a:	461a      	mov	r2, r3
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	0a1b      	lsrs	r3, r3, #8
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	f003 030c 	and.w	r3, r3, #12
 8003626:	4413      	add	r3, r2
 8003628:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	f003 031f 	and.w	r3, r3, #31
 8003634:	211f      	movs	r1, #31
 8003636:	fa01 f303 	lsl.w	r3, r1, r3
 800363a:	43db      	mvns	r3, r3
 800363c:	401a      	ands	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	0e9b      	lsrs	r3, r3, #26
 8003642:	f003 011f 	and.w	r1, r3, #31
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	f003 031f 	and.w	r3, r3, #31
 800364c:	fa01 f303 	lsl.w	r3, r1, r3
 8003650:	431a      	orrs	r2, r3
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003656:	bf00      	nop
 8003658:	371c      	adds	r7, #28
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
 800366a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f023 0203 	bic.w	r2, r3, #3
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	431a      	orrs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	60da      	str	r2, [r3, #12]
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003688:	b480      	push	{r7}
 800368a:	b087      	sub	sp, #28
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	3314      	adds	r3, #20
 8003698:	461a      	mov	r2, r3
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	0e5b      	lsrs	r3, r3, #25
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	4413      	add	r3, r2
 80036a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	0d1b      	lsrs	r3, r3, #20
 80036b0:	f003 031f 	and.w	r3, r3, #31
 80036b4:	2107      	movs	r1, #7
 80036b6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ba:	43db      	mvns	r3, r3
 80036bc:	401a      	ands	r2, r3
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	0d1b      	lsrs	r3, r3, #20
 80036c2:	f003 031f 	and.w	r3, r3, #31
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	fa01 f303 	lsl.w	r3, r1, r3
 80036cc:	431a      	orrs	r2, r3
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80036d2:	bf00      	nop
 80036d4:	371c      	adds	r7, #28
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
	...

080036e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036f8:	43db      	mvns	r3, r3
 80036fa:	401a      	ands	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f003 0318 	and.w	r3, r3, #24
 8003702:	4908      	ldr	r1, [pc, #32]	; (8003724 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003704:	40d9      	lsrs	r1, r3
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	400b      	ands	r3, r1
 800370a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800370e:	431a      	orrs	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003716:	bf00      	nop
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	000fffff 	.word	0x000fffff

08003728 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 031f 	and.w	r3, r3, #31
}
 8003738:	4618      	mov	r0, r3
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	4b04      	ldr	r3, [pc, #16]	; (8003764 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003752:	4013      	ands	r3, r2
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6093      	str	r3, [r2, #8]
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	5fffffc0 	.word	0x5fffffc0

08003768 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003778:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800377c:	d101      	bne.n	8003782 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800377e:	2301      	movs	r3, #1
 8003780:	e000      	b.n	8003784 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <LL_ADC_EnableInternalRegulator+0x24>)
 800379e:	4013      	ands	r3, r2
 80037a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	6fffffc0 	.word	0x6fffffc0

080037b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037cc:	d101      	bne.n	80037d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80037ce:	2301      	movs	r3, #1
 80037d0:	e000      	b.n	80037d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	4b05      	ldr	r3, [pc, #20]	; (8003804 <LL_ADC_Enable+0x24>)
 80037ee:	4013      	ands	r3, r2
 80037f0:	f043 0201 	orr.w	r2, r3, #1
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	7fffffc0 	.word	0x7fffffc0

08003808 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	4b05      	ldr	r3, [pc, #20]	; (800382c <LL_ADC_Disable+0x24>)
 8003816:	4013      	ands	r3, r2
 8003818:	f043 0202 	orr.w	r2, r3, #2
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	7fffffc0 	.word	0x7fffffc0

08003830 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b01      	cmp	r3, #1
 8003842:	d101      	bne.n	8003848 <LL_ADC_IsEnabled+0x18>
 8003844:	2301      	movs	r3, #1
 8003846:	e000      	b.n	800384a <LL_ADC_IsEnabled+0x1a>
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b02      	cmp	r3, #2
 8003868:	d101      	bne.n	800386e <LL_ADC_IsDisableOngoing+0x18>
 800386a:	2301      	movs	r3, #1
 800386c:	e000      	b.n	8003870 <LL_ADC_IsDisableOngoing+0x1a>
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <LL_ADC_REG_StartConversion+0x24>)
 800388a:	4013      	ands	r3, r2
 800388c:	f043 0204 	orr.w	r2, r3, #4
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	7fffffc0 	.word	0x7fffffc0

080038a4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <LL_ADC_REG_StopConversion+0x24>)
 80038b2:	4013      	ands	r3, r2
 80038b4:	f043 0210 	orr.w	r2, r3, #16
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	7fffffc0 	.word	0x7fffffc0

080038cc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b04      	cmp	r3, #4
 80038de:	d101      	bne.n	80038e4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80038e0:	2301      	movs	r3, #1
 80038e2:	e000      	b.n	80038e6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
	...

080038f4 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	4b05      	ldr	r3, [pc, #20]	; (8003918 <LL_ADC_INJ_StopConversion+0x24>)
 8003902:	4013      	ands	r3, r2
 8003904:	f043 0220 	orr.w	r2, r3, #32
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	7fffffc0 	.word	0x7fffffc0

0800391c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f003 0308 	and.w	r3, r3, #8
 800392c:	2b08      	cmp	r3, #8
 800392e:	d101      	bne.n	8003934 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003930:	2301      	movs	r3, #1
 8003932:	e000      	b.n	8003936 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
	...

08003944 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003944:	b590      	push	{r4, r7, lr}
 8003946:	b089      	sub	sp, #36	; 0x24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800394c:	2300      	movs	r3, #0
 800394e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003950:	2300      	movs	r3, #0
 8003952:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e18f      	b.n	8003c7e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003968:	2b00      	cmp	r3, #0
 800396a:	d109      	bne.n	8003980 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7fe fdad 	bl	80024cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff feef 	bl	8003768 <LL_ADC_IsDeepPowerDownEnabled>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d004      	beq.n	800399a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff fed5 	bl	8003744 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7ff ff0a 	bl	80037b8 <LL_ADC_IsInternalRegulatorEnabled>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d114      	bne.n	80039d4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7ff feee 	bl	8003790 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039b4:	4b87      	ldr	r3, [pc, #540]	; (8003bd4 <HAL_ADC_Init+0x290>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	099b      	lsrs	r3, r3, #6
 80039ba:	4a87      	ldr	r2, [pc, #540]	; (8003bd8 <HAL_ADC_Init+0x294>)
 80039bc:	fba2 2303 	umull	r2, r3, r2, r3
 80039c0:	099b      	lsrs	r3, r3, #6
 80039c2:	3301      	adds	r3, #1
 80039c4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80039c6:	e002      	b.n	80039ce <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1f9      	bne.n	80039c8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff feed 	bl	80037b8 <LL_ADC_IsInternalRegulatorEnabled>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10d      	bne.n	8003a00 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e8:	f043 0210 	orr.w	r2, r3, #16
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f4:	f043 0201 	orr.w	r2, r3, #1
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff ff61 	bl	80038cc <LL_ADC_REG_IsConversionOngoing>
 8003a0a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a10:	f003 0310 	and.w	r3, r3, #16
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f040 8129 	bne.w	8003c6c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f040 8125 	bne.w	8003c6c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a26:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003a2a:	f043 0202 	orr.w	r2, r3, #2
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7ff fefa 	bl	8003830 <LL_ADC_IsEnabled>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d136      	bne.n	8003ab0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a65      	ldr	r2, [pc, #404]	; (8003bdc <HAL_ADC_Init+0x298>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d004      	beq.n	8003a56 <HAL_ADC_Init+0x112>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a63      	ldr	r2, [pc, #396]	; (8003be0 <HAL_ADC_Init+0x29c>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d10e      	bne.n	8003a74 <HAL_ADC_Init+0x130>
 8003a56:	4861      	ldr	r0, [pc, #388]	; (8003bdc <HAL_ADC_Init+0x298>)
 8003a58:	f7ff feea 	bl	8003830 <LL_ADC_IsEnabled>
 8003a5c:	4604      	mov	r4, r0
 8003a5e:	4860      	ldr	r0, [pc, #384]	; (8003be0 <HAL_ADC_Init+0x29c>)
 8003a60:	f7ff fee6 	bl	8003830 <LL_ADC_IsEnabled>
 8003a64:	4603      	mov	r3, r0
 8003a66:	4323      	orrs	r3, r4
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	bf0c      	ite	eq
 8003a6c:	2301      	moveq	r3, #1
 8003a6e:	2300      	movne	r3, #0
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	e008      	b.n	8003a86 <HAL_ADC_Init+0x142>
 8003a74:	485b      	ldr	r0, [pc, #364]	; (8003be4 <HAL_ADC_Init+0x2a0>)
 8003a76:	f7ff fedb 	bl	8003830 <LL_ADC_IsEnabled>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	bf0c      	ite	eq
 8003a80:	2301      	moveq	r3, #1
 8003a82:	2300      	movne	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d012      	beq.n	8003ab0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a53      	ldr	r2, [pc, #332]	; (8003bdc <HAL_ADC_Init+0x298>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d004      	beq.n	8003a9e <HAL_ADC_Init+0x15a>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a51      	ldr	r2, [pc, #324]	; (8003be0 <HAL_ADC_Init+0x29c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d101      	bne.n	8003aa2 <HAL_ADC_Init+0x15e>
 8003a9e:	4a52      	ldr	r2, [pc, #328]	; (8003be8 <HAL_ADC_Init+0x2a4>)
 8003aa0:	e000      	b.n	8003aa4 <HAL_ADC_Init+0x160>
 8003aa2:	4a52      	ldr	r2, [pc, #328]	; (8003bec <HAL_ADC_Init+0x2a8>)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	4610      	mov	r0, r2
 8003aac:	f7ff fd12 	bl	80034d4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003ab0:	f7ff fcf0 	bl	8003494 <HAL_GetREVID>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	f241 0203 	movw	r2, #4099	; 0x1003
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d914      	bls.n	8003ae8 <HAL_ADC_Init+0x1a4>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	2b10      	cmp	r3, #16
 8003ac4:	d110      	bne.n	8003ae8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	7d5b      	ldrb	r3, [r3, #21]
 8003aca:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ad0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003ad6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	7f1b      	ldrb	r3, [r3, #28]
 8003adc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003ade:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ae0:	f043 030c 	orr.w	r3, r3, #12
 8003ae4:	61bb      	str	r3, [r7, #24]
 8003ae6:	e00d      	b.n	8003b04 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	7d5b      	ldrb	r3, [r3, #21]
 8003aec:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003af2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003af8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	7f1b      	ldrb	r3, [r3, #28]
 8003afe:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003b00:	4313      	orrs	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	7f1b      	ldrb	r3, [r3, #28]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d106      	bne.n	8003b1a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	3b01      	subs	r3, #1
 8003b12:	045b      	lsls	r3, r3, #17
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d009      	beq.n	8003b36 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68da      	ldr	r2, [r3, #12]
 8003b3c:	4b2c      	ldr	r3, [pc, #176]	; (8003bf0 <HAL_ADC_Init+0x2ac>)
 8003b3e:	4013      	ands	r3, r2
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	6812      	ldr	r2, [r2, #0]
 8003b44:	69b9      	ldr	r1, [r7, #24]
 8003b46:	430b      	orrs	r3, r1
 8003b48:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff febc 	bl	80038cc <LL_ADC_REG_IsConversionOngoing>
 8003b54:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7ff fede 	bl	800391c <LL_ADC_INJ_IsConversionOngoing>
 8003b60:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d15f      	bne.n	8003c28 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d15c      	bne.n	8003c28 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	7d1b      	ldrb	r3, [r3, #20]
 8003b72:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	4b1c      	ldr	r3, [pc, #112]	; (8003bf4 <HAL_ADC_Init+0x2b0>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6812      	ldr	r2, [r2, #0]
 8003b8a:	69b9      	ldr	r1, [r7, #24]
 8003b8c:	430b      	orrs	r3, r1
 8003b8e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d130      	bne.n	8003bfc <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	691a      	ldr	r2, [r3, #16]
 8003ba6:	4b14      	ldr	r3, [pc, #80]	; (8003bf8 <HAL_ADC_Init+0x2b4>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003bae:	3a01      	subs	r2, #1
 8003bb0:	0411      	lsls	r1, r2, #16
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003bb6:	4311      	orrs	r1, r2
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003bbc:	4311      	orrs	r1, r2
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0201 	orr.w	r2, r2, #1
 8003bce:	611a      	str	r2, [r3, #16]
 8003bd0:	e01c      	b.n	8003c0c <HAL_ADC_Init+0x2c8>
 8003bd2:	bf00      	nop
 8003bd4:	24000030 	.word	0x24000030
 8003bd8:	053e2d63 	.word	0x053e2d63
 8003bdc:	40022000 	.word	0x40022000
 8003be0:	40022100 	.word	0x40022100
 8003be4:	58026000 	.word	0x58026000
 8003be8:	40022300 	.word	0x40022300
 8003bec:	58026300 	.word	0x58026300
 8003bf0:	fff0c003 	.word	0xfff0c003
 8003bf4:	ffffbffc 	.word	0xffffbffc
 8003bf8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	691a      	ldr	r2, [r3, #16]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 0201 	bic.w	r2, r2, #1
 8003c0a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 fef4 	bl	8004a10 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d10c      	bne.n	8003c4a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c36:	f023 010f 	bic.w	r1, r3, #15
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	1e5a      	subs	r2, r3, #1
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	631a      	str	r2, [r3, #48]	; 0x30
 8003c48:	e007      	b.n	8003c5a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 020f 	bic.w	r2, r2, #15
 8003c58:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5e:	f023 0303 	bic.w	r3, r3, #3
 8003c62:	f043 0201 	orr.w	r2, r3, #1
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	655a      	str	r2, [r3, #84]	; 0x54
 8003c6a:	e007      	b.n	8003c7c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c70:	f043 0210 	orr.w	r2, r3, #16
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3724      	adds	r7, #36	; 0x24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd90      	pop	{r4, r7, pc}
 8003c86:	bf00      	nop

08003c88 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a55      	ldr	r2, [pc, #340]	; (8003df0 <HAL_ADC_Start_DMA+0x168>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d004      	beq.n	8003ca8 <HAL_ADC_Start_DMA+0x20>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a54      	ldr	r2, [pc, #336]	; (8003df4 <HAL_ADC_Start_DMA+0x16c>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d101      	bne.n	8003cac <HAL_ADC_Start_DMA+0x24>
 8003ca8:	4b53      	ldr	r3, [pc, #332]	; (8003df8 <HAL_ADC_Start_DMA+0x170>)
 8003caa:	e000      	b.n	8003cae <HAL_ADC_Start_DMA+0x26>
 8003cac:	4b53      	ldr	r3, [pc, #332]	; (8003dfc <HAL_ADC_Start_DMA+0x174>)
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff fd3a 	bl	8003728 <LL_ADC_GetMultimode>
 8003cb4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff fe06 	bl	80038cc <LL_ADC_REG_IsConversionOngoing>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f040 808c 	bne.w	8003de0 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d101      	bne.n	8003cd6 <HAL_ADC_Start_DMA+0x4e>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e087      	b.n	8003de6 <HAL_ADC_Start_DMA+0x15e>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d005      	beq.n	8003cf0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	2b05      	cmp	r3, #5
 8003ce8:	d002      	beq.n	8003cf0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	2b09      	cmp	r3, #9
 8003cee:	d170      	bne.n	8003dd2 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 fd0f 	bl	8004714 <ADC_Enable>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003cfa:	7dfb      	ldrb	r3, [r7, #23]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d163      	bne.n	8003dc8 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d04:	4b3e      	ldr	r3, [pc, #248]	; (8003e00 <HAL_ADC_Start_DMA+0x178>)
 8003d06:	4013      	ands	r3, r2
 8003d08:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a37      	ldr	r2, [pc, #220]	; (8003df4 <HAL_ADC_Start_DMA+0x16c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d002      	beq.n	8003d20 <HAL_ADC_Start_DMA+0x98>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	e000      	b.n	8003d22 <HAL_ADC_Start_DMA+0x9a>
 8003d20:	4b33      	ldr	r3, [pc, #204]	; (8003df0 <HAL_ADC_Start_DMA+0x168>)
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	6812      	ldr	r2, [r2, #0]
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d002      	beq.n	8003d30 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d105      	bne.n	8003d3c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d34:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d006      	beq.n	8003d56 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4c:	f023 0206 	bic.w	r2, r3, #6
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	659a      	str	r2, [r3, #88]	; 0x58
 8003d54:	e002      	b.n	8003d5c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d60:	4a28      	ldr	r2, [pc, #160]	; (8003e04 <HAL_ADC_Start_DMA+0x17c>)
 8003d62:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d68:	4a27      	ldr	r2, [pc, #156]	; (8003e08 <HAL_ADC_Start_DMA+0x180>)
 8003d6a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d70:	4a26      	ldr	r2, [pc, #152]	; (8003e0c <HAL_ADC_Start_DMA+0x184>)
 8003d72:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	221c      	movs	r2, #28
 8003d7a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0210 	orr.w	r2, r2, #16
 8003d92:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	4610      	mov	r0, r2
 8003da0:	f7ff fc5f 	bl	8003662 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3340      	adds	r3, #64	; 0x40
 8003dae:	4619      	mov	r1, r3
 8003db0:	68ba      	ldr	r2, [r7, #8]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f001 fd40 	bl	8005838 <HAL_DMA_Start_IT>
 8003db8:	4603      	mov	r3, r0
 8003dba:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff fd5b 	bl	800387c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003dc6:	e00d      	b.n	8003de4 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003dd0:	e008      	b.n	8003de4 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003dde:	e001      	b.n	8003de4 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003de0:	2302      	movs	r3, #2
 8003de2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003de4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	40022000 	.word	0x40022000
 8003df4:	40022100 	.word	0x40022100
 8003df8:	40022300 	.word	0x40022300
 8003dfc:	58026300 	.word	0x58026300
 8003e00:	fffff0fe 	.word	0xfffff0fe
 8003e04:	080048e7 	.word	0x080048e7
 8003e08:	080049bf 	.word	0x080049bf
 8003e0c:	080049db 	.word	0x080049db

08003e10 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d101      	bne.n	8003e26 <HAL_ADC_Stop_DMA+0x16>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e04f      	b.n	8003ec6 <HAL_ADC_Stop_DMA+0xb6>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003e2e:	2103      	movs	r1, #3
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 fbb3 	bl	800459c <ADC_ConversionStop>
 8003e36:	4603      	mov	r3, r0
 8003e38:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d13d      	bne.n	8003ebc <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68da      	ldr	r2, [r3, #12]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0203 	bic.w	r2, r2, #3
 8003e4e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d10f      	bne.n	8003e7e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e62:	4618      	mov	r0, r3
 8003e64:	f001 ff52 	bl	8005d0c <HAL_DMA_Abort>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d005      	beq.n	8003e7e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 0210 	bic.w	r2, r2, #16
 8003e8c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d105      	bne.n	8003ea0 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 fcc7 	bl	8004828 <ADC_Disable>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	73fb      	strb	r3, [r7, #15]
 8003e9e:	e002      	b.n	8003ea6 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 fcc1 	bl	8004828 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d107      	bne.n	8003ebc <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003eb0:	4b07      	ldr	r3, [pc, #28]	; (8003ed0 <HAL_ADC_Stop_DMA+0xc0>)
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	f043 0201 	orr.w	r2, r3, #1
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	ffffeefe 	.word	0xffffeefe

08003ed4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003efc:	b590      	push	{r4, r7, lr}
 8003efe:	b0a1      	sub	sp, #132	; 0x84
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f06:	2300      	movs	r3, #0
 8003f08:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	4a9d      	ldr	r2, [pc, #628]	; (800418c <HAL_ADC_ConfigChannel+0x290>)
 8003f16:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d101      	bne.n	8003f26 <HAL_ADC_ConfigChannel+0x2a>
 8003f22:	2302      	movs	r3, #2
 8003f24:	e321      	b.n	800456a <HAL_ADC_ConfigChannel+0x66e>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff fcca 	bl	80038cc <LL_ADC_REG_IsConversionOngoing>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f040 8306 	bne.w	800454c <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d108      	bne.n	8003f5e <HAL_ADC_ConfigChannel+0x62>
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	0e9b      	lsrs	r3, r3, #26
 8003f52:	f003 031f 	and.w	r3, r3, #31
 8003f56:	2201      	movs	r2, #1
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	e016      	b.n	8003f8c <HAL_ADC_ConfigChannel+0x90>
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f66:	fa93 f3a3 	rbit	r3, r3
 8003f6a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003f6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f6e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003f70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003f76:	2320      	movs	r3, #32
 8003f78:	e003      	b.n	8003f82 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003f7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f7c:	fab3 f383 	clz	r3, r3
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	f003 031f 	and.w	r3, r3, #31
 8003f86:	2201      	movs	r2, #1
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	6812      	ldr	r2, [r2, #0]
 8003f90:	69d1      	ldr	r1, [r2, #28]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6812      	ldr	r2, [r2, #0]
 8003f96:	430b      	orrs	r3, r1
 8003f98:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6818      	ldr	r0, [r3, #0]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	6859      	ldr	r1, [r3, #4]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	f7ff fb2f 	bl	800360a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff fc8b 	bl	80038cc <LL_ADC_REG_IsConversionOngoing>
 8003fb6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7ff fcad 	bl	800391c <LL_ADC_INJ_IsConversionOngoing>
 8003fc2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003fc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f040 80b3 	bne.w	8004132 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003fcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f040 80af 	bne.w	8004132 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6818      	ldr	r0, [r3, #0]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	6819      	ldr	r1, [r3, #0]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	f7ff fb51 	bl	8003688 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003fe6:	4b6a      	ldr	r3, [pc, #424]	; (8004190 <HAL_ADC_ConfigChannel+0x294>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003fee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ff2:	d10b      	bne.n	800400c <HAL_ADC_ConfigChannel+0x110>
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	695a      	ldr	r2, [r3, #20]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	089b      	lsrs	r3, r3, #2
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	e01d      	b.n	8004048 <HAL_ADC_ConfigChannel+0x14c>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	f003 0310 	and.w	r3, r3, #16
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10b      	bne.n	8004032 <HAL_ADC_ConfigChannel+0x136>
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	695a      	ldr	r2, [r3, #20]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	089b      	lsrs	r3, r3, #2
 8004026:	f003 0307 	and.w	r3, r3, #7
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	e00a      	b.n	8004048 <HAL_ADC_ConfigChannel+0x14c>
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	695a      	ldr	r2, [r3, #20]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	089b      	lsrs	r3, r3, #2
 800403e:	f003 0304 	and.w	r3, r3, #4
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	2b04      	cmp	r3, #4
 8004050:	d027      	beq.n	80040a2 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6818      	ldr	r0, [r3, #0]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	6919      	ldr	r1, [r3, #16]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004060:	f7ff fa6c 	bl	800353c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6818      	ldr	r0, [r3, #0]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	6919      	ldr	r1, [r3, #16]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	7e5b      	ldrb	r3, [r3, #25]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d102      	bne.n	800407a <HAL_ADC_ConfigChannel+0x17e>
 8004074:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004078:	e000      	b.n	800407c <HAL_ADC_ConfigChannel+0x180>
 800407a:	2300      	movs	r3, #0
 800407c:	461a      	mov	r2, r3
 800407e:	f7ff fa96 	bl	80035ae <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6818      	ldr	r0, [r3, #0]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	6919      	ldr	r1, [r3, #16]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	7e1b      	ldrb	r3, [r3, #24]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d102      	bne.n	8004098 <HAL_ADC_ConfigChannel+0x19c>
 8004092:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004096:	e000      	b.n	800409a <HAL_ADC_ConfigChannel+0x19e>
 8004098:	2300      	movs	r3, #0
 800409a:	461a      	mov	r2, r3
 800409c:	f7ff fa6e 	bl	800357c <LL_ADC_SetDataRightShift>
 80040a0:	e047      	b.n	8004132 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	069b      	lsls	r3, r3, #26
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d107      	bne.n	80040c6 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80040c4:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	069b      	lsls	r3, r3, #26
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d107      	bne.n	80040ea <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80040e8:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	069b      	lsls	r3, r3, #26
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d107      	bne.n	800410e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800410c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004114:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	069b      	lsls	r3, r3, #26
 800411e:	429a      	cmp	r2, r3
 8004120:	d107      	bne.n	8004132 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004130:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4618      	mov	r0, r3
 8004138:	f7ff fb7a 	bl	8003830 <LL_ADC_IsEnabled>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	f040 820d 	bne.w	800455e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6818      	ldr	r0, [r3, #0]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	6819      	ldr	r1, [r3, #0]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	461a      	mov	r2, r3
 8004152:	f7ff fac5 	bl	80036e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	4a0c      	ldr	r2, [pc, #48]	; (800418c <HAL_ADC_ConfigChannel+0x290>)
 800415c:	4293      	cmp	r3, r2
 800415e:	f040 8133 	bne.w	80043c8 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800416e:	2b00      	cmp	r3, #0
 8004170:	d110      	bne.n	8004194 <HAL_ADC_ConfigChannel+0x298>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	0e9b      	lsrs	r3, r3, #26
 8004178:	3301      	adds	r3, #1
 800417a:	f003 031f 	and.w	r3, r3, #31
 800417e:	2b09      	cmp	r3, #9
 8004180:	bf94      	ite	ls
 8004182:	2301      	movls	r3, #1
 8004184:	2300      	movhi	r3, #0
 8004186:	b2db      	uxtb	r3, r3
 8004188:	e01e      	b.n	80041c8 <HAL_ADC_ConfigChannel+0x2cc>
 800418a:	bf00      	nop
 800418c:	47ff0000 	.word	0x47ff0000
 8004190:	5c001000 	.word	0x5c001000
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800419c:	fa93 f3a3 	rbit	r3, r3
 80041a0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80041a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80041a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80041ac:	2320      	movs	r3, #32
 80041ae:	e003      	b.n	80041b8 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80041b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041b2:	fab3 f383 	clz	r3, r3
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	3301      	adds	r3, #1
 80041ba:	f003 031f 	and.w	r3, r3, #31
 80041be:	2b09      	cmp	r3, #9
 80041c0:	bf94      	ite	ls
 80041c2:	2301      	movls	r3, #1
 80041c4:	2300      	movhi	r3, #0
 80041c6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d079      	beq.n	80042c0 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d107      	bne.n	80041e8 <HAL_ADC_ConfigChannel+0x2ec>
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	0e9b      	lsrs	r3, r3, #26
 80041de:	3301      	adds	r3, #1
 80041e0:	069b      	lsls	r3, r3, #26
 80041e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041e6:	e015      	b.n	8004214 <HAL_ADC_ConfigChannel+0x318>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041f0:	fa93 f3a3 	rbit	r3, r3
 80041f4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80041f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041f8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80041fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d101      	bne.n	8004204 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8004200:	2320      	movs	r3, #32
 8004202:	e003      	b.n	800420c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004206:	fab3 f383 	clz	r3, r3
 800420a:	b2db      	uxtb	r3, r3
 800420c:	3301      	adds	r3, #1
 800420e:	069b      	lsls	r3, r3, #26
 8004210:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800421c:	2b00      	cmp	r3, #0
 800421e:	d109      	bne.n	8004234 <HAL_ADC_ConfigChannel+0x338>
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	0e9b      	lsrs	r3, r3, #26
 8004226:	3301      	adds	r3, #1
 8004228:	f003 031f 	and.w	r3, r3, #31
 800422c:	2101      	movs	r1, #1
 800422e:	fa01 f303 	lsl.w	r3, r1, r3
 8004232:	e017      	b.n	8004264 <HAL_ADC_ConfigChannel+0x368>
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800423c:	fa93 f3a3 	rbit	r3, r3
 8004240:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004244:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 800424c:	2320      	movs	r3, #32
 800424e:	e003      	b.n	8004258 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8004250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004252:	fab3 f383 	clz	r3, r3
 8004256:	b2db      	uxtb	r3, r3
 8004258:	3301      	adds	r3, #1
 800425a:	f003 031f 	and.w	r3, r3, #31
 800425e:	2101      	movs	r1, #1
 8004260:	fa01 f303 	lsl.w	r3, r1, r3
 8004264:	ea42 0103 	orr.w	r1, r2, r3
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10a      	bne.n	800428a <HAL_ADC_ConfigChannel+0x38e>
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	0e9b      	lsrs	r3, r3, #26
 800427a:	3301      	adds	r3, #1
 800427c:	f003 021f 	and.w	r2, r3, #31
 8004280:	4613      	mov	r3, r2
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	4413      	add	r3, r2
 8004286:	051b      	lsls	r3, r3, #20
 8004288:	e018      	b.n	80042bc <HAL_ADC_ConfigChannel+0x3c0>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004292:	fa93 f3a3 	rbit	r3, r3
 8004296:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800429c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80042a2:	2320      	movs	r3, #32
 80042a4:	e003      	b.n	80042ae <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80042a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a8:	fab3 f383 	clz	r3, r3
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	3301      	adds	r3, #1
 80042b0:	f003 021f 	and.w	r2, r3, #31
 80042b4:	4613      	mov	r3, r2
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	4413      	add	r3, r2
 80042ba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042bc:	430b      	orrs	r3, r1
 80042be:	e07e      	b.n	80043be <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d107      	bne.n	80042dc <HAL_ADC_ConfigChannel+0x3e0>
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	0e9b      	lsrs	r3, r3, #26
 80042d2:	3301      	adds	r3, #1
 80042d4:	069b      	lsls	r3, r3, #26
 80042d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042da:	e015      	b.n	8004308 <HAL_ADC_ConfigChannel+0x40c>
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e4:	fa93 f3a3 	rbit	r3, r3
 80042e8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80042ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80042ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80042f4:	2320      	movs	r3, #32
 80042f6:	e003      	b.n	8004300 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80042f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fa:	fab3 f383 	clz	r3, r3
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	3301      	adds	r3, #1
 8004302:	069b      	lsls	r3, r3, #26
 8004304:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004310:	2b00      	cmp	r3, #0
 8004312:	d109      	bne.n	8004328 <HAL_ADC_ConfigChannel+0x42c>
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	0e9b      	lsrs	r3, r3, #26
 800431a:	3301      	adds	r3, #1
 800431c:	f003 031f 	and.w	r3, r3, #31
 8004320:	2101      	movs	r1, #1
 8004322:	fa01 f303 	lsl.w	r3, r1, r3
 8004326:	e017      	b.n	8004358 <HAL_ADC_ConfigChannel+0x45c>
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	fa93 f3a3 	rbit	r3, r3
 8004334:	61bb      	str	r3, [r7, #24]
  return result;
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800433a:	6a3b      	ldr	r3, [r7, #32]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8004340:	2320      	movs	r3, #32
 8004342:	e003      	b.n	800434c <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	fab3 f383 	clz	r3, r3
 800434a:	b2db      	uxtb	r3, r3
 800434c:	3301      	adds	r3, #1
 800434e:	f003 031f 	and.w	r3, r3, #31
 8004352:	2101      	movs	r1, #1
 8004354:	fa01 f303 	lsl.w	r3, r1, r3
 8004358:	ea42 0103 	orr.w	r1, r2, r3
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10d      	bne.n	8004384 <HAL_ADC_ConfigChannel+0x488>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	0e9b      	lsrs	r3, r3, #26
 800436e:	3301      	adds	r3, #1
 8004370:	f003 021f 	and.w	r2, r3, #31
 8004374:	4613      	mov	r3, r2
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	4413      	add	r3, r2
 800437a:	3b1e      	subs	r3, #30
 800437c:	051b      	lsls	r3, r3, #20
 800437e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004382:	e01b      	b.n	80043bc <HAL_ADC_ConfigChannel+0x4c0>
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	fa93 f3a3 	rbit	r3, r3
 8004390:	60fb      	str	r3, [r7, #12]
  return result;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d101      	bne.n	80043a0 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 800439c:	2320      	movs	r3, #32
 800439e:	e003      	b.n	80043a8 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	fab3 f383 	clz	r3, r3
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	3301      	adds	r3, #1
 80043aa:	f003 021f 	and.w	r2, r3, #31
 80043ae:	4613      	mov	r3, r2
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	4413      	add	r3, r2
 80043b4:	3b1e      	subs	r3, #30
 80043b6:	051b      	lsls	r3, r3, #20
 80043b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043bc:	430b      	orrs	r3, r1
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	6892      	ldr	r2, [r2, #8]
 80043c2:	4619      	mov	r1, r3
 80043c4:	f7ff f960 	bl	8003688 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f280 80c6 	bge.w	800455e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a67      	ldr	r2, [pc, #412]	; (8004574 <HAL_ADC_ConfigChannel+0x678>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d004      	beq.n	80043e6 <HAL_ADC_ConfigChannel+0x4ea>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a65      	ldr	r2, [pc, #404]	; (8004578 <HAL_ADC_ConfigChannel+0x67c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d101      	bne.n	80043ea <HAL_ADC_ConfigChannel+0x4ee>
 80043e6:	4b65      	ldr	r3, [pc, #404]	; (800457c <HAL_ADC_ConfigChannel+0x680>)
 80043e8:	e000      	b.n	80043ec <HAL_ADC_ConfigChannel+0x4f0>
 80043ea:	4b65      	ldr	r3, [pc, #404]	; (8004580 <HAL_ADC_ConfigChannel+0x684>)
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff f897 	bl	8003520 <LL_ADC_GetCommonPathInternalCh>
 80043f2:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a5e      	ldr	r2, [pc, #376]	; (8004574 <HAL_ADC_ConfigChannel+0x678>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d004      	beq.n	8004408 <HAL_ADC_ConfigChannel+0x50c>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a5d      	ldr	r2, [pc, #372]	; (8004578 <HAL_ADC_ConfigChannel+0x67c>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d10e      	bne.n	8004426 <HAL_ADC_ConfigChannel+0x52a>
 8004408:	485a      	ldr	r0, [pc, #360]	; (8004574 <HAL_ADC_ConfigChannel+0x678>)
 800440a:	f7ff fa11 	bl	8003830 <LL_ADC_IsEnabled>
 800440e:	4604      	mov	r4, r0
 8004410:	4859      	ldr	r0, [pc, #356]	; (8004578 <HAL_ADC_ConfigChannel+0x67c>)
 8004412:	f7ff fa0d 	bl	8003830 <LL_ADC_IsEnabled>
 8004416:	4603      	mov	r3, r0
 8004418:	4323      	orrs	r3, r4
 800441a:	2b00      	cmp	r3, #0
 800441c:	bf0c      	ite	eq
 800441e:	2301      	moveq	r3, #1
 8004420:	2300      	movne	r3, #0
 8004422:	b2db      	uxtb	r3, r3
 8004424:	e008      	b.n	8004438 <HAL_ADC_ConfigChannel+0x53c>
 8004426:	4857      	ldr	r0, [pc, #348]	; (8004584 <HAL_ADC_ConfigChannel+0x688>)
 8004428:	f7ff fa02 	bl	8003830 <LL_ADC_IsEnabled>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	bf0c      	ite	eq
 8004432:	2301      	moveq	r3, #1
 8004434:	2300      	movne	r3, #0
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	d07d      	beq.n	8004538 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a51      	ldr	r2, [pc, #324]	; (8004588 <HAL_ADC_ConfigChannel+0x68c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d130      	bne.n	80044a8 <HAL_ADC_ConfigChannel+0x5ac>
 8004446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004448:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d12b      	bne.n	80044a8 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a4b      	ldr	r2, [pc, #300]	; (8004584 <HAL_ADC_ConfigChannel+0x688>)
 8004456:	4293      	cmp	r3, r2
 8004458:	f040 8081 	bne.w	800455e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a44      	ldr	r2, [pc, #272]	; (8004574 <HAL_ADC_ConfigChannel+0x678>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d004      	beq.n	8004470 <HAL_ADC_ConfigChannel+0x574>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a43      	ldr	r2, [pc, #268]	; (8004578 <HAL_ADC_ConfigChannel+0x67c>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d101      	bne.n	8004474 <HAL_ADC_ConfigChannel+0x578>
 8004470:	4a42      	ldr	r2, [pc, #264]	; (800457c <HAL_ADC_ConfigChannel+0x680>)
 8004472:	e000      	b.n	8004476 <HAL_ADC_ConfigChannel+0x57a>
 8004474:	4a42      	ldr	r2, [pc, #264]	; (8004580 <HAL_ADC_ConfigChannel+0x684>)
 8004476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004478:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800447c:	4619      	mov	r1, r3
 800447e:	4610      	mov	r0, r2
 8004480:	f7ff f83b 	bl	80034fa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004484:	4b41      	ldr	r3, [pc, #260]	; (800458c <HAL_ADC_ConfigChannel+0x690>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	099b      	lsrs	r3, r3, #6
 800448a:	4a41      	ldr	r2, [pc, #260]	; (8004590 <HAL_ADC_ConfigChannel+0x694>)
 800448c:	fba2 2303 	umull	r2, r3, r2, r3
 8004490:	099b      	lsrs	r3, r3, #6
 8004492:	3301      	adds	r3, #1
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004498:	e002      	b.n	80044a0 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	3b01      	subs	r3, #1
 800449e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f9      	bne.n	800449a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044a6:	e05a      	b.n	800455e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a39      	ldr	r2, [pc, #228]	; (8004594 <HAL_ADC_ConfigChannel+0x698>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d11e      	bne.n	80044f0 <HAL_ADC_ConfigChannel+0x5f4>
 80044b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d119      	bne.n	80044f0 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a30      	ldr	r2, [pc, #192]	; (8004584 <HAL_ADC_ConfigChannel+0x688>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d14b      	bne.n	800455e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a2a      	ldr	r2, [pc, #168]	; (8004574 <HAL_ADC_ConfigChannel+0x678>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d004      	beq.n	80044da <HAL_ADC_ConfigChannel+0x5de>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a28      	ldr	r2, [pc, #160]	; (8004578 <HAL_ADC_ConfigChannel+0x67c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d101      	bne.n	80044de <HAL_ADC_ConfigChannel+0x5e2>
 80044da:	4a28      	ldr	r2, [pc, #160]	; (800457c <HAL_ADC_ConfigChannel+0x680>)
 80044dc:	e000      	b.n	80044e0 <HAL_ADC_ConfigChannel+0x5e4>
 80044de:	4a28      	ldr	r2, [pc, #160]	; (8004580 <HAL_ADC_ConfigChannel+0x684>)
 80044e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044e6:	4619      	mov	r1, r3
 80044e8:	4610      	mov	r0, r2
 80044ea:	f7ff f806 	bl	80034fa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044ee:	e036      	b.n	800455e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a28      	ldr	r2, [pc, #160]	; (8004598 <HAL_ADC_ConfigChannel+0x69c>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d131      	bne.n	800455e <HAL_ADC_ConfigChannel+0x662>
 80044fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d12c      	bne.n	800455e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a1e      	ldr	r2, [pc, #120]	; (8004584 <HAL_ADC_ConfigChannel+0x688>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d127      	bne.n	800455e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a18      	ldr	r2, [pc, #96]	; (8004574 <HAL_ADC_ConfigChannel+0x678>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d004      	beq.n	8004522 <HAL_ADC_ConfigChannel+0x626>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a16      	ldr	r2, [pc, #88]	; (8004578 <HAL_ADC_ConfigChannel+0x67c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d101      	bne.n	8004526 <HAL_ADC_ConfigChannel+0x62a>
 8004522:	4a16      	ldr	r2, [pc, #88]	; (800457c <HAL_ADC_ConfigChannel+0x680>)
 8004524:	e000      	b.n	8004528 <HAL_ADC_ConfigChannel+0x62c>
 8004526:	4a16      	ldr	r2, [pc, #88]	; (8004580 <HAL_ADC_ConfigChannel+0x684>)
 8004528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800452a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800452e:	4619      	mov	r1, r3
 8004530:	4610      	mov	r0, r2
 8004532:	f7fe ffe2 	bl	80034fa <LL_ADC_SetCommonPathInternalCh>
 8004536:	e012      	b.n	800455e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453c:	f043 0220 	orr.w	r2, r3, #32
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800454a:	e008      	b.n	800455e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004550:	f043 0220 	orr.w	r2, r3, #32
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004566:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800456a:	4618      	mov	r0, r3
 800456c:	3784      	adds	r7, #132	; 0x84
 800456e:	46bd      	mov	sp, r7
 8004570:	bd90      	pop	{r4, r7, pc}
 8004572:	bf00      	nop
 8004574:	40022000 	.word	0x40022000
 8004578:	40022100 	.word	0x40022100
 800457c:	40022300 	.word	0x40022300
 8004580:	58026300 	.word	0x58026300
 8004584:	58026000 	.word	0x58026000
 8004588:	cb840000 	.word	0xcb840000
 800458c:	24000030 	.word	0x24000030
 8004590:	053e2d63 	.word	0x053e2d63
 8004594:	c7520000 	.word	0xc7520000
 8004598:	cfb80000 	.word	0xcfb80000

0800459c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b088      	sub	sp, #32
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80045a6:	2300      	movs	r3, #0
 80045a8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7ff f98a 	bl	80038cc <LL_ADC_REG_IsConversionOngoing>
 80045b8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff f9ac 	bl	800391c <LL_ADC_INJ_IsConversionOngoing>
 80045c4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d103      	bne.n	80045d4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 8098 	beq.w	8004704 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d02a      	beq.n	8004638 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	7d5b      	ldrb	r3, [r3, #21]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d126      	bne.n	8004638 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	7d1b      	ldrb	r3, [r3, #20]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d122      	bne.n	8004638 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80045f2:	2301      	movs	r3, #1
 80045f4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80045f6:	e014      	b.n	8004622 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	4a45      	ldr	r2, [pc, #276]	; (8004710 <ADC_ConversionStop+0x174>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d90d      	bls.n	800461c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004604:	f043 0210 	orr.w	r2, r3, #16
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004610:	f043 0201 	orr.w	r2, r3, #1
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e074      	b.n	8004706 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	3301      	adds	r3, #1
 8004620:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462c:	2b40      	cmp	r3, #64	; 0x40
 800462e:	d1e3      	bne.n	80045f8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2240      	movs	r2, #64	; 0x40
 8004636:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d014      	beq.n	8004668 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff f942 	bl	80038cc <LL_ADC_REG_IsConversionOngoing>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00c      	beq.n	8004668 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4618      	mov	r0, r3
 8004654:	f7ff f8ff 	bl	8003856 <LL_ADC_IsDisableOngoing>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d104      	bne.n	8004668 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4618      	mov	r0, r3
 8004664:	f7ff f91e 	bl	80038a4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d014      	beq.n	8004698 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4618      	mov	r0, r3
 8004674:	f7ff f952 	bl	800391c <LL_ADC_INJ_IsConversionOngoing>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00c      	beq.n	8004698 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff f8e7 	bl	8003856 <LL_ADC_IsDisableOngoing>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d104      	bne.n	8004698 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4618      	mov	r0, r3
 8004694:	f7ff f92e 	bl	80038f4 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	2b02      	cmp	r3, #2
 800469c:	d005      	beq.n	80046aa <ADC_ConversionStop+0x10e>
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	2b03      	cmp	r3, #3
 80046a2:	d105      	bne.n	80046b0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80046a4:	230c      	movs	r3, #12
 80046a6:	617b      	str	r3, [r7, #20]
        break;
 80046a8:	e005      	b.n	80046b6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80046aa:	2308      	movs	r3, #8
 80046ac:	617b      	str	r3, [r7, #20]
        break;
 80046ae:	e002      	b.n	80046b6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80046b0:	2304      	movs	r3, #4
 80046b2:	617b      	str	r3, [r7, #20]
        break;
 80046b4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80046b6:	f7fe febd 	bl	8003434 <HAL_GetTick>
 80046ba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80046bc:	e01b      	b.n	80046f6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80046be:	f7fe feb9 	bl	8003434 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b05      	cmp	r3, #5
 80046ca:	d914      	bls.n	80046f6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689a      	ldr	r2, [r3, #8]
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	4013      	ands	r3, r2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00d      	beq.n	80046f6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046de:	f043 0210 	orr.w	r2, r3, #16
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ea:	f043 0201 	orr.w	r2, r3, #1
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e007      	b.n	8004706 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	4013      	ands	r3, r2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1dc      	bne.n	80046be <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3720      	adds	r7, #32
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	000cdbff 	.word	0x000cdbff

08004714 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4618      	mov	r0, r3
 8004722:	f7ff f885 	bl	8003830 <LL_ADC_IsEnabled>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d16e      	bne.n	800480a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	4b38      	ldr	r3, [pc, #224]	; (8004814 <ADC_Enable+0x100>)
 8004734:	4013      	ands	r3, r2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00d      	beq.n	8004756 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800473e:	f043 0210 	orr.w	r2, r3, #16
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474a:	f043 0201 	orr.w	r2, r3, #1
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e05a      	b.n	800480c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff f840 	bl	80037e0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004760:	f7fe fe68 	bl	8003434 <HAL_GetTick>
 8004764:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a2b      	ldr	r2, [pc, #172]	; (8004818 <ADC_Enable+0x104>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d004      	beq.n	800477a <ADC_Enable+0x66>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a29      	ldr	r2, [pc, #164]	; (800481c <ADC_Enable+0x108>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d101      	bne.n	800477e <ADC_Enable+0x6a>
 800477a:	4b29      	ldr	r3, [pc, #164]	; (8004820 <ADC_Enable+0x10c>)
 800477c:	e000      	b.n	8004780 <ADC_Enable+0x6c>
 800477e:	4b29      	ldr	r3, [pc, #164]	; (8004824 <ADC_Enable+0x110>)
 8004780:	4618      	mov	r0, r3
 8004782:	f7fe ffd1 	bl	8003728 <LL_ADC_GetMultimode>
 8004786:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a23      	ldr	r2, [pc, #140]	; (800481c <ADC_Enable+0x108>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d002      	beq.n	8004798 <ADC_Enable+0x84>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	e000      	b.n	800479a <ADC_Enable+0x86>
 8004798:	4b1f      	ldr	r3, [pc, #124]	; (8004818 <ADC_Enable+0x104>)
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6812      	ldr	r2, [r2, #0]
 800479e:	4293      	cmp	r3, r2
 80047a0:	d02c      	beq.n	80047fc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d130      	bne.n	800480a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047a8:	e028      	b.n	80047fc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7ff f83e 	bl	8003830 <LL_ADC_IsEnabled>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d104      	bne.n	80047c4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4618      	mov	r0, r3
 80047c0:	f7ff f80e 	bl	80037e0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80047c4:	f7fe fe36 	bl	8003434 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d914      	bls.n	80047fc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d00d      	beq.n	80047fc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e4:	f043 0210 	orr.w	r2, r3, #16
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f0:	f043 0201 	orr.w	r2, r3, #1
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e007      	b.n	800480c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b01      	cmp	r3, #1
 8004808:	d1cf      	bne.n	80047aa <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	8000003f 	.word	0x8000003f
 8004818:	40022000 	.word	0x40022000
 800481c:	40022100 	.word	0x40022100
 8004820:	40022300 	.word	0x40022300
 8004824:	58026300 	.word	0x58026300

08004828 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4618      	mov	r0, r3
 8004836:	f7ff f80e 	bl	8003856 <LL_ADC_IsDisableOngoing>
 800483a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4618      	mov	r0, r3
 8004842:	f7fe fff5 	bl	8003830 <LL_ADC_IsEnabled>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d047      	beq.n	80048dc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d144      	bne.n	80048dc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f003 030d 	and.w	r3, r3, #13
 800485c:	2b01      	cmp	r3, #1
 800485e:	d10c      	bne.n	800487a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4618      	mov	r0, r3
 8004866:	f7fe ffcf 	bl	8003808 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2203      	movs	r2, #3
 8004870:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004872:	f7fe fddf 	bl	8003434 <HAL_GetTick>
 8004876:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004878:	e029      	b.n	80048ce <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487e:	f043 0210 	orr.w	r2, r3, #16
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488a:	f043 0201 	orr.w	r2, r3, #1
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e023      	b.n	80048de <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004896:	f7fe fdcd 	bl	8003434 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d914      	bls.n	80048ce <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00d      	beq.n	80048ce <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b6:	f043 0210 	orr.w	r2, r3, #16
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c2:	f043 0201 	orr.w	r2, r3, #1
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e007      	b.n	80048de <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1dc      	bne.n	8004896 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b084      	sub	sp, #16
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d14b      	bne.n	8004998 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004904:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0308 	and.w	r3, r3, #8
 8004916:	2b00      	cmp	r3, #0
 8004918:	d021      	beq.n	800495e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4618      	mov	r0, r3
 8004920:	f7fe fe60 	bl	80035e4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d032      	beq.n	8004990 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d12b      	bne.n	8004990 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004948:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d11f      	bne.n	8004990 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004954:	f043 0201 	orr.w	r2, r3, #1
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	655a      	str	r2, [r3, #84]	; 0x54
 800495c:	e018      	b.n	8004990 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	f003 0303 	and.w	r3, r3, #3
 8004968:	2b00      	cmp	r3, #0
 800496a:	d111      	bne.n	8004990 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004970:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d105      	bne.n	8004990 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004988:	f043 0201 	orr.w	r2, r3, #1
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f7fd fd3d 	bl	8002410 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004996:	e00e      	b.n	80049b6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499c:	f003 0310 	and.w	r3, r3, #16
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d003      	beq.n	80049ac <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f7ff fa9f 	bl	8003ee8 <HAL_ADC_ErrorCallback>
}
 80049aa:	e004      	b.n	80049b6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	4798      	blx	r3
}
 80049b6:	bf00      	nop
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b084      	sub	sp, #16
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f7ff fa81 	bl	8003ed4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80049d2:	bf00      	nop
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b084      	sub	sp, #16
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f8:	f043 0204 	orr.w	r2, r3, #4
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f7ff fa71 	bl	8003ee8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a06:	bf00      	nop
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
	...

08004a10 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a7a      	ldr	r2, [pc, #488]	; (8004c08 <ADC_ConfigureBoostMode+0x1f8>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d004      	beq.n	8004a2c <ADC_ConfigureBoostMode+0x1c>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a79      	ldr	r2, [pc, #484]	; (8004c0c <ADC_ConfigureBoostMode+0x1fc>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d109      	bne.n	8004a40 <ADC_ConfigureBoostMode+0x30>
 8004a2c:	4b78      	ldr	r3, [pc, #480]	; (8004c10 <ADC_ConfigureBoostMode+0x200>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	bf14      	ite	ne
 8004a38:	2301      	movne	r3, #1
 8004a3a:	2300      	moveq	r3, #0
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	e008      	b.n	8004a52 <ADC_ConfigureBoostMode+0x42>
 8004a40:	4b74      	ldr	r3, [pc, #464]	; (8004c14 <ADC_ConfigureBoostMode+0x204>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	bf14      	ite	ne
 8004a4c:	2301      	movne	r3, #1
 8004a4e:	2300      	moveq	r3, #0
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d01c      	beq.n	8004a90 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004a56:	f006 fa5f 	bl	800af18 <HAL_RCC_GetHCLKFreq>
 8004a5a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a64:	d010      	beq.n	8004a88 <ADC_ConfigureBoostMode+0x78>
 8004a66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a6a:	d873      	bhi.n	8004b54 <ADC_ConfigureBoostMode+0x144>
 8004a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a70:	d002      	beq.n	8004a78 <ADC_ConfigureBoostMode+0x68>
 8004a72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a76:	d16d      	bne.n	8004b54 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	0c1b      	lsrs	r3, r3, #16
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a84:	60fb      	str	r3, [r7, #12]
        break;
 8004a86:	e068      	b.n	8004b5a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	089b      	lsrs	r3, r3, #2
 8004a8c:	60fb      	str	r3, [r7, #12]
        break;
 8004a8e:	e064      	b.n	8004b5a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004a90:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004a94:	f04f 0100 	mov.w	r1, #0
 8004a98:	f007 fca4 	bl	800c3e4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004a9c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004aa6:	d051      	beq.n	8004b4c <ADC_ConfigureBoostMode+0x13c>
 8004aa8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004aac:	d854      	bhi.n	8004b58 <ADC_ConfigureBoostMode+0x148>
 8004aae:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004ab2:	d047      	beq.n	8004b44 <ADC_ConfigureBoostMode+0x134>
 8004ab4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004ab8:	d84e      	bhi.n	8004b58 <ADC_ConfigureBoostMode+0x148>
 8004aba:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004abe:	d03d      	beq.n	8004b3c <ADC_ConfigureBoostMode+0x12c>
 8004ac0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004ac4:	d848      	bhi.n	8004b58 <ADC_ConfigureBoostMode+0x148>
 8004ac6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004aca:	d033      	beq.n	8004b34 <ADC_ConfigureBoostMode+0x124>
 8004acc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ad0:	d842      	bhi.n	8004b58 <ADC_ConfigureBoostMode+0x148>
 8004ad2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004ad6:	d029      	beq.n	8004b2c <ADC_ConfigureBoostMode+0x11c>
 8004ad8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004adc:	d83c      	bhi.n	8004b58 <ADC_ConfigureBoostMode+0x148>
 8004ade:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004ae2:	d01a      	beq.n	8004b1a <ADC_ConfigureBoostMode+0x10a>
 8004ae4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004ae8:	d836      	bhi.n	8004b58 <ADC_ConfigureBoostMode+0x148>
 8004aea:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004aee:	d014      	beq.n	8004b1a <ADC_ConfigureBoostMode+0x10a>
 8004af0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004af4:	d830      	bhi.n	8004b58 <ADC_ConfigureBoostMode+0x148>
 8004af6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004afa:	d00e      	beq.n	8004b1a <ADC_ConfigureBoostMode+0x10a>
 8004afc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b00:	d82a      	bhi.n	8004b58 <ADC_ConfigureBoostMode+0x148>
 8004b02:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004b06:	d008      	beq.n	8004b1a <ADC_ConfigureBoostMode+0x10a>
 8004b08:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004b0c:	d824      	bhi.n	8004b58 <ADC_ConfigureBoostMode+0x148>
 8004b0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b12:	d002      	beq.n	8004b1a <ADC_ConfigureBoostMode+0x10a>
 8004b14:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b18:	d11e      	bne.n	8004b58 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	0c9b      	lsrs	r3, r3, #18
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b28:	60fb      	str	r3, [r7, #12]
        break;
 8004b2a:	e016      	b.n	8004b5a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	091b      	lsrs	r3, r3, #4
 8004b30:	60fb      	str	r3, [r7, #12]
        break;
 8004b32:	e012      	b.n	8004b5a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	095b      	lsrs	r3, r3, #5
 8004b38:	60fb      	str	r3, [r7, #12]
        break;
 8004b3a:	e00e      	b.n	8004b5a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	099b      	lsrs	r3, r3, #6
 8004b40:	60fb      	str	r3, [r7, #12]
        break;
 8004b42:	e00a      	b.n	8004b5a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	09db      	lsrs	r3, r3, #7
 8004b48:	60fb      	str	r3, [r7, #12]
        break;
 8004b4a:	e006      	b.n	8004b5a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	0a1b      	lsrs	r3, r3, #8
 8004b50:	60fb      	str	r3, [r7, #12]
        break;
 8004b52:	e002      	b.n	8004b5a <ADC_ConfigureBoostMode+0x14a>
        break;
 8004b54:	bf00      	nop
 8004b56:	e000      	b.n	8004b5a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004b58:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004b5a:	f7fe fc9b 	bl	8003494 <HAL_GetREVID>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	f241 0203 	movw	r2, #4099	; 0x1003
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d815      	bhi.n	8004b94 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	4a2b      	ldr	r2, [pc, #172]	; (8004c18 <ADC_ConfigureBoostMode+0x208>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d908      	bls.n	8004b82 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689a      	ldr	r2, [r3, #8]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b7e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004b80:	e03e      	b.n	8004c00 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	689a      	ldr	r2, [r3, #8]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b90:	609a      	str	r2, [r3, #8]
}
 8004b92:	e035      	b.n	8004c00 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	085b      	lsrs	r3, r3, #1
 8004b98:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	4a1f      	ldr	r2, [pc, #124]	; (8004c1c <ADC_ConfigureBoostMode+0x20c>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d808      	bhi.n	8004bb4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004bb0:	609a      	str	r2, [r3, #8]
}
 8004bb2:	e025      	b.n	8004c00 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4a1a      	ldr	r2, [pc, #104]	; (8004c20 <ADC_ConfigureBoostMode+0x210>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d80a      	bhi.n	8004bd2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bce:	609a      	str	r2, [r3, #8]
}
 8004bd0:	e016      	b.n	8004c00 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	4a13      	ldr	r2, [pc, #76]	; (8004c24 <ADC_ConfigureBoostMode+0x214>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d80a      	bhi.n	8004bf0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bec:	609a      	str	r2, [r3, #8]
}
 8004bee:	e007      	b.n	8004c00 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	689a      	ldr	r2, [r3, #8]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004bfe:	609a      	str	r2, [r3, #8]
}
 8004c00:	bf00      	nop
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	40022000 	.word	0x40022000
 8004c0c:	40022100 	.word	0x40022100
 8004c10:	40022300 	.word	0x40022300
 8004c14:	58026300 	.word	0x58026300
 8004c18:	01312d00 	.word	0x01312d00
 8004c1c:	005f5e10 	.word	0x005f5e10
 8004c20:	00bebc20 	.word	0x00bebc20
 8004c24:	017d7840 	.word	0x017d7840

08004c28 <LL_ADC_IsEnabled>:
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d101      	bne.n	8004c40 <LL_ADC_IsEnabled+0x18>
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e000      	b.n	8004c42 <LL_ADC_IsEnabled+0x1a>
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
	...

08004c50 <LL_ADC_StartCalibration>:
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	689a      	ldr	r2, [r3, #8]
 8004c60:	4b09      	ldr	r3, [pc, #36]	; (8004c88 <LL_ADC_StartCalibration+0x38>)
 8004c62:	4013      	ands	r3, r2
 8004c64:	68ba      	ldr	r2, [r7, #8]
 8004c66:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004c70:	430a      	orrs	r2, r1
 8004c72:	4313      	orrs	r3, r2
 8004c74:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	609a      	str	r2, [r3, #8]
}
 8004c7c:	bf00      	nop
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	3ffeffc0 	.word	0x3ffeffc0

08004c8c <LL_ADC_IsCalibrationOnGoing>:
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ca0:	d101      	bne.n	8004ca6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e000      	b.n	8004ca8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <LL_ADC_REG_IsConversionOngoing>:
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f003 0304 	and.w	r3, r3, #4
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	d101      	bne.n	8004ccc <LL_ADC_REG_IsConversionOngoing+0x18>
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e000      	b.n	8004cce <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
	...

08004cdc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d101      	bne.n	8004cfa <HAL_ADCEx_Calibration_Start+0x1e>
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	e04c      	b.n	8004d94 <HAL_ADCEx_Calibration_Start+0xb8>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f7ff fd90 	bl	8004828 <ADC_Disable>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004d0c:	7dfb      	ldrb	r3, [r7, #23]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d135      	bne.n	8004d7e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d16:	4b21      	ldr	r3, [pc, #132]	; (8004d9c <HAL_ADCEx_Calibration_Start+0xc0>)
 8004d18:	4013      	ands	r3, r2
 8004d1a:	f043 0202 	orr.w	r2, r3, #2
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	68b9      	ldr	r1, [r7, #8]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7ff ff90 	bl	8004c50 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004d30:	e014      	b.n	8004d5c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	3301      	adds	r3, #1
 8004d36:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	4a19      	ldr	r2, [pc, #100]	; (8004da0 <HAL_ADCEx_Calibration_Start+0xc4>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d30d      	bcc.n	8004d5c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d44:	f023 0312 	bic.w	r3, r3, #18
 8004d48:	f043 0210 	orr.w	r2, r3, #16
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e01b      	b.n	8004d94 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7ff ff93 	bl	8004c8c <LL_ADC_IsCalibrationOnGoing>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1e2      	bne.n	8004d32 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d70:	f023 0303 	bic.w	r3, r3, #3
 8004d74:	f043 0201 	orr.w	r2, r3, #1
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	655a      	str	r2, [r3, #84]	; 0x54
 8004d7c:	e005      	b.n	8004d8a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d82:	f043 0210 	orr.w	r2, r3, #16
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3718      	adds	r7, #24
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	ffffeefd 	.word	0xffffeefd
 8004da0:	25c3f800 	.word	0x25c3f800

08004da4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004da4:	b590      	push	{r4, r7, lr}
 8004da6:	b09f      	sub	sp, #124	; 0x7c
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004dae:	2300      	movs	r3, #0
 8004db0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d101      	bne.n	8004dc2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	e0be      	b.n	8004f40 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a5c      	ldr	r2, [pc, #368]	; (8004f48 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d102      	bne.n	8004de2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004ddc:	4b5b      	ldr	r3, [pc, #364]	; (8004f4c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004dde:	60bb      	str	r3, [r7, #8]
 8004de0:	e001      	b.n	8004de6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004de2:	2300      	movs	r3, #0
 8004de4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10b      	bne.n	8004e04 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df0:	f043 0220 	orr.w	r2, r3, #32
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e09d      	b.n	8004f40 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7ff ff54 	bl	8004cb4 <LL_ADC_REG_IsConversionOngoing>
 8004e0c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7ff ff4e 	bl	8004cb4 <LL_ADC_REG_IsConversionOngoing>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d17f      	bne.n	8004f1e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004e1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d17c      	bne.n	8004f1e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a47      	ldr	r2, [pc, #284]	; (8004f48 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d004      	beq.n	8004e38 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a46      	ldr	r2, [pc, #280]	; (8004f4c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d101      	bne.n	8004e3c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004e38:	4b45      	ldr	r3, [pc, #276]	; (8004f50 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004e3a:	e000      	b.n	8004e3e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004e3c:	4b45      	ldr	r3, [pc, #276]	; (8004f54 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004e3e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d039      	beq.n	8004ebc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	431a      	orrs	r2, r3
 8004e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e58:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a3a      	ldr	r2, [pc, #232]	; (8004f48 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d004      	beq.n	8004e6e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a38      	ldr	r2, [pc, #224]	; (8004f4c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d10e      	bne.n	8004e8c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004e6e:	4836      	ldr	r0, [pc, #216]	; (8004f48 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004e70:	f7ff feda 	bl	8004c28 <LL_ADC_IsEnabled>
 8004e74:	4604      	mov	r4, r0
 8004e76:	4835      	ldr	r0, [pc, #212]	; (8004f4c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004e78:	f7ff fed6 	bl	8004c28 <LL_ADC_IsEnabled>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	4323      	orrs	r3, r4
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	bf0c      	ite	eq
 8004e84:	2301      	moveq	r3, #1
 8004e86:	2300      	movne	r3, #0
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	e008      	b.n	8004e9e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004e8c:	4832      	ldr	r0, [pc, #200]	; (8004f58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004e8e:	f7ff fecb 	bl	8004c28 <LL_ADC_IsEnabled>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	bf0c      	ite	eq
 8004e98:	2301      	moveq	r3, #1
 8004e9a:	2300      	movne	r3, #0
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d047      	beq.n	8004f32 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ea4:	689a      	ldr	r2, [r3, #8]
 8004ea6:	4b2d      	ldr	r3, [pc, #180]	; (8004f5c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	6811      	ldr	r1, [r2, #0]
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	6892      	ldr	r2, [r2, #8]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eb8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004eba:	e03a      	b.n	8004f32 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ec6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a1e      	ldr	r2, [pc, #120]	; (8004f48 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d004      	beq.n	8004edc <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a1d      	ldr	r2, [pc, #116]	; (8004f4c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d10e      	bne.n	8004efa <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004edc:	481a      	ldr	r0, [pc, #104]	; (8004f48 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004ede:	f7ff fea3 	bl	8004c28 <LL_ADC_IsEnabled>
 8004ee2:	4604      	mov	r4, r0
 8004ee4:	4819      	ldr	r0, [pc, #100]	; (8004f4c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004ee6:	f7ff fe9f 	bl	8004c28 <LL_ADC_IsEnabled>
 8004eea:	4603      	mov	r3, r0
 8004eec:	4323      	orrs	r3, r4
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	bf0c      	ite	eq
 8004ef2:	2301      	moveq	r3, #1
 8004ef4:	2300      	movne	r3, #0
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	e008      	b.n	8004f0c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004efa:	4817      	ldr	r0, [pc, #92]	; (8004f58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004efc:	f7ff fe94 	bl	8004c28 <LL_ADC_IsEnabled>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	bf0c      	ite	eq
 8004f06:	2301      	moveq	r3, #1
 8004f08:	2300      	movne	r3, #0
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d010      	beq.n	8004f32 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	4b11      	ldr	r3, [pc, #68]	; (8004f5c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004f16:	4013      	ands	r3, r2
 8004f18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f1a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f1c:	e009      	b.n	8004f32 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f22:	f043 0220 	orr.w	r2, r3, #32
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004f30:	e000      	b.n	8004f34 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f32:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004f3c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	377c      	adds	r7, #124	; 0x7c
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd90      	pop	{r4, r7, pc}
 8004f48:	40022000 	.word	0x40022000
 8004f4c:	40022100 	.word	0x40022100
 8004f50:	40022300 	.word	0x40022300
 8004f54:	58026300 	.word	0x58026300
 8004f58:	58026000 	.word	0x58026000
 8004f5c:	fffff0e0 	.word	0xfffff0e0

08004f60 <__NVIC_SetPriorityGrouping>:
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f003 0307 	and.w	r3, r3, #7
 8004f6e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f70:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <__NVIC_SetPriorityGrouping+0x40>)
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004f88:	4b06      	ldr	r3, [pc, #24]	; (8004fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f8e:	4a04      	ldr	r2, [pc, #16]	; (8004fa0 <__NVIC_SetPriorityGrouping+0x40>)
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	60d3      	str	r3, [r2, #12]
}
 8004f94:	bf00      	nop
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	e000ed00 	.word	0xe000ed00
 8004fa4:	05fa0000 	.word	0x05fa0000

08004fa8 <__NVIC_GetPriorityGrouping>:
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fac:	4b04      	ldr	r3, [pc, #16]	; (8004fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	0a1b      	lsrs	r3, r3, #8
 8004fb2:	f003 0307 	and.w	r3, r3, #7
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	e000ed00 	.word	0xe000ed00

08004fc4 <__NVIC_EnableIRQ>:
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	4603      	mov	r3, r0
 8004fcc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004fce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	db0b      	blt.n	8004fee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fd6:	88fb      	ldrh	r3, [r7, #6]
 8004fd8:	f003 021f 	and.w	r2, r3, #31
 8004fdc:	4907      	ldr	r1, [pc, #28]	; (8004ffc <__NVIC_EnableIRQ+0x38>)
 8004fde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fe2:	095b      	lsrs	r3, r3, #5
 8004fe4:	2001      	movs	r0, #1
 8004fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8004fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004fee:	bf00      	nop
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	e000e100 	.word	0xe000e100

08005000 <__NVIC_SetPriority>:
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	4603      	mov	r3, r0
 8005008:	6039      	str	r1, [r7, #0]
 800500a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800500c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005010:	2b00      	cmp	r3, #0
 8005012:	db0a      	blt.n	800502a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	b2da      	uxtb	r2, r3
 8005018:	490c      	ldr	r1, [pc, #48]	; (800504c <__NVIC_SetPriority+0x4c>)
 800501a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800501e:	0112      	lsls	r2, r2, #4
 8005020:	b2d2      	uxtb	r2, r2
 8005022:	440b      	add	r3, r1
 8005024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005028:	e00a      	b.n	8005040 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	b2da      	uxtb	r2, r3
 800502e:	4908      	ldr	r1, [pc, #32]	; (8005050 <__NVIC_SetPriority+0x50>)
 8005030:	88fb      	ldrh	r3, [r7, #6]
 8005032:	f003 030f 	and.w	r3, r3, #15
 8005036:	3b04      	subs	r3, #4
 8005038:	0112      	lsls	r2, r2, #4
 800503a:	b2d2      	uxtb	r2, r2
 800503c:	440b      	add	r3, r1
 800503e:	761a      	strb	r2, [r3, #24]
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	e000e100 	.word	0xe000e100
 8005050:	e000ed00 	.word	0xe000ed00

08005054 <NVIC_EncodePriority>:
{
 8005054:	b480      	push	{r7}
 8005056:	b089      	sub	sp, #36	; 0x24
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f003 0307 	and.w	r3, r3, #7
 8005066:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	f1c3 0307 	rsb	r3, r3, #7
 800506e:	2b04      	cmp	r3, #4
 8005070:	bf28      	it	cs
 8005072:	2304      	movcs	r3, #4
 8005074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	3304      	adds	r3, #4
 800507a:	2b06      	cmp	r3, #6
 800507c:	d902      	bls.n	8005084 <NVIC_EncodePriority+0x30>
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	3b03      	subs	r3, #3
 8005082:	e000      	b.n	8005086 <NVIC_EncodePriority+0x32>
 8005084:	2300      	movs	r3, #0
 8005086:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005088:	f04f 32ff 	mov.w	r2, #4294967295
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	fa02 f303 	lsl.w	r3, r2, r3
 8005092:	43da      	mvns	r2, r3
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	401a      	ands	r2, r3
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800509c:	f04f 31ff 	mov.w	r1, #4294967295
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	fa01 f303 	lsl.w	r3, r1, r3
 80050a6:	43d9      	mvns	r1, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050ac:	4313      	orrs	r3, r2
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3724      	adds	r7, #36	; 0x24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
	...

080050bc <SysTick_Config>:
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050cc:	d301      	bcc.n	80050d2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80050ce:	2301      	movs	r3, #1
 80050d0:	e00f      	b.n	80050f2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050d2:	4a0a      	ldr	r2, [pc, #40]	; (80050fc <SysTick_Config+0x40>)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	3b01      	subs	r3, #1
 80050d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050da:	210f      	movs	r1, #15
 80050dc:	f04f 30ff 	mov.w	r0, #4294967295
 80050e0:	f7ff ff8e 	bl	8005000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050e4:	4b05      	ldr	r3, [pc, #20]	; (80050fc <SysTick_Config+0x40>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050ea:	4b04      	ldr	r3, [pc, #16]	; (80050fc <SysTick_Config+0x40>)
 80050ec:	2207      	movs	r2, #7
 80050ee:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	e000e010 	.word	0xe000e010

08005100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f7ff ff29 	bl	8004f60 <__NVIC_SetPriorityGrouping>
}
 800510e:	bf00      	nop
 8005110:	3708      	adds	r7, #8
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b086      	sub	sp, #24
 800511a:	af00      	add	r7, sp, #0
 800511c:	4603      	mov	r3, r0
 800511e:	60b9      	str	r1, [r7, #8]
 8005120:	607a      	str	r2, [r7, #4]
 8005122:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005124:	f7ff ff40 	bl	8004fa8 <__NVIC_GetPriorityGrouping>
 8005128:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	68b9      	ldr	r1, [r7, #8]
 800512e:	6978      	ldr	r0, [r7, #20]
 8005130:	f7ff ff90 	bl	8005054 <NVIC_EncodePriority>
 8005134:	4602      	mov	r2, r0
 8005136:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800513a:	4611      	mov	r1, r2
 800513c:	4618      	mov	r0, r3
 800513e:	f7ff ff5f 	bl	8005000 <__NVIC_SetPriority>
}
 8005142:	bf00      	nop
 8005144:	3718      	adds	r7, #24
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b082      	sub	sp, #8
 800514e:	af00      	add	r7, sp, #0
 8005150:	4603      	mov	r3, r0
 8005152:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005154:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005158:	4618      	mov	r0, r3
 800515a:	f7ff ff33 	bl	8004fc4 <__NVIC_EnableIRQ>
}
 800515e:	bf00      	nop
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b082      	sub	sp, #8
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7ff ffa4 	bl	80050bc <SysTick_Config>
 8005174:	4603      	mov	r3, r0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
	...

08005180 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005188:	f7fe f954 	bl	8003434 <HAL_GetTick>
 800518c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e316      	b.n	80057c6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a66      	ldr	r2, [pc, #408]	; (8005338 <HAL_DMA_Init+0x1b8>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d04a      	beq.n	8005238 <HAL_DMA_Init+0xb8>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a65      	ldr	r2, [pc, #404]	; (800533c <HAL_DMA_Init+0x1bc>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d045      	beq.n	8005238 <HAL_DMA_Init+0xb8>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a63      	ldr	r2, [pc, #396]	; (8005340 <HAL_DMA_Init+0x1c0>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d040      	beq.n	8005238 <HAL_DMA_Init+0xb8>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a62      	ldr	r2, [pc, #392]	; (8005344 <HAL_DMA_Init+0x1c4>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d03b      	beq.n	8005238 <HAL_DMA_Init+0xb8>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a60      	ldr	r2, [pc, #384]	; (8005348 <HAL_DMA_Init+0x1c8>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d036      	beq.n	8005238 <HAL_DMA_Init+0xb8>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a5f      	ldr	r2, [pc, #380]	; (800534c <HAL_DMA_Init+0x1cc>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d031      	beq.n	8005238 <HAL_DMA_Init+0xb8>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a5d      	ldr	r2, [pc, #372]	; (8005350 <HAL_DMA_Init+0x1d0>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d02c      	beq.n	8005238 <HAL_DMA_Init+0xb8>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a5c      	ldr	r2, [pc, #368]	; (8005354 <HAL_DMA_Init+0x1d4>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d027      	beq.n	8005238 <HAL_DMA_Init+0xb8>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a5a      	ldr	r2, [pc, #360]	; (8005358 <HAL_DMA_Init+0x1d8>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d022      	beq.n	8005238 <HAL_DMA_Init+0xb8>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a59      	ldr	r2, [pc, #356]	; (800535c <HAL_DMA_Init+0x1dc>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d01d      	beq.n	8005238 <HAL_DMA_Init+0xb8>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a57      	ldr	r2, [pc, #348]	; (8005360 <HAL_DMA_Init+0x1e0>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d018      	beq.n	8005238 <HAL_DMA_Init+0xb8>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a56      	ldr	r2, [pc, #344]	; (8005364 <HAL_DMA_Init+0x1e4>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d013      	beq.n	8005238 <HAL_DMA_Init+0xb8>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a54      	ldr	r2, [pc, #336]	; (8005368 <HAL_DMA_Init+0x1e8>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d00e      	beq.n	8005238 <HAL_DMA_Init+0xb8>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a53      	ldr	r2, [pc, #332]	; (800536c <HAL_DMA_Init+0x1ec>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d009      	beq.n	8005238 <HAL_DMA_Init+0xb8>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a51      	ldr	r2, [pc, #324]	; (8005370 <HAL_DMA_Init+0x1f0>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d004      	beq.n	8005238 <HAL_DMA_Init+0xb8>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a50      	ldr	r2, [pc, #320]	; (8005374 <HAL_DMA_Init+0x1f4>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d101      	bne.n	800523c <HAL_DMA_Init+0xbc>
 8005238:	2301      	movs	r3, #1
 800523a:	e000      	b.n	800523e <HAL_DMA_Init+0xbe>
 800523c:	2300      	movs	r3, #0
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 813b 	beq.w	80054ba <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2202      	movs	r2, #2
 8005248:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a37      	ldr	r2, [pc, #220]	; (8005338 <HAL_DMA_Init+0x1b8>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d04a      	beq.n	80052f4 <HAL_DMA_Init+0x174>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a36      	ldr	r2, [pc, #216]	; (800533c <HAL_DMA_Init+0x1bc>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d045      	beq.n	80052f4 <HAL_DMA_Init+0x174>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a34      	ldr	r2, [pc, #208]	; (8005340 <HAL_DMA_Init+0x1c0>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d040      	beq.n	80052f4 <HAL_DMA_Init+0x174>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a33      	ldr	r2, [pc, #204]	; (8005344 <HAL_DMA_Init+0x1c4>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d03b      	beq.n	80052f4 <HAL_DMA_Init+0x174>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a31      	ldr	r2, [pc, #196]	; (8005348 <HAL_DMA_Init+0x1c8>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d036      	beq.n	80052f4 <HAL_DMA_Init+0x174>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a30      	ldr	r2, [pc, #192]	; (800534c <HAL_DMA_Init+0x1cc>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d031      	beq.n	80052f4 <HAL_DMA_Init+0x174>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a2e      	ldr	r2, [pc, #184]	; (8005350 <HAL_DMA_Init+0x1d0>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d02c      	beq.n	80052f4 <HAL_DMA_Init+0x174>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a2d      	ldr	r2, [pc, #180]	; (8005354 <HAL_DMA_Init+0x1d4>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d027      	beq.n	80052f4 <HAL_DMA_Init+0x174>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a2b      	ldr	r2, [pc, #172]	; (8005358 <HAL_DMA_Init+0x1d8>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d022      	beq.n	80052f4 <HAL_DMA_Init+0x174>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a2a      	ldr	r2, [pc, #168]	; (800535c <HAL_DMA_Init+0x1dc>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d01d      	beq.n	80052f4 <HAL_DMA_Init+0x174>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a28      	ldr	r2, [pc, #160]	; (8005360 <HAL_DMA_Init+0x1e0>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d018      	beq.n	80052f4 <HAL_DMA_Init+0x174>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a27      	ldr	r2, [pc, #156]	; (8005364 <HAL_DMA_Init+0x1e4>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d013      	beq.n	80052f4 <HAL_DMA_Init+0x174>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a25      	ldr	r2, [pc, #148]	; (8005368 <HAL_DMA_Init+0x1e8>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d00e      	beq.n	80052f4 <HAL_DMA_Init+0x174>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a24      	ldr	r2, [pc, #144]	; (800536c <HAL_DMA_Init+0x1ec>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d009      	beq.n	80052f4 <HAL_DMA_Init+0x174>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a22      	ldr	r2, [pc, #136]	; (8005370 <HAL_DMA_Init+0x1f0>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d004      	beq.n	80052f4 <HAL_DMA_Init+0x174>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a21      	ldr	r2, [pc, #132]	; (8005374 <HAL_DMA_Init+0x1f4>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d108      	bne.n	8005306 <HAL_DMA_Init+0x186>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 0201 	bic.w	r2, r2, #1
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	e007      	b.n	8005316 <HAL_DMA_Init+0x196>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f022 0201 	bic.w	r2, r2, #1
 8005314:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005316:	e02f      	b.n	8005378 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005318:	f7fe f88c 	bl	8003434 <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b05      	cmp	r3, #5
 8005324:	d928      	bls.n	8005378 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2220      	movs	r2, #32
 800532a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2203      	movs	r2, #3
 8005330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e246      	b.n	80057c6 <HAL_DMA_Init+0x646>
 8005338:	40020010 	.word	0x40020010
 800533c:	40020028 	.word	0x40020028
 8005340:	40020040 	.word	0x40020040
 8005344:	40020058 	.word	0x40020058
 8005348:	40020070 	.word	0x40020070
 800534c:	40020088 	.word	0x40020088
 8005350:	400200a0 	.word	0x400200a0
 8005354:	400200b8 	.word	0x400200b8
 8005358:	40020410 	.word	0x40020410
 800535c:	40020428 	.word	0x40020428
 8005360:	40020440 	.word	0x40020440
 8005364:	40020458 	.word	0x40020458
 8005368:	40020470 	.word	0x40020470
 800536c:	40020488 	.word	0x40020488
 8005370:	400204a0 	.word	0x400204a0
 8005374:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1c8      	bne.n	8005318 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	4b83      	ldr	r3, [pc, #524]	; (80055a0 <HAL_DMA_Init+0x420>)
 8005392:	4013      	ands	r3, r2
 8005394:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800539e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053b6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c8:	2b04      	cmp	r3, #4
 80053ca:	d107      	bne.n	80053dc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d4:	4313      	orrs	r3, r2
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	4313      	orrs	r3, r2
 80053da:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80053dc:	4b71      	ldr	r3, [pc, #452]	; (80055a4 <HAL_DMA_Init+0x424>)
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	4b71      	ldr	r3, [pc, #452]	; (80055a8 <HAL_DMA_Init+0x428>)
 80053e2:	4013      	ands	r3, r2
 80053e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053e8:	d328      	bcc.n	800543c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	2b28      	cmp	r3, #40	; 0x28
 80053f0:	d903      	bls.n	80053fa <HAL_DMA_Init+0x27a>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	2b2e      	cmp	r3, #46	; 0x2e
 80053f8:	d917      	bls.n	800542a <HAL_DMA_Init+0x2aa>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	2b3e      	cmp	r3, #62	; 0x3e
 8005400:	d903      	bls.n	800540a <HAL_DMA_Init+0x28a>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	2b42      	cmp	r3, #66	; 0x42
 8005408:	d90f      	bls.n	800542a <HAL_DMA_Init+0x2aa>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	2b46      	cmp	r3, #70	; 0x46
 8005410:	d903      	bls.n	800541a <HAL_DMA_Init+0x29a>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	2b48      	cmp	r3, #72	; 0x48
 8005418:	d907      	bls.n	800542a <HAL_DMA_Init+0x2aa>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	2b4e      	cmp	r3, #78	; 0x4e
 8005420:	d905      	bls.n	800542e <HAL_DMA_Init+0x2ae>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	2b52      	cmp	r3, #82	; 0x52
 8005428:	d801      	bhi.n	800542e <HAL_DMA_Init+0x2ae>
 800542a:	2301      	movs	r3, #1
 800542c:	e000      	b.n	8005430 <HAL_DMA_Init+0x2b0>
 800542e:	2300      	movs	r3, #0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d003      	beq.n	800543c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800543a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	f023 0307 	bic.w	r3, r3, #7
 8005452:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	4313      	orrs	r3, r2
 800545c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005462:	2b04      	cmp	r3, #4
 8005464:	d117      	bne.n	8005496 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	4313      	orrs	r3, r2
 800546e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00e      	beq.n	8005496 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f002 f8ed 	bl	8007658 <DMA_CheckFifoParam>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d008      	beq.n	8005496 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2240      	movs	r2, #64	; 0x40
 8005488:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e197      	b.n	80057c6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f002 f828 	bl	80074f4 <DMA_CalcBaseAndBitshift>
 80054a4:	4603      	mov	r3, r0
 80054a6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ac:	f003 031f 	and.w	r3, r3, #31
 80054b0:	223f      	movs	r2, #63	; 0x3f
 80054b2:	409a      	lsls	r2, r3
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	609a      	str	r2, [r3, #8]
 80054b8:	e0cd      	b.n	8005656 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a3b      	ldr	r2, [pc, #236]	; (80055ac <HAL_DMA_Init+0x42c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d022      	beq.n	800550a <HAL_DMA_Init+0x38a>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a39      	ldr	r2, [pc, #228]	; (80055b0 <HAL_DMA_Init+0x430>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d01d      	beq.n	800550a <HAL_DMA_Init+0x38a>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a38      	ldr	r2, [pc, #224]	; (80055b4 <HAL_DMA_Init+0x434>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d018      	beq.n	800550a <HAL_DMA_Init+0x38a>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a36      	ldr	r2, [pc, #216]	; (80055b8 <HAL_DMA_Init+0x438>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d013      	beq.n	800550a <HAL_DMA_Init+0x38a>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a35      	ldr	r2, [pc, #212]	; (80055bc <HAL_DMA_Init+0x43c>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d00e      	beq.n	800550a <HAL_DMA_Init+0x38a>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a33      	ldr	r2, [pc, #204]	; (80055c0 <HAL_DMA_Init+0x440>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d009      	beq.n	800550a <HAL_DMA_Init+0x38a>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a32      	ldr	r2, [pc, #200]	; (80055c4 <HAL_DMA_Init+0x444>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d004      	beq.n	800550a <HAL_DMA_Init+0x38a>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a30      	ldr	r2, [pc, #192]	; (80055c8 <HAL_DMA_Init+0x448>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d101      	bne.n	800550e <HAL_DMA_Init+0x38e>
 800550a:	2301      	movs	r3, #1
 800550c:	e000      	b.n	8005510 <HAL_DMA_Init+0x390>
 800550e:	2300      	movs	r3, #0
 8005510:	2b00      	cmp	r3, #0
 8005512:	f000 8097 	beq.w	8005644 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a24      	ldr	r2, [pc, #144]	; (80055ac <HAL_DMA_Init+0x42c>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d021      	beq.n	8005564 <HAL_DMA_Init+0x3e4>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a22      	ldr	r2, [pc, #136]	; (80055b0 <HAL_DMA_Init+0x430>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d01c      	beq.n	8005564 <HAL_DMA_Init+0x3e4>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a21      	ldr	r2, [pc, #132]	; (80055b4 <HAL_DMA_Init+0x434>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d017      	beq.n	8005564 <HAL_DMA_Init+0x3e4>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a1f      	ldr	r2, [pc, #124]	; (80055b8 <HAL_DMA_Init+0x438>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d012      	beq.n	8005564 <HAL_DMA_Init+0x3e4>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a1e      	ldr	r2, [pc, #120]	; (80055bc <HAL_DMA_Init+0x43c>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d00d      	beq.n	8005564 <HAL_DMA_Init+0x3e4>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a1c      	ldr	r2, [pc, #112]	; (80055c0 <HAL_DMA_Init+0x440>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d008      	beq.n	8005564 <HAL_DMA_Init+0x3e4>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a1b      	ldr	r2, [pc, #108]	; (80055c4 <HAL_DMA_Init+0x444>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d003      	beq.n	8005564 <HAL_DMA_Init+0x3e4>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a19      	ldr	r2, [pc, #100]	; (80055c8 <HAL_DMA_Init+0x448>)
 8005562:	4293      	cmp	r3, r2
 8005564:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2202      	movs	r2, #2
 800556a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	4b12      	ldr	r3, [pc, #72]	; (80055cc <HAL_DMA_Init+0x44c>)
 8005582:	4013      	ands	r3, r2
 8005584:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	2b40      	cmp	r3, #64	; 0x40
 800558c:	d020      	beq.n	80055d0 <HAL_DMA_Init+0x450>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	2b80      	cmp	r3, #128	; 0x80
 8005594:	d102      	bne.n	800559c <HAL_DMA_Init+0x41c>
 8005596:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800559a:	e01a      	b.n	80055d2 <HAL_DMA_Init+0x452>
 800559c:	2300      	movs	r3, #0
 800559e:	e018      	b.n	80055d2 <HAL_DMA_Init+0x452>
 80055a0:	fe10803f 	.word	0xfe10803f
 80055a4:	5c001000 	.word	0x5c001000
 80055a8:	ffff0000 	.word	0xffff0000
 80055ac:	58025408 	.word	0x58025408
 80055b0:	5802541c 	.word	0x5802541c
 80055b4:	58025430 	.word	0x58025430
 80055b8:	58025444 	.word	0x58025444
 80055bc:	58025458 	.word	0x58025458
 80055c0:	5802546c 	.word	0x5802546c
 80055c4:	58025480 	.word	0x58025480
 80055c8:	58025494 	.word	0x58025494
 80055cc:	fffe000f 	.word	0xfffe000f
 80055d0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	68d2      	ldr	r2, [r2, #12]
 80055d6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80055d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80055e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80055e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80055f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	69db      	ldr	r3, [r3, #28]
 80055f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80055f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005600:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	4313      	orrs	r3, r2
 8005606:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	461a      	mov	r2, r3
 8005616:	4b6e      	ldr	r3, [pc, #440]	; (80057d0 <HAL_DMA_Init+0x650>)
 8005618:	4413      	add	r3, r2
 800561a:	4a6e      	ldr	r2, [pc, #440]	; (80057d4 <HAL_DMA_Init+0x654>)
 800561c:	fba2 2303 	umull	r2, r3, r2, r3
 8005620:	091b      	lsrs	r3, r3, #4
 8005622:	009a      	lsls	r2, r3, #2
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f001 ff63 	bl	80074f4 <DMA_CalcBaseAndBitshift>
 800562e:	4603      	mov	r3, r0
 8005630:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005636:	f003 031f 	and.w	r3, r3, #31
 800563a:	2201      	movs	r2, #1
 800563c:	409a      	lsls	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	605a      	str	r2, [r3, #4]
 8005642:	e008      	b.n	8005656 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2240      	movs	r2, #64	; 0x40
 8005648:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2203      	movs	r2, #3
 800564e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e0b7      	b.n	80057c6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a5f      	ldr	r2, [pc, #380]	; (80057d8 <HAL_DMA_Init+0x658>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d072      	beq.n	8005746 <HAL_DMA_Init+0x5c6>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a5d      	ldr	r2, [pc, #372]	; (80057dc <HAL_DMA_Init+0x65c>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d06d      	beq.n	8005746 <HAL_DMA_Init+0x5c6>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a5c      	ldr	r2, [pc, #368]	; (80057e0 <HAL_DMA_Init+0x660>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d068      	beq.n	8005746 <HAL_DMA_Init+0x5c6>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a5a      	ldr	r2, [pc, #360]	; (80057e4 <HAL_DMA_Init+0x664>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d063      	beq.n	8005746 <HAL_DMA_Init+0x5c6>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a59      	ldr	r2, [pc, #356]	; (80057e8 <HAL_DMA_Init+0x668>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d05e      	beq.n	8005746 <HAL_DMA_Init+0x5c6>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a57      	ldr	r2, [pc, #348]	; (80057ec <HAL_DMA_Init+0x66c>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d059      	beq.n	8005746 <HAL_DMA_Init+0x5c6>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a56      	ldr	r2, [pc, #344]	; (80057f0 <HAL_DMA_Init+0x670>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d054      	beq.n	8005746 <HAL_DMA_Init+0x5c6>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a54      	ldr	r2, [pc, #336]	; (80057f4 <HAL_DMA_Init+0x674>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d04f      	beq.n	8005746 <HAL_DMA_Init+0x5c6>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a53      	ldr	r2, [pc, #332]	; (80057f8 <HAL_DMA_Init+0x678>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d04a      	beq.n	8005746 <HAL_DMA_Init+0x5c6>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a51      	ldr	r2, [pc, #324]	; (80057fc <HAL_DMA_Init+0x67c>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d045      	beq.n	8005746 <HAL_DMA_Init+0x5c6>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a50      	ldr	r2, [pc, #320]	; (8005800 <HAL_DMA_Init+0x680>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d040      	beq.n	8005746 <HAL_DMA_Init+0x5c6>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a4e      	ldr	r2, [pc, #312]	; (8005804 <HAL_DMA_Init+0x684>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d03b      	beq.n	8005746 <HAL_DMA_Init+0x5c6>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a4d      	ldr	r2, [pc, #308]	; (8005808 <HAL_DMA_Init+0x688>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d036      	beq.n	8005746 <HAL_DMA_Init+0x5c6>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a4b      	ldr	r2, [pc, #300]	; (800580c <HAL_DMA_Init+0x68c>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d031      	beq.n	8005746 <HAL_DMA_Init+0x5c6>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a4a      	ldr	r2, [pc, #296]	; (8005810 <HAL_DMA_Init+0x690>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d02c      	beq.n	8005746 <HAL_DMA_Init+0x5c6>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a48      	ldr	r2, [pc, #288]	; (8005814 <HAL_DMA_Init+0x694>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d027      	beq.n	8005746 <HAL_DMA_Init+0x5c6>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a47      	ldr	r2, [pc, #284]	; (8005818 <HAL_DMA_Init+0x698>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d022      	beq.n	8005746 <HAL_DMA_Init+0x5c6>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a45      	ldr	r2, [pc, #276]	; (800581c <HAL_DMA_Init+0x69c>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d01d      	beq.n	8005746 <HAL_DMA_Init+0x5c6>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a44      	ldr	r2, [pc, #272]	; (8005820 <HAL_DMA_Init+0x6a0>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d018      	beq.n	8005746 <HAL_DMA_Init+0x5c6>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a42      	ldr	r2, [pc, #264]	; (8005824 <HAL_DMA_Init+0x6a4>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d013      	beq.n	8005746 <HAL_DMA_Init+0x5c6>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a41      	ldr	r2, [pc, #260]	; (8005828 <HAL_DMA_Init+0x6a8>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d00e      	beq.n	8005746 <HAL_DMA_Init+0x5c6>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a3f      	ldr	r2, [pc, #252]	; (800582c <HAL_DMA_Init+0x6ac>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d009      	beq.n	8005746 <HAL_DMA_Init+0x5c6>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a3e      	ldr	r2, [pc, #248]	; (8005830 <HAL_DMA_Init+0x6b0>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d004      	beq.n	8005746 <HAL_DMA_Init+0x5c6>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a3c      	ldr	r2, [pc, #240]	; (8005834 <HAL_DMA_Init+0x6b4>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d101      	bne.n	800574a <HAL_DMA_Init+0x5ca>
 8005746:	2301      	movs	r3, #1
 8005748:	e000      	b.n	800574c <HAL_DMA_Init+0x5cc>
 800574a:	2300      	movs	r3, #0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d032      	beq.n	80057b6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f001 fffd 	bl	8007750 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	2b80      	cmp	r3, #128	; 0x80
 800575c:	d102      	bne.n	8005764 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800576c:	b2d2      	uxtb	r2, r2
 800576e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005778:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d010      	beq.n	80057a4 <HAL_DMA_Init+0x624>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	2b08      	cmp	r3, #8
 8005788:	d80c      	bhi.n	80057a4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f002 f87a 	bl	8007884 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005794:	2200      	movs	r2, #0
 8005796:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80057a0:	605a      	str	r2, [r3, #4]
 80057a2:	e008      	b.n	80057b6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3718      	adds	r7, #24
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	a7fdabf8 	.word	0xa7fdabf8
 80057d4:	cccccccd 	.word	0xcccccccd
 80057d8:	40020010 	.word	0x40020010
 80057dc:	40020028 	.word	0x40020028
 80057e0:	40020040 	.word	0x40020040
 80057e4:	40020058 	.word	0x40020058
 80057e8:	40020070 	.word	0x40020070
 80057ec:	40020088 	.word	0x40020088
 80057f0:	400200a0 	.word	0x400200a0
 80057f4:	400200b8 	.word	0x400200b8
 80057f8:	40020410 	.word	0x40020410
 80057fc:	40020428 	.word	0x40020428
 8005800:	40020440 	.word	0x40020440
 8005804:	40020458 	.word	0x40020458
 8005808:	40020470 	.word	0x40020470
 800580c:	40020488 	.word	0x40020488
 8005810:	400204a0 	.word	0x400204a0
 8005814:	400204b8 	.word	0x400204b8
 8005818:	58025408 	.word	0x58025408
 800581c:	5802541c 	.word	0x5802541c
 8005820:	58025430 	.word	0x58025430
 8005824:	58025444 	.word	0x58025444
 8005828:	58025458 	.word	0x58025458
 800582c:	5802546c 	.word	0x5802546c
 8005830:	58025480 	.word	0x58025480
 8005834:	58025494 	.word	0x58025494

08005838 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
 8005844:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005846:	2300      	movs	r3, #0
 8005848:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d101      	bne.n	8005854 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e226      	b.n	8005ca2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800585a:	2b01      	cmp	r3, #1
 800585c:	d101      	bne.n	8005862 <HAL_DMA_Start_IT+0x2a>
 800585e:	2302      	movs	r3, #2
 8005860:	e21f      	b.n	8005ca2 <HAL_DMA_Start_IT+0x46a>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b01      	cmp	r3, #1
 8005874:	f040 820a 	bne.w	8005c8c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2202      	movs	r2, #2
 800587c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a68      	ldr	r2, [pc, #416]	; (8005a2c <HAL_DMA_Start_IT+0x1f4>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d04a      	beq.n	8005926 <HAL_DMA_Start_IT+0xee>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a66      	ldr	r2, [pc, #408]	; (8005a30 <HAL_DMA_Start_IT+0x1f8>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d045      	beq.n	8005926 <HAL_DMA_Start_IT+0xee>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a65      	ldr	r2, [pc, #404]	; (8005a34 <HAL_DMA_Start_IT+0x1fc>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d040      	beq.n	8005926 <HAL_DMA_Start_IT+0xee>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a63      	ldr	r2, [pc, #396]	; (8005a38 <HAL_DMA_Start_IT+0x200>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d03b      	beq.n	8005926 <HAL_DMA_Start_IT+0xee>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a62      	ldr	r2, [pc, #392]	; (8005a3c <HAL_DMA_Start_IT+0x204>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d036      	beq.n	8005926 <HAL_DMA_Start_IT+0xee>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a60      	ldr	r2, [pc, #384]	; (8005a40 <HAL_DMA_Start_IT+0x208>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d031      	beq.n	8005926 <HAL_DMA_Start_IT+0xee>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a5f      	ldr	r2, [pc, #380]	; (8005a44 <HAL_DMA_Start_IT+0x20c>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d02c      	beq.n	8005926 <HAL_DMA_Start_IT+0xee>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a5d      	ldr	r2, [pc, #372]	; (8005a48 <HAL_DMA_Start_IT+0x210>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d027      	beq.n	8005926 <HAL_DMA_Start_IT+0xee>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a5c      	ldr	r2, [pc, #368]	; (8005a4c <HAL_DMA_Start_IT+0x214>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d022      	beq.n	8005926 <HAL_DMA_Start_IT+0xee>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a5a      	ldr	r2, [pc, #360]	; (8005a50 <HAL_DMA_Start_IT+0x218>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d01d      	beq.n	8005926 <HAL_DMA_Start_IT+0xee>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a59      	ldr	r2, [pc, #356]	; (8005a54 <HAL_DMA_Start_IT+0x21c>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d018      	beq.n	8005926 <HAL_DMA_Start_IT+0xee>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a57      	ldr	r2, [pc, #348]	; (8005a58 <HAL_DMA_Start_IT+0x220>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d013      	beq.n	8005926 <HAL_DMA_Start_IT+0xee>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a56      	ldr	r2, [pc, #344]	; (8005a5c <HAL_DMA_Start_IT+0x224>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d00e      	beq.n	8005926 <HAL_DMA_Start_IT+0xee>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a54      	ldr	r2, [pc, #336]	; (8005a60 <HAL_DMA_Start_IT+0x228>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d009      	beq.n	8005926 <HAL_DMA_Start_IT+0xee>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a53      	ldr	r2, [pc, #332]	; (8005a64 <HAL_DMA_Start_IT+0x22c>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d004      	beq.n	8005926 <HAL_DMA_Start_IT+0xee>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a51      	ldr	r2, [pc, #324]	; (8005a68 <HAL_DMA_Start_IT+0x230>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d108      	bne.n	8005938 <HAL_DMA_Start_IT+0x100>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 0201 	bic.w	r2, r2, #1
 8005934:	601a      	str	r2, [r3, #0]
 8005936:	e007      	b.n	8005948 <HAL_DMA_Start_IT+0x110>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 0201 	bic.w	r2, r2, #1
 8005946:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	68b9      	ldr	r1, [r7, #8]
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f001 fc24 	bl	800719c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a34      	ldr	r2, [pc, #208]	; (8005a2c <HAL_DMA_Start_IT+0x1f4>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d04a      	beq.n	80059f4 <HAL_DMA_Start_IT+0x1bc>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a33      	ldr	r2, [pc, #204]	; (8005a30 <HAL_DMA_Start_IT+0x1f8>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d045      	beq.n	80059f4 <HAL_DMA_Start_IT+0x1bc>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a31      	ldr	r2, [pc, #196]	; (8005a34 <HAL_DMA_Start_IT+0x1fc>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d040      	beq.n	80059f4 <HAL_DMA_Start_IT+0x1bc>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a30      	ldr	r2, [pc, #192]	; (8005a38 <HAL_DMA_Start_IT+0x200>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d03b      	beq.n	80059f4 <HAL_DMA_Start_IT+0x1bc>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a2e      	ldr	r2, [pc, #184]	; (8005a3c <HAL_DMA_Start_IT+0x204>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d036      	beq.n	80059f4 <HAL_DMA_Start_IT+0x1bc>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a2d      	ldr	r2, [pc, #180]	; (8005a40 <HAL_DMA_Start_IT+0x208>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d031      	beq.n	80059f4 <HAL_DMA_Start_IT+0x1bc>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a2b      	ldr	r2, [pc, #172]	; (8005a44 <HAL_DMA_Start_IT+0x20c>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d02c      	beq.n	80059f4 <HAL_DMA_Start_IT+0x1bc>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a2a      	ldr	r2, [pc, #168]	; (8005a48 <HAL_DMA_Start_IT+0x210>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d027      	beq.n	80059f4 <HAL_DMA_Start_IT+0x1bc>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a28      	ldr	r2, [pc, #160]	; (8005a4c <HAL_DMA_Start_IT+0x214>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d022      	beq.n	80059f4 <HAL_DMA_Start_IT+0x1bc>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a27      	ldr	r2, [pc, #156]	; (8005a50 <HAL_DMA_Start_IT+0x218>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d01d      	beq.n	80059f4 <HAL_DMA_Start_IT+0x1bc>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a25      	ldr	r2, [pc, #148]	; (8005a54 <HAL_DMA_Start_IT+0x21c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d018      	beq.n	80059f4 <HAL_DMA_Start_IT+0x1bc>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a24      	ldr	r2, [pc, #144]	; (8005a58 <HAL_DMA_Start_IT+0x220>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d013      	beq.n	80059f4 <HAL_DMA_Start_IT+0x1bc>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a22      	ldr	r2, [pc, #136]	; (8005a5c <HAL_DMA_Start_IT+0x224>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d00e      	beq.n	80059f4 <HAL_DMA_Start_IT+0x1bc>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a21      	ldr	r2, [pc, #132]	; (8005a60 <HAL_DMA_Start_IT+0x228>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d009      	beq.n	80059f4 <HAL_DMA_Start_IT+0x1bc>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a1f      	ldr	r2, [pc, #124]	; (8005a64 <HAL_DMA_Start_IT+0x22c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d004      	beq.n	80059f4 <HAL_DMA_Start_IT+0x1bc>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a1e      	ldr	r2, [pc, #120]	; (8005a68 <HAL_DMA_Start_IT+0x230>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d101      	bne.n	80059f8 <HAL_DMA_Start_IT+0x1c0>
 80059f4:	2301      	movs	r3, #1
 80059f6:	e000      	b.n	80059fa <HAL_DMA_Start_IT+0x1c2>
 80059f8:	2300      	movs	r3, #0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d036      	beq.n	8005a6c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f023 021e 	bic.w	r2, r3, #30
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f042 0216 	orr.w	r2, r2, #22
 8005a10:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d03e      	beq.n	8005a98 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f042 0208 	orr.w	r2, r2, #8
 8005a28:	601a      	str	r2, [r3, #0]
 8005a2a:	e035      	b.n	8005a98 <HAL_DMA_Start_IT+0x260>
 8005a2c:	40020010 	.word	0x40020010
 8005a30:	40020028 	.word	0x40020028
 8005a34:	40020040 	.word	0x40020040
 8005a38:	40020058 	.word	0x40020058
 8005a3c:	40020070 	.word	0x40020070
 8005a40:	40020088 	.word	0x40020088
 8005a44:	400200a0 	.word	0x400200a0
 8005a48:	400200b8 	.word	0x400200b8
 8005a4c:	40020410 	.word	0x40020410
 8005a50:	40020428 	.word	0x40020428
 8005a54:	40020440 	.word	0x40020440
 8005a58:	40020458 	.word	0x40020458
 8005a5c:	40020470 	.word	0x40020470
 8005a60:	40020488 	.word	0x40020488
 8005a64:	400204a0 	.word	0x400204a0
 8005a68:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f023 020e 	bic.w	r2, r3, #14
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f042 020a 	orr.w	r2, r2, #10
 8005a7e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d007      	beq.n	8005a98 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f042 0204 	orr.w	r2, r2, #4
 8005a96:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a83      	ldr	r2, [pc, #524]	; (8005cac <HAL_DMA_Start_IT+0x474>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d072      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a82      	ldr	r2, [pc, #520]	; (8005cb0 <HAL_DMA_Start_IT+0x478>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d06d      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a80      	ldr	r2, [pc, #512]	; (8005cb4 <HAL_DMA_Start_IT+0x47c>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d068      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a7f      	ldr	r2, [pc, #508]	; (8005cb8 <HAL_DMA_Start_IT+0x480>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d063      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a7d      	ldr	r2, [pc, #500]	; (8005cbc <HAL_DMA_Start_IT+0x484>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d05e      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a7c      	ldr	r2, [pc, #496]	; (8005cc0 <HAL_DMA_Start_IT+0x488>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d059      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a7a      	ldr	r2, [pc, #488]	; (8005cc4 <HAL_DMA_Start_IT+0x48c>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d054      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a79      	ldr	r2, [pc, #484]	; (8005cc8 <HAL_DMA_Start_IT+0x490>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d04f      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a77      	ldr	r2, [pc, #476]	; (8005ccc <HAL_DMA_Start_IT+0x494>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d04a      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a76      	ldr	r2, [pc, #472]	; (8005cd0 <HAL_DMA_Start_IT+0x498>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d045      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a74      	ldr	r2, [pc, #464]	; (8005cd4 <HAL_DMA_Start_IT+0x49c>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d040      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a73      	ldr	r2, [pc, #460]	; (8005cd8 <HAL_DMA_Start_IT+0x4a0>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d03b      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a71      	ldr	r2, [pc, #452]	; (8005cdc <HAL_DMA_Start_IT+0x4a4>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d036      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a70      	ldr	r2, [pc, #448]	; (8005ce0 <HAL_DMA_Start_IT+0x4a8>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d031      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a6e      	ldr	r2, [pc, #440]	; (8005ce4 <HAL_DMA_Start_IT+0x4ac>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d02c      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a6d      	ldr	r2, [pc, #436]	; (8005ce8 <HAL_DMA_Start_IT+0x4b0>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d027      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a6b      	ldr	r2, [pc, #428]	; (8005cec <HAL_DMA_Start_IT+0x4b4>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d022      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a6a      	ldr	r2, [pc, #424]	; (8005cf0 <HAL_DMA_Start_IT+0x4b8>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d01d      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a68      	ldr	r2, [pc, #416]	; (8005cf4 <HAL_DMA_Start_IT+0x4bc>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d018      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a67      	ldr	r2, [pc, #412]	; (8005cf8 <HAL_DMA_Start_IT+0x4c0>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d013      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a65      	ldr	r2, [pc, #404]	; (8005cfc <HAL_DMA_Start_IT+0x4c4>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d00e      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a64      	ldr	r2, [pc, #400]	; (8005d00 <HAL_DMA_Start_IT+0x4c8>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d009      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a62      	ldr	r2, [pc, #392]	; (8005d04 <HAL_DMA_Start_IT+0x4cc>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d004      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a61      	ldr	r2, [pc, #388]	; (8005d08 <HAL_DMA_Start_IT+0x4d0>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d101      	bne.n	8005b8c <HAL_DMA_Start_IT+0x354>
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e000      	b.n	8005b8e <HAL_DMA_Start_IT+0x356>
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d01a      	beq.n	8005bc8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d007      	beq.n	8005bb0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005baa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bae:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d007      	beq.n	8005bc8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bc6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a37      	ldr	r2, [pc, #220]	; (8005cac <HAL_DMA_Start_IT+0x474>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d04a      	beq.n	8005c68 <HAL_DMA_Start_IT+0x430>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a36      	ldr	r2, [pc, #216]	; (8005cb0 <HAL_DMA_Start_IT+0x478>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d045      	beq.n	8005c68 <HAL_DMA_Start_IT+0x430>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a34      	ldr	r2, [pc, #208]	; (8005cb4 <HAL_DMA_Start_IT+0x47c>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d040      	beq.n	8005c68 <HAL_DMA_Start_IT+0x430>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a33      	ldr	r2, [pc, #204]	; (8005cb8 <HAL_DMA_Start_IT+0x480>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d03b      	beq.n	8005c68 <HAL_DMA_Start_IT+0x430>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a31      	ldr	r2, [pc, #196]	; (8005cbc <HAL_DMA_Start_IT+0x484>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d036      	beq.n	8005c68 <HAL_DMA_Start_IT+0x430>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a30      	ldr	r2, [pc, #192]	; (8005cc0 <HAL_DMA_Start_IT+0x488>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d031      	beq.n	8005c68 <HAL_DMA_Start_IT+0x430>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a2e      	ldr	r2, [pc, #184]	; (8005cc4 <HAL_DMA_Start_IT+0x48c>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d02c      	beq.n	8005c68 <HAL_DMA_Start_IT+0x430>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a2d      	ldr	r2, [pc, #180]	; (8005cc8 <HAL_DMA_Start_IT+0x490>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d027      	beq.n	8005c68 <HAL_DMA_Start_IT+0x430>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a2b      	ldr	r2, [pc, #172]	; (8005ccc <HAL_DMA_Start_IT+0x494>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d022      	beq.n	8005c68 <HAL_DMA_Start_IT+0x430>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a2a      	ldr	r2, [pc, #168]	; (8005cd0 <HAL_DMA_Start_IT+0x498>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d01d      	beq.n	8005c68 <HAL_DMA_Start_IT+0x430>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a28      	ldr	r2, [pc, #160]	; (8005cd4 <HAL_DMA_Start_IT+0x49c>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d018      	beq.n	8005c68 <HAL_DMA_Start_IT+0x430>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a27      	ldr	r2, [pc, #156]	; (8005cd8 <HAL_DMA_Start_IT+0x4a0>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d013      	beq.n	8005c68 <HAL_DMA_Start_IT+0x430>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a25      	ldr	r2, [pc, #148]	; (8005cdc <HAL_DMA_Start_IT+0x4a4>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d00e      	beq.n	8005c68 <HAL_DMA_Start_IT+0x430>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a24      	ldr	r2, [pc, #144]	; (8005ce0 <HAL_DMA_Start_IT+0x4a8>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d009      	beq.n	8005c68 <HAL_DMA_Start_IT+0x430>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a22      	ldr	r2, [pc, #136]	; (8005ce4 <HAL_DMA_Start_IT+0x4ac>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d004      	beq.n	8005c68 <HAL_DMA_Start_IT+0x430>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a21      	ldr	r2, [pc, #132]	; (8005ce8 <HAL_DMA_Start_IT+0x4b0>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d108      	bne.n	8005c7a <HAL_DMA_Start_IT+0x442>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f042 0201 	orr.w	r2, r2, #1
 8005c76:	601a      	str	r2, [r3, #0]
 8005c78:	e012      	b.n	8005ca0 <HAL_DMA_Start_IT+0x468>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f042 0201 	orr.w	r2, r2, #1
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	e009      	b.n	8005ca0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c92:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3718      	adds	r7, #24
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	40020010 	.word	0x40020010
 8005cb0:	40020028 	.word	0x40020028
 8005cb4:	40020040 	.word	0x40020040
 8005cb8:	40020058 	.word	0x40020058
 8005cbc:	40020070 	.word	0x40020070
 8005cc0:	40020088 	.word	0x40020088
 8005cc4:	400200a0 	.word	0x400200a0
 8005cc8:	400200b8 	.word	0x400200b8
 8005ccc:	40020410 	.word	0x40020410
 8005cd0:	40020428 	.word	0x40020428
 8005cd4:	40020440 	.word	0x40020440
 8005cd8:	40020458 	.word	0x40020458
 8005cdc:	40020470 	.word	0x40020470
 8005ce0:	40020488 	.word	0x40020488
 8005ce4:	400204a0 	.word	0x400204a0
 8005ce8:	400204b8 	.word	0x400204b8
 8005cec:	58025408 	.word	0x58025408
 8005cf0:	5802541c 	.word	0x5802541c
 8005cf4:	58025430 	.word	0x58025430
 8005cf8:	58025444 	.word	0x58025444
 8005cfc:	58025458 	.word	0x58025458
 8005d00:	5802546c 	.word	0x5802546c
 8005d04:	58025480 	.word	0x58025480
 8005d08:	58025494 	.word	0x58025494

08005d0c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b086      	sub	sp, #24
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005d14:	f7fd fb8e 	bl	8003434 <HAL_GetTick>
 8005d18:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d101      	bne.n	8005d24 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e2dc      	b.n	80062de <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d008      	beq.n	8005d42 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2280      	movs	r2, #128	; 0x80
 8005d34:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e2cd      	b.n	80062de <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a76      	ldr	r2, [pc, #472]	; (8005f20 <HAL_DMA_Abort+0x214>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d04a      	beq.n	8005de2 <HAL_DMA_Abort+0xd6>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a74      	ldr	r2, [pc, #464]	; (8005f24 <HAL_DMA_Abort+0x218>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d045      	beq.n	8005de2 <HAL_DMA_Abort+0xd6>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a73      	ldr	r2, [pc, #460]	; (8005f28 <HAL_DMA_Abort+0x21c>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d040      	beq.n	8005de2 <HAL_DMA_Abort+0xd6>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a71      	ldr	r2, [pc, #452]	; (8005f2c <HAL_DMA_Abort+0x220>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d03b      	beq.n	8005de2 <HAL_DMA_Abort+0xd6>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a70      	ldr	r2, [pc, #448]	; (8005f30 <HAL_DMA_Abort+0x224>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d036      	beq.n	8005de2 <HAL_DMA_Abort+0xd6>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a6e      	ldr	r2, [pc, #440]	; (8005f34 <HAL_DMA_Abort+0x228>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d031      	beq.n	8005de2 <HAL_DMA_Abort+0xd6>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a6d      	ldr	r2, [pc, #436]	; (8005f38 <HAL_DMA_Abort+0x22c>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d02c      	beq.n	8005de2 <HAL_DMA_Abort+0xd6>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a6b      	ldr	r2, [pc, #428]	; (8005f3c <HAL_DMA_Abort+0x230>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d027      	beq.n	8005de2 <HAL_DMA_Abort+0xd6>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a6a      	ldr	r2, [pc, #424]	; (8005f40 <HAL_DMA_Abort+0x234>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d022      	beq.n	8005de2 <HAL_DMA_Abort+0xd6>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a68      	ldr	r2, [pc, #416]	; (8005f44 <HAL_DMA_Abort+0x238>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d01d      	beq.n	8005de2 <HAL_DMA_Abort+0xd6>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a67      	ldr	r2, [pc, #412]	; (8005f48 <HAL_DMA_Abort+0x23c>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d018      	beq.n	8005de2 <HAL_DMA_Abort+0xd6>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a65      	ldr	r2, [pc, #404]	; (8005f4c <HAL_DMA_Abort+0x240>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d013      	beq.n	8005de2 <HAL_DMA_Abort+0xd6>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a64      	ldr	r2, [pc, #400]	; (8005f50 <HAL_DMA_Abort+0x244>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d00e      	beq.n	8005de2 <HAL_DMA_Abort+0xd6>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a62      	ldr	r2, [pc, #392]	; (8005f54 <HAL_DMA_Abort+0x248>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d009      	beq.n	8005de2 <HAL_DMA_Abort+0xd6>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a61      	ldr	r2, [pc, #388]	; (8005f58 <HAL_DMA_Abort+0x24c>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d004      	beq.n	8005de2 <HAL_DMA_Abort+0xd6>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a5f      	ldr	r2, [pc, #380]	; (8005f5c <HAL_DMA_Abort+0x250>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d101      	bne.n	8005de6 <HAL_DMA_Abort+0xda>
 8005de2:	2301      	movs	r3, #1
 8005de4:	e000      	b.n	8005de8 <HAL_DMA_Abort+0xdc>
 8005de6:	2300      	movs	r3, #0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d013      	beq.n	8005e14 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f022 021e 	bic.w	r2, r2, #30
 8005dfa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	695a      	ldr	r2, [r3, #20]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e0a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	617b      	str	r3, [r7, #20]
 8005e12:	e00a      	b.n	8005e2a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f022 020e 	bic.w	r2, r2, #14
 8005e22:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a3c      	ldr	r2, [pc, #240]	; (8005f20 <HAL_DMA_Abort+0x214>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d072      	beq.n	8005f1a <HAL_DMA_Abort+0x20e>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a3a      	ldr	r2, [pc, #232]	; (8005f24 <HAL_DMA_Abort+0x218>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d06d      	beq.n	8005f1a <HAL_DMA_Abort+0x20e>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a39      	ldr	r2, [pc, #228]	; (8005f28 <HAL_DMA_Abort+0x21c>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d068      	beq.n	8005f1a <HAL_DMA_Abort+0x20e>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a37      	ldr	r2, [pc, #220]	; (8005f2c <HAL_DMA_Abort+0x220>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d063      	beq.n	8005f1a <HAL_DMA_Abort+0x20e>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a36      	ldr	r2, [pc, #216]	; (8005f30 <HAL_DMA_Abort+0x224>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d05e      	beq.n	8005f1a <HAL_DMA_Abort+0x20e>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a34      	ldr	r2, [pc, #208]	; (8005f34 <HAL_DMA_Abort+0x228>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d059      	beq.n	8005f1a <HAL_DMA_Abort+0x20e>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a33      	ldr	r2, [pc, #204]	; (8005f38 <HAL_DMA_Abort+0x22c>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d054      	beq.n	8005f1a <HAL_DMA_Abort+0x20e>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a31      	ldr	r2, [pc, #196]	; (8005f3c <HAL_DMA_Abort+0x230>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d04f      	beq.n	8005f1a <HAL_DMA_Abort+0x20e>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a30      	ldr	r2, [pc, #192]	; (8005f40 <HAL_DMA_Abort+0x234>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d04a      	beq.n	8005f1a <HAL_DMA_Abort+0x20e>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a2e      	ldr	r2, [pc, #184]	; (8005f44 <HAL_DMA_Abort+0x238>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d045      	beq.n	8005f1a <HAL_DMA_Abort+0x20e>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a2d      	ldr	r2, [pc, #180]	; (8005f48 <HAL_DMA_Abort+0x23c>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d040      	beq.n	8005f1a <HAL_DMA_Abort+0x20e>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a2b      	ldr	r2, [pc, #172]	; (8005f4c <HAL_DMA_Abort+0x240>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d03b      	beq.n	8005f1a <HAL_DMA_Abort+0x20e>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a2a      	ldr	r2, [pc, #168]	; (8005f50 <HAL_DMA_Abort+0x244>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d036      	beq.n	8005f1a <HAL_DMA_Abort+0x20e>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a28      	ldr	r2, [pc, #160]	; (8005f54 <HAL_DMA_Abort+0x248>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d031      	beq.n	8005f1a <HAL_DMA_Abort+0x20e>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a27      	ldr	r2, [pc, #156]	; (8005f58 <HAL_DMA_Abort+0x24c>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d02c      	beq.n	8005f1a <HAL_DMA_Abort+0x20e>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a25      	ldr	r2, [pc, #148]	; (8005f5c <HAL_DMA_Abort+0x250>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d027      	beq.n	8005f1a <HAL_DMA_Abort+0x20e>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a24      	ldr	r2, [pc, #144]	; (8005f60 <HAL_DMA_Abort+0x254>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d022      	beq.n	8005f1a <HAL_DMA_Abort+0x20e>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a22      	ldr	r2, [pc, #136]	; (8005f64 <HAL_DMA_Abort+0x258>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d01d      	beq.n	8005f1a <HAL_DMA_Abort+0x20e>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a21      	ldr	r2, [pc, #132]	; (8005f68 <HAL_DMA_Abort+0x25c>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d018      	beq.n	8005f1a <HAL_DMA_Abort+0x20e>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a1f      	ldr	r2, [pc, #124]	; (8005f6c <HAL_DMA_Abort+0x260>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d013      	beq.n	8005f1a <HAL_DMA_Abort+0x20e>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a1e      	ldr	r2, [pc, #120]	; (8005f70 <HAL_DMA_Abort+0x264>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d00e      	beq.n	8005f1a <HAL_DMA_Abort+0x20e>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a1c      	ldr	r2, [pc, #112]	; (8005f74 <HAL_DMA_Abort+0x268>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d009      	beq.n	8005f1a <HAL_DMA_Abort+0x20e>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a1b      	ldr	r2, [pc, #108]	; (8005f78 <HAL_DMA_Abort+0x26c>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d004      	beq.n	8005f1a <HAL_DMA_Abort+0x20e>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a19      	ldr	r2, [pc, #100]	; (8005f7c <HAL_DMA_Abort+0x270>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d132      	bne.n	8005f80 <HAL_DMA_Abort+0x274>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e031      	b.n	8005f82 <HAL_DMA_Abort+0x276>
 8005f1e:	bf00      	nop
 8005f20:	40020010 	.word	0x40020010
 8005f24:	40020028 	.word	0x40020028
 8005f28:	40020040 	.word	0x40020040
 8005f2c:	40020058 	.word	0x40020058
 8005f30:	40020070 	.word	0x40020070
 8005f34:	40020088 	.word	0x40020088
 8005f38:	400200a0 	.word	0x400200a0
 8005f3c:	400200b8 	.word	0x400200b8
 8005f40:	40020410 	.word	0x40020410
 8005f44:	40020428 	.word	0x40020428
 8005f48:	40020440 	.word	0x40020440
 8005f4c:	40020458 	.word	0x40020458
 8005f50:	40020470 	.word	0x40020470
 8005f54:	40020488 	.word	0x40020488
 8005f58:	400204a0 	.word	0x400204a0
 8005f5c:	400204b8 	.word	0x400204b8
 8005f60:	58025408 	.word	0x58025408
 8005f64:	5802541c 	.word	0x5802541c
 8005f68:	58025430 	.word	0x58025430
 8005f6c:	58025444 	.word	0x58025444
 8005f70:	58025458 	.word	0x58025458
 8005f74:	5802546c 	.word	0x5802546c
 8005f78:	58025480 	.word	0x58025480
 8005f7c:	58025494 	.word	0x58025494
 8005f80:	2300      	movs	r3, #0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d007      	beq.n	8005f96 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f94:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a6d      	ldr	r2, [pc, #436]	; (8006150 <HAL_DMA_Abort+0x444>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d04a      	beq.n	8006036 <HAL_DMA_Abort+0x32a>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a6b      	ldr	r2, [pc, #428]	; (8006154 <HAL_DMA_Abort+0x448>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d045      	beq.n	8006036 <HAL_DMA_Abort+0x32a>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a6a      	ldr	r2, [pc, #424]	; (8006158 <HAL_DMA_Abort+0x44c>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d040      	beq.n	8006036 <HAL_DMA_Abort+0x32a>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a68      	ldr	r2, [pc, #416]	; (800615c <HAL_DMA_Abort+0x450>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d03b      	beq.n	8006036 <HAL_DMA_Abort+0x32a>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a67      	ldr	r2, [pc, #412]	; (8006160 <HAL_DMA_Abort+0x454>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d036      	beq.n	8006036 <HAL_DMA_Abort+0x32a>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a65      	ldr	r2, [pc, #404]	; (8006164 <HAL_DMA_Abort+0x458>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d031      	beq.n	8006036 <HAL_DMA_Abort+0x32a>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a64      	ldr	r2, [pc, #400]	; (8006168 <HAL_DMA_Abort+0x45c>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d02c      	beq.n	8006036 <HAL_DMA_Abort+0x32a>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a62      	ldr	r2, [pc, #392]	; (800616c <HAL_DMA_Abort+0x460>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d027      	beq.n	8006036 <HAL_DMA_Abort+0x32a>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a61      	ldr	r2, [pc, #388]	; (8006170 <HAL_DMA_Abort+0x464>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d022      	beq.n	8006036 <HAL_DMA_Abort+0x32a>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a5f      	ldr	r2, [pc, #380]	; (8006174 <HAL_DMA_Abort+0x468>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d01d      	beq.n	8006036 <HAL_DMA_Abort+0x32a>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a5e      	ldr	r2, [pc, #376]	; (8006178 <HAL_DMA_Abort+0x46c>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d018      	beq.n	8006036 <HAL_DMA_Abort+0x32a>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a5c      	ldr	r2, [pc, #368]	; (800617c <HAL_DMA_Abort+0x470>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d013      	beq.n	8006036 <HAL_DMA_Abort+0x32a>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a5b      	ldr	r2, [pc, #364]	; (8006180 <HAL_DMA_Abort+0x474>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d00e      	beq.n	8006036 <HAL_DMA_Abort+0x32a>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a59      	ldr	r2, [pc, #356]	; (8006184 <HAL_DMA_Abort+0x478>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d009      	beq.n	8006036 <HAL_DMA_Abort+0x32a>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a58      	ldr	r2, [pc, #352]	; (8006188 <HAL_DMA_Abort+0x47c>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d004      	beq.n	8006036 <HAL_DMA_Abort+0x32a>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a56      	ldr	r2, [pc, #344]	; (800618c <HAL_DMA_Abort+0x480>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d108      	bne.n	8006048 <HAL_DMA_Abort+0x33c>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f022 0201 	bic.w	r2, r2, #1
 8006044:	601a      	str	r2, [r3, #0]
 8006046:	e007      	b.n	8006058 <HAL_DMA_Abort+0x34c>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f022 0201 	bic.w	r2, r2, #1
 8006056:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006058:	e013      	b.n	8006082 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800605a:	f7fd f9eb 	bl	8003434 <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	2b05      	cmp	r3, #5
 8006066:	d90c      	bls.n	8006082 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2220      	movs	r2, #32
 800606c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2203      	movs	r2, #3
 8006072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e12d      	b.n	80062de <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1e5      	bne.n	800605a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a2f      	ldr	r2, [pc, #188]	; (8006150 <HAL_DMA_Abort+0x444>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d04a      	beq.n	800612e <HAL_DMA_Abort+0x422>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a2d      	ldr	r2, [pc, #180]	; (8006154 <HAL_DMA_Abort+0x448>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d045      	beq.n	800612e <HAL_DMA_Abort+0x422>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a2c      	ldr	r2, [pc, #176]	; (8006158 <HAL_DMA_Abort+0x44c>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d040      	beq.n	800612e <HAL_DMA_Abort+0x422>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a2a      	ldr	r2, [pc, #168]	; (800615c <HAL_DMA_Abort+0x450>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d03b      	beq.n	800612e <HAL_DMA_Abort+0x422>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a29      	ldr	r2, [pc, #164]	; (8006160 <HAL_DMA_Abort+0x454>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d036      	beq.n	800612e <HAL_DMA_Abort+0x422>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a27      	ldr	r2, [pc, #156]	; (8006164 <HAL_DMA_Abort+0x458>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d031      	beq.n	800612e <HAL_DMA_Abort+0x422>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a26      	ldr	r2, [pc, #152]	; (8006168 <HAL_DMA_Abort+0x45c>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d02c      	beq.n	800612e <HAL_DMA_Abort+0x422>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a24      	ldr	r2, [pc, #144]	; (800616c <HAL_DMA_Abort+0x460>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d027      	beq.n	800612e <HAL_DMA_Abort+0x422>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a23      	ldr	r2, [pc, #140]	; (8006170 <HAL_DMA_Abort+0x464>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d022      	beq.n	800612e <HAL_DMA_Abort+0x422>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a21      	ldr	r2, [pc, #132]	; (8006174 <HAL_DMA_Abort+0x468>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d01d      	beq.n	800612e <HAL_DMA_Abort+0x422>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a20      	ldr	r2, [pc, #128]	; (8006178 <HAL_DMA_Abort+0x46c>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d018      	beq.n	800612e <HAL_DMA_Abort+0x422>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a1e      	ldr	r2, [pc, #120]	; (800617c <HAL_DMA_Abort+0x470>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d013      	beq.n	800612e <HAL_DMA_Abort+0x422>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a1d      	ldr	r2, [pc, #116]	; (8006180 <HAL_DMA_Abort+0x474>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d00e      	beq.n	800612e <HAL_DMA_Abort+0x422>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a1b      	ldr	r2, [pc, #108]	; (8006184 <HAL_DMA_Abort+0x478>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d009      	beq.n	800612e <HAL_DMA_Abort+0x422>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a1a      	ldr	r2, [pc, #104]	; (8006188 <HAL_DMA_Abort+0x47c>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d004      	beq.n	800612e <HAL_DMA_Abort+0x422>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a18      	ldr	r2, [pc, #96]	; (800618c <HAL_DMA_Abort+0x480>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d101      	bne.n	8006132 <HAL_DMA_Abort+0x426>
 800612e:	2301      	movs	r3, #1
 8006130:	e000      	b.n	8006134 <HAL_DMA_Abort+0x428>
 8006132:	2300      	movs	r3, #0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d02b      	beq.n	8006190 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800613c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006142:	f003 031f 	and.w	r3, r3, #31
 8006146:	223f      	movs	r2, #63	; 0x3f
 8006148:	409a      	lsls	r2, r3
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	609a      	str	r2, [r3, #8]
 800614e:	e02a      	b.n	80061a6 <HAL_DMA_Abort+0x49a>
 8006150:	40020010 	.word	0x40020010
 8006154:	40020028 	.word	0x40020028
 8006158:	40020040 	.word	0x40020040
 800615c:	40020058 	.word	0x40020058
 8006160:	40020070 	.word	0x40020070
 8006164:	40020088 	.word	0x40020088
 8006168:	400200a0 	.word	0x400200a0
 800616c:	400200b8 	.word	0x400200b8
 8006170:	40020410 	.word	0x40020410
 8006174:	40020428 	.word	0x40020428
 8006178:	40020440 	.word	0x40020440
 800617c:	40020458 	.word	0x40020458
 8006180:	40020470 	.word	0x40020470
 8006184:	40020488 	.word	0x40020488
 8006188:	400204a0 	.word	0x400204a0
 800618c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006194:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800619a:	f003 031f 	and.w	r3, r3, #31
 800619e:	2201      	movs	r2, #1
 80061a0:	409a      	lsls	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a4f      	ldr	r2, [pc, #316]	; (80062e8 <HAL_DMA_Abort+0x5dc>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d072      	beq.n	8006296 <HAL_DMA_Abort+0x58a>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a4d      	ldr	r2, [pc, #308]	; (80062ec <HAL_DMA_Abort+0x5e0>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d06d      	beq.n	8006296 <HAL_DMA_Abort+0x58a>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a4c      	ldr	r2, [pc, #304]	; (80062f0 <HAL_DMA_Abort+0x5e4>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d068      	beq.n	8006296 <HAL_DMA_Abort+0x58a>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a4a      	ldr	r2, [pc, #296]	; (80062f4 <HAL_DMA_Abort+0x5e8>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d063      	beq.n	8006296 <HAL_DMA_Abort+0x58a>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a49      	ldr	r2, [pc, #292]	; (80062f8 <HAL_DMA_Abort+0x5ec>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d05e      	beq.n	8006296 <HAL_DMA_Abort+0x58a>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a47      	ldr	r2, [pc, #284]	; (80062fc <HAL_DMA_Abort+0x5f0>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d059      	beq.n	8006296 <HAL_DMA_Abort+0x58a>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a46      	ldr	r2, [pc, #280]	; (8006300 <HAL_DMA_Abort+0x5f4>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d054      	beq.n	8006296 <HAL_DMA_Abort+0x58a>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a44      	ldr	r2, [pc, #272]	; (8006304 <HAL_DMA_Abort+0x5f8>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d04f      	beq.n	8006296 <HAL_DMA_Abort+0x58a>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a43      	ldr	r2, [pc, #268]	; (8006308 <HAL_DMA_Abort+0x5fc>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d04a      	beq.n	8006296 <HAL_DMA_Abort+0x58a>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a41      	ldr	r2, [pc, #260]	; (800630c <HAL_DMA_Abort+0x600>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d045      	beq.n	8006296 <HAL_DMA_Abort+0x58a>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a40      	ldr	r2, [pc, #256]	; (8006310 <HAL_DMA_Abort+0x604>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d040      	beq.n	8006296 <HAL_DMA_Abort+0x58a>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a3e      	ldr	r2, [pc, #248]	; (8006314 <HAL_DMA_Abort+0x608>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d03b      	beq.n	8006296 <HAL_DMA_Abort+0x58a>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a3d      	ldr	r2, [pc, #244]	; (8006318 <HAL_DMA_Abort+0x60c>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d036      	beq.n	8006296 <HAL_DMA_Abort+0x58a>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a3b      	ldr	r2, [pc, #236]	; (800631c <HAL_DMA_Abort+0x610>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d031      	beq.n	8006296 <HAL_DMA_Abort+0x58a>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a3a      	ldr	r2, [pc, #232]	; (8006320 <HAL_DMA_Abort+0x614>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d02c      	beq.n	8006296 <HAL_DMA_Abort+0x58a>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a38      	ldr	r2, [pc, #224]	; (8006324 <HAL_DMA_Abort+0x618>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d027      	beq.n	8006296 <HAL_DMA_Abort+0x58a>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a37      	ldr	r2, [pc, #220]	; (8006328 <HAL_DMA_Abort+0x61c>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d022      	beq.n	8006296 <HAL_DMA_Abort+0x58a>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a35      	ldr	r2, [pc, #212]	; (800632c <HAL_DMA_Abort+0x620>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d01d      	beq.n	8006296 <HAL_DMA_Abort+0x58a>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a34      	ldr	r2, [pc, #208]	; (8006330 <HAL_DMA_Abort+0x624>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d018      	beq.n	8006296 <HAL_DMA_Abort+0x58a>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a32      	ldr	r2, [pc, #200]	; (8006334 <HAL_DMA_Abort+0x628>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d013      	beq.n	8006296 <HAL_DMA_Abort+0x58a>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a31      	ldr	r2, [pc, #196]	; (8006338 <HAL_DMA_Abort+0x62c>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d00e      	beq.n	8006296 <HAL_DMA_Abort+0x58a>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a2f      	ldr	r2, [pc, #188]	; (800633c <HAL_DMA_Abort+0x630>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d009      	beq.n	8006296 <HAL_DMA_Abort+0x58a>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a2e      	ldr	r2, [pc, #184]	; (8006340 <HAL_DMA_Abort+0x634>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d004      	beq.n	8006296 <HAL_DMA_Abort+0x58a>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a2c      	ldr	r2, [pc, #176]	; (8006344 <HAL_DMA_Abort+0x638>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d101      	bne.n	800629a <HAL_DMA_Abort+0x58e>
 8006296:	2301      	movs	r3, #1
 8006298:	e000      	b.n	800629c <HAL_DMA_Abort+0x590>
 800629a:	2300      	movs	r3, #0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d015      	beq.n	80062cc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80062a8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00c      	beq.n	80062cc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062c0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80062ca:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3718      	adds	r7, #24
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	40020010 	.word	0x40020010
 80062ec:	40020028 	.word	0x40020028
 80062f0:	40020040 	.word	0x40020040
 80062f4:	40020058 	.word	0x40020058
 80062f8:	40020070 	.word	0x40020070
 80062fc:	40020088 	.word	0x40020088
 8006300:	400200a0 	.word	0x400200a0
 8006304:	400200b8 	.word	0x400200b8
 8006308:	40020410 	.word	0x40020410
 800630c:	40020428 	.word	0x40020428
 8006310:	40020440 	.word	0x40020440
 8006314:	40020458 	.word	0x40020458
 8006318:	40020470 	.word	0x40020470
 800631c:	40020488 	.word	0x40020488
 8006320:	400204a0 	.word	0x400204a0
 8006324:	400204b8 	.word	0x400204b8
 8006328:	58025408 	.word	0x58025408
 800632c:	5802541c 	.word	0x5802541c
 8006330:	58025430 	.word	0x58025430
 8006334:	58025444 	.word	0x58025444
 8006338:	58025458 	.word	0x58025458
 800633c:	5802546c 	.word	0x5802546c
 8006340:	58025480 	.word	0x58025480
 8006344:	58025494 	.word	0x58025494

08006348 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b08a      	sub	sp, #40	; 0x28
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006350:	2300      	movs	r3, #0
 8006352:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006354:	4b67      	ldr	r3, [pc, #412]	; (80064f4 <HAL_DMA_IRQHandler+0x1ac>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a67      	ldr	r2, [pc, #412]	; (80064f8 <HAL_DMA_IRQHandler+0x1b0>)
 800635a:	fba2 2303 	umull	r2, r3, r2, r3
 800635e:	0a9b      	lsrs	r3, r3, #10
 8006360:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006366:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800636c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800636e:	6a3b      	ldr	r3, [r7, #32]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a5f      	ldr	r2, [pc, #380]	; (80064fc <HAL_DMA_IRQHandler+0x1b4>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d04a      	beq.n	800641a <HAL_DMA_IRQHandler+0xd2>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a5d      	ldr	r2, [pc, #372]	; (8006500 <HAL_DMA_IRQHandler+0x1b8>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d045      	beq.n	800641a <HAL_DMA_IRQHandler+0xd2>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a5c      	ldr	r2, [pc, #368]	; (8006504 <HAL_DMA_IRQHandler+0x1bc>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d040      	beq.n	800641a <HAL_DMA_IRQHandler+0xd2>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a5a      	ldr	r2, [pc, #360]	; (8006508 <HAL_DMA_IRQHandler+0x1c0>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d03b      	beq.n	800641a <HAL_DMA_IRQHandler+0xd2>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a59      	ldr	r2, [pc, #356]	; (800650c <HAL_DMA_IRQHandler+0x1c4>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d036      	beq.n	800641a <HAL_DMA_IRQHandler+0xd2>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a57      	ldr	r2, [pc, #348]	; (8006510 <HAL_DMA_IRQHandler+0x1c8>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d031      	beq.n	800641a <HAL_DMA_IRQHandler+0xd2>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a56      	ldr	r2, [pc, #344]	; (8006514 <HAL_DMA_IRQHandler+0x1cc>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d02c      	beq.n	800641a <HAL_DMA_IRQHandler+0xd2>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a54      	ldr	r2, [pc, #336]	; (8006518 <HAL_DMA_IRQHandler+0x1d0>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d027      	beq.n	800641a <HAL_DMA_IRQHandler+0xd2>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a53      	ldr	r2, [pc, #332]	; (800651c <HAL_DMA_IRQHandler+0x1d4>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d022      	beq.n	800641a <HAL_DMA_IRQHandler+0xd2>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a51      	ldr	r2, [pc, #324]	; (8006520 <HAL_DMA_IRQHandler+0x1d8>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d01d      	beq.n	800641a <HAL_DMA_IRQHandler+0xd2>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a50      	ldr	r2, [pc, #320]	; (8006524 <HAL_DMA_IRQHandler+0x1dc>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d018      	beq.n	800641a <HAL_DMA_IRQHandler+0xd2>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a4e      	ldr	r2, [pc, #312]	; (8006528 <HAL_DMA_IRQHandler+0x1e0>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d013      	beq.n	800641a <HAL_DMA_IRQHandler+0xd2>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a4d      	ldr	r2, [pc, #308]	; (800652c <HAL_DMA_IRQHandler+0x1e4>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d00e      	beq.n	800641a <HAL_DMA_IRQHandler+0xd2>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a4b      	ldr	r2, [pc, #300]	; (8006530 <HAL_DMA_IRQHandler+0x1e8>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d009      	beq.n	800641a <HAL_DMA_IRQHandler+0xd2>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a4a      	ldr	r2, [pc, #296]	; (8006534 <HAL_DMA_IRQHandler+0x1ec>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d004      	beq.n	800641a <HAL_DMA_IRQHandler+0xd2>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a48      	ldr	r2, [pc, #288]	; (8006538 <HAL_DMA_IRQHandler+0x1f0>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d101      	bne.n	800641e <HAL_DMA_IRQHandler+0xd6>
 800641a:	2301      	movs	r3, #1
 800641c:	e000      	b.n	8006420 <HAL_DMA_IRQHandler+0xd8>
 800641e:	2300      	movs	r3, #0
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 842b 	beq.w	8006c7c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800642a:	f003 031f 	and.w	r3, r3, #31
 800642e:	2208      	movs	r2, #8
 8006430:	409a      	lsls	r2, r3
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	4013      	ands	r3, r2
 8006436:	2b00      	cmp	r3, #0
 8006438:	f000 80a2 	beq.w	8006580 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a2e      	ldr	r2, [pc, #184]	; (80064fc <HAL_DMA_IRQHandler+0x1b4>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d04a      	beq.n	80064dc <HAL_DMA_IRQHandler+0x194>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a2d      	ldr	r2, [pc, #180]	; (8006500 <HAL_DMA_IRQHandler+0x1b8>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d045      	beq.n	80064dc <HAL_DMA_IRQHandler+0x194>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a2b      	ldr	r2, [pc, #172]	; (8006504 <HAL_DMA_IRQHandler+0x1bc>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d040      	beq.n	80064dc <HAL_DMA_IRQHandler+0x194>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a2a      	ldr	r2, [pc, #168]	; (8006508 <HAL_DMA_IRQHandler+0x1c0>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d03b      	beq.n	80064dc <HAL_DMA_IRQHandler+0x194>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a28      	ldr	r2, [pc, #160]	; (800650c <HAL_DMA_IRQHandler+0x1c4>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d036      	beq.n	80064dc <HAL_DMA_IRQHandler+0x194>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a27      	ldr	r2, [pc, #156]	; (8006510 <HAL_DMA_IRQHandler+0x1c8>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d031      	beq.n	80064dc <HAL_DMA_IRQHandler+0x194>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a25      	ldr	r2, [pc, #148]	; (8006514 <HAL_DMA_IRQHandler+0x1cc>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d02c      	beq.n	80064dc <HAL_DMA_IRQHandler+0x194>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a24      	ldr	r2, [pc, #144]	; (8006518 <HAL_DMA_IRQHandler+0x1d0>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d027      	beq.n	80064dc <HAL_DMA_IRQHandler+0x194>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a22      	ldr	r2, [pc, #136]	; (800651c <HAL_DMA_IRQHandler+0x1d4>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d022      	beq.n	80064dc <HAL_DMA_IRQHandler+0x194>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a21      	ldr	r2, [pc, #132]	; (8006520 <HAL_DMA_IRQHandler+0x1d8>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d01d      	beq.n	80064dc <HAL_DMA_IRQHandler+0x194>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a1f      	ldr	r2, [pc, #124]	; (8006524 <HAL_DMA_IRQHandler+0x1dc>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d018      	beq.n	80064dc <HAL_DMA_IRQHandler+0x194>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a1e      	ldr	r2, [pc, #120]	; (8006528 <HAL_DMA_IRQHandler+0x1e0>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d013      	beq.n	80064dc <HAL_DMA_IRQHandler+0x194>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a1c      	ldr	r2, [pc, #112]	; (800652c <HAL_DMA_IRQHandler+0x1e4>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d00e      	beq.n	80064dc <HAL_DMA_IRQHandler+0x194>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a1b      	ldr	r2, [pc, #108]	; (8006530 <HAL_DMA_IRQHandler+0x1e8>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d009      	beq.n	80064dc <HAL_DMA_IRQHandler+0x194>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a19      	ldr	r2, [pc, #100]	; (8006534 <HAL_DMA_IRQHandler+0x1ec>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d004      	beq.n	80064dc <HAL_DMA_IRQHandler+0x194>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a18      	ldr	r2, [pc, #96]	; (8006538 <HAL_DMA_IRQHandler+0x1f0>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d12f      	bne.n	800653c <HAL_DMA_IRQHandler+0x1f4>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 0304 	and.w	r3, r3, #4
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	bf14      	ite	ne
 80064ea:	2301      	movne	r3, #1
 80064ec:	2300      	moveq	r3, #0
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	e02e      	b.n	8006550 <HAL_DMA_IRQHandler+0x208>
 80064f2:	bf00      	nop
 80064f4:	24000030 	.word	0x24000030
 80064f8:	1b4e81b5 	.word	0x1b4e81b5
 80064fc:	40020010 	.word	0x40020010
 8006500:	40020028 	.word	0x40020028
 8006504:	40020040 	.word	0x40020040
 8006508:	40020058 	.word	0x40020058
 800650c:	40020070 	.word	0x40020070
 8006510:	40020088 	.word	0x40020088
 8006514:	400200a0 	.word	0x400200a0
 8006518:	400200b8 	.word	0x400200b8
 800651c:	40020410 	.word	0x40020410
 8006520:	40020428 	.word	0x40020428
 8006524:	40020440 	.word	0x40020440
 8006528:	40020458 	.word	0x40020458
 800652c:	40020470 	.word	0x40020470
 8006530:	40020488 	.word	0x40020488
 8006534:	400204a0 	.word	0x400204a0
 8006538:	400204b8 	.word	0x400204b8
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 0308 	and.w	r3, r3, #8
 8006546:	2b00      	cmp	r3, #0
 8006548:	bf14      	ite	ne
 800654a:	2301      	movne	r3, #1
 800654c:	2300      	moveq	r3, #0
 800654e:	b2db      	uxtb	r3, r3
 8006550:	2b00      	cmp	r3, #0
 8006552:	d015      	beq.n	8006580 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f022 0204 	bic.w	r2, r2, #4
 8006562:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006568:	f003 031f 	and.w	r3, r3, #31
 800656c:	2208      	movs	r2, #8
 800656e:	409a      	lsls	r2, r3
 8006570:	6a3b      	ldr	r3, [r7, #32]
 8006572:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006578:	f043 0201 	orr.w	r2, r3, #1
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006584:	f003 031f 	and.w	r3, r3, #31
 8006588:	69ba      	ldr	r2, [r7, #24]
 800658a:	fa22 f303 	lsr.w	r3, r2, r3
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b00      	cmp	r3, #0
 8006594:	d06e      	beq.n	8006674 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a69      	ldr	r2, [pc, #420]	; (8006740 <HAL_DMA_IRQHandler+0x3f8>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d04a      	beq.n	8006636 <HAL_DMA_IRQHandler+0x2ee>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a67      	ldr	r2, [pc, #412]	; (8006744 <HAL_DMA_IRQHandler+0x3fc>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d045      	beq.n	8006636 <HAL_DMA_IRQHandler+0x2ee>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a66      	ldr	r2, [pc, #408]	; (8006748 <HAL_DMA_IRQHandler+0x400>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d040      	beq.n	8006636 <HAL_DMA_IRQHandler+0x2ee>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a64      	ldr	r2, [pc, #400]	; (800674c <HAL_DMA_IRQHandler+0x404>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d03b      	beq.n	8006636 <HAL_DMA_IRQHandler+0x2ee>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a63      	ldr	r2, [pc, #396]	; (8006750 <HAL_DMA_IRQHandler+0x408>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d036      	beq.n	8006636 <HAL_DMA_IRQHandler+0x2ee>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a61      	ldr	r2, [pc, #388]	; (8006754 <HAL_DMA_IRQHandler+0x40c>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d031      	beq.n	8006636 <HAL_DMA_IRQHandler+0x2ee>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a60      	ldr	r2, [pc, #384]	; (8006758 <HAL_DMA_IRQHandler+0x410>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d02c      	beq.n	8006636 <HAL_DMA_IRQHandler+0x2ee>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a5e      	ldr	r2, [pc, #376]	; (800675c <HAL_DMA_IRQHandler+0x414>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d027      	beq.n	8006636 <HAL_DMA_IRQHandler+0x2ee>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a5d      	ldr	r2, [pc, #372]	; (8006760 <HAL_DMA_IRQHandler+0x418>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d022      	beq.n	8006636 <HAL_DMA_IRQHandler+0x2ee>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a5b      	ldr	r2, [pc, #364]	; (8006764 <HAL_DMA_IRQHandler+0x41c>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d01d      	beq.n	8006636 <HAL_DMA_IRQHandler+0x2ee>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a5a      	ldr	r2, [pc, #360]	; (8006768 <HAL_DMA_IRQHandler+0x420>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d018      	beq.n	8006636 <HAL_DMA_IRQHandler+0x2ee>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a58      	ldr	r2, [pc, #352]	; (800676c <HAL_DMA_IRQHandler+0x424>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d013      	beq.n	8006636 <HAL_DMA_IRQHandler+0x2ee>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a57      	ldr	r2, [pc, #348]	; (8006770 <HAL_DMA_IRQHandler+0x428>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d00e      	beq.n	8006636 <HAL_DMA_IRQHandler+0x2ee>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a55      	ldr	r2, [pc, #340]	; (8006774 <HAL_DMA_IRQHandler+0x42c>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d009      	beq.n	8006636 <HAL_DMA_IRQHandler+0x2ee>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a54      	ldr	r2, [pc, #336]	; (8006778 <HAL_DMA_IRQHandler+0x430>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d004      	beq.n	8006636 <HAL_DMA_IRQHandler+0x2ee>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a52      	ldr	r2, [pc, #328]	; (800677c <HAL_DMA_IRQHandler+0x434>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d10a      	bne.n	800664c <HAL_DMA_IRQHandler+0x304>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	695b      	ldr	r3, [r3, #20]
 800663c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006640:	2b00      	cmp	r3, #0
 8006642:	bf14      	ite	ne
 8006644:	2301      	movne	r3, #1
 8006646:	2300      	moveq	r3, #0
 8006648:	b2db      	uxtb	r3, r3
 800664a:	e003      	b.n	8006654 <HAL_DMA_IRQHandler+0x30c>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2300      	movs	r3, #0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00d      	beq.n	8006674 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800665c:	f003 031f 	and.w	r3, r3, #31
 8006660:	2201      	movs	r2, #1
 8006662:	409a      	lsls	r2, r3
 8006664:	6a3b      	ldr	r3, [r7, #32]
 8006666:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800666c:	f043 0202 	orr.w	r2, r3, #2
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006678:	f003 031f 	and.w	r3, r3, #31
 800667c:	2204      	movs	r2, #4
 800667e:	409a      	lsls	r2, r3
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	4013      	ands	r3, r2
 8006684:	2b00      	cmp	r3, #0
 8006686:	f000 808f 	beq.w	80067a8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a2c      	ldr	r2, [pc, #176]	; (8006740 <HAL_DMA_IRQHandler+0x3f8>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d04a      	beq.n	800672a <HAL_DMA_IRQHandler+0x3e2>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a2a      	ldr	r2, [pc, #168]	; (8006744 <HAL_DMA_IRQHandler+0x3fc>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d045      	beq.n	800672a <HAL_DMA_IRQHandler+0x3e2>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a29      	ldr	r2, [pc, #164]	; (8006748 <HAL_DMA_IRQHandler+0x400>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d040      	beq.n	800672a <HAL_DMA_IRQHandler+0x3e2>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a27      	ldr	r2, [pc, #156]	; (800674c <HAL_DMA_IRQHandler+0x404>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d03b      	beq.n	800672a <HAL_DMA_IRQHandler+0x3e2>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a26      	ldr	r2, [pc, #152]	; (8006750 <HAL_DMA_IRQHandler+0x408>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d036      	beq.n	800672a <HAL_DMA_IRQHandler+0x3e2>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a24      	ldr	r2, [pc, #144]	; (8006754 <HAL_DMA_IRQHandler+0x40c>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d031      	beq.n	800672a <HAL_DMA_IRQHandler+0x3e2>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a23      	ldr	r2, [pc, #140]	; (8006758 <HAL_DMA_IRQHandler+0x410>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d02c      	beq.n	800672a <HAL_DMA_IRQHandler+0x3e2>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a21      	ldr	r2, [pc, #132]	; (800675c <HAL_DMA_IRQHandler+0x414>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d027      	beq.n	800672a <HAL_DMA_IRQHandler+0x3e2>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a20      	ldr	r2, [pc, #128]	; (8006760 <HAL_DMA_IRQHandler+0x418>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d022      	beq.n	800672a <HAL_DMA_IRQHandler+0x3e2>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a1e      	ldr	r2, [pc, #120]	; (8006764 <HAL_DMA_IRQHandler+0x41c>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d01d      	beq.n	800672a <HAL_DMA_IRQHandler+0x3e2>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a1d      	ldr	r2, [pc, #116]	; (8006768 <HAL_DMA_IRQHandler+0x420>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d018      	beq.n	800672a <HAL_DMA_IRQHandler+0x3e2>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a1b      	ldr	r2, [pc, #108]	; (800676c <HAL_DMA_IRQHandler+0x424>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d013      	beq.n	800672a <HAL_DMA_IRQHandler+0x3e2>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a1a      	ldr	r2, [pc, #104]	; (8006770 <HAL_DMA_IRQHandler+0x428>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d00e      	beq.n	800672a <HAL_DMA_IRQHandler+0x3e2>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a18      	ldr	r2, [pc, #96]	; (8006774 <HAL_DMA_IRQHandler+0x42c>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d009      	beq.n	800672a <HAL_DMA_IRQHandler+0x3e2>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a17      	ldr	r2, [pc, #92]	; (8006778 <HAL_DMA_IRQHandler+0x430>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d004      	beq.n	800672a <HAL_DMA_IRQHandler+0x3e2>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a15      	ldr	r2, [pc, #84]	; (800677c <HAL_DMA_IRQHandler+0x434>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d12a      	bne.n	8006780 <HAL_DMA_IRQHandler+0x438>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0302 	and.w	r3, r3, #2
 8006734:	2b00      	cmp	r3, #0
 8006736:	bf14      	ite	ne
 8006738:	2301      	movne	r3, #1
 800673a:	2300      	moveq	r3, #0
 800673c:	b2db      	uxtb	r3, r3
 800673e:	e023      	b.n	8006788 <HAL_DMA_IRQHandler+0x440>
 8006740:	40020010 	.word	0x40020010
 8006744:	40020028 	.word	0x40020028
 8006748:	40020040 	.word	0x40020040
 800674c:	40020058 	.word	0x40020058
 8006750:	40020070 	.word	0x40020070
 8006754:	40020088 	.word	0x40020088
 8006758:	400200a0 	.word	0x400200a0
 800675c:	400200b8 	.word	0x400200b8
 8006760:	40020410 	.word	0x40020410
 8006764:	40020428 	.word	0x40020428
 8006768:	40020440 	.word	0x40020440
 800676c:	40020458 	.word	0x40020458
 8006770:	40020470 	.word	0x40020470
 8006774:	40020488 	.word	0x40020488
 8006778:	400204a0 	.word	0x400204a0
 800677c:	400204b8 	.word	0x400204b8
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2300      	movs	r3, #0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00d      	beq.n	80067a8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006790:	f003 031f 	and.w	r3, r3, #31
 8006794:	2204      	movs	r2, #4
 8006796:	409a      	lsls	r2, r3
 8006798:	6a3b      	ldr	r3, [r7, #32]
 800679a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a0:	f043 0204 	orr.w	r2, r3, #4
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ac:	f003 031f 	and.w	r3, r3, #31
 80067b0:	2210      	movs	r2, #16
 80067b2:	409a      	lsls	r2, r3
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	4013      	ands	r3, r2
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f000 80a6 	beq.w	800690a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a85      	ldr	r2, [pc, #532]	; (80069d8 <HAL_DMA_IRQHandler+0x690>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d04a      	beq.n	800685e <HAL_DMA_IRQHandler+0x516>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a83      	ldr	r2, [pc, #524]	; (80069dc <HAL_DMA_IRQHandler+0x694>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d045      	beq.n	800685e <HAL_DMA_IRQHandler+0x516>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a82      	ldr	r2, [pc, #520]	; (80069e0 <HAL_DMA_IRQHandler+0x698>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d040      	beq.n	800685e <HAL_DMA_IRQHandler+0x516>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a80      	ldr	r2, [pc, #512]	; (80069e4 <HAL_DMA_IRQHandler+0x69c>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d03b      	beq.n	800685e <HAL_DMA_IRQHandler+0x516>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a7f      	ldr	r2, [pc, #508]	; (80069e8 <HAL_DMA_IRQHandler+0x6a0>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d036      	beq.n	800685e <HAL_DMA_IRQHandler+0x516>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a7d      	ldr	r2, [pc, #500]	; (80069ec <HAL_DMA_IRQHandler+0x6a4>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d031      	beq.n	800685e <HAL_DMA_IRQHandler+0x516>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a7c      	ldr	r2, [pc, #496]	; (80069f0 <HAL_DMA_IRQHandler+0x6a8>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d02c      	beq.n	800685e <HAL_DMA_IRQHandler+0x516>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a7a      	ldr	r2, [pc, #488]	; (80069f4 <HAL_DMA_IRQHandler+0x6ac>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d027      	beq.n	800685e <HAL_DMA_IRQHandler+0x516>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a79      	ldr	r2, [pc, #484]	; (80069f8 <HAL_DMA_IRQHandler+0x6b0>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d022      	beq.n	800685e <HAL_DMA_IRQHandler+0x516>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a77      	ldr	r2, [pc, #476]	; (80069fc <HAL_DMA_IRQHandler+0x6b4>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d01d      	beq.n	800685e <HAL_DMA_IRQHandler+0x516>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a76      	ldr	r2, [pc, #472]	; (8006a00 <HAL_DMA_IRQHandler+0x6b8>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d018      	beq.n	800685e <HAL_DMA_IRQHandler+0x516>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a74      	ldr	r2, [pc, #464]	; (8006a04 <HAL_DMA_IRQHandler+0x6bc>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d013      	beq.n	800685e <HAL_DMA_IRQHandler+0x516>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a73      	ldr	r2, [pc, #460]	; (8006a08 <HAL_DMA_IRQHandler+0x6c0>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d00e      	beq.n	800685e <HAL_DMA_IRQHandler+0x516>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a71      	ldr	r2, [pc, #452]	; (8006a0c <HAL_DMA_IRQHandler+0x6c4>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d009      	beq.n	800685e <HAL_DMA_IRQHandler+0x516>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a70      	ldr	r2, [pc, #448]	; (8006a10 <HAL_DMA_IRQHandler+0x6c8>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d004      	beq.n	800685e <HAL_DMA_IRQHandler+0x516>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a6e      	ldr	r2, [pc, #440]	; (8006a14 <HAL_DMA_IRQHandler+0x6cc>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d10a      	bne.n	8006874 <HAL_DMA_IRQHandler+0x52c>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0308 	and.w	r3, r3, #8
 8006868:	2b00      	cmp	r3, #0
 800686a:	bf14      	ite	ne
 800686c:	2301      	movne	r3, #1
 800686e:	2300      	moveq	r3, #0
 8006870:	b2db      	uxtb	r3, r3
 8006872:	e009      	b.n	8006888 <HAL_DMA_IRQHandler+0x540>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0304 	and.w	r3, r3, #4
 800687e:	2b00      	cmp	r3, #0
 8006880:	bf14      	ite	ne
 8006882:	2301      	movne	r3, #1
 8006884:	2300      	moveq	r3, #0
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b00      	cmp	r3, #0
 800688a:	d03e      	beq.n	800690a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006890:	f003 031f 	and.w	r3, r3, #31
 8006894:	2210      	movs	r2, #16
 8006896:	409a      	lsls	r2, r3
 8006898:	6a3b      	ldr	r3, [r7, #32]
 800689a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d018      	beq.n	80068dc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d108      	bne.n	80068ca <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d024      	beq.n	800690a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	4798      	blx	r3
 80068c8:	e01f      	b.n	800690a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d01b      	beq.n	800690a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	4798      	blx	r3
 80068da:	e016      	b.n	800690a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d107      	bne.n	80068fa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f022 0208 	bic.w	r2, r2, #8
 80068f8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d003      	beq.n	800690a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800690e:	f003 031f 	and.w	r3, r3, #31
 8006912:	2220      	movs	r2, #32
 8006914:	409a      	lsls	r2, r3
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	4013      	ands	r3, r2
 800691a:	2b00      	cmp	r3, #0
 800691c:	f000 8110 	beq.w	8006b40 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a2c      	ldr	r2, [pc, #176]	; (80069d8 <HAL_DMA_IRQHandler+0x690>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d04a      	beq.n	80069c0 <HAL_DMA_IRQHandler+0x678>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a2b      	ldr	r2, [pc, #172]	; (80069dc <HAL_DMA_IRQHandler+0x694>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d045      	beq.n	80069c0 <HAL_DMA_IRQHandler+0x678>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a29      	ldr	r2, [pc, #164]	; (80069e0 <HAL_DMA_IRQHandler+0x698>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d040      	beq.n	80069c0 <HAL_DMA_IRQHandler+0x678>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a28      	ldr	r2, [pc, #160]	; (80069e4 <HAL_DMA_IRQHandler+0x69c>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d03b      	beq.n	80069c0 <HAL_DMA_IRQHandler+0x678>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a26      	ldr	r2, [pc, #152]	; (80069e8 <HAL_DMA_IRQHandler+0x6a0>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d036      	beq.n	80069c0 <HAL_DMA_IRQHandler+0x678>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a25      	ldr	r2, [pc, #148]	; (80069ec <HAL_DMA_IRQHandler+0x6a4>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d031      	beq.n	80069c0 <HAL_DMA_IRQHandler+0x678>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a23      	ldr	r2, [pc, #140]	; (80069f0 <HAL_DMA_IRQHandler+0x6a8>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d02c      	beq.n	80069c0 <HAL_DMA_IRQHandler+0x678>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a22      	ldr	r2, [pc, #136]	; (80069f4 <HAL_DMA_IRQHandler+0x6ac>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d027      	beq.n	80069c0 <HAL_DMA_IRQHandler+0x678>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a20      	ldr	r2, [pc, #128]	; (80069f8 <HAL_DMA_IRQHandler+0x6b0>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d022      	beq.n	80069c0 <HAL_DMA_IRQHandler+0x678>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a1f      	ldr	r2, [pc, #124]	; (80069fc <HAL_DMA_IRQHandler+0x6b4>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d01d      	beq.n	80069c0 <HAL_DMA_IRQHandler+0x678>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a1d      	ldr	r2, [pc, #116]	; (8006a00 <HAL_DMA_IRQHandler+0x6b8>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d018      	beq.n	80069c0 <HAL_DMA_IRQHandler+0x678>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a1c      	ldr	r2, [pc, #112]	; (8006a04 <HAL_DMA_IRQHandler+0x6bc>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d013      	beq.n	80069c0 <HAL_DMA_IRQHandler+0x678>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a1a      	ldr	r2, [pc, #104]	; (8006a08 <HAL_DMA_IRQHandler+0x6c0>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d00e      	beq.n	80069c0 <HAL_DMA_IRQHandler+0x678>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a19      	ldr	r2, [pc, #100]	; (8006a0c <HAL_DMA_IRQHandler+0x6c4>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d009      	beq.n	80069c0 <HAL_DMA_IRQHandler+0x678>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a17      	ldr	r2, [pc, #92]	; (8006a10 <HAL_DMA_IRQHandler+0x6c8>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d004      	beq.n	80069c0 <HAL_DMA_IRQHandler+0x678>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a16      	ldr	r2, [pc, #88]	; (8006a14 <HAL_DMA_IRQHandler+0x6cc>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d12b      	bne.n	8006a18 <HAL_DMA_IRQHandler+0x6d0>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0310 	and.w	r3, r3, #16
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	bf14      	ite	ne
 80069ce:	2301      	movne	r3, #1
 80069d0:	2300      	moveq	r3, #0
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	e02a      	b.n	8006a2c <HAL_DMA_IRQHandler+0x6e4>
 80069d6:	bf00      	nop
 80069d8:	40020010 	.word	0x40020010
 80069dc:	40020028 	.word	0x40020028
 80069e0:	40020040 	.word	0x40020040
 80069e4:	40020058 	.word	0x40020058
 80069e8:	40020070 	.word	0x40020070
 80069ec:	40020088 	.word	0x40020088
 80069f0:	400200a0 	.word	0x400200a0
 80069f4:	400200b8 	.word	0x400200b8
 80069f8:	40020410 	.word	0x40020410
 80069fc:	40020428 	.word	0x40020428
 8006a00:	40020440 	.word	0x40020440
 8006a04:	40020458 	.word	0x40020458
 8006a08:	40020470 	.word	0x40020470
 8006a0c:	40020488 	.word	0x40020488
 8006a10:	400204a0 	.word	0x400204a0
 8006a14:	400204b8 	.word	0x400204b8
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0302 	and.w	r3, r3, #2
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	bf14      	ite	ne
 8006a26:	2301      	movne	r3, #1
 8006a28:	2300      	moveq	r3, #0
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f000 8087 	beq.w	8006b40 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a36:	f003 031f 	and.w	r3, r3, #31
 8006a3a:	2220      	movs	r2, #32
 8006a3c:	409a      	lsls	r2, r3
 8006a3e:	6a3b      	ldr	r3, [r7, #32]
 8006a40:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b04      	cmp	r3, #4
 8006a4c:	d139      	bne.n	8006ac2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f022 0216 	bic.w	r2, r2, #22
 8006a5c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	695a      	ldr	r2, [r3, #20]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a6c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d103      	bne.n	8006a7e <HAL_DMA_IRQHandler+0x736>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d007      	beq.n	8006a8e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f022 0208 	bic.w	r2, r2, #8
 8006a8c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a92:	f003 031f 	and.w	r3, r3, #31
 8006a96:	223f      	movs	r2, #63	; 0x3f
 8006a98:	409a      	lsls	r2, r3
 8006a9a:	6a3b      	ldr	r3, [r7, #32]
 8006a9c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f000 834a 	beq.w	800714c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	4798      	blx	r3
          }
          return;
 8006ac0:	e344      	b.n	800714c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d018      	beq.n	8006b02 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d108      	bne.n	8006af0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d02c      	beq.n	8006b40 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	4798      	blx	r3
 8006aee:	e027      	b.n	8006b40 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d023      	beq.n	8006b40 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	4798      	blx	r3
 8006b00:	e01e      	b.n	8006b40 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d10f      	bne.n	8006b30 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f022 0210 	bic.w	r2, r2, #16
 8006b1e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d003      	beq.n	8006b40 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f000 8306 	beq.w	8007156 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f000 8088 	beq.w	8006c68 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2204      	movs	r2, #4
 8006b5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a7a      	ldr	r2, [pc, #488]	; (8006d50 <HAL_DMA_IRQHandler+0xa08>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d04a      	beq.n	8006c00 <HAL_DMA_IRQHandler+0x8b8>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a79      	ldr	r2, [pc, #484]	; (8006d54 <HAL_DMA_IRQHandler+0xa0c>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d045      	beq.n	8006c00 <HAL_DMA_IRQHandler+0x8b8>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a77      	ldr	r2, [pc, #476]	; (8006d58 <HAL_DMA_IRQHandler+0xa10>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d040      	beq.n	8006c00 <HAL_DMA_IRQHandler+0x8b8>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a76      	ldr	r2, [pc, #472]	; (8006d5c <HAL_DMA_IRQHandler+0xa14>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d03b      	beq.n	8006c00 <HAL_DMA_IRQHandler+0x8b8>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a74      	ldr	r2, [pc, #464]	; (8006d60 <HAL_DMA_IRQHandler+0xa18>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d036      	beq.n	8006c00 <HAL_DMA_IRQHandler+0x8b8>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a73      	ldr	r2, [pc, #460]	; (8006d64 <HAL_DMA_IRQHandler+0xa1c>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d031      	beq.n	8006c00 <HAL_DMA_IRQHandler+0x8b8>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a71      	ldr	r2, [pc, #452]	; (8006d68 <HAL_DMA_IRQHandler+0xa20>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d02c      	beq.n	8006c00 <HAL_DMA_IRQHandler+0x8b8>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a70      	ldr	r2, [pc, #448]	; (8006d6c <HAL_DMA_IRQHandler+0xa24>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d027      	beq.n	8006c00 <HAL_DMA_IRQHandler+0x8b8>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a6e      	ldr	r2, [pc, #440]	; (8006d70 <HAL_DMA_IRQHandler+0xa28>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d022      	beq.n	8006c00 <HAL_DMA_IRQHandler+0x8b8>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a6d      	ldr	r2, [pc, #436]	; (8006d74 <HAL_DMA_IRQHandler+0xa2c>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d01d      	beq.n	8006c00 <HAL_DMA_IRQHandler+0x8b8>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a6b      	ldr	r2, [pc, #428]	; (8006d78 <HAL_DMA_IRQHandler+0xa30>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d018      	beq.n	8006c00 <HAL_DMA_IRQHandler+0x8b8>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a6a      	ldr	r2, [pc, #424]	; (8006d7c <HAL_DMA_IRQHandler+0xa34>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d013      	beq.n	8006c00 <HAL_DMA_IRQHandler+0x8b8>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a68      	ldr	r2, [pc, #416]	; (8006d80 <HAL_DMA_IRQHandler+0xa38>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d00e      	beq.n	8006c00 <HAL_DMA_IRQHandler+0x8b8>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a67      	ldr	r2, [pc, #412]	; (8006d84 <HAL_DMA_IRQHandler+0xa3c>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d009      	beq.n	8006c00 <HAL_DMA_IRQHandler+0x8b8>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a65      	ldr	r2, [pc, #404]	; (8006d88 <HAL_DMA_IRQHandler+0xa40>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d004      	beq.n	8006c00 <HAL_DMA_IRQHandler+0x8b8>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a64      	ldr	r2, [pc, #400]	; (8006d8c <HAL_DMA_IRQHandler+0xa44>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d108      	bne.n	8006c12 <HAL_DMA_IRQHandler+0x8ca>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f022 0201 	bic.w	r2, r2, #1
 8006c0e:	601a      	str	r2, [r3, #0]
 8006c10:	e007      	b.n	8006c22 <HAL_DMA_IRQHandler+0x8da>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f022 0201 	bic.w	r2, r2, #1
 8006c20:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	3301      	adds	r3, #1
 8006c26:	60fb      	str	r3, [r7, #12]
 8006c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d307      	bcc.n	8006c3e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1f2      	bne.n	8006c22 <HAL_DMA_IRQHandler+0x8da>
 8006c3c:	e000      	b.n	8006c40 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006c3e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0301 	and.w	r3, r3, #1
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d004      	beq.n	8006c58 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2203      	movs	r2, #3
 8006c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006c56:	e003      	b.n	8006c60 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f000 8272 	beq.w	8007156 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	4798      	blx	r3
 8006c7a:	e26c      	b.n	8007156 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a43      	ldr	r2, [pc, #268]	; (8006d90 <HAL_DMA_IRQHandler+0xa48>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d022      	beq.n	8006ccc <HAL_DMA_IRQHandler+0x984>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a42      	ldr	r2, [pc, #264]	; (8006d94 <HAL_DMA_IRQHandler+0xa4c>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d01d      	beq.n	8006ccc <HAL_DMA_IRQHandler+0x984>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a40      	ldr	r2, [pc, #256]	; (8006d98 <HAL_DMA_IRQHandler+0xa50>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d018      	beq.n	8006ccc <HAL_DMA_IRQHandler+0x984>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a3f      	ldr	r2, [pc, #252]	; (8006d9c <HAL_DMA_IRQHandler+0xa54>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d013      	beq.n	8006ccc <HAL_DMA_IRQHandler+0x984>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a3d      	ldr	r2, [pc, #244]	; (8006da0 <HAL_DMA_IRQHandler+0xa58>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d00e      	beq.n	8006ccc <HAL_DMA_IRQHandler+0x984>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a3c      	ldr	r2, [pc, #240]	; (8006da4 <HAL_DMA_IRQHandler+0xa5c>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d009      	beq.n	8006ccc <HAL_DMA_IRQHandler+0x984>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a3a      	ldr	r2, [pc, #232]	; (8006da8 <HAL_DMA_IRQHandler+0xa60>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d004      	beq.n	8006ccc <HAL_DMA_IRQHandler+0x984>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a39      	ldr	r2, [pc, #228]	; (8006dac <HAL_DMA_IRQHandler+0xa64>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d101      	bne.n	8006cd0 <HAL_DMA_IRQHandler+0x988>
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e000      	b.n	8006cd2 <HAL_DMA_IRQHandler+0x98a>
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f000 823f 	beq.w	8007156 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ce4:	f003 031f 	and.w	r3, r3, #31
 8006ce8:	2204      	movs	r2, #4
 8006cea:	409a      	lsls	r2, r3
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	4013      	ands	r3, r2
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f000 80cd 	beq.w	8006e90 <HAL_DMA_IRQHandler+0xb48>
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	f003 0304 	and.w	r3, r3, #4
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f000 80c7 	beq.w	8006e90 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d06:	f003 031f 	and.w	r3, r3, #31
 8006d0a:	2204      	movs	r2, #4
 8006d0c:	409a      	lsls	r2, r3
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d049      	beq.n	8006db0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d109      	bne.n	8006d3a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f000 8210 	beq.w	8007150 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d38:	e20a      	b.n	8007150 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	f000 8206 	beq.w	8007150 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d4c:	e200      	b.n	8007150 <HAL_DMA_IRQHandler+0xe08>
 8006d4e:	bf00      	nop
 8006d50:	40020010 	.word	0x40020010
 8006d54:	40020028 	.word	0x40020028
 8006d58:	40020040 	.word	0x40020040
 8006d5c:	40020058 	.word	0x40020058
 8006d60:	40020070 	.word	0x40020070
 8006d64:	40020088 	.word	0x40020088
 8006d68:	400200a0 	.word	0x400200a0
 8006d6c:	400200b8 	.word	0x400200b8
 8006d70:	40020410 	.word	0x40020410
 8006d74:	40020428 	.word	0x40020428
 8006d78:	40020440 	.word	0x40020440
 8006d7c:	40020458 	.word	0x40020458
 8006d80:	40020470 	.word	0x40020470
 8006d84:	40020488 	.word	0x40020488
 8006d88:	400204a0 	.word	0x400204a0
 8006d8c:	400204b8 	.word	0x400204b8
 8006d90:	58025408 	.word	0x58025408
 8006d94:	5802541c 	.word	0x5802541c
 8006d98:	58025430 	.word	0x58025430
 8006d9c:	58025444 	.word	0x58025444
 8006da0:	58025458 	.word	0x58025458
 8006da4:	5802546c 	.word	0x5802546c
 8006da8:	58025480 	.word	0x58025480
 8006dac:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	f003 0320 	and.w	r3, r3, #32
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d160      	bne.n	8006e7c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a7f      	ldr	r2, [pc, #508]	; (8006fbc <HAL_DMA_IRQHandler+0xc74>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d04a      	beq.n	8006e5a <HAL_DMA_IRQHandler+0xb12>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a7d      	ldr	r2, [pc, #500]	; (8006fc0 <HAL_DMA_IRQHandler+0xc78>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d045      	beq.n	8006e5a <HAL_DMA_IRQHandler+0xb12>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a7c      	ldr	r2, [pc, #496]	; (8006fc4 <HAL_DMA_IRQHandler+0xc7c>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d040      	beq.n	8006e5a <HAL_DMA_IRQHandler+0xb12>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a7a      	ldr	r2, [pc, #488]	; (8006fc8 <HAL_DMA_IRQHandler+0xc80>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d03b      	beq.n	8006e5a <HAL_DMA_IRQHandler+0xb12>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a79      	ldr	r2, [pc, #484]	; (8006fcc <HAL_DMA_IRQHandler+0xc84>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d036      	beq.n	8006e5a <HAL_DMA_IRQHandler+0xb12>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a77      	ldr	r2, [pc, #476]	; (8006fd0 <HAL_DMA_IRQHandler+0xc88>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d031      	beq.n	8006e5a <HAL_DMA_IRQHandler+0xb12>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a76      	ldr	r2, [pc, #472]	; (8006fd4 <HAL_DMA_IRQHandler+0xc8c>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d02c      	beq.n	8006e5a <HAL_DMA_IRQHandler+0xb12>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a74      	ldr	r2, [pc, #464]	; (8006fd8 <HAL_DMA_IRQHandler+0xc90>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d027      	beq.n	8006e5a <HAL_DMA_IRQHandler+0xb12>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a73      	ldr	r2, [pc, #460]	; (8006fdc <HAL_DMA_IRQHandler+0xc94>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d022      	beq.n	8006e5a <HAL_DMA_IRQHandler+0xb12>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a71      	ldr	r2, [pc, #452]	; (8006fe0 <HAL_DMA_IRQHandler+0xc98>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d01d      	beq.n	8006e5a <HAL_DMA_IRQHandler+0xb12>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a70      	ldr	r2, [pc, #448]	; (8006fe4 <HAL_DMA_IRQHandler+0xc9c>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d018      	beq.n	8006e5a <HAL_DMA_IRQHandler+0xb12>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a6e      	ldr	r2, [pc, #440]	; (8006fe8 <HAL_DMA_IRQHandler+0xca0>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d013      	beq.n	8006e5a <HAL_DMA_IRQHandler+0xb12>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a6d      	ldr	r2, [pc, #436]	; (8006fec <HAL_DMA_IRQHandler+0xca4>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d00e      	beq.n	8006e5a <HAL_DMA_IRQHandler+0xb12>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a6b      	ldr	r2, [pc, #428]	; (8006ff0 <HAL_DMA_IRQHandler+0xca8>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d009      	beq.n	8006e5a <HAL_DMA_IRQHandler+0xb12>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a6a      	ldr	r2, [pc, #424]	; (8006ff4 <HAL_DMA_IRQHandler+0xcac>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d004      	beq.n	8006e5a <HAL_DMA_IRQHandler+0xb12>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a68      	ldr	r2, [pc, #416]	; (8006ff8 <HAL_DMA_IRQHandler+0xcb0>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d108      	bne.n	8006e6c <HAL_DMA_IRQHandler+0xb24>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f022 0208 	bic.w	r2, r2, #8
 8006e68:	601a      	str	r2, [r3, #0]
 8006e6a:	e007      	b.n	8006e7c <HAL_DMA_IRQHandler+0xb34>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f022 0204 	bic.w	r2, r2, #4
 8006e7a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	f000 8165 	beq.w	8007150 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e8e:	e15f      	b.n	8007150 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e94:	f003 031f 	and.w	r3, r3, #31
 8006e98:	2202      	movs	r2, #2
 8006e9a:	409a      	lsls	r2, r3
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 80c5 	beq.w	8007030 <HAL_DMA_IRQHandler+0xce8>
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	f003 0302 	and.w	r3, r3, #2
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f000 80bf 	beq.w	8007030 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eb6:	f003 031f 	and.w	r3, r3, #31
 8006eba:	2202      	movs	r2, #2
 8006ebc:	409a      	lsls	r2, r3
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d018      	beq.n	8006efe <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d109      	bne.n	8006eea <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f000 813a 	beq.w	8007154 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ee8:	e134      	b.n	8007154 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	f000 8130 	beq.w	8007154 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006efc:	e12a      	b.n	8007154 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	f003 0320 	and.w	r3, r3, #32
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f040 8089 	bne.w	800701c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a2b      	ldr	r2, [pc, #172]	; (8006fbc <HAL_DMA_IRQHandler+0xc74>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d04a      	beq.n	8006faa <HAL_DMA_IRQHandler+0xc62>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a29      	ldr	r2, [pc, #164]	; (8006fc0 <HAL_DMA_IRQHandler+0xc78>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d045      	beq.n	8006faa <HAL_DMA_IRQHandler+0xc62>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a28      	ldr	r2, [pc, #160]	; (8006fc4 <HAL_DMA_IRQHandler+0xc7c>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d040      	beq.n	8006faa <HAL_DMA_IRQHandler+0xc62>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a26      	ldr	r2, [pc, #152]	; (8006fc8 <HAL_DMA_IRQHandler+0xc80>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d03b      	beq.n	8006faa <HAL_DMA_IRQHandler+0xc62>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a25      	ldr	r2, [pc, #148]	; (8006fcc <HAL_DMA_IRQHandler+0xc84>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d036      	beq.n	8006faa <HAL_DMA_IRQHandler+0xc62>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a23      	ldr	r2, [pc, #140]	; (8006fd0 <HAL_DMA_IRQHandler+0xc88>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d031      	beq.n	8006faa <HAL_DMA_IRQHandler+0xc62>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a22      	ldr	r2, [pc, #136]	; (8006fd4 <HAL_DMA_IRQHandler+0xc8c>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d02c      	beq.n	8006faa <HAL_DMA_IRQHandler+0xc62>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a20      	ldr	r2, [pc, #128]	; (8006fd8 <HAL_DMA_IRQHandler+0xc90>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d027      	beq.n	8006faa <HAL_DMA_IRQHandler+0xc62>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a1f      	ldr	r2, [pc, #124]	; (8006fdc <HAL_DMA_IRQHandler+0xc94>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d022      	beq.n	8006faa <HAL_DMA_IRQHandler+0xc62>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a1d      	ldr	r2, [pc, #116]	; (8006fe0 <HAL_DMA_IRQHandler+0xc98>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d01d      	beq.n	8006faa <HAL_DMA_IRQHandler+0xc62>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a1c      	ldr	r2, [pc, #112]	; (8006fe4 <HAL_DMA_IRQHandler+0xc9c>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d018      	beq.n	8006faa <HAL_DMA_IRQHandler+0xc62>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a1a      	ldr	r2, [pc, #104]	; (8006fe8 <HAL_DMA_IRQHandler+0xca0>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d013      	beq.n	8006faa <HAL_DMA_IRQHandler+0xc62>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a19      	ldr	r2, [pc, #100]	; (8006fec <HAL_DMA_IRQHandler+0xca4>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d00e      	beq.n	8006faa <HAL_DMA_IRQHandler+0xc62>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a17      	ldr	r2, [pc, #92]	; (8006ff0 <HAL_DMA_IRQHandler+0xca8>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d009      	beq.n	8006faa <HAL_DMA_IRQHandler+0xc62>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a16      	ldr	r2, [pc, #88]	; (8006ff4 <HAL_DMA_IRQHandler+0xcac>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d004      	beq.n	8006faa <HAL_DMA_IRQHandler+0xc62>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a14      	ldr	r2, [pc, #80]	; (8006ff8 <HAL_DMA_IRQHandler+0xcb0>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d128      	bne.n	8006ffc <HAL_DMA_IRQHandler+0xcb4>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f022 0214 	bic.w	r2, r2, #20
 8006fb8:	601a      	str	r2, [r3, #0]
 8006fba:	e027      	b.n	800700c <HAL_DMA_IRQHandler+0xcc4>
 8006fbc:	40020010 	.word	0x40020010
 8006fc0:	40020028 	.word	0x40020028
 8006fc4:	40020040 	.word	0x40020040
 8006fc8:	40020058 	.word	0x40020058
 8006fcc:	40020070 	.word	0x40020070
 8006fd0:	40020088 	.word	0x40020088
 8006fd4:	400200a0 	.word	0x400200a0
 8006fd8:	400200b8 	.word	0x400200b8
 8006fdc:	40020410 	.word	0x40020410
 8006fe0:	40020428 	.word	0x40020428
 8006fe4:	40020440 	.word	0x40020440
 8006fe8:	40020458 	.word	0x40020458
 8006fec:	40020470 	.word	0x40020470
 8006ff0:	40020488 	.word	0x40020488
 8006ff4:	400204a0 	.word	0x400204a0
 8006ff8:	400204b8 	.word	0x400204b8
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f022 020a 	bic.w	r2, r2, #10
 800700a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007020:	2b00      	cmp	r3, #0
 8007022:	f000 8097 	beq.w	8007154 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800702e:	e091      	b.n	8007154 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007034:	f003 031f 	and.w	r3, r3, #31
 8007038:	2208      	movs	r2, #8
 800703a:	409a      	lsls	r2, r3
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	4013      	ands	r3, r2
 8007040:	2b00      	cmp	r3, #0
 8007042:	f000 8088 	beq.w	8007156 <HAL_DMA_IRQHandler+0xe0e>
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	f003 0308 	and.w	r3, r3, #8
 800704c:	2b00      	cmp	r3, #0
 800704e:	f000 8082 	beq.w	8007156 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a41      	ldr	r2, [pc, #260]	; (800715c <HAL_DMA_IRQHandler+0xe14>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d04a      	beq.n	80070f2 <HAL_DMA_IRQHandler+0xdaa>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a3f      	ldr	r2, [pc, #252]	; (8007160 <HAL_DMA_IRQHandler+0xe18>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d045      	beq.n	80070f2 <HAL_DMA_IRQHandler+0xdaa>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a3e      	ldr	r2, [pc, #248]	; (8007164 <HAL_DMA_IRQHandler+0xe1c>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d040      	beq.n	80070f2 <HAL_DMA_IRQHandler+0xdaa>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a3c      	ldr	r2, [pc, #240]	; (8007168 <HAL_DMA_IRQHandler+0xe20>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d03b      	beq.n	80070f2 <HAL_DMA_IRQHandler+0xdaa>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a3b      	ldr	r2, [pc, #236]	; (800716c <HAL_DMA_IRQHandler+0xe24>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d036      	beq.n	80070f2 <HAL_DMA_IRQHandler+0xdaa>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a39      	ldr	r2, [pc, #228]	; (8007170 <HAL_DMA_IRQHandler+0xe28>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d031      	beq.n	80070f2 <HAL_DMA_IRQHandler+0xdaa>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a38      	ldr	r2, [pc, #224]	; (8007174 <HAL_DMA_IRQHandler+0xe2c>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d02c      	beq.n	80070f2 <HAL_DMA_IRQHandler+0xdaa>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a36      	ldr	r2, [pc, #216]	; (8007178 <HAL_DMA_IRQHandler+0xe30>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d027      	beq.n	80070f2 <HAL_DMA_IRQHandler+0xdaa>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a35      	ldr	r2, [pc, #212]	; (800717c <HAL_DMA_IRQHandler+0xe34>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d022      	beq.n	80070f2 <HAL_DMA_IRQHandler+0xdaa>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a33      	ldr	r2, [pc, #204]	; (8007180 <HAL_DMA_IRQHandler+0xe38>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d01d      	beq.n	80070f2 <HAL_DMA_IRQHandler+0xdaa>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a32      	ldr	r2, [pc, #200]	; (8007184 <HAL_DMA_IRQHandler+0xe3c>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d018      	beq.n	80070f2 <HAL_DMA_IRQHandler+0xdaa>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a30      	ldr	r2, [pc, #192]	; (8007188 <HAL_DMA_IRQHandler+0xe40>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d013      	beq.n	80070f2 <HAL_DMA_IRQHandler+0xdaa>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a2f      	ldr	r2, [pc, #188]	; (800718c <HAL_DMA_IRQHandler+0xe44>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d00e      	beq.n	80070f2 <HAL_DMA_IRQHandler+0xdaa>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a2d      	ldr	r2, [pc, #180]	; (8007190 <HAL_DMA_IRQHandler+0xe48>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d009      	beq.n	80070f2 <HAL_DMA_IRQHandler+0xdaa>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a2c      	ldr	r2, [pc, #176]	; (8007194 <HAL_DMA_IRQHandler+0xe4c>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d004      	beq.n	80070f2 <HAL_DMA_IRQHandler+0xdaa>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a2a      	ldr	r2, [pc, #168]	; (8007198 <HAL_DMA_IRQHandler+0xe50>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d108      	bne.n	8007104 <HAL_DMA_IRQHandler+0xdbc>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f022 021c 	bic.w	r2, r2, #28
 8007100:	601a      	str	r2, [r3, #0]
 8007102:	e007      	b.n	8007114 <HAL_DMA_IRQHandler+0xdcc>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f022 020e 	bic.w	r2, r2, #14
 8007112:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007118:	f003 031f 	and.w	r3, r3, #31
 800711c:	2201      	movs	r2, #1
 800711e:	409a      	lsls	r2, r3
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2201      	movs	r2, #1
 800712e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800713e:	2b00      	cmp	r3, #0
 8007140:	d009      	beq.n	8007156 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	4798      	blx	r3
 800714a:	e004      	b.n	8007156 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800714c:	bf00      	nop
 800714e:	e002      	b.n	8007156 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007150:	bf00      	nop
 8007152:	e000      	b.n	8007156 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007154:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007156:	3728      	adds	r7, #40	; 0x28
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}
 800715c:	40020010 	.word	0x40020010
 8007160:	40020028 	.word	0x40020028
 8007164:	40020040 	.word	0x40020040
 8007168:	40020058 	.word	0x40020058
 800716c:	40020070 	.word	0x40020070
 8007170:	40020088 	.word	0x40020088
 8007174:	400200a0 	.word	0x400200a0
 8007178:	400200b8 	.word	0x400200b8
 800717c:	40020410 	.word	0x40020410
 8007180:	40020428 	.word	0x40020428
 8007184:	40020440 	.word	0x40020440
 8007188:	40020458 	.word	0x40020458
 800718c:	40020470 	.word	0x40020470
 8007190:	40020488 	.word	0x40020488
 8007194:	400204a0 	.word	0x400204a0
 8007198:	400204b8 	.word	0x400204b8

0800719c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800719c:	b480      	push	{r7}
 800719e:	b087      	sub	sp, #28
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
 80071a8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071ae:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071b4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a7f      	ldr	r2, [pc, #508]	; (80073b8 <DMA_SetConfig+0x21c>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d072      	beq.n	80072a6 <DMA_SetConfig+0x10a>
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a7d      	ldr	r2, [pc, #500]	; (80073bc <DMA_SetConfig+0x220>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d06d      	beq.n	80072a6 <DMA_SetConfig+0x10a>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a7c      	ldr	r2, [pc, #496]	; (80073c0 <DMA_SetConfig+0x224>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d068      	beq.n	80072a6 <DMA_SetConfig+0x10a>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a7a      	ldr	r2, [pc, #488]	; (80073c4 <DMA_SetConfig+0x228>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d063      	beq.n	80072a6 <DMA_SetConfig+0x10a>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a79      	ldr	r2, [pc, #484]	; (80073c8 <DMA_SetConfig+0x22c>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d05e      	beq.n	80072a6 <DMA_SetConfig+0x10a>
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a77      	ldr	r2, [pc, #476]	; (80073cc <DMA_SetConfig+0x230>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d059      	beq.n	80072a6 <DMA_SetConfig+0x10a>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a76      	ldr	r2, [pc, #472]	; (80073d0 <DMA_SetConfig+0x234>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d054      	beq.n	80072a6 <DMA_SetConfig+0x10a>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a74      	ldr	r2, [pc, #464]	; (80073d4 <DMA_SetConfig+0x238>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d04f      	beq.n	80072a6 <DMA_SetConfig+0x10a>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a73      	ldr	r2, [pc, #460]	; (80073d8 <DMA_SetConfig+0x23c>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d04a      	beq.n	80072a6 <DMA_SetConfig+0x10a>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a71      	ldr	r2, [pc, #452]	; (80073dc <DMA_SetConfig+0x240>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d045      	beq.n	80072a6 <DMA_SetConfig+0x10a>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a70      	ldr	r2, [pc, #448]	; (80073e0 <DMA_SetConfig+0x244>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d040      	beq.n	80072a6 <DMA_SetConfig+0x10a>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a6e      	ldr	r2, [pc, #440]	; (80073e4 <DMA_SetConfig+0x248>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d03b      	beq.n	80072a6 <DMA_SetConfig+0x10a>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a6d      	ldr	r2, [pc, #436]	; (80073e8 <DMA_SetConfig+0x24c>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d036      	beq.n	80072a6 <DMA_SetConfig+0x10a>
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a6b      	ldr	r2, [pc, #428]	; (80073ec <DMA_SetConfig+0x250>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d031      	beq.n	80072a6 <DMA_SetConfig+0x10a>
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a6a      	ldr	r2, [pc, #424]	; (80073f0 <DMA_SetConfig+0x254>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d02c      	beq.n	80072a6 <DMA_SetConfig+0x10a>
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a68      	ldr	r2, [pc, #416]	; (80073f4 <DMA_SetConfig+0x258>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d027      	beq.n	80072a6 <DMA_SetConfig+0x10a>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a67      	ldr	r2, [pc, #412]	; (80073f8 <DMA_SetConfig+0x25c>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d022      	beq.n	80072a6 <DMA_SetConfig+0x10a>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a65      	ldr	r2, [pc, #404]	; (80073fc <DMA_SetConfig+0x260>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d01d      	beq.n	80072a6 <DMA_SetConfig+0x10a>
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a64      	ldr	r2, [pc, #400]	; (8007400 <DMA_SetConfig+0x264>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d018      	beq.n	80072a6 <DMA_SetConfig+0x10a>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a62      	ldr	r2, [pc, #392]	; (8007404 <DMA_SetConfig+0x268>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d013      	beq.n	80072a6 <DMA_SetConfig+0x10a>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a61      	ldr	r2, [pc, #388]	; (8007408 <DMA_SetConfig+0x26c>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d00e      	beq.n	80072a6 <DMA_SetConfig+0x10a>
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a5f      	ldr	r2, [pc, #380]	; (800740c <DMA_SetConfig+0x270>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d009      	beq.n	80072a6 <DMA_SetConfig+0x10a>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a5e      	ldr	r2, [pc, #376]	; (8007410 <DMA_SetConfig+0x274>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d004      	beq.n	80072a6 <DMA_SetConfig+0x10a>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a5c      	ldr	r2, [pc, #368]	; (8007414 <DMA_SetConfig+0x278>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d101      	bne.n	80072aa <DMA_SetConfig+0x10e>
 80072a6:	2301      	movs	r3, #1
 80072a8:	e000      	b.n	80072ac <DMA_SetConfig+0x110>
 80072aa:	2300      	movs	r3, #0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00d      	beq.n	80072cc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80072b8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d004      	beq.n	80072cc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c6:	68fa      	ldr	r2, [r7, #12]
 80072c8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80072ca:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a39      	ldr	r2, [pc, #228]	; (80073b8 <DMA_SetConfig+0x21c>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d04a      	beq.n	800736c <DMA_SetConfig+0x1d0>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a38      	ldr	r2, [pc, #224]	; (80073bc <DMA_SetConfig+0x220>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d045      	beq.n	800736c <DMA_SetConfig+0x1d0>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a36      	ldr	r2, [pc, #216]	; (80073c0 <DMA_SetConfig+0x224>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d040      	beq.n	800736c <DMA_SetConfig+0x1d0>
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a35      	ldr	r2, [pc, #212]	; (80073c4 <DMA_SetConfig+0x228>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d03b      	beq.n	800736c <DMA_SetConfig+0x1d0>
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a33      	ldr	r2, [pc, #204]	; (80073c8 <DMA_SetConfig+0x22c>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d036      	beq.n	800736c <DMA_SetConfig+0x1d0>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a32      	ldr	r2, [pc, #200]	; (80073cc <DMA_SetConfig+0x230>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d031      	beq.n	800736c <DMA_SetConfig+0x1d0>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a30      	ldr	r2, [pc, #192]	; (80073d0 <DMA_SetConfig+0x234>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d02c      	beq.n	800736c <DMA_SetConfig+0x1d0>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a2f      	ldr	r2, [pc, #188]	; (80073d4 <DMA_SetConfig+0x238>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d027      	beq.n	800736c <DMA_SetConfig+0x1d0>
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a2d      	ldr	r2, [pc, #180]	; (80073d8 <DMA_SetConfig+0x23c>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d022      	beq.n	800736c <DMA_SetConfig+0x1d0>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a2c      	ldr	r2, [pc, #176]	; (80073dc <DMA_SetConfig+0x240>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d01d      	beq.n	800736c <DMA_SetConfig+0x1d0>
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a2a      	ldr	r2, [pc, #168]	; (80073e0 <DMA_SetConfig+0x244>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d018      	beq.n	800736c <DMA_SetConfig+0x1d0>
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a29      	ldr	r2, [pc, #164]	; (80073e4 <DMA_SetConfig+0x248>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d013      	beq.n	800736c <DMA_SetConfig+0x1d0>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a27      	ldr	r2, [pc, #156]	; (80073e8 <DMA_SetConfig+0x24c>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d00e      	beq.n	800736c <DMA_SetConfig+0x1d0>
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a26      	ldr	r2, [pc, #152]	; (80073ec <DMA_SetConfig+0x250>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d009      	beq.n	800736c <DMA_SetConfig+0x1d0>
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a24      	ldr	r2, [pc, #144]	; (80073f0 <DMA_SetConfig+0x254>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d004      	beq.n	800736c <DMA_SetConfig+0x1d0>
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a23      	ldr	r2, [pc, #140]	; (80073f4 <DMA_SetConfig+0x258>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d101      	bne.n	8007370 <DMA_SetConfig+0x1d4>
 800736c:	2301      	movs	r3, #1
 800736e:	e000      	b.n	8007372 <DMA_SetConfig+0x1d6>
 8007370:	2300      	movs	r3, #0
 8007372:	2b00      	cmp	r3, #0
 8007374:	d059      	beq.n	800742a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800737a:	f003 031f 	and.w	r3, r3, #31
 800737e:	223f      	movs	r2, #63	; 0x3f
 8007380:	409a      	lsls	r2, r3
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007394:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	683a      	ldr	r2, [r7, #0]
 800739c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	2b40      	cmp	r3, #64	; 0x40
 80073a4:	d138      	bne.n	8007418 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68ba      	ldr	r2, [r7, #8]
 80073b4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80073b6:	e086      	b.n	80074c6 <DMA_SetConfig+0x32a>
 80073b8:	40020010 	.word	0x40020010
 80073bc:	40020028 	.word	0x40020028
 80073c0:	40020040 	.word	0x40020040
 80073c4:	40020058 	.word	0x40020058
 80073c8:	40020070 	.word	0x40020070
 80073cc:	40020088 	.word	0x40020088
 80073d0:	400200a0 	.word	0x400200a0
 80073d4:	400200b8 	.word	0x400200b8
 80073d8:	40020410 	.word	0x40020410
 80073dc:	40020428 	.word	0x40020428
 80073e0:	40020440 	.word	0x40020440
 80073e4:	40020458 	.word	0x40020458
 80073e8:	40020470 	.word	0x40020470
 80073ec:	40020488 	.word	0x40020488
 80073f0:	400204a0 	.word	0x400204a0
 80073f4:	400204b8 	.word	0x400204b8
 80073f8:	58025408 	.word	0x58025408
 80073fc:	5802541c 	.word	0x5802541c
 8007400:	58025430 	.word	0x58025430
 8007404:	58025444 	.word	0x58025444
 8007408:	58025458 	.word	0x58025458
 800740c:	5802546c 	.word	0x5802546c
 8007410:	58025480 	.word	0x58025480
 8007414:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	60da      	str	r2, [r3, #12]
}
 8007428:	e04d      	b.n	80074c6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a29      	ldr	r2, [pc, #164]	; (80074d4 <DMA_SetConfig+0x338>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d022      	beq.n	800747a <DMA_SetConfig+0x2de>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a27      	ldr	r2, [pc, #156]	; (80074d8 <DMA_SetConfig+0x33c>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d01d      	beq.n	800747a <DMA_SetConfig+0x2de>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a26      	ldr	r2, [pc, #152]	; (80074dc <DMA_SetConfig+0x340>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d018      	beq.n	800747a <DMA_SetConfig+0x2de>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a24      	ldr	r2, [pc, #144]	; (80074e0 <DMA_SetConfig+0x344>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d013      	beq.n	800747a <DMA_SetConfig+0x2de>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a23      	ldr	r2, [pc, #140]	; (80074e4 <DMA_SetConfig+0x348>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d00e      	beq.n	800747a <DMA_SetConfig+0x2de>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a21      	ldr	r2, [pc, #132]	; (80074e8 <DMA_SetConfig+0x34c>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d009      	beq.n	800747a <DMA_SetConfig+0x2de>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a20      	ldr	r2, [pc, #128]	; (80074ec <DMA_SetConfig+0x350>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d004      	beq.n	800747a <DMA_SetConfig+0x2de>
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a1e      	ldr	r2, [pc, #120]	; (80074f0 <DMA_SetConfig+0x354>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d101      	bne.n	800747e <DMA_SetConfig+0x2e2>
 800747a:	2301      	movs	r3, #1
 800747c:	e000      	b.n	8007480 <DMA_SetConfig+0x2e4>
 800747e:	2300      	movs	r3, #0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d020      	beq.n	80074c6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007488:	f003 031f 	and.w	r3, r3, #31
 800748c:	2201      	movs	r2, #1
 800748e:	409a      	lsls	r2, r3
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	683a      	ldr	r2, [r7, #0]
 800749a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	2b40      	cmp	r3, #64	; 0x40
 80074a2:	d108      	bne.n	80074b6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	60da      	str	r2, [r3, #12]
}
 80074b4:	e007      	b.n	80074c6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	60da      	str	r2, [r3, #12]
}
 80074c6:	bf00      	nop
 80074c8:	371c      	adds	r7, #28
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	58025408 	.word	0x58025408
 80074d8:	5802541c 	.word	0x5802541c
 80074dc:	58025430 	.word	0x58025430
 80074e0:	58025444 	.word	0x58025444
 80074e4:	58025458 	.word	0x58025458
 80074e8:	5802546c 	.word	0x5802546c
 80074ec:	58025480 	.word	0x58025480
 80074f0:	58025494 	.word	0x58025494

080074f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a42      	ldr	r2, [pc, #264]	; (800760c <DMA_CalcBaseAndBitshift+0x118>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d04a      	beq.n	800759c <DMA_CalcBaseAndBitshift+0xa8>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a41      	ldr	r2, [pc, #260]	; (8007610 <DMA_CalcBaseAndBitshift+0x11c>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d045      	beq.n	800759c <DMA_CalcBaseAndBitshift+0xa8>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a3f      	ldr	r2, [pc, #252]	; (8007614 <DMA_CalcBaseAndBitshift+0x120>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d040      	beq.n	800759c <DMA_CalcBaseAndBitshift+0xa8>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a3e      	ldr	r2, [pc, #248]	; (8007618 <DMA_CalcBaseAndBitshift+0x124>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d03b      	beq.n	800759c <DMA_CalcBaseAndBitshift+0xa8>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a3c      	ldr	r2, [pc, #240]	; (800761c <DMA_CalcBaseAndBitshift+0x128>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d036      	beq.n	800759c <DMA_CalcBaseAndBitshift+0xa8>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a3b      	ldr	r2, [pc, #236]	; (8007620 <DMA_CalcBaseAndBitshift+0x12c>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d031      	beq.n	800759c <DMA_CalcBaseAndBitshift+0xa8>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a39      	ldr	r2, [pc, #228]	; (8007624 <DMA_CalcBaseAndBitshift+0x130>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d02c      	beq.n	800759c <DMA_CalcBaseAndBitshift+0xa8>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a38      	ldr	r2, [pc, #224]	; (8007628 <DMA_CalcBaseAndBitshift+0x134>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d027      	beq.n	800759c <DMA_CalcBaseAndBitshift+0xa8>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a36      	ldr	r2, [pc, #216]	; (800762c <DMA_CalcBaseAndBitshift+0x138>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d022      	beq.n	800759c <DMA_CalcBaseAndBitshift+0xa8>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a35      	ldr	r2, [pc, #212]	; (8007630 <DMA_CalcBaseAndBitshift+0x13c>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d01d      	beq.n	800759c <DMA_CalcBaseAndBitshift+0xa8>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a33      	ldr	r2, [pc, #204]	; (8007634 <DMA_CalcBaseAndBitshift+0x140>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d018      	beq.n	800759c <DMA_CalcBaseAndBitshift+0xa8>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a32      	ldr	r2, [pc, #200]	; (8007638 <DMA_CalcBaseAndBitshift+0x144>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d013      	beq.n	800759c <DMA_CalcBaseAndBitshift+0xa8>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a30      	ldr	r2, [pc, #192]	; (800763c <DMA_CalcBaseAndBitshift+0x148>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d00e      	beq.n	800759c <DMA_CalcBaseAndBitshift+0xa8>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a2f      	ldr	r2, [pc, #188]	; (8007640 <DMA_CalcBaseAndBitshift+0x14c>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d009      	beq.n	800759c <DMA_CalcBaseAndBitshift+0xa8>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a2d      	ldr	r2, [pc, #180]	; (8007644 <DMA_CalcBaseAndBitshift+0x150>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d004      	beq.n	800759c <DMA_CalcBaseAndBitshift+0xa8>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a2c      	ldr	r2, [pc, #176]	; (8007648 <DMA_CalcBaseAndBitshift+0x154>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d101      	bne.n	80075a0 <DMA_CalcBaseAndBitshift+0xac>
 800759c:	2301      	movs	r3, #1
 800759e:	e000      	b.n	80075a2 <DMA_CalcBaseAndBitshift+0xae>
 80075a0:	2300      	movs	r3, #0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d024      	beq.n	80075f0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	3b10      	subs	r3, #16
 80075ae:	4a27      	ldr	r2, [pc, #156]	; (800764c <DMA_CalcBaseAndBitshift+0x158>)
 80075b0:	fba2 2303 	umull	r2, r3, r2, r3
 80075b4:	091b      	lsrs	r3, r3, #4
 80075b6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f003 0307 	and.w	r3, r3, #7
 80075be:	4a24      	ldr	r2, [pc, #144]	; (8007650 <DMA_CalcBaseAndBitshift+0x15c>)
 80075c0:	5cd3      	ldrb	r3, [r2, r3]
 80075c2:	461a      	mov	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2b03      	cmp	r3, #3
 80075cc:	d908      	bls.n	80075e0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	461a      	mov	r2, r3
 80075d4:	4b1f      	ldr	r3, [pc, #124]	; (8007654 <DMA_CalcBaseAndBitshift+0x160>)
 80075d6:	4013      	ands	r3, r2
 80075d8:	1d1a      	adds	r2, r3, #4
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	659a      	str	r2, [r3, #88]	; 0x58
 80075de:	e00d      	b.n	80075fc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	461a      	mov	r2, r3
 80075e6:	4b1b      	ldr	r3, [pc, #108]	; (8007654 <DMA_CalcBaseAndBitshift+0x160>)
 80075e8:	4013      	ands	r3, r2
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	6593      	str	r3, [r2, #88]	; 0x58
 80075ee:	e005      	b.n	80075fc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007600:	4618      	mov	r0, r3
 8007602:	3714      	adds	r7, #20
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr
 800760c:	40020010 	.word	0x40020010
 8007610:	40020028 	.word	0x40020028
 8007614:	40020040 	.word	0x40020040
 8007618:	40020058 	.word	0x40020058
 800761c:	40020070 	.word	0x40020070
 8007620:	40020088 	.word	0x40020088
 8007624:	400200a0 	.word	0x400200a0
 8007628:	400200b8 	.word	0x400200b8
 800762c:	40020410 	.word	0x40020410
 8007630:	40020428 	.word	0x40020428
 8007634:	40020440 	.word	0x40020440
 8007638:	40020458 	.word	0x40020458
 800763c:	40020470 	.word	0x40020470
 8007640:	40020488 	.word	0x40020488
 8007644:	400204a0 	.word	0x400204a0
 8007648:	400204b8 	.word	0x400204b8
 800764c:	aaaaaaab 	.word	0xaaaaaaab
 8007650:	0801c478 	.word	0x0801c478
 8007654:	fffffc00 	.word	0xfffffc00

08007658 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007660:	2300      	movs	r3, #0
 8007662:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d120      	bne.n	80076ae <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007670:	2b03      	cmp	r3, #3
 8007672:	d858      	bhi.n	8007726 <DMA_CheckFifoParam+0xce>
 8007674:	a201      	add	r2, pc, #4	; (adr r2, 800767c <DMA_CheckFifoParam+0x24>)
 8007676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767a:	bf00      	nop
 800767c:	0800768d 	.word	0x0800768d
 8007680:	0800769f 	.word	0x0800769f
 8007684:	0800768d 	.word	0x0800768d
 8007688:	08007727 	.word	0x08007727
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007690:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007694:	2b00      	cmp	r3, #0
 8007696:	d048      	beq.n	800772a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800769c:	e045      	b.n	800772a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80076a6:	d142      	bne.n	800772e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80076ac:	e03f      	b.n	800772e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076b6:	d123      	bne.n	8007700 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076bc:	2b03      	cmp	r3, #3
 80076be:	d838      	bhi.n	8007732 <DMA_CheckFifoParam+0xda>
 80076c0:	a201      	add	r2, pc, #4	; (adr r2, 80076c8 <DMA_CheckFifoParam+0x70>)
 80076c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c6:	bf00      	nop
 80076c8:	080076d9 	.word	0x080076d9
 80076cc:	080076df 	.word	0x080076df
 80076d0:	080076d9 	.word	0x080076d9
 80076d4:	080076f1 	.word	0x080076f1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	73fb      	strb	r3, [r7, #15]
        break;
 80076dc:	e030      	b.n	8007740 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d025      	beq.n	8007736 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80076ee:	e022      	b.n	8007736 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80076f8:	d11f      	bne.n	800773a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80076fe:	e01c      	b.n	800773a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007704:	2b02      	cmp	r3, #2
 8007706:	d902      	bls.n	800770e <DMA_CheckFifoParam+0xb6>
 8007708:	2b03      	cmp	r3, #3
 800770a:	d003      	beq.n	8007714 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800770c:	e018      	b.n	8007740 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	73fb      	strb	r3, [r7, #15]
        break;
 8007712:	e015      	b.n	8007740 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007718:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d00e      	beq.n	800773e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	73fb      	strb	r3, [r7, #15]
    break;
 8007724:	e00b      	b.n	800773e <DMA_CheckFifoParam+0xe6>
        break;
 8007726:	bf00      	nop
 8007728:	e00a      	b.n	8007740 <DMA_CheckFifoParam+0xe8>
        break;
 800772a:	bf00      	nop
 800772c:	e008      	b.n	8007740 <DMA_CheckFifoParam+0xe8>
        break;
 800772e:	bf00      	nop
 8007730:	e006      	b.n	8007740 <DMA_CheckFifoParam+0xe8>
        break;
 8007732:	bf00      	nop
 8007734:	e004      	b.n	8007740 <DMA_CheckFifoParam+0xe8>
        break;
 8007736:	bf00      	nop
 8007738:	e002      	b.n	8007740 <DMA_CheckFifoParam+0xe8>
        break;
 800773a:	bf00      	nop
 800773c:	e000      	b.n	8007740 <DMA_CheckFifoParam+0xe8>
    break;
 800773e:	bf00      	nop
    }
  }

  return status;
 8007740:	7bfb      	ldrb	r3, [r7, #15]
}
 8007742:	4618      	mov	r0, r3
 8007744:	3714      	adds	r7, #20
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop

08007750 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a38      	ldr	r2, [pc, #224]	; (8007844 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d022      	beq.n	80077ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a36      	ldr	r2, [pc, #216]	; (8007848 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d01d      	beq.n	80077ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a35      	ldr	r2, [pc, #212]	; (800784c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d018      	beq.n	80077ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a33      	ldr	r2, [pc, #204]	; (8007850 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d013      	beq.n	80077ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a32      	ldr	r2, [pc, #200]	; (8007854 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d00e      	beq.n	80077ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a30      	ldr	r2, [pc, #192]	; (8007858 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d009      	beq.n	80077ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a2f      	ldr	r2, [pc, #188]	; (800785c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d004      	beq.n	80077ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a2d      	ldr	r2, [pc, #180]	; (8007860 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d101      	bne.n	80077b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80077ae:	2301      	movs	r3, #1
 80077b0:	e000      	b.n	80077b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80077b2:	2300      	movs	r3, #0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d01a      	beq.n	80077ee <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	3b08      	subs	r3, #8
 80077c0:	4a28      	ldr	r2, [pc, #160]	; (8007864 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80077c2:	fba2 2303 	umull	r2, r3, r2, r3
 80077c6:	091b      	lsrs	r3, r3, #4
 80077c8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	4b26      	ldr	r3, [pc, #152]	; (8007868 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80077ce:	4413      	add	r3, r2
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	461a      	mov	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a24      	ldr	r2, [pc, #144]	; (800786c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80077dc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f003 031f 	and.w	r3, r3, #31
 80077e4:	2201      	movs	r2, #1
 80077e6:	409a      	lsls	r2, r3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80077ec:	e024      	b.n	8007838 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	3b10      	subs	r3, #16
 80077f6:	4a1e      	ldr	r2, [pc, #120]	; (8007870 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80077f8:	fba2 2303 	umull	r2, r3, r2, r3
 80077fc:	091b      	lsrs	r3, r3, #4
 80077fe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	4a1c      	ldr	r2, [pc, #112]	; (8007874 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d806      	bhi.n	8007816 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	4a1b      	ldr	r2, [pc, #108]	; (8007878 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d902      	bls.n	8007816 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	3308      	adds	r3, #8
 8007814:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	4b18      	ldr	r3, [pc, #96]	; (800787c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800781a:	4413      	add	r3, r2
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	461a      	mov	r2, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4a16      	ldr	r2, [pc, #88]	; (8007880 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007828:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f003 031f 	and.w	r3, r3, #31
 8007830:	2201      	movs	r2, #1
 8007832:	409a      	lsls	r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007838:	bf00      	nop
 800783a:	3714      	adds	r7, #20
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr
 8007844:	58025408 	.word	0x58025408
 8007848:	5802541c 	.word	0x5802541c
 800784c:	58025430 	.word	0x58025430
 8007850:	58025444 	.word	0x58025444
 8007854:	58025458 	.word	0x58025458
 8007858:	5802546c 	.word	0x5802546c
 800785c:	58025480 	.word	0x58025480
 8007860:	58025494 	.word	0x58025494
 8007864:	cccccccd 	.word	0xcccccccd
 8007868:	16009600 	.word	0x16009600
 800786c:	58025880 	.word	0x58025880
 8007870:	aaaaaaab 	.word	0xaaaaaaab
 8007874:	400204b8 	.word	0x400204b8
 8007878:	4002040f 	.word	0x4002040f
 800787c:	10008200 	.word	0x10008200
 8007880:	40020880 	.word	0x40020880

08007884 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007884:	b480      	push	{r7}
 8007886:	b085      	sub	sp, #20
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	b2db      	uxtb	r3, r3
 8007892:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d04a      	beq.n	8007930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2b08      	cmp	r3, #8
 800789e:	d847      	bhi.n	8007930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a25      	ldr	r2, [pc, #148]	; (800793c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d022      	beq.n	80078f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a24      	ldr	r2, [pc, #144]	; (8007940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d01d      	beq.n	80078f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a22      	ldr	r2, [pc, #136]	; (8007944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d018      	beq.n	80078f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a21      	ldr	r2, [pc, #132]	; (8007948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d013      	beq.n	80078f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a1f      	ldr	r2, [pc, #124]	; (800794c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d00e      	beq.n	80078f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a1e      	ldr	r2, [pc, #120]	; (8007950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d009      	beq.n	80078f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a1c      	ldr	r2, [pc, #112]	; (8007954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d004      	beq.n	80078f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a1b      	ldr	r2, [pc, #108]	; (8007958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d101      	bne.n	80078f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80078f0:	2301      	movs	r3, #1
 80078f2:	e000      	b.n	80078f6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80078f4:	2300      	movs	r3, #0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00a      	beq.n	8007910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	4b17      	ldr	r3, [pc, #92]	; (800795c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80078fe:	4413      	add	r3, r2
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	461a      	mov	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4a15      	ldr	r2, [pc, #84]	; (8007960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800790c:	671a      	str	r2, [r3, #112]	; 0x70
 800790e:	e009      	b.n	8007924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007910:	68fa      	ldr	r2, [r7, #12]
 8007912:	4b14      	ldr	r3, [pc, #80]	; (8007964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007914:	4413      	add	r3, r2
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	461a      	mov	r2, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a11      	ldr	r2, [pc, #68]	; (8007968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007922:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	3b01      	subs	r3, #1
 8007928:	2201      	movs	r2, #1
 800792a:	409a      	lsls	r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007930:	bf00      	nop
 8007932:	3714      	adds	r7, #20
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr
 800793c:	58025408 	.word	0x58025408
 8007940:	5802541c 	.word	0x5802541c
 8007944:	58025430 	.word	0x58025430
 8007948:	58025444 	.word	0x58025444
 800794c:	58025458 	.word	0x58025458
 8007950:	5802546c 	.word	0x5802546c
 8007954:	58025480 	.word	0x58025480
 8007958:	58025494 	.word	0x58025494
 800795c:	1600963f 	.word	0x1600963f
 8007960:	58025940 	.word	0x58025940
 8007964:	1000823f 	.word	0x1000823f
 8007968:	40020940 	.word	0x40020940

0800796c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d101      	bne.n	800797e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	e0cf      	b.n	8007b1e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007984:	2b00      	cmp	r3, #0
 8007986:	d106      	bne.n	8007996 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2223      	movs	r2, #35	; 0x23
 800798c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f7fa fe41 	bl	8002618 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007996:	4b64      	ldr	r3, [pc, #400]	; (8007b28 <HAL_ETH_Init+0x1bc>)
 8007998:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800799c:	4a62      	ldr	r2, [pc, #392]	; (8007b28 <HAL_ETH_Init+0x1bc>)
 800799e:	f043 0302 	orr.w	r3, r3, #2
 80079a2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80079a6:	4b60      	ldr	r3, [pc, #384]	; (8007b28 <HAL_ETH_Init+0x1bc>)
 80079a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80079ac:	f003 0302 	and.w	r3, r3, #2
 80079b0:	60bb      	str	r3, [r7, #8]
 80079b2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	7a1b      	ldrb	r3, [r3, #8]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d103      	bne.n	80079c4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80079bc:	2000      	movs	r0, #0
 80079be:	f7fb fd75 	bl	80034ac <HAL_SYSCFG_ETHInterfaceSelect>
 80079c2:	e003      	b.n	80079cc <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80079c4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80079c8:	f7fb fd70 	bl	80034ac <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80079cc:	4b57      	ldr	r3, [pc, #348]	; (8007b2c <HAL_ETH_Init+0x1c0>)
 80079ce:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	6812      	ldr	r2, [r2, #0]
 80079de:	f043 0301 	orr.w	r3, r3, #1
 80079e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80079e6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80079e8:	f7fb fd24 	bl	8003434 <HAL_GetTick>
 80079ec:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80079ee:	e011      	b.n	8007a14 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80079f0:	f7fb fd20 	bl	8003434 <HAL_GetTick>
 80079f4:	4602      	mov	r2, r0
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80079fe:	d909      	bls.n	8007a14 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2204      	movs	r2, #4
 8007a04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	22e0      	movs	r2, #224	; 0xe0
 8007a0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e084      	b.n	8007b1e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 0301 	and.w	r3, r3, #1
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1e4      	bne.n	80079f0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f886 	bl	8007b38 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8007a2c:	f003 fa74 	bl	800af18 <HAL_RCC_GetHCLKFreq>
 8007a30:	4603      	mov	r3, r0
 8007a32:	4a3f      	ldr	r2, [pc, #252]	; (8007b30 <HAL_ETH_Init+0x1c4>)
 8007a34:	fba2 2303 	umull	r2, r3, r2, r3
 8007a38:	0c9a      	lsrs	r2, r3, #18
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	3a01      	subs	r2, #1
 8007a40:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 fa71 	bl	8007f2c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a52:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8007a56:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	6812      	ldr	r2, [r2, #0]
 8007a5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007a66:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	695b      	ldr	r3, [r3, #20]
 8007a6e:	f003 0303 	and.w	r3, r3, #3
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d009      	beq.n	8007a8a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	22e0      	movs	r2, #224	; 0xe0
 8007a82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e049      	b.n	8007b1e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a92:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8007a96:	4b27      	ldr	r3, [pc, #156]	; (8007b34 <HAL_ETH_Init+0x1c8>)
 8007a98:	4013      	ands	r3, r2
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	6952      	ldr	r2, [r2, #20]
 8007a9e:	0051      	lsls	r1, r2, #1
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	6812      	ldr	r2, [r2, #0]
 8007aa4:	430b      	orrs	r3, r1
 8007aa6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007aaa:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fad9 	bl	8008066 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 fb1f 	bl	80080f8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	3305      	adds	r3, #5
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	021a      	lsls	r2, r3, #8
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	3304      	adds	r3, #4
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	4619      	mov	r1, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	430a      	orrs	r2, r1
 8007ad4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	3303      	adds	r3, #3
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	061a      	lsls	r2, r3, #24
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	3302      	adds	r3, #2
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	041b      	lsls	r3, r3, #16
 8007aec:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	3301      	adds	r3, #1
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8007af8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8007b06:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8007b08:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2210      	movs	r2, #16
 8007b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	58024400 	.word	0x58024400
 8007b2c:	58000400 	.word	0x58000400
 8007b30:	431bde83 	.word	0x431bde83
 8007b34:	ffff8001 	.word	0xffff8001

08007b38 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007b48:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007b50:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8007b52:	f003 f9e1 	bl	800af18 <HAL_RCC_GetHCLKFreq>
 8007b56:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	4a1e      	ldr	r2, [pc, #120]	; (8007bd4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d908      	bls.n	8007b72 <HAL_ETH_SetMDIOClockRange+0x3a>
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	4a1d      	ldr	r2, [pc, #116]	; (8007bd8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d804      	bhi.n	8007b72 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b6e:	60fb      	str	r3, [r7, #12]
 8007b70:	e027      	b.n	8007bc2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	4a18      	ldr	r2, [pc, #96]	; (8007bd8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d908      	bls.n	8007b8c <HAL_ETH_SetMDIOClockRange+0x54>
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	4a17      	ldr	r2, [pc, #92]	; (8007bdc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d204      	bcs.n	8007b8c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007b88:	60fb      	str	r3, [r7, #12]
 8007b8a:	e01a      	b.n	8007bc2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	4a13      	ldr	r2, [pc, #76]	; (8007bdc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d303      	bcc.n	8007b9c <HAL_ETH_SetMDIOClockRange+0x64>
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	4a12      	ldr	r2, [pc, #72]	; (8007be0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d911      	bls.n	8007bc0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	4a10      	ldr	r2, [pc, #64]	; (8007be0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d908      	bls.n	8007bb6 <HAL_ETH_SetMDIOClockRange+0x7e>
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	4a0f      	ldr	r2, [pc, #60]	; (8007be4 <HAL_ETH_SetMDIOClockRange+0xac>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d804      	bhi.n	8007bb6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bb2:	60fb      	str	r3, [r7, #12]
 8007bb4:	e005      	b.n	8007bc2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007bbc:	60fb      	str	r3, [r7, #12]
 8007bbe:	e000      	b.n	8007bc2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8007bc0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68fa      	ldr	r2, [r7, #12]
 8007bc8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8007bcc:	bf00      	nop
 8007bce:	3710      	adds	r7, #16
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	01312cff 	.word	0x01312cff
 8007bd8:	02160ebf 	.word	0x02160ebf
 8007bdc:	03938700 	.word	0x03938700
 8007be0:	05f5e0ff 	.word	0x05f5e0ff
 8007be4:	08f0d17f 	.word	0x08f0d17f

08007be8 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b085      	sub	sp, #20
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8007bfa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	791b      	ldrb	r3, [r3, #4]
 8007c00:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8007c02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	7b1b      	ldrb	r3, [r3, #12]
 8007c08:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8007c0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	7b5b      	ldrb	r3, [r3, #13]
 8007c10:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8007c12:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	7b9b      	ldrb	r3, [r3, #14]
 8007c18:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8007c1a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	7bdb      	ldrb	r3, [r3, #15]
 8007c20:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8007c22:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8007c24:	683a      	ldr	r2, [r7, #0]
 8007c26:	7c12      	ldrb	r2, [r2, #16]
 8007c28:	2a00      	cmp	r2, #0
 8007c2a:	d102      	bne.n	8007c32 <ETH_SetMACConfig+0x4a>
 8007c2c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007c30:	e000      	b.n	8007c34 <ETH_SetMACConfig+0x4c>
 8007c32:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8007c34:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8007c36:	683a      	ldr	r2, [r7, #0]
 8007c38:	7c52      	ldrb	r2, [r2, #17]
 8007c3a:	2a00      	cmp	r2, #0
 8007c3c:	d102      	bne.n	8007c44 <ETH_SetMACConfig+0x5c>
 8007c3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007c42:	e000      	b.n	8007c46 <ETH_SetMACConfig+0x5e>
 8007c44:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8007c46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	7c9b      	ldrb	r3, [r3, #18]
 8007c4c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8007c4e:	431a      	orrs	r2, r3
               macconf->Speed |
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8007c54:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8007c5a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	7f1b      	ldrb	r3, [r3, #28]
 8007c60:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8007c62:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	7f5b      	ldrb	r3, [r3, #29]
 8007c68:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8007c6a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8007c6c:	683a      	ldr	r2, [r7, #0]
 8007c6e:	7f92      	ldrb	r2, [r2, #30]
 8007c70:	2a00      	cmp	r2, #0
 8007c72:	d102      	bne.n	8007c7a <ETH_SetMACConfig+0x92>
 8007c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007c78:	e000      	b.n	8007c7c <ETH_SetMACConfig+0x94>
 8007c7a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8007c7c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	7fdb      	ldrb	r3, [r3, #31]
 8007c82:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8007c84:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8007c86:	683a      	ldr	r2, [r7, #0]
 8007c88:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007c8c:	2a00      	cmp	r2, #0
 8007c8e:	d102      	bne.n	8007c96 <ETH_SetMACConfig+0xae>
 8007c90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c94:	e000      	b.n	8007c98 <ETH_SetMACConfig+0xb0>
 8007c96:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8007c98:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8007c9e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ca6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8007ca8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	4b56      	ldr	r3, [pc, #344]	; (8007e14 <ETH_SetMACConfig+0x22c>)
 8007cba:	4013      	ands	r3, r2
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	6812      	ldr	r2, [r2, #0]
 8007cc0:	68f9      	ldr	r1, [r7, #12]
 8007cc2:	430b      	orrs	r3, r1
 8007cc4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cca:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007cd2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8007cd4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007cdc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8007cde:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007ce6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8007ce8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8007cea:	683a      	ldr	r2, [r7, #0]
 8007cec:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8007cf0:	2a00      	cmp	r2, #0
 8007cf2:	d102      	bne.n	8007cfa <ETH_SetMACConfig+0x112>
 8007cf4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007cf8:	e000      	b.n	8007cfc <ETH_SetMACConfig+0x114>
 8007cfa:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8007cfc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8007d02:	4313      	orrs	r3, r2
 8007d04:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	685a      	ldr	r2, [r3, #4]
 8007d0c:	4b42      	ldr	r3, [pc, #264]	; (8007e18 <ETH_SetMACConfig+0x230>)
 8007d0e:	4013      	ands	r3, r2
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	6812      	ldr	r2, [r2, #0]
 8007d14:	68f9      	ldr	r1, [r7, #12]
 8007d16:	430b      	orrs	r3, r1
 8007d18:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d20:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8007d26:	4313      	orrs	r3, r2
 8007d28:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68da      	ldr	r2, [r3, #12]
 8007d30:	4b3a      	ldr	r3, [pc, #232]	; (8007e1c <ETH_SetMACConfig+0x234>)
 8007d32:	4013      	ands	r3, r2
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	6812      	ldr	r2, [r2, #0]
 8007d38:	68f9      	ldr	r1, [r7, #12]
 8007d3a:	430b      	orrs	r3, r1
 8007d3c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007d44:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007d4a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8007d4c:	683a      	ldr	r2, [r7, #0]
 8007d4e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8007d52:	2a00      	cmp	r2, #0
 8007d54:	d101      	bne.n	8007d5a <ETH_SetMACConfig+0x172>
 8007d56:	2280      	movs	r2, #128	; 0x80
 8007d58:	e000      	b.n	8007d5c <ETH_SetMACConfig+0x174>
 8007d5a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8007d5c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d62:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007d64:	4313      	orrs	r3, r2
 8007d66:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007d6e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8007d72:	4013      	ands	r3, r2
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	6812      	ldr	r2, [r2, #0]
 8007d78:	68f9      	ldr	r1, [r7, #12]
 8007d7a:	430b      	orrs	r3, r1
 8007d7c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007d84:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8007d8c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d9a:	f023 0103 	bic.w	r1, r3, #3
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	430a      	orrs	r2, r1
 8007da6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8007db2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	430a      	orrs	r2, r1
 8007dc0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8007dc8:	683a      	ldr	r2, [r7, #0]
 8007dca:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8007dce:	2a00      	cmp	r2, #0
 8007dd0:	d101      	bne.n	8007dd6 <ETH_SetMACConfig+0x1ee>
 8007dd2:	2240      	movs	r2, #64	; 0x40
 8007dd4:	e000      	b.n	8007dd8 <ETH_SetMACConfig+0x1f0>
 8007dd6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8007dd8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007de0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8007de2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8007dea:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8007dec:	4313      	orrs	r3, r2
 8007dee:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8007df8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	430a      	orrs	r2, r1
 8007e04:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8007e08:	bf00      	nop
 8007e0a:	3714      	adds	r7, #20
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr
 8007e14:	00048083 	.word	0x00048083
 8007e18:	c0f88000 	.word	0xc0f88000
 8007e1c:	fffffef0 	.word	0xfffffef0

08007e20 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b085      	sub	sp, #20
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	4b38      	ldr	r3, [pc, #224]	; (8007f18 <ETH_SetDMAConfig+0xf8>)
 8007e36:	4013      	ands	r3, r2
 8007e38:	683a      	ldr	r2, [r7, #0]
 8007e3a:	6811      	ldr	r1, [r2, #0]
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	6812      	ldr	r2, [r2, #0]
 8007e40:	430b      	orrs	r3, r1
 8007e42:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007e46:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	791b      	ldrb	r3, [r3, #4]
 8007e4c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007e52:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	7b1b      	ldrb	r3, [r3, #12]
 8007e58:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e66:	685a      	ldr	r2, [r3, #4]
 8007e68:	4b2c      	ldr	r3, [pc, #176]	; (8007f1c <ETH_SetDMAConfig+0xfc>)
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	6812      	ldr	r2, [r2, #0]
 8007e70:	68f9      	ldr	r1, [r7, #12]
 8007e72:	430b      	orrs	r3, r1
 8007e74:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007e78:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	7b5b      	ldrb	r3, [r3, #13]
 8007e7e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8007e84:	4313      	orrs	r3, r2
 8007e86:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e90:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8007e94:	4b22      	ldr	r3, [pc, #136]	; (8007f20 <ETH_SetDMAConfig+0x100>)
 8007e96:	4013      	ands	r3, r2
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	6812      	ldr	r2, [r2, #0]
 8007e9c:	68f9      	ldr	r1, [r7, #12]
 8007e9e:	430b      	orrs	r3, r1
 8007ea0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007ea4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	7d1b      	ldrb	r3, [r3, #20]
 8007eb0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8007eb2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	7f5b      	ldrb	r3, [r3, #29]
 8007eb8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ec6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8007eca:	4b16      	ldr	r3, [pc, #88]	; (8007f24 <ETH_SetDMAConfig+0x104>)
 8007ecc:	4013      	ands	r3, r2
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	6812      	ldr	r2, [r2, #0]
 8007ed2:	68f9      	ldr	r1, [r7, #12]
 8007ed4:	430b      	orrs	r3, r1
 8007ed6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007eda:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	7f1b      	ldrb	r3, [r3, #28]
 8007ee2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ef4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8007ef8:	4b0b      	ldr	r3, [pc, #44]	; (8007f28 <ETH_SetDMAConfig+0x108>)
 8007efa:	4013      	ands	r3, r2
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	6812      	ldr	r2, [r2, #0]
 8007f00:	68f9      	ldr	r1, [r7, #12]
 8007f02:	430b      	orrs	r3, r1
 8007f04:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007f08:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8007f0c:	bf00      	nop
 8007f0e:	3714      	adds	r7, #20
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr
 8007f18:	ffff87fd 	.word	0xffff87fd
 8007f1c:	ffff2ffe 	.word	0xffff2ffe
 8007f20:	fffec000 	.word	0xfffec000
 8007f24:	ffc0efef 	.word	0xffc0efef
 8007f28:	7fc0ffff 	.word	0x7fc0ffff

08007f2c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b0a4      	sub	sp, #144	; 0x90
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8007f34:	2301      	movs	r3, #1
 8007f36:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8007f44:	2300      	movs	r3, #0
 8007f46:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8007f50:	2301      	movs	r3, #1
 8007f52:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8007f56:	2301      	movs	r3, #1
 8007f58:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8007f62:	2301      	movs	r3, #1
 8007f64:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8007f68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f6c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8007f74:	2300      	movs	r3, #0
 8007f76:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8007f84:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8007f88:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8007f90:	2300      	movs	r3, #0
 8007f92:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8007f94:	2301      	movs	r3, #1
 8007f96:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8007faa:	2300      	movs	r3, #0
 8007fac:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8007fc4:	2320      	movs	r3, #32
 8007fc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8007fd6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8007fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8007fdc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007fe0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8007fe8:	2302      	movs	r3, #2
 8007fea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8008000:	2301      	movs	r3, #1
 8008002:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8008006:	2300      	movs	r3, #0
 8008008:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800800a:	2301      	movs	r3, #1
 800800c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8008010:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008014:	4619      	mov	r1, r3
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f7ff fde6 	bl	8007be8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800801c:	2301      	movs	r3, #1
 800801e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8008020:	2301      	movs	r3, #1
 8008022:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8008024:	2300      	movs	r3, #0
 8008026:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8008028:	2300      	movs	r3, #0
 800802a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800802e:	2300      	movs	r3, #0
 8008030:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8008032:	2300      	movs	r3, #0
 8008034:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8008036:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800803a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800803c:	2300      	movs	r3, #0
 800803e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8008040:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008044:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8008046:	2300      	movs	r3, #0
 8008048:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800804c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8008050:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8008052:	f107 0308 	add.w	r3, r7, #8
 8008056:	4619      	mov	r1, r3
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f7ff fee1 	bl	8007e20 <ETH_SetDMAConfig>
}
 800805e:	bf00      	nop
 8008060:	3790      	adds	r7, #144	; 0x90
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}

08008066 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8008066:	b480      	push	{r7}
 8008068:	b085      	sub	sp, #20
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800806e:	2300      	movs	r3, #0
 8008070:	60fb      	str	r3, [r7, #12]
 8008072:	e01d      	b.n	80080b0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	68d9      	ldr	r1, [r3, #12]
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	4613      	mov	r3, r2
 800807c:	005b      	lsls	r3, r3, #1
 800807e:	4413      	add	r3, r2
 8008080:	00db      	lsls	r3, r3, #3
 8008082:	440b      	add	r3, r1
 8008084:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	2200      	movs	r2, #0
 800808a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	2200      	movs	r2, #0
 8008090:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	2200      	movs	r2, #0
 8008096:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	2200      	movs	r2, #0
 800809c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800809e:	68b9      	ldr	r1, [r7, #8]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	3206      	adds	r2, #6
 80080a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	3301      	adds	r3, #1
 80080ae:	60fb      	str	r3, [r7, #12]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2b03      	cmp	r3, #3
 80080b4:	d9de      	bls.n	8008074 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080c4:	461a      	mov	r2, r3
 80080c6:	2303      	movs	r3, #3
 80080c8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	68da      	ldr	r2, [r3, #12]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080d8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	68da      	ldr	r2, [r3, #12]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080e8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80080ec:	bf00      	nop
 80080ee:	3714      	adds	r7, #20
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8008100:	2300      	movs	r3, #0
 8008102:	60fb      	str	r3, [r7, #12]
 8008104:	e023      	b.n	800814e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6919      	ldr	r1, [r3, #16]
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	4613      	mov	r3, r2
 800810e:	005b      	lsls	r3, r3, #1
 8008110:	4413      	add	r3, r2
 8008112:	00db      	lsls	r3, r3, #3
 8008114:	440b      	add	r3, r1
 8008116:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	2200      	movs	r2, #0
 800811c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	2200      	movs	r2, #0
 8008122:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	2200      	movs	r2, #0
 8008128:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	2200      	movs	r2, #0
 800812e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	2200      	movs	r2, #0
 8008134:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	2200      	movs	r2, #0
 800813a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800813c:	68b9      	ldr	r1, [r7, #8]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	3212      	adds	r2, #18
 8008144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	3301      	adds	r3, #1
 800814c:	60fb      	str	r3, [r7, #12]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2b03      	cmp	r3, #3
 8008152:	d9d8      	bls.n	8008106 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800817a:	461a      	mov	r2, r3
 800817c:	2303      	movs	r3, #3
 800817e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	691a      	ldr	r2, [r3, #16]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800818e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081a2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80081a6:	bf00      	nop
 80081a8:	3714      	adds	r7, #20
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr
	...

080081b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b089      	sub	sp, #36	; 0x24
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80081be:	2300      	movs	r3, #0
 80081c0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80081c2:	4b89      	ldr	r3, [pc, #548]	; (80083e8 <HAL_GPIO_Init+0x234>)
 80081c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80081c6:	e194      	b.n	80084f2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	2101      	movs	r1, #1
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	fa01 f303 	lsl.w	r3, r1, r3
 80081d4:	4013      	ands	r3, r2
 80081d6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f000 8186 	beq.w	80084ec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	f003 0303 	and.w	r3, r3, #3
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d005      	beq.n	80081f8 <HAL_GPIO_Init+0x44>
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	f003 0303 	and.w	r3, r3, #3
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d130      	bne.n	800825a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	005b      	lsls	r3, r3, #1
 8008202:	2203      	movs	r2, #3
 8008204:	fa02 f303 	lsl.w	r3, r2, r3
 8008208:	43db      	mvns	r3, r3
 800820a:	69ba      	ldr	r2, [r7, #24]
 800820c:	4013      	ands	r3, r2
 800820e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	68da      	ldr	r2, [r3, #12]
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	005b      	lsls	r3, r3, #1
 8008218:	fa02 f303 	lsl.w	r3, r2, r3
 800821c:	69ba      	ldr	r2, [r7, #24]
 800821e:	4313      	orrs	r3, r2
 8008220:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	69ba      	ldr	r2, [r7, #24]
 8008226:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800822e:	2201      	movs	r2, #1
 8008230:	69fb      	ldr	r3, [r7, #28]
 8008232:	fa02 f303 	lsl.w	r3, r2, r3
 8008236:	43db      	mvns	r3, r3
 8008238:	69ba      	ldr	r2, [r7, #24]
 800823a:	4013      	ands	r3, r2
 800823c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	091b      	lsrs	r3, r3, #4
 8008244:	f003 0201 	and.w	r2, r3, #1
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	fa02 f303 	lsl.w	r3, r2, r3
 800824e:	69ba      	ldr	r2, [r7, #24]
 8008250:	4313      	orrs	r3, r2
 8008252:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	69ba      	ldr	r2, [r7, #24]
 8008258:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	f003 0303 	and.w	r3, r3, #3
 8008262:	2b03      	cmp	r3, #3
 8008264:	d017      	beq.n	8008296 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800826c:	69fb      	ldr	r3, [r7, #28]
 800826e:	005b      	lsls	r3, r3, #1
 8008270:	2203      	movs	r2, #3
 8008272:	fa02 f303 	lsl.w	r3, r2, r3
 8008276:	43db      	mvns	r3, r3
 8008278:	69ba      	ldr	r2, [r7, #24]
 800827a:	4013      	ands	r3, r2
 800827c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	689a      	ldr	r2, [r3, #8]
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	005b      	lsls	r3, r3, #1
 8008286:	fa02 f303 	lsl.w	r3, r2, r3
 800828a:	69ba      	ldr	r2, [r7, #24]
 800828c:	4313      	orrs	r3, r2
 800828e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	69ba      	ldr	r2, [r7, #24]
 8008294:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	f003 0303 	and.w	r3, r3, #3
 800829e:	2b02      	cmp	r3, #2
 80082a0:	d123      	bne.n	80082ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	08da      	lsrs	r2, r3, #3
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	3208      	adds	r2, #8
 80082aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	f003 0307 	and.w	r3, r3, #7
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	220f      	movs	r2, #15
 80082ba:	fa02 f303 	lsl.w	r3, r2, r3
 80082be:	43db      	mvns	r3, r3
 80082c0:	69ba      	ldr	r2, [r7, #24]
 80082c2:	4013      	ands	r3, r2
 80082c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	691a      	ldr	r2, [r3, #16]
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	f003 0307 	and.w	r3, r3, #7
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	fa02 f303 	lsl.w	r3, r2, r3
 80082d6:	69ba      	ldr	r2, [r7, #24]
 80082d8:	4313      	orrs	r3, r2
 80082da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80082dc:	69fb      	ldr	r3, [r7, #28]
 80082de:	08da      	lsrs	r2, r3, #3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	3208      	adds	r2, #8
 80082e4:	69b9      	ldr	r1, [r7, #24]
 80082e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	005b      	lsls	r3, r3, #1
 80082f4:	2203      	movs	r2, #3
 80082f6:	fa02 f303 	lsl.w	r3, r2, r3
 80082fa:	43db      	mvns	r3, r3
 80082fc:	69ba      	ldr	r2, [r7, #24]
 80082fe:	4013      	ands	r3, r2
 8008300:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	f003 0203 	and.w	r2, r3, #3
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	005b      	lsls	r3, r3, #1
 800830e:	fa02 f303 	lsl.w	r3, r2, r3
 8008312:	69ba      	ldr	r2, [r7, #24]
 8008314:	4313      	orrs	r3, r2
 8008316:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	69ba      	ldr	r2, [r7, #24]
 800831c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008326:	2b00      	cmp	r3, #0
 8008328:	f000 80e0 	beq.w	80084ec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800832c:	4b2f      	ldr	r3, [pc, #188]	; (80083ec <HAL_GPIO_Init+0x238>)
 800832e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008332:	4a2e      	ldr	r2, [pc, #184]	; (80083ec <HAL_GPIO_Init+0x238>)
 8008334:	f043 0302 	orr.w	r3, r3, #2
 8008338:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800833c:	4b2b      	ldr	r3, [pc, #172]	; (80083ec <HAL_GPIO_Init+0x238>)
 800833e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008342:	f003 0302 	and.w	r3, r3, #2
 8008346:	60fb      	str	r3, [r7, #12]
 8008348:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800834a:	4a29      	ldr	r2, [pc, #164]	; (80083f0 <HAL_GPIO_Init+0x23c>)
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	089b      	lsrs	r3, r3, #2
 8008350:	3302      	adds	r3, #2
 8008352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008356:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	f003 0303 	and.w	r3, r3, #3
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	220f      	movs	r2, #15
 8008362:	fa02 f303 	lsl.w	r3, r2, r3
 8008366:	43db      	mvns	r3, r3
 8008368:	69ba      	ldr	r2, [r7, #24]
 800836a:	4013      	ands	r3, r2
 800836c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a20      	ldr	r2, [pc, #128]	; (80083f4 <HAL_GPIO_Init+0x240>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d052      	beq.n	800841c <HAL_GPIO_Init+0x268>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4a1f      	ldr	r2, [pc, #124]	; (80083f8 <HAL_GPIO_Init+0x244>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d031      	beq.n	80083e2 <HAL_GPIO_Init+0x22e>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a1e      	ldr	r2, [pc, #120]	; (80083fc <HAL_GPIO_Init+0x248>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d02b      	beq.n	80083de <HAL_GPIO_Init+0x22a>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4a1d      	ldr	r2, [pc, #116]	; (8008400 <HAL_GPIO_Init+0x24c>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d025      	beq.n	80083da <HAL_GPIO_Init+0x226>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a1c      	ldr	r2, [pc, #112]	; (8008404 <HAL_GPIO_Init+0x250>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d01f      	beq.n	80083d6 <HAL_GPIO_Init+0x222>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4a1b      	ldr	r2, [pc, #108]	; (8008408 <HAL_GPIO_Init+0x254>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d019      	beq.n	80083d2 <HAL_GPIO_Init+0x21e>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4a1a      	ldr	r2, [pc, #104]	; (800840c <HAL_GPIO_Init+0x258>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d013      	beq.n	80083ce <HAL_GPIO_Init+0x21a>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4a19      	ldr	r2, [pc, #100]	; (8008410 <HAL_GPIO_Init+0x25c>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d00d      	beq.n	80083ca <HAL_GPIO_Init+0x216>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4a18      	ldr	r2, [pc, #96]	; (8008414 <HAL_GPIO_Init+0x260>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d007      	beq.n	80083c6 <HAL_GPIO_Init+0x212>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	4a17      	ldr	r2, [pc, #92]	; (8008418 <HAL_GPIO_Init+0x264>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d101      	bne.n	80083c2 <HAL_GPIO_Init+0x20e>
 80083be:	2309      	movs	r3, #9
 80083c0:	e02d      	b.n	800841e <HAL_GPIO_Init+0x26a>
 80083c2:	230a      	movs	r3, #10
 80083c4:	e02b      	b.n	800841e <HAL_GPIO_Init+0x26a>
 80083c6:	2308      	movs	r3, #8
 80083c8:	e029      	b.n	800841e <HAL_GPIO_Init+0x26a>
 80083ca:	2307      	movs	r3, #7
 80083cc:	e027      	b.n	800841e <HAL_GPIO_Init+0x26a>
 80083ce:	2306      	movs	r3, #6
 80083d0:	e025      	b.n	800841e <HAL_GPIO_Init+0x26a>
 80083d2:	2305      	movs	r3, #5
 80083d4:	e023      	b.n	800841e <HAL_GPIO_Init+0x26a>
 80083d6:	2304      	movs	r3, #4
 80083d8:	e021      	b.n	800841e <HAL_GPIO_Init+0x26a>
 80083da:	2303      	movs	r3, #3
 80083dc:	e01f      	b.n	800841e <HAL_GPIO_Init+0x26a>
 80083de:	2302      	movs	r3, #2
 80083e0:	e01d      	b.n	800841e <HAL_GPIO_Init+0x26a>
 80083e2:	2301      	movs	r3, #1
 80083e4:	e01b      	b.n	800841e <HAL_GPIO_Init+0x26a>
 80083e6:	bf00      	nop
 80083e8:	58000080 	.word	0x58000080
 80083ec:	58024400 	.word	0x58024400
 80083f0:	58000400 	.word	0x58000400
 80083f4:	58020000 	.word	0x58020000
 80083f8:	58020400 	.word	0x58020400
 80083fc:	58020800 	.word	0x58020800
 8008400:	58020c00 	.word	0x58020c00
 8008404:	58021000 	.word	0x58021000
 8008408:	58021400 	.word	0x58021400
 800840c:	58021800 	.word	0x58021800
 8008410:	58021c00 	.word	0x58021c00
 8008414:	58022000 	.word	0x58022000
 8008418:	58022400 	.word	0x58022400
 800841c:	2300      	movs	r3, #0
 800841e:	69fa      	ldr	r2, [r7, #28]
 8008420:	f002 0203 	and.w	r2, r2, #3
 8008424:	0092      	lsls	r2, r2, #2
 8008426:	4093      	lsls	r3, r2
 8008428:	69ba      	ldr	r2, [r7, #24]
 800842a:	4313      	orrs	r3, r2
 800842c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800842e:	4938      	ldr	r1, [pc, #224]	; (8008510 <HAL_GPIO_Init+0x35c>)
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	089b      	lsrs	r3, r3, #2
 8008434:	3302      	adds	r3, #2
 8008436:	69ba      	ldr	r2, [r7, #24]
 8008438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800843c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	43db      	mvns	r3, r3
 8008448:	69ba      	ldr	r2, [r7, #24]
 800844a:	4013      	ands	r3, r2
 800844c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008456:	2b00      	cmp	r3, #0
 8008458:	d003      	beq.n	8008462 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800845a:	69ba      	ldr	r2, [r7, #24]
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	4313      	orrs	r3, r2
 8008460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008462:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800846a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	43db      	mvns	r3, r3
 8008476:	69ba      	ldr	r2, [r7, #24]
 8008478:	4013      	ands	r3, r2
 800847a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008484:	2b00      	cmp	r3, #0
 8008486:	d003      	beq.n	8008490 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008488:	69ba      	ldr	r2, [r7, #24]
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	4313      	orrs	r3, r2
 800848e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008490:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	43db      	mvns	r3, r3
 80084a2:	69ba      	ldr	r2, [r7, #24]
 80084a4:	4013      	ands	r3, r2
 80084a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d003      	beq.n	80084bc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80084b4:	69ba      	ldr	r2, [r7, #24]
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	69ba      	ldr	r2, [r7, #24]
 80084c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	43db      	mvns	r3, r3
 80084cc:	69ba      	ldr	r2, [r7, #24]
 80084ce:	4013      	ands	r3, r2
 80084d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d003      	beq.n	80084e6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80084de:	69ba      	ldr	r2, [r7, #24]
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	69ba      	ldr	r2, [r7, #24]
 80084ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	3301      	adds	r3, #1
 80084f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	fa22 f303 	lsr.w	r3, r2, r3
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f47f ae63 	bne.w	80081c8 <HAL_GPIO_Init+0x14>
  }
}
 8008502:	bf00      	nop
 8008504:	bf00      	nop
 8008506:	3724      	adds	r7, #36	; 0x24
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr
 8008510:	58000400 	.word	0x58000400

08008514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	460b      	mov	r3, r1
 800851e:	807b      	strh	r3, [r7, #2]
 8008520:	4613      	mov	r3, r2
 8008522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008524:	787b      	ldrb	r3, [r7, #1]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d003      	beq.n	8008532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800852a:	887a      	ldrh	r2, [r7, #2]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008530:	e003      	b.n	800853a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008532:	887b      	ldrh	r3, [r7, #2]
 8008534:	041a      	lsls	r2, r3, #16
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	619a      	str	r2, [r3, #24]
}
 800853a:	bf00      	nop
 800853c:	370c      	adds	r7, #12
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr

08008546 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8008546:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008548:	b08f      	sub	sp, #60	; 0x3c
 800854a:	af0a      	add	r7, sp, #40	; 0x28
 800854c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d101      	bne.n	8008558 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	e054      	b.n	8008602 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8008564:	b2db      	uxtb	r3, r3
 8008566:	2b00      	cmp	r3, #0
 8008568:	d106      	bne.n	8008578 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f00d fe0c 	bl	8016190 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2203      	movs	r2, #3
 800857c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008588:	2b00      	cmp	r3, #0
 800858a:	d102      	bne.n	8008592 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4618      	mov	r0, r3
 8008598:	f006 fef3 	bl	800f382 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	603b      	str	r3, [r7, #0]
 80085a2:	687e      	ldr	r6, [r7, #4]
 80085a4:	466d      	mov	r5, sp
 80085a6:	f106 0410 	add.w	r4, r6, #16
 80085aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80085ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80085ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80085b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80085b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80085b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80085ba:	1d33      	adds	r3, r6, #4
 80085bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80085be:	6838      	ldr	r0, [r7, #0]
 80085c0:	f006 fe60 	bl	800f284 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2101      	movs	r1, #1
 80085ca:	4618      	mov	r0, r3
 80085cc:	f006 feea 	bl	800f3a4 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	603b      	str	r3, [r7, #0]
 80085d6:	687e      	ldr	r6, [r7, #4]
 80085d8:	466d      	mov	r5, sp
 80085da:	f106 0410 	add.w	r4, r6, #16
 80085de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80085e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80085e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80085e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80085e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80085ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80085ee:	1d33      	adds	r3, r6, #4
 80085f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80085f2:	6838      	ldr	r0, [r7, #0]
 80085f4:	f007 f892 	bl	800f71c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8008600:	2300      	movs	r3, #0
}
 8008602:	4618      	mov	r0, r3
 8008604:	3714      	adds	r7, #20
 8008606:	46bd      	mov	sp, r7
 8008608:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800860a <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800860a:	b590      	push	{r4, r7, lr}
 800860c:	b089      	sub	sp, #36	; 0x24
 800860e:	af04      	add	r7, sp, #16
 8008610:	6078      	str	r0, [r7, #4]
 8008612:	4608      	mov	r0, r1
 8008614:	4611      	mov	r1, r2
 8008616:	461a      	mov	r2, r3
 8008618:	4603      	mov	r3, r0
 800861a:	70fb      	strb	r3, [r7, #3]
 800861c:	460b      	mov	r3, r1
 800861e:	70bb      	strb	r3, [r7, #2]
 8008620:	4613      	mov	r3, r2
 8008622:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800862a:	2b01      	cmp	r3, #1
 800862c:	d101      	bne.n	8008632 <HAL_HCD_HC_Init+0x28>
 800862e:	2302      	movs	r3, #2
 8008630:	e076      	b.n	8008720 <HAL_HCD_HC_Init+0x116>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2201      	movs	r2, #1
 8008636:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800863a:	78fb      	ldrb	r3, [r7, #3]
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	212c      	movs	r1, #44	; 0x2c
 8008640:	fb01 f303 	mul.w	r3, r1, r3
 8008644:	4413      	add	r3, r2
 8008646:	333d      	adds	r3, #61	; 0x3d
 8008648:	2200      	movs	r2, #0
 800864a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800864c:	78fb      	ldrb	r3, [r7, #3]
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	212c      	movs	r1, #44	; 0x2c
 8008652:	fb01 f303 	mul.w	r3, r1, r3
 8008656:	4413      	add	r3, r2
 8008658:	3338      	adds	r3, #56	; 0x38
 800865a:	787a      	ldrb	r2, [r7, #1]
 800865c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800865e:	78fb      	ldrb	r3, [r7, #3]
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	212c      	movs	r1, #44	; 0x2c
 8008664:	fb01 f303 	mul.w	r3, r1, r3
 8008668:	4413      	add	r3, r2
 800866a:	3340      	adds	r3, #64	; 0x40
 800866c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800866e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8008670:	78fb      	ldrb	r3, [r7, #3]
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	212c      	movs	r1, #44	; 0x2c
 8008676:	fb01 f303 	mul.w	r3, r1, r3
 800867a:	4413      	add	r3, r2
 800867c:	3339      	adds	r3, #57	; 0x39
 800867e:	78fa      	ldrb	r2, [r7, #3]
 8008680:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8008682:	78fb      	ldrb	r3, [r7, #3]
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	212c      	movs	r1, #44	; 0x2c
 8008688:	fb01 f303 	mul.w	r3, r1, r3
 800868c:	4413      	add	r3, r2
 800868e:	333f      	adds	r3, #63	; 0x3f
 8008690:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8008694:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8008696:	78fb      	ldrb	r3, [r7, #3]
 8008698:	78ba      	ldrb	r2, [r7, #2]
 800869a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800869e:	b2d0      	uxtb	r0, r2
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	212c      	movs	r1, #44	; 0x2c
 80086a4:	fb01 f303 	mul.w	r3, r1, r3
 80086a8:	4413      	add	r3, r2
 80086aa:	333a      	adds	r3, #58	; 0x3a
 80086ac:	4602      	mov	r2, r0
 80086ae:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80086b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	da09      	bge.n	80086cc <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80086b8:	78fb      	ldrb	r3, [r7, #3]
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	212c      	movs	r1, #44	; 0x2c
 80086be:	fb01 f303 	mul.w	r3, r1, r3
 80086c2:	4413      	add	r3, r2
 80086c4:	333b      	adds	r3, #59	; 0x3b
 80086c6:	2201      	movs	r2, #1
 80086c8:	701a      	strb	r2, [r3, #0]
 80086ca:	e008      	b.n	80086de <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80086cc:	78fb      	ldrb	r3, [r7, #3]
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	212c      	movs	r1, #44	; 0x2c
 80086d2:	fb01 f303 	mul.w	r3, r1, r3
 80086d6:	4413      	add	r3, r2
 80086d8:	333b      	adds	r3, #59	; 0x3b
 80086da:	2200      	movs	r2, #0
 80086dc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80086de:	78fb      	ldrb	r3, [r7, #3]
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	212c      	movs	r1, #44	; 0x2c
 80086e4:	fb01 f303 	mul.w	r3, r1, r3
 80086e8:	4413      	add	r3, r2
 80086ea:	333c      	adds	r3, #60	; 0x3c
 80086ec:	f897 2020 	ldrb.w	r2, [r7, #32]
 80086f0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6818      	ldr	r0, [r3, #0]
 80086f6:	787c      	ldrb	r4, [r7, #1]
 80086f8:	78ba      	ldrb	r2, [r7, #2]
 80086fa:	78f9      	ldrb	r1, [r7, #3]
 80086fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80086fe:	9302      	str	r3, [sp, #8]
 8008700:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008704:	9301      	str	r3, [sp, #4]
 8008706:	f897 3020 	ldrb.w	r3, [r7, #32]
 800870a:	9300      	str	r3, [sp, #0]
 800870c:	4623      	mov	r3, r4
 800870e:	f007 f987 	bl	800fa20 <USB_HC_Init>
 8008712:	4603      	mov	r3, r0
 8008714:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, mps);

  __HAL_UNLOCK(hhcd);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2200      	movs	r2, #0
 800871a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800871e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008720:	4618      	mov	r0, r3
 8008722:	3714      	adds	r7, #20
 8008724:	46bd      	mov	sp, r7
 8008726:	bd90      	pop	{r4, r7, pc}

08008728 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	460b      	mov	r3, r1
 8008732:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8008734:	2300      	movs	r3, #0
 8008736:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800873e:	2b01      	cmp	r3, #1
 8008740:	d101      	bne.n	8008746 <HAL_HCD_HC_Halt+0x1e>
 8008742:	2302      	movs	r3, #2
 8008744:	e00f      	b.n	8008766 <HAL_HCD_HC_Halt+0x3e>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2201      	movs	r2, #1
 800874a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	78fa      	ldrb	r2, [r7, #3]
 8008754:	4611      	mov	r1, r2
 8008756:	4618      	mov	r0, r3
 8008758:	f007 fbd9 	bl	800ff0e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8008764:	7bfb      	ldrb	r3, [r7, #15]
}
 8008766:	4618      	mov	r0, r3
 8008768:	3710      	adds	r7, #16
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
	...

08008770 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	4608      	mov	r0, r1
 800877a:	4611      	mov	r1, r2
 800877c:	461a      	mov	r2, r3
 800877e:	4603      	mov	r3, r0
 8008780:	70fb      	strb	r3, [r7, #3]
 8008782:	460b      	mov	r3, r1
 8008784:	70bb      	strb	r3, [r7, #2]
 8008786:	4613      	mov	r3, r2
 8008788:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800878a:	78fb      	ldrb	r3, [r7, #3]
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	212c      	movs	r1, #44	; 0x2c
 8008790:	fb01 f303 	mul.w	r3, r1, r3
 8008794:	4413      	add	r3, r2
 8008796:	333b      	adds	r3, #59	; 0x3b
 8008798:	78ba      	ldrb	r2, [r7, #2]
 800879a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800879c:	78fb      	ldrb	r3, [r7, #3]
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	212c      	movs	r1, #44	; 0x2c
 80087a2:	fb01 f303 	mul.w	r3, r1, r3
 80087a6:	4413      	add	r3, r2
 80087a8:	333f      	adds	r3, #63	; 0x3f
 80087aa:	787a      	ldrb	r2, [r7, #1]
 80087ac:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80087ae:	7c3b      	ldrb	r3, [r7, #16]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d112      	bne.n	80087da <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80087b4:	78fb      	ldrb	r3, [r7, #3]
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	212c      	movs	r1, #44	; 0x2c
 80087ba:	fb01 f303 	mul.w	r3, r1, r3
 80087be:	4413      	add	r3, r2
 80087c0:	3342      	adds	r3, #66	; 0x42
 80087c2:	2203      	movs	r2, #3
 80087c4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80087c6:	78fb      	ldrb	r3, [r7, #3]
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	212c      	movs	r1, #44	; 0x2c
 80087cc:	fb01 f303 	mul.w	r3, r1, r3
 80087d0:	4413      	add	r3, r2
 80087d2:	333d      	adds	r3, #61	; 0x3d
 80087d4:	7f3a      	ldrb	r2, [r7, #28]
 80087d6:	701a      	strb	r2, [r3, #0]
 80087d8:	e008      	b.n	80087ec <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80087da:	78fb      	ldrb	r3, [r7, #3]
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	212c      	movs	r1, #44	; 0x2c
 80087e0:	fb01 f303 	mul.w	r3, r1, r3
 80087e4:	4413      	add	r3, r2
 80087e6:	3342      	adds	r3, #66	; 0x42
 80087e8:	2202      	movs	r2, #2
 80087ea:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80087ec:	787b      	ldrb	r3, [r7, #1]
 80087ee:	2b03      	cmp	r3, #3
 80087f0:	f200 80c6 	bhi.w	8008980 <HAL_HCD_HC_SubmitRequest+0x210>
 80087f4:	a201      	add	r2, pc, #4	; (adr r2, 80087fc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80087f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fa:	bf00      	nop
 80087fc:	0800880d 	.word	0x0800880d
 8008800:	0800896d 	.word	0x0800896d
 8008804:	08008871 	.word	0x08008871
 8008808:	080088ef 	.word	0x080088ef
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800880c:	7c3b      	ldrb	r3, [r7, #16]
 800880e:	2b01      	cmp	r3, #1
 8008810:	f040 80b8 	bne.w	8008984 <HAL_HCD_HC_SubmitRequest+0x214>
 8008814:	78bb      	ldrb	r3, [r7, #2]
 8008816:	2b00      	cmp	r3, #0
 8008818:	f040 80b4 	bne.w	8008984 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800881c:	8b3b      	ldrh	r3, [r7, #24]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d108      	bne.n	8008834 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8008822:	78fb      	ldrb	r3, [r7, #3]
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	212c      	movs	r1, #44	; 0x2c
 8008828:	fb01 f303 	mul.w	r3, r1, r3
 800882c:	4413      	add	r3, r2
 800882e:	3355      	adds	r3, #85	; 0x55
 8008830:	2201      	movs	r2, #1
 8008832:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8008834:	78fb      	ldrb	r3, [r7, #3]
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	212c      	movs	r1, #44	; 0x2c
 800883a:	fb01 f303 	mul.w	r3, r1, r3
 800883e:	4413      	add	r3, r2
 8008840:	3355      	adds	r3, #85	; 0x55
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d109      	bne.n	800885c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008848:	78fb      	ldrb	r3, [r7, #3]
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	212c      	movs	r1, #44	; 0x2c
 800884e:	fb01 f303 	mul.w	r3, r1, r3
 8008852:	4413      	add	r3, r2
 8008854:	3342      	adds	r3, #66	; 0x42
 8008856:	2200      	movs	r2, #0
 8008858:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800885a:	e093      	b.n	8008984 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800885c:	78fb      	ldrb	r3, [r7, #3]
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	212c      	movs	r1, #44	; 0x2c
 8008862:	fb01 f303 	mul.w	r3, r1, r3
 8008866:	4413      	add	r3, r2
 8008868:	3342      	adds	r3, #66	; 0x42
 800886a:	2202      	movs	r2, #2
 800886c:	701a      	strb	r2, [r3, #0]
      break;
 800886e:	e089      	b.n	8008984 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8008870:	78bb      	ldrb	r3, [r7, #2]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d11d      	bne.n	80088b2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8008876:	78fb      	ldrb	r3, [r7, #3]
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	212c      	movs	r1, #44	; 0x2c
 800887c:	fb01 f303 	mul.w	r3, r1, r3
 8008880:	4413      	add	r3, r2
 8008882:	3355      	adds	r3, #85	; 0x55
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d109      	bne.n	800889e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800888a:	78fb      	ldrb	r3, [r7, #3]
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	212c      	movs	r1, #44	; 0x2c
 8008890:	fb01 f303 	mul.w	r3, r1, r3
 8008894:	4413      	add	r3, r2
 8008896:	3342      	adds	r3, #66	; 0x42
 8008898:	2200      	movs	r2, #0
 800889a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800889c:	e073      	b.n	8008986 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800889e:	78fb      	ldrb	r3, [r7, #3]
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	212c      	movs	r1, #44	; 0x2c
 80088a4:	fb01 f303 	mul.w	r3, r1, r3
 80088a8:	4413      	add	r3, r2
 80088aa:	3342      	adds	r3, #66	; 0x42
 80088ac:	2202      	movs	r2, #2
 80088ae:	701a      	strb	r2, [r3, #0]
      break;
 80088b0:	e069      	b.n	8008986 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80088b2:	78fb      	ldrb	r3, [r7, #3]
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	212c      	movs	r1, #44	; 0x2c
 80088b8:	fb01 f303 	mul.w	r3, r1, r3
 80088bc:	4413      	add	r3, r2
 80088be:	3354      	adds	r3, #84	; 0x54
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d109      	bne.n	80088da <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80088c6:	78fb      	ldrb	r3, [r7, #3]
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	212c      	movs	r1, #44	; 0x2c
 80088cc:	fb01 f303 	mul.w	r3, r1, r3
 80088d0:	4413      	add	r3, r2
 80088d2:	3342      	adds	r3, #66	; 0x42
 80088d4:	2200      	movs	r2, #0
 80088d6:	701a      	strb	r2, [r3, #0]
      break;
 80088d8:	e055      	b.n	8008986 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80088da:	78fb      	ldrb	r3, [r7, #3]
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	212c      	movs	r1, #44	; 0x2c
 80088e0:	fb01 f303 	mul.w	r3, r1, r3
 80088e4:	4413      	add	r3, r2
 80088e6:	3342      	adds	r3, #66	; 0x42
 80088e8:	2202      	movs	r2, #2
 80088ea:	701a      	strb	r2, [r3, #0]
      break;
 80088ec:	e04b      	b.n	8008986 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80088ee:	78bb      	ldrb	r3, [r7, #2]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d11d      	bne.n	8008930 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80088f4:	78fb      	ldrb	r3, [r7, #3]
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	212c      	movs	r1, #44	; 0x2c
 80088fa:	fb01 f303 	mul.w	r3, r1, r3
 80088fe:	4413      	add	r3, r2
 8008900:	3355      	adds	r3, #85	; 0x55
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d109      	bne.n	800891c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008908:	78fb      	ldrb	r3, [r7, #3]
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	212c      	movs	r1, #44	; 0x2c
 800890e:	fb01 f303 	mul.w	r3, r1, r3
 8008912:	4413      	add	r3, r2
 8008914:	3342      	adds	r3, #66	; 0x42
 8008916:	2200      	movs	r2, #0
 8008918:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800891a:	e034      	b.n	8008986 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800891c:	78fb      	ldrb	r3, [r7, #3]
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	212c      	movs	r1, #44	; 0x2c
 8008922:	fb01 f303 	mul.w	r3, r1, r3
 8008926:	4413      	add	r3, r2
 8008928:	3342      	adds	r3, #66	; 0x42
 800892a:	2202      	movs	r2, #2
 800892c:	701a      	strb	r2, [r3, #0]
      break;
 800892e:	e02a      	b.n	8008986 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8008930:	78fb      	ldrb	r3, [r7, #3]
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	212c      	movs	r1, #44	; 0x2c
 8008936:	fb01 f303 	mul.w	r3, r1, r3
 800893a:	4413      	add	r3, r2
 800893c:	3354      	adds	r3, #84	; 0x54
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d109      	bne.n	8008958 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008944:	78fb      	ldrb	r3, [r7, #3]
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	212c      	movs	r1, #44	; 0x2c
 800894a:	fb01 f303 	mul.w	r3, r1, r3
 800894e:	4413      	add	r3, r2
 8008950:	3342      	adds	r3, #66	; 0x42
 8008952:	2200      	movs	r2, #0
 8008954:	701a      	strb	r2, [r3, #0]
      break;
 8008956:	e016      	b.n	8008986 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008958:	78fb      	ldrb	r3, [r7, #3]
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	212c      	movs	r1, #44	; 0x2c
 800895e:	fb01 f303 	mul.w	r3, r1, r3
 8008962:	4413      	add	r3, r2
 8008964:	3342      	adds	r3, #66	; 0x42
 8008966:	2202      	movs	r2, #2
 8008968:	701a      	strb	r2, [r3, #0]
      break;
 800896a:	e00c      	b.n	8008986 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800896c:	78fb      	ldrb	r3, [r7, #3]
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	212c      	movs	r1, #44	; 0x2c
 8008972:	fb01 f303 	mul.w	r3, r1, r3
 8008976:	4413      	add	r3, r2
 8008978:	3342      	adds	r3, #66	; 0x42
 800897a:	2200      	movs	r2, #0
 800897c:	701a      	strb	r2, [r3, #0]
      break;
 800897e:	e002      	b.n	8008986 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8008980:	bf00      	nop
 8008982:	e000      	b.n	8008986 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8008984:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8008986:	78fb      	ldrb	r3, [r7, #3]
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	212c      	movs	r1, #44	; 0x2c
 800898c:	fb01 f303 	mul.w	r3, r1, r3
 8008990:	4413      	add	r3, r2
 8008992:	3344      	adds	r3, #68	; 0x44
 8008994:	697a      	ldr	r2, [r7, #20]
 8008996:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8008998:	78fb      	ldrb	r3, [r7, #3]
 800899a:	8b3a      	ldrh	r2, [r7, #24]
 800899c:	6879      	ldr	r1, [r7, #4]
 800899e:	202c      	movs	r0, #44	; 0x2c
 80089a0:	fb00 f303 	mul.w	r3, r0, r3
 80089a4:	440b      	add	r3, r1
 80089a6:	334c      	adds	r3, #76	; 0x4c
 80089a8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80089aa:	78fb      	ldrb	r3, [r7, #3]
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	212c      	movs	r1, #44	; 0x2c
 80089b0:	fb01 f303 	mul.w	r3, r1, r3
 80089b4:	4413      	add	r3, r2
 80089b6:	3360      	adds	r3, #96	; 0x60
 80089b8:	2200      	movs	r2, #0
 80089ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80089bc:	78fb      	ldrb	r3, [r7, #3]
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	212c      	movs	r1, #44	; 0x2c
 80089c2:	fb01 f303 	mul.w	r3, r1, r3
 80089c6:	4413      	add	r3, r2
 80089c8:	3350      	adds	r3, #80	; 0x50
 80089ca:	2200      	movs	r2, #0
 80089cc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80089ce:	78fb      	ldrb	r3, [r7, #3]
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	212c      	movs	r1, #44	; 0x2c
 80089d4:	fb01 f303 	mul.w	r3, r1, r3
 80089d8:	4413      	add	r3, r2
 80089da:	3339      	adds	r3, #57	; 0x39
 80089dc:	78fa      	ldrb	r2, [r7, #3]
 80089de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80089e0:	78fb      	ldrb	r3, [r7, #3]
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	212c      	movs	r1, #44	; 0x2c
 80089e6:	fb01 f303 	mul.w	r3, r1, r3
 80089ea:	4413      	add	r3, r2
 80089ec:	3361      	adds	r3, #97	; 0x61
 80089ee:	2200      	movs	r2, #0
 80089f0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6818      	ldr	r0, [r3, #0]
 80089f6:	78fb      	ldrb	r3, [r7, #3]
 80089f8:	222c      	movs	r2, #44	; 0x2c
 80089fa:	fb02 f303 	mul.w	r3, r2, r3
 80089fe:	3338      	adds	r3, #56	; 0x38
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	18d1      	adds	r1, r2, r3
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	f007 f92c 	bl	800fc68 <USB_HC_StartXfer>
 8008a10:	4603      	mov	r3, r0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3708      	adds	r7, #8
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop

08008a1c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b086      	sub	sp, #24
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4618      	mov	r0, r3
 8008a34:	f006 fe30 	bl	800f698 <USB_GetMode>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	f040 80fa 	bne.w	8008c34 <HAL_HCD_IRQHandler+0x218>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4618      	mov	r0, r3
 8008a46:	f006 fdf3 	bl	800f630 <USB_ReadInterrupts>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f000 80f0 	beq.w	8008c32 <HAL_HCD_IRQHandler+0x216>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4618      	mov	r0, r3
 8008a58:	f006 fdea 	bl	800f630 <USB_ReadInterrupts>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a66:	d104      	bne.n	8008a72 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008a70:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4618      	mov	r0, r3
 8008a78:	f006 fdda 	bl	800f630 <USB_ReadInterrupts>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a86:	d104      	bne.n	8008a92 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008a90:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4618      	mov	r0, r3
 8008a98:	f006 fdca 	bl	800f630 <USB_ReadInterrupts>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008aa2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008aa6:	d104      	bne.n	8008ab2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008ab0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f006 fdba 	bl	800f630 <USB_ReadInterrupts>
 8008abc:	4603      	mov	r3, r0
 8008abe:	f003 0302 	and.w	r3, r3, #2
 8008ac2:	2b02      	cmp	r3, #2
 8008ac4:	d103      	bne.n	8008ace <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2202      	movs	r2, #2
 8008acc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f006 fdac 	bl	800f630 <USB_ReadInterrupts>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ade:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ae2:	d120      	bne.n	8008b26 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8008aec:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f003 0301 	and.w	r3, r3, #1
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d113      	bne.n	8008b26 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8008afe:	2110      	movs	r1, #16
 8008b00:	6938      	ldr	r0, [r7, #16]
 8008b02:	f006 fc9b 	bl	800f43c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8008b06:	6938      	ldr	r0, [r7, #16]
 8008b08:	f006 fccc 	bl	800f4a4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	699b      	ldr	r3, [r3, #24]
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	d105      	bne.n	8008b20 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2101      	movs	r1, #1
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f006 feb8 	bl	800f890 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f00d fbd5 	bl	80162d0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f006 fd80 	bl	800f630 <USB_ReadInterrupts>
 8008b30:	4603      	mov	r3, r0
 8008b32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b3a:	d102      	bne.n	8008b42 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f001 f9a3 	bl	8009e88 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4618      	mov	r0, r3
 8008b48:	f006 fd72 	bl	800f630 <USB_ReadInterrupts>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	f003 0308 	and.w	r3, r3, #8
 8008b52:	2b08      	cmp	r3, #8
 8008b54:	d106      	bne.n	8008b64 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f00d fb9e 	bl	8016298 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	2208      	movs	r2, #8
 8008b62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f006 fd61 	bl	800f630 <USB_ReadInterrupts>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	f003 0310 	and.w	r3, r3, #16
 8008b74:	2b10      	cmp	r3, #16
 8008b76:	d101      	bne.n	8008b7c <HAL_HCD_IRQHandler+0x160>
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e000      	b.n	8008b7e <HAL_HCD_IRQHandler+0x162>
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d012      	beq.n	8008ba8 <HAL_HCD_IRQHandler+0x18c>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	699a      	ldr	r2, [r3, #24]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f022 0210 	bic.w	r2, r2, #16
 8008b90:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f001 f8a6 	bl	8009ce4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	699a      	ldr	r2, [r3, #24]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f042 0210 	orr.w	r2, r2, #16
 8008ba6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4618      	mov	r0, r3
 8008bae:	f006 fd3f 	bl	800f630 <USB_ReadInterrupts>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008bbc:	d13a      	bne.n	8008c34 <HAL_HCD_IRQHandler+0x218>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f007 f992 	bl	800feec <USB_HC_ReadInterrupt>
 8008bc8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8008bca:	2300      	movs	r3, #0
 8008bcc:	617b      	str	r3, [r7, #20]
 8008bce:	e025      	b.n	8008c1c <HAL_HCD_IRQHandler+0x200>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	f003 030f 	and.w	r3, r3, #15
 8008bd6:	68ba      	ldr	r2, [r7, #8]
 8008bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8008bdc:	f003 0301 	and.w	r3, r3, #1
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d018      	beq.n	8008c16 <HAL_HCD_IRQHandler+0x1fa>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	015a      	lsls	r2, r3, #5
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	4413      	add	r3, r2
 8008bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bfa:	d106      	bne.n	8008c0a <HAL_HCD_IRQHandler+0x1ee>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	4619      	mov	r1, r3
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 f8ab 	bl	8008d5e <HCD_HC_IN_IRQHandler>
 8008c08:	e005      	b.n	8008c16 <HAL_HCD_IRQHandler+0x1fa>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	4619      	mov	r1, r3
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 fcb5 	bl	8009580 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	3301      	adds	r3, #1
 8008c1a:	617b      	str	r3, [r7, #20]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	697a      	ldr	r2, [r7, #20]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d3d4      	bcc.n	8008bd0 <HAL_HCD_IRQHandler+0x1b4>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008c2e:	615a      	str	r2, [r3, #20]
 8008c30:	e000      	b.n	8008c34 <HAL_HCD_IRQHandler+0x218>
      return;
 8008c32:	bf00      	nop
    }
  }
}
 8008c34:	3718      	adds	r7, #24
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b082      	sub	sp, #8
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d101      	bne.n	8008c50 <HAL_HCD_Start+0x16>
 8008c4c:	2302      	movs	r3, #2
 8008c4e:	e013      	b.n	8008c78 <HAL_HCD_Start+0x3e>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2201      	movs	r2, #1
 8008c54:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	2101      	movs	r1, #1
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f006 fe7d 	bl	800f95e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f006 fb79 	bl	800f360 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2200      	movs	r2, #0
 8008c72:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3708      	adds	r7, #8
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d101      	bne.n	8008c96 <HAL_HCD_Stop+0x16>
 8008c92:	2302      	movs	r3, #2
 8008c94:	e00d      	b.n	8008cb2 <HAL_HCD_Stop+0x32>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f007 fa6c 	bl	8010180 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3708      	adds	r7, #8
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b082      	sub	sp, #8
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f006 fe1f 	bl	800f90a <USB_ResetPort>
 8008ccc:	4603      	mov	r3, r0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3708      	adds	r7, #8
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008cd6:	b480      	push	{r7}
 8008cd8:	b083      	sub	sp, #12
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
 8008cde:	460b      	mov	r3, r1
 8008ce0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8008ce2:	78fb      	ldrb	r3, [r7, #3]
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	212c      	movs	r1, #44	; 0x2c
 8008ce8:	fb01 f303 	mul.w	r3, r1, r3
 8008cec:	4413      	add	r3, r2
 8008cee:	3360      	adds	r3, #96	; 0x60
 8008cf0:	781b      	ldrb	r3, [r3, #0]
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	370c      	adds	r7, #12
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr

08008cfe <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008cfe:	b480      	push	{r7}
 8008d00:	b083      	sub	sp, #12
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
 8008d06:	460b      	mov	r3, r1
 8008d08:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8008d0a:	78fb      	ldrb	r3, [r7, #3]
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	212c      	movs	r1, #44	; 0x2c
 8008d10:	fb01 f303 	mul.w	r3, r1, r3
 8008d14:	4413      	add	r3, r2
 8008d16:	3350      	adds	r3, #80	; 0x50
 8008d18:	681b      	ldr	r3, [r3, #0]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	370c      	adds	r7, #12
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr

08008d26 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b082      	sub	sp, #8
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4618      	mov	r0, r3
 8008d34:	f006 fe63 	bl	800f9fe <USB_GetCurrentFrame>
 8008d38:	4603      	mov	r3, r0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3708      	adds	r7, #8
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}

08008d42 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8008d42:	b580      	push	{r7, lr}
 8008d44:	b082      	sub	sp, #8
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f006 fe3e 	bl	800f9d0 <USB_GetHostSpeed>
 8008d54:	4603      	mov	r3, r0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3708      	adds	r7, #8
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b086      	sub	sp, #24
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
 8008d66:	460b      	mov	r3, r1
 8008d68:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	78fa      	ldrb	r2, [r7, #3]
 8008d7a:	4611      	mov	r1, r2
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f006 fc6a 	bl	800f656 <USB_ReadChInterrupts>
 8008d82:	4603      	mov	r3, r0
 8008d84:	f003 0304 	and.w	r3, r3, #4
 8008d88:	2b04      	cmp	r3, #4
 8008d8a:	d119      	bne.n	8008dc0 <HCD_HC_IN_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8008d8c:	78fb      	ldrb	r3, [r7, #3]
 8008d8e:	015a      	lsls	r2, r3, #5
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	4413      	add	r3, r2
 8008d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d98:	461a      	mov	r2, r3
 8008d9a:	2304      	movs	r3, #4
 8008d9c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8008d9e:	78fb      	ldrb	r3, [r7, #3]
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	212c      	movs	r1, #44	; 0x2c
 8008da4:	fb01 f303 	mul.w	r3, r1, r3
 8008da8:	4413      	add	r3, r2
 8008daa:	3361      	adds	r3, #97	; 0x61
 8008dac:	2207      	movs	r2, #7
 8008dae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	78fa      	ldrb	r2, [r7, #3]
 8008db6:	4611      	mov	r1, r2
 8008db8:	4618      	mov	r0, r3
 8008dba:	f007 f8a8 	bl	800ff0e <USB_HC_Halt>
 8008dbe:	e09a      	b.n	8008ef6 <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	78fa      	ldrb	r2, [r7, #3]
 8008dc6:	4611      	mov	r1, r2
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f006 fc44 	bl	800f656 <USB_ReadChInterrupts>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dd8:	d11a      	bne.n	8008e10 <HCD_HC_IN_IRQHandler+0xb2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8008dda:	78fb      	ldrb	r3, [r7, #3]
 8008ddc:	015a      	lsls	r2, r3, #5
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	4413      	add	r3, r2
 8008de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008de6:	461a      	mov	r2, r3
 8008de8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dec:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8008dee:	78fb      	ldrb	r3, [r7, #3]
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	212c      	movs	r1, #44	; 0x2c
 8008df4:	fb01 f303 	mul.w	r3, r1, r3
 8008df8:	4413      	add	r3, r2
 8008dfa:	3361      	adds	r3, #97	; 0x61
 8008dfc:	2208      	movs	r2, #8
 8008dfe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	78fa      	ldrb	r2, [r7, #3]
 8008e06:	4611      	mov	r1, r2
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f007 f880 	bl	800ff0e <USB_HC_Halt>
 8008e0e:	e072      	b.n	8008ef6 <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	78fa      	ldrb	r2, [r7, #3]
 8008e16:	4611      	mov	r1, r2
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f006 fc1c 	bl	800f656 <USB_ReadChInterrupts>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	f003 0308 	and.w	r3, r3, #8
 8008e24:	2b08      	cmp	r3, #8
 8008e26:	d119      	bne.n	8008e5c <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8008e28:	78fb      	ldrb	r3, [r7, #3]
 8008e2a:	015a      	lsls	r2, r3, #5
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	4413      	add	r3, r2
 8008e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e34:	461a      	mov	r2, r3
 8008e36:	2308      	movs	r3, #8
 8008e38:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8008e3a:	78fb      	ldrb	r3, [r7, #3]
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	212c      	movs	r1, #44	; 0x2c
 8008e40:	fb01 f303 	mul.w	r3, r1, r3
 8008e44:	4413      	add	r3, r2
 8008e46:	3361      	adds	r3, #97	; 0x61
 8008e48:	2206      	movs	r2, #6
 8008e4a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	78fa      	ldrb	r2, [r7, #3]
 8008e52:	4611      	mov	r1, r2
 8008e54:	4618      	mov	r0, r3
 8008e56:	f007 f85a 	bl	800ff0e <USB_HC_Halt>
 8008e5a:	e04c      	b.n	8008ef6 <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	78fa      	ldrb	r2, [r7, #3]
 8008e62:	4611      	mov	r1, r2
 8008e64:	4618      	mov	r0, r3
 8008e66:	f006 fbf6 	bl	800f656 <USB_ReadChInterrupts>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e74:	d11a      	bne.n	8008eac <HCD_HC_IN_IRQHandler+0x14e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8008e76:	78fb      	ldrb	r3, [r7, #3]
 8008e78:	015a      	lsls	r2, r3, #5
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e82:	461a      	mov	r2, r3
 8008e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e88:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8008e8a:	78fb      	ldrb	r3, [r7, #3]
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	212c      	movs	r1, #44	; 0x2c
 8008e90:	fb01 f303 	mul.w	r3, r1, r3
 8008e94:	4413      	add	r3, r2
 8008e96:	3361      	adds	r3, #97	; 0x61
 8008e98:	2209      	movs	r2, #9
 8008e9a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	78fa      	ldrb	r2, [r7, #3]
 8008ea2:	4611      	mov	r1, r2
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f007 f832 	bl	800ff0e <USB_HC_Halt>
 8008eaa:	e024      	b.n	8008ef6 <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	78fa      	ldrb	r2, [r7, #3]
 8008eb2:	4611      	mov	r1, r2
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f006 fbce 	bl	800f656 <USB_ReadChInterrupts>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ec0:	2b80      	cmp	r3, #128	; 0x80
 8008ec2:	d118      	bne.n	8008ef6 <HCD_HC_IN_IRQHandler+0x198>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8008ec4:	78fb      	ldrb	r3, [r7, #3]
 8008ec6:	015a      	lsls	r2, r3, #5
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	4413      	add	r3, r2
 8008ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	2380      	movs	r3, #128	; 0x80
 8008ed4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8008ed6:	78fb      	ldrb	r3, [r7, #3]
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	212c      	movs	r1, #44	; 0x2c
 8008edc:	fb01 f303 	mul.w	r3, r1, r3
 8008ee0:	4413      	add	r3, r2
 8008ee2:	3361      	adds	r3, #97	; 0x61
 8008ee4:	2207      	movs	r2, #7
 8008ee6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	78fa      	ldrb	r2, [r7, #3]
 8008eee:	4611      	mov	r1, r2
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f007 f80c 	bl	800ff0e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	78fa      	ldrb	r2, [r7, #3]
 8008efc:	4611      	mov	r1, r2
 8008efe:	4618      	mov	r0, r3
 8008f00:	f006 fba9 	bl	800f656 <USB_ReadChInterrupts>
 8008f04:	4603      	mov	r3, r0
 8008f06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f0e:	d111      	bne.n	8008f34 <HCD_HC_IN_IRQHandler+0x1d6>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	78fa      	ldrb	r2, [r7, #3]
 8008f16:	4611      	mov	r1, r2
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f006 fff8 	bl	800ff0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8008f1e:	78fb      	ldrb	r3, [r7, #3]
 8008f20:	015a      	lsls	r2, r3, #5
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	4413      	add	r3, r2
 8008f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f30:	6093      	str	r3, [r2, #8]
 8008f32:	e322      	b.n	800957a <HCD_HC_IN_IRQHandler+0x81c>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	78fa      	ldrb	r2, [r7, #3]
 8008f3a:	4611      	mov	r1, r2
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f006 fb8a 	bl	800f656 <USB_ReadChInterrupts>
 8008f42:	4603      	mov	r3, r0
 8008f44:	f003 0301 	and.w	r3, r3, #1
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	f040 80f0 	bne.w	800912e <HCD_HC_IN_IRQHandler+0x3d0>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8008f4e:	78fb      	ldrb	r3, [r7, #3]
 8008f50:	015a      	lsls	r2, r3, #5
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	4413      	add	r3, r2
 8008f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	2320      	movs	r3, #32
 8008f5e:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d019      	beq.n	8008f9c <HCD_HC_IN_IRQHandler+0x23e>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8008f68:	78fb      	ldrb	r3, [r7, #3]
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	212c      	movs	r1, #44	; 0x2c
 8008f6e:	fb01 f303 	mul.w	r3, r1, r3
 8008f72:	4413      	add	r3, r2
 8008f74:	3348      	adds	r3, #72	; 0x48
 8008f76:	6819      	ldr	r1, [r3, #0]
 8008f78:	78fb      	ldrb	r3, [r7, #3]
 8008f7a:	015a      	lsls	r2, r3, #5
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	4413      	add	r3, r2
 8008f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f84:	691b      	ldr	r3, [r3, #16]
 8008f86:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8008f8a:	78fb      	ldrb	r3, [r7, #3]
 8008f8c:	1a8a      	subs	r2, r1, r2
 8008f8e:	6879      	ldr	r1, [r7, #4]
 8008f90:	202c      	movs	r0, #44	; 0x2c
 8008f92:	fb00 f303 	mul.w	r3, r0, r3
 8008f96:	440b      	add	r3, r1
 8008f98:	3350      	adds	r3, #80	; 0x50
 8008f9a:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8008f9c:	78fb      	ldrb	r3, [r7, #3]
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	212c      	movs	r1, #44	; 0x2c
 8008fa2:	fb01 f303 	mul.w	r3, r1, r3
 8008fa6:	4413      	add	r3, r2
 8008fa8:	3361      	adds	r3, #97	; 0x61
 8008faa:	2201      	movs	r2, #1
 8008fac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8008fae:	78fb      	ldrb	r3, [r7, #3]
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	212c      	movs	r1, #44	; 0x2c
 8008fb4:	fb01 f303 	mul.w	r3, r1, r3
 8008fb8:	4413      	add	r3, r2
 8008fba:	335c      	adds	r3, #92	; 0x5c
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8008fc0:	78fb      	ldrb	r3, [r7, #3]
 8008fc2:	015a      	lsls	r2, r3, #5
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	4413      	add	r3, r2
 8008fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fcc:	461a      	mov	r2, r3
 8008fce:	2301      	movs	r3, #1
 8008fd0:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008fd2:	78fb      	ldrb	r3, [r7, #3]
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	212c      	movs	r1, #44	; 0x2c
 8008fd8:	fb01 f303 	mul.w	r3, r1, r3
 8008fdc:	4413      	add	r3, r2
 8008fde:	333f      	adds	r3, #63	; 0x3f
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d009      	beq.n	8008ffa <HCD_HC_IN_IRQHandler+0x29c>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008fe6:	78fb      	ldrb	r3, [r7, #3]
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	212c      	movs	r1, #44	; 0x2c
 8008fec:	fb01 f303 	mul.w	r3, r1, r3
 8008ff0:	4413      	add	r3, r2
 8008ff2:	333f      	adds	r3, #63	; 0x3f
 8008ff4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008ff6:	2b02      	cmp	r3, #2
 8008ff8:	d110      	bne.n	800901c <HCD_HC_IN_IRQHandler+0x2be>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	78fa      	ldrb	r2, [r7, #3]
 8009000:	4611      	mov	r1, r2
 8009002:	4618      	mov	r0, r3
 8009004:	f006 ff83 	bl	800ff0e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8009008:	78fb      	ldrb	r3, [r7, #3]
 800900a:	015a      	lsls	r2, r3, #5
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	4413      	add	r3, r2
 8009010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009014:	461a      	mov	r2, r3
 8009016:	2310      	movs	r3, #16
 8009018:	6093      	str	r3, [r2, #8]
 800901a:	e039      	b.n	8009090 <HCD_HC_IN_IRQHandler+0x332>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800901c:	78fb      	ldrb	r3, [r7, #3]
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	212c      	movs	r1, #44	; 0x2c
 8009022:	fb01 f303 	mul.w	r3, r1, r3
 8009026:	4413      	add	r3, r2
 8009028:	333f      	adds	r3, #63	; 0x3f
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	2b03      	cmp	r3, #3
 800902e:	d009      	beq.n	8009044 <HCD_HC_IN_IRQHandler+0x2e6>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8009030:	78fb      	ldrb	r3, [r7, #3]
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	212c      	movs	r1, #44	; 0x2c
 8009036:	fb01 f303 	mul.w	r3, r1, r3
 800903a:	4413      	add	r3, r2
 800903c:	333f      	adds	r3, #63	; 0x3f
 800903e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8009040:	2b01      	cmp	r3, #1
 8009042:	d125      	bne.n	8009090 <HCD_HC_IN_IRQHandler+0x332>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009044:	78fb      	ldrb	r3, [r7, #3]
 8009046:	015a      	lsls	r2, r3, #5
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	4413      	add	r3, r2
 800904c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	78fa      	ldrb	r2, [r7, #3]
 8009054:	0151      	lsls	r1, r2, #5
 8009056:	693a      	ldr	r2, [r7, #16]
 8009058:	440a      	add	r2, r1
 800905a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800905e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009062:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8009064:	78fb      	ldrb	r3, [r7, #3]
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	212c      	movs	r1, #44	; 0x2c
 800906a:	fb01 f303 	mul.w	r3, r1, r3
 800906e:	4413      	add	r3, r2
 8009070:	3360      	adds	r3, #96	; 0x60
 8009072:	2201      	movs	r2, #1
 8009074:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8009076:	78fb      	ldrb	r3, [r7, #3]
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	212c      	movs	r1, #44	; 0x2c
 800907c:	fb01 f303 	mul.w	r3, r1, r3
 8009080:	4413      	add	r3, r2
 8009082:	3360      	adds	r3, #96	; 0x60
 8009084:	781a      	ldrb	r2, [r3, #0]
 8009086:	78fb      	ldrb	r3, [r7, #3]
 8009088:	4619      	mov	r1, r3
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f00d f92e 	bl	80162ec <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	2b01      	cmp	r3, #1
 8009096:	d135      	bne.n	8009104 <HCD_HC_IN_IRQHandler+0x3a6>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8009098:	78fb      	ldrb	r3, [r7, #3]
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	212c      	movs	r1, #44	; 0x2c
 800909e:	fb01 f303 	mul.w	r3, r1, r3
 80090a2:	4413      	add	r3, r2
 80090a4:	3350      	adds	r3, #80	; 0x50
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	78fa      	ldrb	r2, [r7, #3]
 80090aa:	6879      	ldr	r1, [r7, #4]
 80090ac:	202c      	movs	r0, #44	; 0x2c
 80090ae:	fb00 f202 	mul.w	r2, r0, r2
 80090b2:	440a      	add	r2, r1
 80090b4:	3240      	adds	r2, #64	; 0x40
 80090b6:	8812      	ldrh	r2, [r2, #0]
 80090b8:	4413      	add	r3, r2
 80090ba:	3b01      	subs	r3, #1
 80090bc:	78fa      	ldrb	r2, [r7, #3]
 80090be:	6879      	ldr	r1, [r7, #4]
 80090c0:	202c      	movs	r0, #44	; 0x2c
 80090c2:	fb00 f202 	mul.w	r2, r0, r2
 80090c6:	440a      	add	r2, r1
 80090c8:	3240      	adds	r2, #64	; 0x40
 80090ca:	8812      	ldrh	r2, [r2, #0]
 80090cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80090d0:	f003 0301 	and.w	r3, r3, #1
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	f000 8250 	beq.w	800957a <HCD_HC_IN_IRQHandler+0x81c>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80090da:	78fb      	ldrb	r3, [r7, #3]
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	212c      	movs	r1, #44	; 0x2c
 80090e0:	fb01 f303 	mul.w	r3, r1, r3
 80090e4:	4413      	add	r3, r2
 80090e6:	3354      	adds	r3, #84	; 0x54
 80090e8:	781a      	ldrb	r2, [r3, #0]
 80090ea:	78fb      	ldrb	r3, [r7, #3]
 80090ec:	f082 0201 	eor.w	r2, r2, #1
 80090f0:	b2d0      	uxtb	r0, r2
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	212c      	movs	r1, #44	; 0x2c
 80090f6:	fb01 f303 	mul.w	r3, r1, r3
 80090fa:	4413      	add	r3, r2
 80090fc:	3354      	adds	r3, #84	; 0x54
 80090fe:	4602      	mov	r2, r0
 8009100:	701a      	strb	r2, [r3, #0]
 8009102:	e23a      	b.n	800957a <HCD_HC_IN_IRQHandler+0x81c>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8009104:	78fb      	ldrb	r3, [r7, #3]
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	212c      	movs	r1, #44	; 0x2c
 800910a:	fb01 f303 	mul.w	r3, r1, r3
 800910e:	4413      	add	r3, r2
 8009110:	3354      	adds	r3, #84	; 0x54
 8009112:	781a      	ldrb	r2, [r3, #0]
 8009114:	78fb      	ldrb	r3, [r7, #3]
 8009116:	f082 0201 	eor.w	r2, r2, #1
 800911a:	b2d0      	uxtb	r0, r2
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	212c      	movs	r1, #44	; 0x2c
 8009120:	fb01 f303 	mul.w	r3, r1, r3
 8009124:	4413      	add	r3, r2
 8009126:	3354      	adds	r3, #84	; 0x54
 8009128:	4602      	mov	r2, r0
 800912a:	701a      	strb	r2, [r3, #0]
 800912c:	e225      	b.n	800957a <HCD_HC_IN_IRQHandler+0x81c>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	78fa      	ldrb	r2, [r7, #3]
 8009134:	4611      	mov	r1, r2
 8009136:	4618      	mov	r0, r3
 8009138:	f006 fa8d 	bl	800f656 <USB_ReadChInterrupts>
 800913c:	4603      	mov	r3, r0
 800913e:	f003 0320 	and.w	r3, r3, #32
 8009142:	2b20      	cmp	r3, #32
 8009144:	d109      	bne.n	800915a <HCD_HC_IN_IRQHandler+0x3fc>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8009146:	78fb      	ldrb	r3, [r7, #3]
 8009148:	015a      	lsls	r2, r3, #5
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	4413      	add	r3, r2
 800914e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009152:	461a      	mov	r2, r3
 8009154:	2320      	movs	r3, #32
 8009156:	6093      	str	r3, [r2, #8]
 8009158:	e20f      	b.n	800957a <HCD_HC_IN_IRQHandler+0x81c>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	78fa      	ldrb	r2, [r7, #3]
 8009160:	4611      	mov	r1, r2
 8009162:	4618      	mov	r0, r3
 8009164:	f006 fa77 	bl	800f656 <USB_ReadChInterrupts>
 8009168:	4603      	mov	r3, r0
 800916a:	f003 0302 	and.w	r3, r3, #2
 800916e:	2b02      	cmp	r3, #2
 8009170:	f040 8168 	bne.w	8009444 <HCD_HC_IN_IRQHandler+0x6e6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8009174:	78fb      	ldrb	r3, [r7, #3]
 8009176:	015a      	lsls	r2, r3, #5
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	4413      	add	r3, r2
 800917c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009180:	461a      	mov	r2, r3
 8009182:	2302      	movs	r3, #2
 8009184:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[chnum].state == HC_XFRC)
 8009186:	78fb      	ldrb	r3, [r7, #3]
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	212c      	movs	r1, #44	; 0x2c
 800918c:	fb01 f303 	mul.w	r3, r1, r3
 8009190:	4413      	add	r3, r2
 8009192:	3361      	adds	r3, #97	; 0x61
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	2b01      	cmp	r3, #1
 8009198:	d112      	bne.n	80091c0 <HCD_HC_IN_IRQHandler+0x462>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800919a:	78fb      	ldrb	r3, [r7, #3]
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	212c      	movs	r1, #44	; 0x2c
 80091a0:	fb01 f303 	mul.w	r3, r1, r3
 80091a4:	4413      	add	r3, r2
 80091a6:	3361      	adds	r3, #97	; 0x61
 80091a8:	2202      	movs	r2, #2
 80091aa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80091ac:	78fb      	ldrb	r3, [r7, #3]
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	212c      	movs	r1, #44	; 0x2c
 80091b2:	fb01 f303 	mul.w	r3, r1, r3
 80091b6:	4413      	add	r3, r2
 80091b8:	3360      	adds	r3, #96	; 0x60
 80091ba:	2201      	movs	r2, #1
 80091bc:	701a      	strb	r2, [r3, #0]
 80091be:	e133      	b.n	8009428 <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80091c0:	78fb      	ldrb	r3, [r7, #3]
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	212c      	movs	r1, #44	; 0x2c
 80091c6:	fb01 f303 	mul.w	r3, r1, r3
 80091ca:	4413      	add	r3, r2
 80091cc:	3361      	adds	r3, #97	; 0x61
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	2b06      	cmp	r3, #6
 80091d2:	d112      	bne.n	80091fa <HCD_HC_IN_IRQHandler+0x49c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80091d4:	78fb      	ldrb	r3, [r7, #3]
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	212c      	movs	r1, #44	; 0x2c
 80091da:	fb01 f303 	mul.w	r3, r1, r3
 80091de:	4413      	add	r3, r2
 80091e0:	3361      	adds	r3, #97	; 0x61
 80091e2:	2202      	movs	r2, #2
 80091e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80091e6:	78fb      	ldrb	r3, [r7, #3]
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	212c      	movs	r1, #44	; 0x2c
 80091ec:	fb01 f303 	mul.w	r3, r1, r3
 80091f0:	4413      	add	r3, r2
 80091f2:	3360      	adds	r3, #96	; 0x60
 80091f4:	2205      	movs	r2, #5
 80091f6:	701a      	strb	r2, [r3, #0]
 80091f8:	e116      	b.n	8009428 <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80091fa:	78fb      	ldrb	r3, [r7, #3]
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	212c      	movs	r1, #44	; 0x2c
 8009200:	fb01 f303 	mul.w	r3, r1, r3
 8009204:	4413      	add	r3, r2
 8009206:	3361      	adds	r3, #97	; 0x61
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	2b07      	cmp	r3, #7
 800920c:	d009      	beq.n	8009222 <HCD_HC_IN_IRQHandler+0x4c4>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800920e:	78fb      	ldrb	r3, [r7, #3]
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	212c      	movs	r1, #44	; 0x2c
 8009214:	fb01 f303 	mul.w	r3, r1, r3
 8009218:	4413      	add	r3, r2
 800921a:	3361      	adds	r3, #97	; 0x61
 800921c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800921e:	2b09      	cmp	r3, #9
 8009220:	d158      	bne.n	80092d4 <HCD_HC_IN_IRQHandler+0x576>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009222:	78fb      	ldrb	r3, [r7, #3]
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	212c      	movs	r1, #44	; 0x2c
 8009228:	fb01 f303 	mul.w	r3, r1, r3
 800922c:	4413      	add	r3, r2
 800922e:	3361      	adds	r3, #97	; 0x61
 8009230:	2202      	movs	r2, #2
 8009232:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8009234:	78fb      	ldrb	r3, [r7, #3]
 8009236:	6879      	ldr	r1, [r7, #4]
 8009238:	222c      	movs	r2, #44	; 0x2c
 800923a:	fb03 f202 	mul.w	r2, r3, r2
 800923e:	440a      	add	r2, r1
 8009240:	325c      	adds	r2, #92	; 0x5c
 8009242:	6812      	ldr	r2, [r2, #0]
 8009244:	3201      	adds	r2, #1
 8009246:	6879      	ldr	r1, [r7, #4]
 8009248:	202c      	movs	r0, #44	; 0x2c
 800924a:	fb00 f303 	mul.w	r3, r0, r3
 800924e:	440b      	add	r3, r1
 8009250:	335c      	adds	r3, #92	; 0x5c
 8009252:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009254:	78fb      	ldrb	r3, [r7, #3]
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	212c      	movs	r1, #44	; 0x2c
 800925a:	fb01 f303 	mul.w	r3, r1, r3
 800925e:	4413      	add	r3, r2
 8009260:	335c      	adds	r3, #92	; 0x5c
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2b02      	cmp	r3, #2
 8009266:	d912      	bls.n	800928e <HCD_HC_IN_IRQHandler+0x530>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8009268:	78fb      	ldrb	r3, [r7, #3]
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	212c      	movs	r1, #44	; 0x2c
 800926e:	fb01 f303 	mul.w	r3, r1, r3
 8009272:	4413      	add	r3, r2
 8009274:	335c      	adds	r3, #92	; 0x5c
 8009276:	2200      	movs	r2, #0
 8009278:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800927a:	78fb      	ldrb	r3, [r7, #3]
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	212c      	movs	r1, #44	; 0x2c
 8009280:	fb01 f303 	mul.w	r3, r1, r3
 8009284:	4413      	add	r3, r2
 8009286:	3360      	adds	r3, #96	; 0x60
 8009288:	2204      	movs	r2, #4
 800928a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800928c:	e0cc      	b.n	8009428 <HCD_HC_IN_IRQHandler+0x6ca>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800928e:	78fb      	ldrb	r3, [r7, #3]
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	212c      	movs	r1, #44	; 0x2c
 8009294:	fb01 f303 	mul.w	r3, r1, r3
 8009298:	4413      	add	r3, r2
 800929a:	3360      	adds	r3, #96	; 0x60
 800929c:	2202      	movs	r2, #2
 800929e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80092a0:	78fb      	ldrb	r3, [r7, #3]
 80092a2:	015a      	lsls	r2, r3, #5
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	4413      	add	r3, r2
 80092a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80092b6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80092be:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80092c0:	78fb      	ldrb	r3, [r7, #3]
 80092c2:	015a      	lsls	r2, r3, #5
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	4413      	add	r3, r2
 80092c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092cc:	461a      	mov	r2, r3
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80092d2:	e0a9      	b.n	8009428 <HCD_HC_IN_IRQHandler+0x6ca>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80092d4:	78fb      	ldrb	r3, [r7, #3]
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	212c      	movs	r1, #44	; 0x2c
 80092da:	fb01 f303 	mul.w	r3, r1, r3
 80092de:	4413      	add	r3, r2
 80092e0:	3361      	adds	r3, #97	; 0x61
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	2b05      	cmp	r3, #5
 80092e6:	d109      	bne.n	80092fc <HCD_HC_IN_IRQHandler+0x59e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80092e8:	78fb      	ldrb	r3, [r7, #3]
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	212c      	movs	r1, #44	; 0x2c
 80092ee:	fb01 f303 	mul.w	r3, r1, r3
 80092f2:	4413      	add	r3, r2
 80092f4:	3361      	adds	r3, #97	; 0x61
 80092f6:	2202      	movs	r2, #2
 80092f8:	701a      	strb	r2, [r3, #0]
 80092fa:	e095      	b.n	8009428 <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80092fc:	78fb      	ldrb	r3, [r7, #3]
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	212c      	movs	r1, #44	; 0x2c
 8009302:	fb01 f303 	mul.w	r3, r1, r3
 8009306:	4413      	add	r3, r2
 8009308:	3361      	adds	r3, #97	; 0x61
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	2b03      	cmp	r3, #3
 800930e:	d109      	bne.n	8009324 <HCD_HC_IN_IRQHandler+0x5c6>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009310:	78fb      	ldrb	r3, [r7, #3]
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	212c      	movs	r1, #44	; 0x2c
 8009316:	fb01 f303 	mul.w	r3, r1, r3
 800931a:	4413      	add	r3, r2
 800931c:	3361      	adds	r3, #97	; 0x61
 800931e:	2202      	movs	r2, #2
 8009320:	701a      	strb	r2, [r3, #0]
 8009322:	e081      	b.n	8009428 <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8009324:	78fb      	ldrb	r3, [r7, #3]
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	212c      	movs	r1, #44	; 0x2c
 800932a:	fb01 f303 	mul.w	r3, r1, r3
 800932e:	4413      	add	r3, r2
 8009330:	3361      	adds	r3, #97	; 0x61
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	2b04      	cmp	r3, #4
 8009336:	d13f      	bne.n	80093b8 <HCD_HC_IN_IRQHandler+0x65a>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009338:	78fb      	ldrb	r3, [r7, #3]
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	212c      	movs	r1, #44	; 0x2c
 800933e:	fb01 f303 	mul.w	r3, r1, r3
 8009342:	4413      	add	r3, r2
 8009344:	3361      	adds	r3, #97	; 0x61
 8009346:	2202      	movs	r2, #2
 8009348:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800934a:	78fb      	ldrb	r3, [r7, #3]
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	212c      	movs	r1, #44	; 0x2c
 8009350:	fb01 f303 	mul.w	r3, r1, r3
 8009354:	4413      	add	r3, r2
 8009356:	3360      	adds	r3, #96	; 0x60
 8009358:	2202      	movs	r2, #2
 800935a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800935c:	78fb      	ldrb	r3, [r7, #3]
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	212c      	movs	r1, #44	; 0x2c
 8009362:	fb01 f303 	mul.w	r3, r1, r3
 8009366:	4413      	add	r3, r2
 8009368:	333f      	adds	r3, #63	; 0x3f
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d009      	beq.n	8009384 <HCD_HC_IN_IRQHandler+0x626>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8009370:	78fb      	ldrb	r3, [r7, #3]
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	212c      	movs	r1, #44	; 0x2c
 8009376:	fb01 f303 	mul.w	r3, r1, r3
 800937a:	4413      	add	r3, r2
 800937c:	333f      	adds	r3, #63	; 0x3f
 800937e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009380:	2b02      	cmp	r3, #2
 8009382:	d151      	bne.n	8009428 <HCD_HC_IN_IRQHandler+0x6ca>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8009384:	78fb      	ldrb	r3, [r7, #3]
 8009386:	015a      	lsls	r2, r3, #5
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	4413      	add	r3, r2
 800938c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800939a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80093a2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80093a4:	78fb      	ldrb	r3, [r7, #3]
 80093a6:	015a      	lsls	r2, r3, #5
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	4413      	add	r3, r2
 80093ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093b0:	461a      	mov	r2, r3
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	6013      	str	r3, [r2, #0]
 80093b6:	e037      	b.n	8009428 <HCD_HC_IN_IRQHandler+0x6ca>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80093b8:	78fb      	ldrb	r3, [r7, #3]
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	212c      	movs	r1, #44	; 0x2c
 80093be:	fb01 f303 	mul.w	r3, r1, r3
 80093c2:	4413      	add	r3, r2
 80093c4:	3361      	adds	r3, #97	; 0x61
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	2b08      	cmp	r3, #8
 80093ca:	d122      	bne.n	8009412 <HCD_HC_IN_IRQHandler+0x6b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80093cc:	78fb      	ldrb	r3, [r7, #3]
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	212c      	movs	r1, #44	; 0x2c
 80093d2:	fb01 f303 	mul.w	r3, r1, r3
 80093d6:	4413      	add	r3, r2
 80093d8:	3361      	adds	r3, #97	; 0x61
 80093da:	2202      	movs	r2, #2
 80093dc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80093de:	78fb      	ldrb	r3, [r7, #3]
 80093e0:	6879      	ldr	r1, [r7, #4]
 80093e2:	222c      	movs	r2, #44	; 0x2c
 80093e4:	fb03 f202 	mul.w	r2, r3, r2
 80093e8:	440a      	add	r2, r1
 80093ea:	325c      	adds	r2, #92	; 0x5c
 80093ec:	6812      	ldr	r2, [r2, #0]
 80093ee:	3201      	adds	r2, #1
 80093f0:	6879      	ldr	r1, [r7, #4]
 80093f2:	202c      	movs	r0, #44	; 0x2c
 80093f4:	fb00 f303 	mul.w	r3, r0, r3
 80093f8:	440b      	add	r3, r1
 80093fa:	335c      	adds	r3, #92	; 0x5c
 80093fc:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80093fe:	78fb      	ldrb	r3, [r7, #3]
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	212c      	movs	r1, #44	; 0x2c
 8009404:	fb01 f303 	mul.w	r3, r1, r3
 8009408:	4413      	add	r3, r2
 800940a:	3360      	adds	r3, #96	; 0x60
 800940c:	2204      	movs	r2, #4
 800940e:	701a      	strb	r2, [r3, #0]
 8009410:	e00a      	b.n	8009428 <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8009412:	78fb      	ldrb	r3, [r7, #3]
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	212c      	movs	r1, #44	; 0x2c
 8009418:	fb01 f303 	mul.w	r3, r1, r3
 800941c:	4413      	add	r3, r2
 800941e:	3361      	adds	r3, #97	; 0x61
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	2b02      	cmp	r3, #2
 8009424:	f000 80a8 	beq.w	8009578 <HCD_HC_IN_IRQHandler+0x81a>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8009428:	78fb      	ldrb	r3, [r7, #3]
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	212c      	movs	r1, #44	; 0x2c
 800942e:	fb01 f303 	mul.w	r3, r1, r3
 8009432:	4413      	add	r3, r2
 8009434:	3360      	adds	r3, #96	; 0x60
 8009436:	781a      	ldrb	r2, [r3, #0]
 8009438:	78fb      	ldrb	r3, [r7, #3]
 800943a:	4619      	mov	r1, r3
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f00c ff55 	bl	80162ec <HAL_HCD_HC_NotifyURBChange_Callback>
 8009442:	e09a      	b.n	800957a <HCD_HC_IN_IRQHandler+0x81c>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	78fa      	ldrb	r2, [r7, #3]
 800944a:	4611      	mov	r1, r2
 800944c:	4618      	mov	r0, r3
 800944e:	f006 f902 	bl	800f656 <USB_ReadChInterrupts>
 8009452:	4603      	mov	r3, r0
 8009454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009458:	2b40      	cmp	r3, #64	; 0x40
 800945a:	d122      	bne.n	80094a2 <HCD_HC_IN_IRQHandler+0x744>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800945c:	78fb      	ldrb	r3, [r7, #3]
 800945e:	015a      	lsls	r2, r3, #5
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	4413      	add	r3, r2
 8009464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009468:	461a      	mov	r2, r3
 800946a:	2340      	movs	r3, #64	; 0x40
 800946c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800946e:	78fb      	ldrb	r3, [r7, #3]
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	212c      	movs	r1, #44	; 0x2c
 8009474:	fb01 f303 	mul.w	r3, r1, r3
 8009478:	4413      	add	r3, r2
 800947a:	3361      	adds	r3, #97	; 0x61
 800947c:	2205      	movs	r2, #5
 800947e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8009480:	78fb      	ldrb	r3, [r7, #3]
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	212c      	movs	r1, #44	; 0x2c
 8009486:	fb01 f303 	mul.w	r3, r1, r3
 800948a:	4413      	add	r3, r2
 800948c:	335c      	adds	r3, #92	; 0x5c
 800948e:	2200      	movs	r2, #0
 8009490:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	78fa      	ldrb	r2, [r7, #3]
 8009498:	4611      	mov	r1, r2
 800949a:	4618      	mov	r0, r3
 800949c:	f006 fd37 	bl	800ff0e <USB_HC_Halt>
 80094a0:	e06b      	b.n	800957a <HCD_HC_IN_IRQHandler+0x81c>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	78fa      	ldrb	r2, [r7, #3]
 80094a8:	4611      	mov	r1, r2
 80094aa:	4618      	mov	r0, r3
 80094ac:	f006 f8d3 	bl	800f656 <USB_ReadChInterrupts>
 80094b0:	4603      	mov	r3, r0
 80094b2:	f003 0310 	and.w	r3, r3, #16
 80094b6:	2b10      	cmp	r3, #16
 80094b8:	d15f      	bne.n	800957a <HCD_HC_IN_IRQHandler+0x81c>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80094ba:	78fb      	ldrb	r3, [r7, #3]
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	212c      	movs	r1, #44	; 0x2c
 80094c0:	fb01 f303 	mul.w	r3, r1, r3
 80094c4:	4413      	add	r3, r2
 80094c6:	333f      	adds	r3, #63	; 0x3f
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	2b03      	cmp	r3, #3
 80094cc:	d119      	bne.n	8009502 <HCD_HC_IN_IRQHandler+0x7a4>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80094ce:	78fb      	ldrb	r3, [r7, #3]
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	212c      	movs	r1, #44	; 0x2c
 80094d4:	fb01 f303 	mul.w	r3, r1, r3
 80094d8:	4413      	add	r3, r2
 80094da:	335c      	adds	r3, #92	; 0x5c
 80094dc:	2200      	movs	r2, #0
 80094de:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80094e0:	78fb      	ldrb	r3, [r7, #3]
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	212c      	movs	r1, #44	; 0x2c
 80094e6:	fb01 f303 	mul.w	r3, r1, r3
 80094ea:	4413      	add	r3, r2
 80094ec:	3361      	adds	r3, #97	; 0x61
 80094ee:	2204      	movs	r2, #4
 80094f0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	78fa      	ldrb	r2, [r7, #3]
 80094f8:	4611      	mov	r1, r2
 80094fa:	4618      	mov	r0, r3
 80094fc:	f006 fd07 	bl	800ff0e <USB_HC_Halt>
 8009500:	e030      	b.n	8009564 <HCD_HC_IN_IRQHandler+0x806>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009502:	78fb      	ldrb	r3, [r7, #3]
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	212c      	movs	r1, #44	; 0x2c
 8009508:	fb01 f303 	mul.w	r3, r1, r3
 800950c:	4413      	add	r3, r2
 800950e:	333f      	adds	r3, #63	; 0x3f
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d009      	beq.n	800952a <HCD_HC_IN_IRQHandler+0x7cc>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8009516:	78fb      	ldrb	r3, [r7, #3]
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	212c      	movs	r1, #44	; 0x2c
 800951c:	fb01 f303 	mul.w	r3, r1, r3
 8009520:	4413      	add	r3, r2
 8009522:	333f      	adds	r3, #63	; 0x3f
 8009524:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009526:	2b02      	cmp	r3, #2
 8009528:	d11c      	bne.n	8009564 <HCD_HC_IN_IRQHandler+0x806>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800952a:	78fb      	ldrb	r3, [r7, #3]
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	212c      	movs	r1, #44	; 0x2c
 8009530:	fb01 f303 	mul.w	r3, r1, r3
 8009534:	4413      	add	r3, r2
 8009536:	335c      	adds	r3, #92	; 0x5c
 8009538:	2200      	movs	r2, #0
 800953a:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	68db      	ldr	r3, [r3, #12]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d10f      	bne.n	8009564 <HCD_HC_IN_IRQHandler+0x806>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8009544:	78fb      	ldrb	r3, [r7, #3]
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	212c      	movs	r1, #44	; 0x2c
 800954a:	fb01 f303 	mul.w	r3, r1, r3
 800954e:	4413      	add	r3, r2
 8009550:	3361      	adds	r3, #97	; 0x61
 8009552:	2204      	movs	r2, #4
 8009554:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	78fa      	ldrb	r2, [r7, #3]
 800955c:	4611      	mov	r1, r2
 800955e:	4618      	mov	r0, r3
 8009560:	f006 fcd5 	bl	800ff0e <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8009564:	78fb      	ldrb	r3, [r7, #3]
 8009566:	015a      	lsls	r2, r3, #5
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	4413      	add	r3, r2
 800956c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009570:	461a      	mov	r2, r3
 8009572:	2310      	movs	r3, #16
 8009574:	6093      	str	r3, [r2, #8]
 8009576:	e000      	b.n	800957a <HCD_HC_IN_IRQHandler+0x81c>
        return;
 8009578:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800957a:	3718      	adds	r7, #24
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b086      	sub	sp, #24
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	460b      	mov	r3, r1
 800958a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	78fa      	ldrb	r2, [r7, #3]
 800959c:	4611      	mov	r1, r2
 800959e:	4618      	mov	r0, r3
 80095a0:	f006 f859 	bl	800f656 <USB_ReadChInterrupts>
 80095a4:	4603      	mov	r3, r0
 80095a6:	f003 0304 	and.w	r3, r3, #4
 80095aa:	2b04      	cmp	r3, #4
 80095ac:	d119      	bne.n	80095e2 <HCD_HC_OUT_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80095ae:	78fb      	ldrb	r3, [r7, #3]
 80095b0:	015a      	lsls	r2, r3, #5
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	4413      	add	r3, r2
 80095b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095ba:	461a      	mov	r2, r3
 80095bc:	2304      	movs	r3, #4
 80095be:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80095c0:	78fb      	ldrb	r3, [r7, #3]
 80095c2:	687a      	ldr	r2, [r7, #4]
 80095c4:	212c      	movs	r1, #44	; 0x2c
 80095c6:	fb01 f303 	mul.w	r3, r1, r3
 80095ca:	4413      	add	r3, r2
 80095cc:	3361      	adds	r3, #97	; 0x61
 80095ce:	2207      	movs	r2, #7
 80095d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	78fa      	ldrb	r2, [r7, #3]
 80095d8:	4611      	mov	r1, r2
 80095da:	4618      	mov	r0, r3
 80095dc:	f006 fc97 	bl	800ff0e <USB_HC_Halt>
 80095e0:	e37d      	b.n	8009cde <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	78fa      	ldrb	r2, [r7, #3]
 80095e8:	4611      	mov	r1, r2
 80095ea:	4618      	mov	r0, r3
 80095ec:	f006 f833 	bl	800f656 <USB_ReadChInterrupts>
 80095f0:	4603      	mov	r3, r0
 80095f2:	f003 0320 	and.w	r3, r3, #32
 80095f6:	2b20      	cmp	r3, #32
 80095f8:	d136      	bne.n	8009668 <HCD_HC_OUT_IRQHandler+0xe8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80095fa:	78fb      	ldrb	r3, [r7, #3]
 80095fc:	015a      	lsls	r2, r3, #5
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	4413      	add	r3, r2
 8009602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009606:	461a      	mov	r2, r3
 8009608:	2320      	movs	r3, #32
 800960a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800960c:	78fb      	ldrb	r3, [r7, #3]
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	212c      	movs	r1, #44	; 0x2c
 8009612:	fb01 f303 	mul.w	r3, r1, r3
 8009616:	4413      	add	r3, r2
 8009618:	333d      	adds	r3, #61	; 0x3d
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	2b01      	cmp	r3, #1
 800961e:	f040 835e 	bne.w	8009cde <HCD_HC_OUT_IRQHandler+0x75e>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8009622:	78fb      	ldrb	r3, [r7, #3]
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	212c      	movs	r1, #44	; 0x2c
 8009628:	fb01 f303 	mul.w	r3, r1, r3
 800962c:	4413      	add	r3, r2
 800962e:	333d      	adds	r3, #61	; 0x3d
 8009630:	2200      	movs	r2, #0
 8009632:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009634:	78fb      	ldrb	r3, [r7, #3]
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	212c      	movs	r1, #44	; 0x2c
 800963a:	fb01 f303 	mul.w	r3, r1, r3
 800963e:	4413      	add	r3, r2
 8009640:	3360      	adds	r3, #96	; 0x60
 8009642:	2202      	movs	r2, #2
 8009644:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8009646:	78fb      	ldrb	r3, [r7, #3]
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	212c      	movs	r1, #44	; 0x2c
 800964c:	fb01 f303 	mul.w	r3, r1, r3
 8009650:	4413      	add	r3, r2
 8009652:	3361      	adds	r3, #97	; 0x61
 8009654:	2203      	movs	r2, #3
 8009656:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	78fa      	ldrb	r2, [r7, #3]
 800965e:	4611      	mov	r1, r2
 8009660:	4618      	mov	r0, r3
 8009662:	f006 fc54 	bl	800ff0e <USB_HC_Halt>
 8009666:	e33a      	b.n	8009cde <HCD_HC_OUT_IRQHandler+0x75e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	78fa      	ldrb	r2, [r7, #3]
 800966e:	4611      	mov	r1, r2
 8009670:	4618      	mov	r0, r3
 8009672:	f005 fff0 	bl	800f656 <USB_ReadChInterrupts>
 8009676:	4603      	mov	r3, r0
 8009678:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800967c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009680:	d111      	bne.n	80096a6 <HCD_HC_OUT_IRQHandler+0x126>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8009682:	78fb      	ldrb	r3, [r7, #3]
 8009684:	015a      	lsls	r2, r3, #5
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	4413      	add	r3, r2
 800968a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800968e:	461a      	mov	r2, r3
 8009690:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009694:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	78fa      	ldrb	r2, [r7, #3]
 800969c:	4611      	mov	r1, r2
 800969e:	4618      	mov	r0, r3
 80096a0:	f006 fc35 	bl	800ff0e <USB_HC_Halt>
 80096a4:	e31b      	b.n	8009cde <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	78fa      	ldrb	r2, [r7, #3]
 80096ac:	4611      	mov	r1, r2
 80096ae:	4618      	mov	r0, r3
 80096b0:	f005 ffd1 	bl	800f656 <USB_ReadChInterrupts>
 80096b4:	4603      	mov	r3, r0
 80096b6:	f003 0301 	and.w	r3, r3, #1
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d140      	bne.n	8009740 <HCD_HC_OUT_IRQHandler+0x1c0>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80096be:	78fb      	ldrb	r3, [r7, #3]
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	212c      	movs	r1, #44	; 0x2c
 80096c4:	fb01 f303 	mul.w	r3, r1, r3
 80096c8:	4413      	add	r3, r2
 80096ca:	335c      	adds	r3, #92	; 0x5c
 80096cc:	2200      	movs	r2, #0
 80096ce:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	78fa      	ldrb	r2, [r7, #3]
 80096d6:	4611      	mov	r1, r2
 80096d8:	4618      	mov	r0, r3
 80096da:	f005 ffbc 	bl	800f656 <USB_ReadChInterrupts>
 80096de:	4603      	mov	r3, r0
 80096e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096e4:	2b40      	cmp	r3, #64	; 0x40
 80096e6:	d111      	bne.n	800970c <HCD_HC_OUT_IRQHandler+0x18c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80096e8:	78fb      	ldrb	r3, [r7, #3]
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	212c      	movs	r1, #44	; 0x2c
 80096ee:	fb01 f303 	mul.w	r3, r1, r3
 80096f2:	4413      	add	r3, r2
 80096f4:	333d      	adds	r3, #61	; 0x3d
 80096f6:	2201      	movs	r2, #1
 80096f8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80096fa:	78fb      	ldrb	r3, [r7, #3]
 80096fc:	015a      	lsls	r2, r3, #5
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	4413      	add	r3, r2
 8009702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009706:	461a      	mov	r2, r3
 8009708:	2340      	movs	r3, #64	; 0x40
 800970a:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800970c:	78fb      	ldrb	r3, [r7, #3]
 800970e:	015a      	lsls	r2, r3, #5
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	4413      	add	r3, r2
 8009714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009718:	461a      	mov	r2, r3
 800971a:	2301      	movs	r3, #1
 800971c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800971e:	78fb      	ldrb	r3, [r7, #3]
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	212c      	movs	r1, #44	; 0x2c
 8009724:	fb01 f303 	mul.w	r3, r1, r3
 8009728:	4413      	add	r3, r2
 800972a:	3361      	adds	r3, #97	; 0x61
 800972c:	2201      	movs	r2, #1
 800972e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	78fa      	ldrb	r2, [r7, #3]
 8009736:	4611      	mov	r1, r2
 8009738:	4618      	mov	r0, r3
 800973a:	f006 fbe8 	bl	800ff0e <USB_HC_Halt>
 800973e:	e2ce      	b.n	8009cde <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	78fa      	ldrb	r2, [r7, #3]
 8009746:	4611      	mov	r1, r2
 8009748:	4618      	mov	r0, r3
 800974a:	f005 ff84 	bl	800f656 <USB_ReadChInterrupts>
 800974e:	4603      	mov	r3, r0
 8009750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009754:	2b40      	cmp	r3, #64	; 0x40
 8009756:	d12b      	bne.n	80097b0 <HCD_HC_OUT_IRQHandler+0x230>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8009758:	78fb      	ldrb	r3, [r7, #3]
 800975a:	687a      	ldr	r2, [r7, #4]
 800975c:	212c      	movs	r1, #44	; 0x2c
 800975e:	fb01 f303 	mul.w	r3, r1, r3
 8009762:	4413      	add	r3, r2
 8009764:	3361      	adds	r3, #97	; 0x61
 8009766:	2205      	movs	r2, #5
 8009768:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].do_ping = 1U;
 800976a:	78fb      	ldrb	r3, [r7, #3]
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	212c      	movs	r1, #44	; 0x2c
 8009770:	fb01 f303 	mul.w	r3, r1, r3
 8009774:	4413      	add	r3, r2
 8009776:	333d      	adds	r3, #61	; 0x3d
 8009778:	2201      	movs	r2, #1
 800977a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800977c:	78fb      	ldrb	r3, [r7, #3]
 800977e:	687a      	ldr	r2, [r7, #4]
 8009780:	212c      	movs	r1, #44	; 0x2c
 8009782:	fb01 f303 	mul.w	r3, r1, r3
 8009786:	4413      	add	r3, r2
 8009788:	335c      	adds	r3, #92	; 0x5c
 800978a:	2200      	movs	r2, #0
 800978c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	78fa      	ldrb	r2, [r7, #3]
 8009794:	4611      	mov	r1, r2
 8009796:	4618      	mov	r0, r3
 8009798:	f006 fbb9 	bl	800ff0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800979c:	78fb      	ldrb	r3, [r7, #3]
 800979e:	015a      	lsls	r2, r3, #5
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	4413      	add	r3, r2
 80097a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097a8:	461a      	mov	r2, r3
 80097aa:	2340      	movs	r3, #64	; 0x40
 80097ac:	6093      	str	r3, [r2, #8]
 80097ae:	e296      	b.n	8009cde <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	78fa      	ldrb	r2, [r7, #3]
 80097b6:	4611      	mov	r1, r2
 80097b8:	4618      	mov	r0, r3
 80097ba:	f005 ff4c 	bl	800f656 <USB_ReadChInterrupts>
 80097be:	4603      	mov	r3, r0
 80097c0:	f003 0308 	and.w	r3, r3, #8
 80097c4:	2b08      	cmp	r3, #8
 80097c6:	d119      	bne.n	80097fc <HCD_HC_OUT_IRQHandler+0x27c>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80097c8:	78fb      	ldrb	r3, [r7, #3]
 80097ca:	015a      	lsls	r2, r3, #5
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	4413      	add	r3, r2
 80097d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097d4:	461a      	mov	r2, r3
 80097d6:	2308      	movs	r3, #8
 80097d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80097da:	78fb      	ldrb	r3, [r7, #3]
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	212c      	movs	r1, #44	; 0x2c
 80097e0:	fb01 f303 	mul.w	r3, r1, r3
 80097e4:	4413      	add	r3, r2
 80097e6:	3361      	adds	r3, #97	; 0x61
 80097e8:	2206      	movs	r2, #6
 80097ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	78fa      	ldrb	r2, [r7, #3]
 80097f2:	4611      	mov	r1, r2
 80097f4:	4618      	mov	r0, r3
 80097f6:	f006 fb8a 	bl	800ff0e <USB_HC_Halt>
 80097fa:	e270      	b.n	8009cde <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	78fa      	ldrb	r2, [r7, #3]
 8009802:	4611      	mov	r1, r2
 8009804:	4618      	mov	r0, r3
 8009806:	f005 ff26 	bl	800f656 <USB_ReadChInterrupts>
 800980a:	4603      	mov	r3, r0
 800980c:	f003 0310 	and.w	r3, r3, #16
 8009810:	2b10      	cmp	r3, #16
 8009812:	d13f      	bne.n	8009894 <HCD_HC_OUT_IRQHandler+0x314>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8009814:	78fb      	ldrb	r3, [r7, #3]
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	212c      	movs	r1, #44	; 0x2c
 800981a:	fb01 f303 	mul.w	r3, r1, r3
 800981e:	4413      	add	r3, r2
 8009820:	335c      	adds	r3, #92	; 0x5c
 8009822:	2200      	movs	r2, #0
 8009824:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8009826:	78fb      	ldrb	r3, [r7, #3]
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	212c      	movs	r1, #44	; 0x2c
 800982c:	fb01 f303 	mul.w	r3, r1, r3
 8009830:	4413      	add	r3, r2
 8009832:	3361      	adds	r3, #97	; 0x61
 8009834:	2204      	movs	r2, #4
 8009836:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8009838:	78fb      	ldrb	r3, [r7, #3]
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	212c      	movs	r1, #44	; 0x2c
 800983e:	fb01 f303 	mul.w	r3, r1, r3
 8009842:	4413      	add	r3, r2
 8009844:	333d      	adds	r3, #61	; 0x3d
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d112      	bne.n	8009872 <HCD_HC_OUT_IRQHandler+0x2f2>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800984c:	78fb      	ldrb	r3, [r7, #3]
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	212c      	movs	r1, #44	; 0x2c
 8009852:	fb01 f303 	mul.w	r3, r1, r3
 8009856:	4413      	add	r3, r2
 8009858:	333c      	adds	r3, #60	; 0x3c
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d108      	bne.n	8009872 <HCD_HC_OUT_IRQHandler+0x2f2>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8009860:	78fb      	ldrb	r3, [r7, #3]
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	212c      	movs	r1, #44	; 0x2c
 8009866:	fb01 f303 	mul.w	r3, r1, r3
 800986a:	4413      	add	r3, r2
 800986c:	333d      	adds	r3, #61	; 0x3d
 800986e:	2201      	movs	r2, #1
 8009870:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	78fa      	ldrb	r2, [r7, #3]
 8009878:	4611      	mov	r1, r2
 800987a:	4618      	mov	r0, r3
 800987c:	f006 fb47 	bl	800ff0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8009880:	78fb      	ldrb	r3, [r7, #3]
 8009882:	015a      	lsls	r2, r3, #5
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	4413      	add	r3, r2
 8009888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800988c:	461a      	mov	r2, r3
 800988e:	2310      	movs	r3, #16
 8009890:	6093      	str	r3, [r2, #8]
 8009892:	e224      	b.n	8009cde <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	78fa      	ldrb	r2, [r7, #3]
 800989a:	4611      	mov	r1, r2
 800989c:	4618      	mov	r0, r3
 800989e:	f005 feda 	bl	800f656 <USB_ReadChInterrupts>
 80098a2:	4603      	mov	r3, r0
 80098a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098a8:	2b80      	cmp	r3, #128	; 0x80
 80098aa:	d161      	bne.n	8009970 <HCD_HC_OUT_IRQHandler+0x3f0>
  {
    if (hhcd->Init.dma_enable == 0U)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d110      	bne.n	80098d6 <HCD_HC_OUT_IRQHandler+0x356>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80098b4:	78fb      	ldrb	r3, [r7, #3]
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	212c      	movs	r1, #44	; 0x2c
 80098ba:	fb01 f303 	mul.w	r3, r1, r3
 80098be:	4413      	add	r3, r2
 80098c0:	3361      	adds	r3, #97	; 0x61
 80098c2:	2207      	movs	r2, #7
 80098c4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	78fa      	ldrb	r2, [r7, #3]
 80098cc:	4611      	mov	r1, r2
 80098ce:	4618      	mov	r0, r3
 80098d0:	f006 fb1d 	bl	800ff0e <USB_HC_Halt>
 80098d4:	e042      	b.n	800995c <HCD_HC_OUT_IRQHandler+0x3dc>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80098d6:	78fb      	ldrb	r3, [r7, #3]
 80098d8:	6879      	ldr	r1, [r7, #4]
 80098da:	222c      	movs	r2, #44	; 0x2c
 80098dc:	fb03 f202 	mul.w	r2, r3, r2
 80098e0:	440a      	add	r2, r1
 80098e2:	325c      	adds	r2, #92	; 0x5c
 80098e4:	6812      	ldr	r2, [r2, #0]
 80098e6:	3201      	adds	r2, #1
 80098e8:	6879      	ldr	r1, [r7, #4]
 80098ea:	202c      	movs	r0, #44	; 0x2c
 80098ec:	fb00 f303 	mul.w	r3, r0, r3
 80098f0:	440b      	add	r3, r1
 80098f2:	335c      	adds	r3, #92	; 0x5c
 80098f4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80098f6:	78fb      	ldrb	r3, [r7, #3]
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	212c      	movs	r1, #44	; 0x2c
 80098fc:	fb01 f303 	mul.w	r3, r1, r3
 8009900:	4413      	add	r3, r2
 8009902:	335c      	adds	r3, #92	; 0x5c
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	2b02      	cmp	r3, #2
 8009908:	d91f      	bls.n	800994a <HCD_HC_OUT_IRQHandler+0x3ca>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800990a:	78fb      	ldrb	r3, [r7, #3]
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	212c      	movs	r1, #44	; 0x2c
 8009910:	fb01 f303 	mul.w	r3, r1, r3
 8009914:	4413      	add	r3, r2
 8009916:	335c      	adds	r3, #92	; 0x5c
 8009918:	2200      	movs	r2, #0
 800991a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800991c:	78fb      	ldrb	r3, [r7, #3]
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	212c      	movs	r1, #44	; 0x2c
 8009922:	fb01 f303 	mul.w	r3, r1, r3
 8009926:	4413      	add	r3, r2
 8009928:	3360      	adds	r3, #96	; 0x60
 800992a:	2204      	movs	r2, #4
 800992c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800992e:	78fb      	ldrb	r3, [r7, #3]
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	212c      	movs	r1, #44	; 0x2c
 8009934:	fb01 f303 	mul.w	r3, r1, r3
 8009938:	4413      	add	r3, r2
 800993a:	3360      	adds	r3, #96	; 0x60
 800993c:	781a      	ldrb	r2, [r3, #0]
 800993e:	78fb      	ldrb	r3, [r7, #3]
 8009940:	4619      	mov	r1, r3
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f00c fcd2 	bl	80162ec <HAL_HCD_HC_NotifyURBChange_Callback>
 8009948:	e008      	b.n	800995c <HCD_HC_OUT_IRQHandler+0x3dc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800994a:	78fb      	ldrb	r3, [r7, #3]
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	212c      	movs	r1, #44	; 0x2c
 8009950:	fb01 f303 	mul.w	r3, r1, r3
 8009954:	4413      	add	r3, r2
 8009956:	3360      	adds	r3, #96	; 0x60
 8009958:	2202      	movs	r2, #2
 800995a:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800995c:	78fb      	ldrb	r3, [r7, #3]
 800995e:	015a      	lsls	r2, r3, #5
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	4413      	add	r3, r2
 8009964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009968:	461a      	mov	r2, r3
 800996a:	2380      	movs	r3, #128	; 0x80
 800996c:	6093      	str	r3, [r2, #8]
 800996e:	e1b6      	b.n	8009cde <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	78fa      	ldrb	r2, [r7, #3]
 8009976:	4611      	mov	r1, r2
 8009978:	4618      	mov	r0, r3
 800997a:	f005 fe6c 	bl	800f656 <USB_ReadChInterrupts>
 800997e:	4603      	mov	r3, r0
 8009980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009988:	d11a      	bne.n	80099c0 <HCD_HC_OUT_IRQHandler+0x440>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800998a:	78fb      	ldrb	r3, [r7, #3]
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	212c      	movs	r1, #44	; 0x2c
 8009990:	fb01 f303 	mul.w	r3, r1, r3
 8009994:	4413      	add	r3, r2
 8009996:	3361      	adds	r3, #97	; 0x61
 8009998:	2209      	movs	r2, #9
 800999a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	78fa      	ldrb	r2, [r7, #3]
 80099a2:	4611      	mov	r1, r2
 80099a4:	4618      	mov	r0, r3
 80099a6:	f006 fab2 	bl	800ff0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80099aa:	78fb      	ldrb	r3, [r7, #3]
 80099ac:	015a      	lsls	r2, r3, #5
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	4413      	add	r3, r2
 80099b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099b6:	461a      	mov	r2, r3
 80099b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099bc:	6093      	str	r3, [r2, #8]
 80099be:	e18e      	b.n	8009cde <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	78fa      	ldrb	r2, [r7, #3]
 80099c6:	4611      	mov	r1, r2
 80099c8:	4618      	mov	r0, r3
 80099ca:	f005 fe44 	bl	800f656 <USB_ReadChInterrupts>
 80099ce:	4603      	mov	r3, r0
 80099d0:	f003 0302 	and.w	r3, r3, #2
 80099d4:	2b02      	cmp	r3, #2
 80099d6:	f040 8182 	bne.w	8009cde <HCD_HC_OUT_IRQHandler+0x75e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80099da:	78fb      	ldrb	r3, [r7, #3]
 80099dc:	015a      	lsls	r2, r3, #5
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	4413      	add	r3, r2
 80099e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099e6:	461a      	mov	r2, r3
 80099e8:	2302      	movs	r3, #2
 80099ea:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[chnum].state == HC_XFRC)
 80099ec:	78fb      	ldrb	r3, [r7, #3]
 80099ee:	687a      	ldr	r2, [r7, #4]
 80099f0:	212c      	movs	r1, #44	; 0x2c
 80099f2:	fb01 f303 	mul.w	r3, r1, r3
 80099f6:	4413      	add	r3, r2
 80099f8:	3361      	adds	r3, #97	; 0x61
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	f040 8087 	bne.w	8009b10 <HCD_HC_OUT_IRQHandler+0x590>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009a02:	78fb      	ldrb	r3, [r7, #3]
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	212c      	movs	r1, #44	; 0x2c
 8009a08:	fb01 f303 	mul.w	r3, r1, r3
 8009a0c:	4413      	add	r3, r2
 8009a0e:	3361      	adds	r3, #97	; 0x61
 8009a10:	2202      	movs	r2, #2
 8009a12:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_DONE;
 8009a14:	78fb      	ldrb	r3, [r7, #3]
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	212c      	movs	r1, #44	; 0x2c
 8009a1a:	fb01 f303 	mul.w	r3, r1, r3
 8009a1e:	4413      	add	r3, r2
 8009a20:	3360      	adds	r3, #96	; 0x60
 8009a22:	2201      	movs	r2, #1
 8009a24:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8009a26:	78fb      	ldrb	r3, [r7, #3]
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	212c      	movs	r1, #44	; 0x2c
 8009a2c:	fb01 f303 	mul.w	r3, r1, r3
 8009a30:	4413      	add	r3, r2
 8009a32:	333f      	adds	r3, #63	; 0x3f
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	2b02      	cmp	r3, #2
 8009a38:	d00a      	beq.n	8009a50 <HCD_HC_OUT_IRQHandler+0x4d0>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8009a3a:	78fb      	ldrb	r3, [r7, #3]
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	212c      	movs	r1, #44	; 0x2c
 8009a40:	fb01 f303 	mul.w	r3, r1, r3
 8009a44:	4413      	add	r3, r2
 8009a46:	333f      	adds	r3, #63	; 0x3f
 8009a48:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8009a4a:	2b03      	cmp	r3, #3
 8009a4c:	f040 8138 	bne.w	8009cc0 <HCD_HC_OUT_IRQHandler+0x740>
      {
        if (hhcd->Init.dma_enable == 0U)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	68db      	ldr	r3, [r3, #12]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d113      	bne.n	8009a80 <HCD_HC_OUT_IRQHandler+0x500>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8009a58:	78fb      	ldrb	r3, [r7, #3]
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	212c      	movs	r1, #44	; 0x2c
 8009a5e:	fb01 f303 	mul.w	r3, r1, r3
 8009a62:	4413      	add	r3, r2
 8009a64:	3355      	adds	r3, #85	; 0x55
 8009a66:	781a      	ldrb	r2, [r3, #0]
 8009a68:	78fb      	ldrb	r3, [r7, #3]
 8009a6a:	f082 0201 	eor.w	r2, r2, #1
 8009a6e:	b2d0      	uxtb	r0, r2
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	212c      	movs	r1, #44	; 0x2c
 8009a74:	fb01 f303 	mul.w	r3, r1, r3
 8009a78:	4413      	add	r3, r2
 8009a7a:	3355      	adds	r3, #85	; 0x55
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	68db      	ldr	r3, [r3, #12]
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	f040 811b 	bne.w	8009cc0 <HCD_HC_OUT_IRQHandler+0x740>
 8009a8a:	78fb      	ldrb	r3, [r7, #3]
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	212c      	movs	r1, #44	; 0x2c
 8009a90:	fb01 f303 	mul.w	r3, r1, r3
 8009a94:	4413      	add	r3, r2
 8009a96:	334c      	adds	r3, #76	; 0x4c
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	f000 8110 	beq.w	8009cc0 <HCD_HC_OUT_IRQHandler+0x740>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8009aa0:	78fb      	ldrb	r3, [r7, #3]
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	212c      	movs	r1, #44	; 0x2c
 8009aa6:	fb01 f303 	mul.w	r3, r1, r3
 8009aaa:	4413      	add	r3, r2
 8009aac:	334c      	adds	r3, #76	; 0x4c
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	78fa      	ldrb	r2, [r7, #3]
 8009ab2:	6879      	ldr	r1, [r7, #4]
 8009ab4:	202c      	movs	r0, #44	; 0x2c
 8009ab6:	fb00 f202 	mul.w	r2, r0, r2
 8009aba:	440a      	add	r2, r1
 8009abc:	3240      	adds	r2, #64	; 0x40
 8009abe:	8812      	ldrh	r2, [r2, #0]
 8009ac0:	4413      	add	r3, r2
 8009ac2:	3b01      	subs	r3, #1
 8009ac4:	78fa      	ldrb	r2, [r7, #3]
 8009ac6:	6879      	ldr	r1, [r7, #4]
 8009ac8:	202c      	movs	r0, #44	; 0x2c
 8009aca:	fb00 f202 	mul.w	r2, r0, r2
 8009ace:	440a      	add	r2, r1
 8009ad0:	3240      	adds	r2, #64	; 0x40
 8009ad2:	8812      	ldrh	r2, [r2, #0]
 8009ad4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ad8:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	f003 0301 	and.w	r3, r3, #1
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	f000 80ed 	beq.w	8009cc0 <HCD_HC_OUT_IRQHandler+0x740>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8009ae6:	78fb      	ldrb	r3, [r7, #3]
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	212c      	movs	r1, #44	; 0x2c
 8009aec:	fb01 f303 	mul.w	r3, r1, r3
 8009af0:	4413      	add	r3, r2
 8009af2:	3355      	adds	r3, #85	; 0x55
 8009af4:	781a      	ldrb	r2, [r3, #0]
 8009af6:	78fb      	ldrb	r3, [r7, #3]
 8009af8:	f082 0201 	eor.w	r2, r2, #1
 8009afc:	b2d0      	uxtb	r0, r2
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	212c      	movs	r1, #44	; 0x2c
 8009b02:	fb01 f303 	mul.w	r3, r1, r3
 8009b06:	4413      	add	r3, r2
 8009b08:	3355      	adds	r3, #85	; 0x55
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	701a      	strb	r2, [r3, #0]
 8009b0e:	e0d7      	b.n	8009cc0 <HCD_HC_OUT_IRQHandler+0x740>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8009b10:	78fb      	ldrb	r3, [r7, #3]
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	212c      	movs	r1, #44	; 0x2c
 8009b16:	fb01 f303 	mul.w	r3, r1, r3
 8009b1a:	4413      	add	r3, r2
 8009b1c:	3361      	adds	r3, #97	; 0x61
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	2b03      	cmp	r3, #3
 8009b22:	d109      	bne.n	8009b38 <HCD_HC_OUT_IRQHandler+0x5b8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009b24:	78fb      	ldrb	r3, [r7, #3]
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	212c      	movs	r1, #44	; 0x2c
 8009b2a:	fb01 f303 	mul.w	r3, r1, r3
 8009b2e:	4413      	add	r3, r2
 8009b30:	3361      	adds	r3, #97	; 0x61
 8009b32:	2202      	movs	r2, #2
 8009b34:	701a      	strb	r2, [r3, #0]
 8009b36:	e0c3      	b.n	8009cc0 <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8009b38:	78fb      	ldrb	r3, [r7, #3]
 8009b3a:	687a      	ldr	r2, [r7, #4]
 8009b3c:	212c      	movs	r1, #44	; 0x2c
 8009b3e:	fb01 f303 	mul.w	r3, r1, r3
 8009b42:	4413      	add	r3, r2
 8009b44:	3361      	adds	r3, #97	; 0x61
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	2b04      	cmp	r3, #4
 8009b4a:	d112      	bne.n	8009b72 <HCD_HC_OUT_IRQHandler+0x5f2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009b4c:	78fb      	ldrb	r3, [r7, #3]
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	212c      	movs	r1, #44	; 0x2c
 8009b52:	fb01 f303 	mul.w	r3, r1, r3
 8009b56:	4413      	add	r3, r2
 8009b58:	3361      	adds	r3, #97	; 0x61
 8009b5a:	2202      	movs	r2, #2
 8009b5c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009b5e:	78fb      	ldrb	r3, [r7, #3]
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	212c      	movs	r1, #44	; 0x2c
 8009b64:	fb01 f303 	mul.w	r3, r1, r3
 8009b68:	4413      	add	r3, r2
 8009b6a:	3360      	adds	r3, #96	; 0x60
 8009b6c:	2202      	movs	r2, #2
 8009b6e:	701a      	strb	r2, [r3, #0]
 8009b70:	e0a6      	b.n	8009cc0 <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8009b72:	78fb      	ldrb	r3, [r7, #3]
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	212c      	movs	r1, #44	; 0x2c
 8009b78:	fb01 f303 	mul.w	r3, r1, r3
 8009b7c:	4413      	add	r3, r2
 8009b7e:	3361      	adds	r3, #97	; 0x61
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	2b05      	cmp	r3, #5
 8009b84:	d112      	bne.n	8009bac <HCD_HC_OUT_IRQHandler+0x62c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009b86:	78fb      	ldrb	r3, [r7, #3]
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	212c      	movs	r1, #44	; 0x2c
 8009b8c:	fb01 f303 	mul.w	r3, r1, r3
 8009b90:	4413      	add	r3, r2
 8009b92:	3361      	adds	r3, #97	; 0x61
 8009b94:	2202      	movs	r2, #2
 8009b96:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8009b98:	78fb      	ldrb	r3, [r7, #3]
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	212c      	movs	r1, #44	; 0x2c
 8009b9e:	fb01 f303 	mul.w	r3, r1, r3
 8009ba2:	4413      	add	r3, r2
 8009ba4:	3360      	adds	r3, #96	; 0x60
 8009ba6:	2202      	movs	r2, #2
 8009ba8:	701a      	strb	r2, [r3, #0]
 8009baa:	e089      	b.n	8009cc0 <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8009bac:	78fb      	ldrb	r3, [r7, #3]
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	212c      	movs	r1, #44	; 0x2c
 8009bb2:	fb01 f303 	mul.w	r3, r1, r3
 8009bb6:	4413      	add	r3, r2
 8009bb8:	3361      	adds	r3, #97	; 0x61
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	2b06      	cmp	r3, #6
 8009bbe:	d112      	bne.n	8009be6 <HCD_HC_OUT_IRQHandler+0x666>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009bc0:	78fb      	ldrb	r3, [r7, #3]
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	212c      	movs	r1, #44	; 0x2c
 8009bc6:	fb01 f303 	mul.w	r3, r1, r3
 8009bca:	4413      	add	r3, r2
 8009bcc:	3361      	adds	r3, #97	; 0x61
 8009bce:	2202      	movs	r2, #2
 8009bd0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8009bd2:	78fb      	ldrb	r3, [r7, #3]
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	212c      	movs	r1, #44	; 0x2c
 8009bd8:	fb01 f303 	mul.w	r3, r1, r3
 8009bdc:	4413      	add	r3, r2
 8009bde:	3360      	adds	r3, #96	; 0x60
 8009be0:	2205      	movs	r2, #5
 8009be2:	701a      	strb	r2, [r3, #0]
 8009be4:	e06c      	b.n	8009cc0 <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8009be6:	78fb      	ldrb	r3, [r7, #3]
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	212c      	movs	r1, #44	; 0x2c
 8009bec:	fb01 f303 	mul.w	r3, r1, r3
 8009bf0:	4413      	add	r3, r2
 8009bf2:	3361      	adds	r3, #97	; 0x61
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	2b07      	cmp	r3, #7
 8009bf8:	d009      	beq.n	8009c0e <HCD_HC_OUT_IRQHandler+0x68e>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8009bfa:	78fb      	ldrb	r3, [r7, #3]
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	212c      	movs	r1, #44	; 0x2c
 8009c00:	fb01 f303 	mul.w	r3, r1, r3
 8009c04:	4413      	add	r3, r2
 8009c06:	3361      	adds	r3, #97	; 0x61
 8009c08:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8009c0a:	2b09      	cmp	r3, #9
 8009c0c:	d166      	bne.n	8009cdc <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009c0e:	78fb      	ldrb	r3, [r7, #3]
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	212c      	movs	r1, #44	; 0x2c
 8009c14:	fb01 f303 	mul.w	r3, r1, r3
 8009c18:	4413      	add	r3, r2
 8009c1a:	3361      	adds	r3, #97	; 0x61
 8009c1c:	2202      	movs	r2, #2
 8009c1e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8009c20:	78fb      	ldrb	r3, [r7, #3]
 8009c22:	6879      	ldr	r1, [r7, #4]
 8009c24:	222c      	movs	r2, #44	; 0x2c
 8009c26:	fb03 f202 	mul.w	r2, r3, r2
 8009c2a:	440a      	add	r2, r1
 8009c2c:	325c      	adds	r2, #92	; 0x5c
 8009c2e:	6812      	ldr	r2, [r2, #0]
 8009c30:	3201      	adds	r2, #1
 8009c32:	6879      	ldr	r1, [r7, #4]
 8009c34:	202c      	movs	r0, #44	; 0x2c
 8009c36:	fb00 f303 	mul.w	r3, r0, r3
 8009c3a:	440b      	add	r3, r1
 8009c3c:	335c      	adds	r3, #92	; 0x5c
 8009c3e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009c40:	78fb      	ldrb	r3, [r7, #3]
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	212c      	movs	r1, #44	; 0x2c
 8009c46:	fb01 f303 	mul.w	r3, r1, r3
 8009c4a:	4413      	add	r3, r2
 8009c4c:	335c      	adds	r3, #92	; 0x5c
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	2b02      	cmp	r3, #2
 8009c52:	d912      	bls.n	8009c7a <HCD_HC_OUT_IRQHandler+0x6fa>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8009c54:	78fb      	ldrb	r3, [r7, #3]
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	212c      	movs	r1, #44	; 0x2c
 8009c5a:	fb01 f303 	mul.w	r3, r1, r3
 8009c5e:	4413      	add	r3, r2
 8009c60:	335c      	adds	r3, #92	; 0x5c
 8009c62:	2200      	movs	r2, #0
 8009c64:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8009c66:	78fb      	ldrb	r3, [r7, #3]
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	212c      	movs	r1, #44	; 0x2c
 8009c6c:	fb01 f303 	mul.w	r3, r1, r3
 8009c70:	4413      	add	r3, r2
 8009c72:	3360      	adds	r3, #96	; 0x60
 8009c74:	2204      	movs	r2, #4
 8009c76:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009c78:	e021      	b.n	8009cbe <HCD_HC_OUT_IRQHandler+0x73e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009c7a:	78fb      	ldrb	r3, [r7, #3]
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	212c      	movs	r1, #44	; 0x2c
 8009c80:	fb01 f303 	mul.w	r3, r1, r3
 8009c84:	4413      	add	r3, r2
 8009c86:	3360      	adds	r3, #96	; 0x60
 8009c88:	2202      	movs	r2, #2
 8009c8a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8009c8c:	78fb      	ldrb	r3, [r7, #3]
 8009c8e:	015a      	lsls	r2, r3, #5
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	4413      	add	r3, r2
 8009c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009ca2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009caa:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8009cac:	78fb      	ldrb	r3, [r7, #3]
 8009cae:	015a      	lsls	r2, r3, #5
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cb8:	461a      	mov	r2, r3
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009cbe:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8009cc0:	78fb      	ldrb	r3, [r7, #3]
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	212c      	movs	r1, #44	; 0x2c
 8009cc6:	fb01 f303 	mul.w	r3, r1, r3
 8009cca:	4413      	add	r3, r2
 8009ccc:	3360      	adds	r3, #96	; 0x60
 8009cce:	781a      	ldrb	r2, [r3, #0]
 8009cd0:	78fb      	ldrb	r3, [r7, #3]
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f00c fb09 	bl	80162ec <HAL_HCD_HC_NotifyURBChange_Callback>
 8009cda:	e000      	b.n	8009cde <HCD_HC_OUT_IRQHandler+0x75e>
      return;
 8009cdc:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8009cde:	3718      	adds	r7, #24
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b08a      	sub	sp, #40	; 0x28
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	6a1b      	ldr	r3, [r3, #32]
 8009cfc:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8009cfe:	69fb      	ldr	r3, [r7, #28]
 8009d00:	f003 030f 	and.w	r3, r3, #15
 8009d04:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8009d06:	69fb      	ldr	r3, [r7, #28]
 8009d08:	0c5b      	lsrs	r3, r3, #17
 8009d0a:	f003 030f 	and.w	r3, r3, #15
 8009d0e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009d10:	69fb      	ldr	r3, [r7, #28]
 8009d12:	091b      	lsrs	r3, r3, #4
 8009d14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009d18:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	2b02      	cmp	r3, #2
 8009d1e:	d004      	beq.n	8009d2a <HCD_RXQLVL_IRQHandler+0x46>
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	2b05      	cmp	r3, #5
 8009d24:	f000 80a9 	beq.w	8009e7a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8009d28:	e0aa      	b.n	8009e80 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	f000 80a6 	beq.w	8009e7e <HCD_RXQLVL_IRQHandler+0x19a>
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	69bb      	ldr	r3, [r7, #24]
 8009d36:	212c      	movs	r1, #44	; 0x2c
 8009d38:	fb01 f303 	mul.w	r3, r1, r3
 8009d3c:	4413      	add	r3, r2
 8009d3e:	3344      	adds	r3, #68	; 0x44
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	f000 809b 	beq.w	8009e7e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	212c      	movs	r1, #44	; 0x2c
 8009d4e:	fb01 f303 	mul.w	r3, r1, r3
 8009d52:	4413      	add	r3, r2
 8009d54:	3350      	adds	r3, #80	; 0x50
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	441a      	add	r2, r3
 8009d5c:	6879      	ldr	r1, [r7, #4]
 8009d5e:	69bb      	ldr	r3, [r7, #24]
 8009d60:	202c      	movs	r0, #44	; 0x2c
 8009d62:	fb00 f303 	mul.w	r3, r0, r3
 8009d66:	440b      	add	r3, r1
 8009d68:	334c      	adds	r3, #76	; 0x4c
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	d87a      	bhi.n	8009e66 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6818      	ldr	r0, [r3, #0]
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	69bb      	ldr	r3, [r7, #24]
 8009d78:	212c      	movs	r1, #44	; 0x2c
 8009d7a:	fb01 f303 	mul.w	r3, r1, r3
 8009d7e:	4413      	add	r3, r2
 8009d80:	3344      	adds	r3, #68	; 0x44
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	693a      	ldr	r2, [r7, #16]
 8009d86:	b292      	uxth	r2, r2
 8009d88:	4619      	mov	r1, r3
 8009d8a:	f005 fbf9 	bl	800f580 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	69bb      	ldr	r3, [r7, #24]
 8009d92:	212c      	movs	r1, #44	; 0x2c
 8009d94:	fb01 f303 	mul.w	r3, r1, r3
 8009d98:	4413      	add	r3, r2
 8009d9a:	3344      	adds	r3, #68	; 0x44
 8009d9c:	681a      	ldr	r2, [r3, #0]
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	441a      	add	r2, r3
 8009da2:	6879      	ldr	r1, [r7, #4]
 8009da4:	69bb      	ldr	r3, [r7, #24]
 8009da6:	202c      	movs	r0, #44	; 0x2c
 8009da8:	fb00 f303 	mul.w	r3, r0, r3
 8009dac:	440b      	add	r3, r1
 8009dae:	3344      	adds	r3, #68	; 0x44
 8009db0:	601a      	str	r2, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	69bb      	ldr	r3, [r7, #24]
 8009db6:	212c      	movs	r1, #44	; 0x2c
 8009db8:	fb01 f303 	mul.w	r3, r1, r3
 8009dbc:	4413      	add	r3, r2
 8009dbe:	3350      	adds	r3, #80	; 0x50
 8009dc0:	681a      	ldr	r2, [r3, #0]
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	441a      	add	r2, r3
 8009dc6:	6879      	ldr	r1, [r7, #4]
 8009dc8:	69bb      	ldr	r3, [r7, #24]
 8009dca:	202c      	movs	r0, #44	; 0x2c
 8009dcc:	fb00 f303 	mul.w	r3, r0, r3
 8009dd0:	440b      	add	r3, r1
 8009dd2:	3350      	adds	r3, #80	; 0x50
 8009dd4:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8009dd6:	69bb      	ldr	r3, [r7, #24]
 8009dd8:	015a      	lsls	r2, r3, #5
 8009dda:	6a3b      	ldr	r3, [r7, #32]
 8009ddc:	4413      	add	r3, r2
 8009dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009de2:	691b      	ldr	r3, [r3, #16]
 8009de4:	0cdb      	lsrs	r3, r3, #19
 8009de6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009dea:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	69bb      	ldr	r3, [r7, #24]
 8009df0:	212c      	movs	r1, #44	; 0x2c
 8009df2:	fb01 f303 	mul.w	r3, r1, r3
 8009df6:	4413      	add	r3, r2
 8009df8:	3340      	adds	r3, #64	; 0x40
 8009dfa:	881b      	ldrh	r3, [r3, #0]
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d13c      	bne.n	8009e7e <HCD_RXQLVL_IRQHandler+0x19a>
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d039      	beq.n	8009e7e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8009e0a:	69bb      	ldr	r3, [r7, #24]
 8009e0c:	015a      	lsls	r2, r3, #5
 8009e0e:	6a3b      	ldr	r3, [r7, #32]
 8009e10:	4413      	add	r3, r2
 8009e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009e20:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009e28:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8009e2a:	69bb      	ldr	r3, [r7, #24]
 8009e2c:	015a      	lsls	r2, r3, #5
 8009e2e:	6a3b      	ldr	r3, [r7, #32]
 8009e30:	4413      	add	r3, r2
 8009e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e36:	461a      	mov	r2, r3
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8009e3c:	687a      	ldr	r2, [r7, #4]
 8009e3e:	69bb      	ldr	r3, [r7, #24]
 8009e40:	212c      	movs	r1, #44	; 0x2c
 8009e42:	fb01 f303 	mul.w	r3, r1, r3
 8009e46:	4413      	add	r3, r2
 8009e48:	3354      	adds	r3, #84	; 0x54
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	f083 0301 	eor.w	r3, r3, #1
 8009e50:	b2d8      	uxtb	r0, r3
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	69bb      	ldr	r3, [r7, #24]
 8009e56:	212c      	movs	r1, #44	; 0x2c
 8009e58:	fb01 f303 	mul.w	r3, r1, r3
 8009e5c:	4413      	add	r3, r2
 8009e5e:	3354      	adds	r3, #84	; 0x54
 8009e60:	4602      	mov	r2, r0
 8009e62:	701a      	strb	r2, [r3, #0]
      break;
 8009e64:	e00b      	b.n	8009e7e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	69bb      	ldr	r3, [r7, #24]
 8009e6a:	212c      	movs	r1, #44	; 0x2c
 8009e6c:	fb01 f303 	mul.w	r3, r1, r3
 8009e70:	4413      	add	r3, r2
 8009e72:	3360      	adds	r3, #96	; 0x60
 8009e74:	2204      	movs	r2, #4
 8009e76:	701a      	strb	r2, [r3, #0]
      break;
 8009e78:	e001      	b.n	8009e7e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8009e7a:	bf00      	nop
 8009e7c:	e000      	b.n	8009e80 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8009e7e:	bf00      	nop
  }
}
 8009e80:	bf00      	nop
 8009e82:	3728      	adds	r7, #40	; 0x28
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b086      	sub	sp, #24
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009eb4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f003 0302 	and.w	r3, r3, #2
 8009ebc:	2b02      	cmp	r3, #2
 8009ebe:	d10b      	bne.n	8009ed8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f003 0301 	and.w	r3, r3, #1
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d102      	bne.n	8009ed0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f00c f9f2 	bl	80162b4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	f043 0302 	orr.w	r3, r3, #2
 8009ed6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f003 0308 	and.w	r3, r3, #8
 8009ede:	2b08      	cmp	r3, #8
 8009ee0:	d132      	bne.n	8009f48 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	f043 0308 	orr.w	r3, r3, #8
 8009ee8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	f003 0304 	and.w	r3, r3, #4
 8009ef0:	2b04      	cmp	r3, #4
 8009ef2:	d126      	bne.n	8009f42 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	699b      	ldr	r3, [r3, #24]
 8009ef8:	2b02      	cmp	r3, #2
 8009efa:	d113      	bne.n	8009f24 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8009f02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009f06:	d106      	bne.n	8009f16 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	2102      	movs	r1, #2
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f005 fcbe 	bl	800f890 <USB_InitFSLSPClkSel>
 8009f14:	e011      	b.n	8009f3a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	2101      	movs	r1, #1
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f005 fcb7 	bl	800f890 <USB_InitFSLSPClkSel>
 8009f22:	e00a      	b.n	8009f3a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	691b      	ldr	r3, [r3, #16]
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d106      	bne.n	8009f3a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f32:	461a      	mov	r2, r3
 8009f34:	f64e 2360 	movw	r3, #60000	; 0xea60
 8009f38:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f00c f9e4 	bl	8016308 <HAL_HCD_PortEnabled_Callback>
 8009f40:	e002      	b.n	8009f48 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f00c f9ee 	bl	8016324 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f003 0320 	and.w	r3, r3, #32
 8009f4e:	2b20      	cmp	r3, #32
 8009f50:	d103      	bne.n	8009f5a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	f043 0320 	orr.w	r3, r3, #32
 8009f58:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009f60:	461a      	mov	r2, r3
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	6013      	str	r3, [r2, #0]
}
 8009f66:	bf00      	nop
 8009f68:	3718      	adds	r7, #24
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
	...

08009f70 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009f78:	4b19      	ldr	r3, [pc, #100]	; (8009fe0 <HAL_PWREx_ConfigSupply+0x70>)
 8009f7a:	68db      	ldr	r3, [r3, #12]
 8009f7c:	f003 0304 	and.w	r3, r3, #4
 8009f80:	2b04      	cmp	r3, #4
 8009f82:	d00a      	beq.n	8009f9a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009f84:	4b16      	ldr	r3, [pc, #88]	; (8009fe0 <HAL_PWREx_ConfigSupply+0x70>)
 8009f86:	68db      	ldr	r3, [r3, #12]
 8009f88:	f003 0307 	and.w	r3, r3, #7
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d001      	beq.n	8009f96 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009f92:	2301      	movs	r3, #1
 8009f94:	e01f      	b.n	8009fd6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009f96:	2300      	movs	r3, #0
 8009f98:	e01d      	b.n	8009fd6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009f9a:	4b11      	ldr	r3, [pc, #68]	; (8009fe0 <HAL_PWREx_ConfigSupply+0x70>)
 8009f9c:	68db      	ldr	r3, [r3, #12]
 8009f9e:	f023 0207 	bic.w	r2, r3, #7
 8009fa2:	490f      	ldr	r1, [pc, #60]	; (8009fe0 <HAL_PWREx_ConfigSupply+0x70>)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009faa:	f7f9 fa43 	bl	8003434 <HAL_GetTick>
 8009fae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009fb0:	e009      	b.n	8009fc6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009fb2:	f7f9 fa3f 	bl	8003434 <HAL_GetTick>
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	1ad3      	subs	r3, r2, r3
 8009fbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009fc0:	d901      	bls.n	8009fc6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	e007      	b.n	8009fd6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009fc6:	4b06      	ldr	r3, [pc, #24]	; (8009fe0 <HAL_PWREx_ConfigSupply+0x70>)
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009fce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fd2:	d1ee      	bne.n	8009fb2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009fd4:	2300      	movs	r3, #0
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3710      	adds	r7, #16
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
 8009fde:	bf00      	nop
 8009fe0:	58024800 	.word	0x58024800

08009fe4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8009fe8:	4b05      	ldr	r3, [pc, #20]	; (800a000 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009fea:	68db      	ldr	r3, [r3, #12]
 8009fec:	4a04      	ldr	r2, [pc, #16]	; (800a000 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009fee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009ff2:	60d3      	str	r3, [r2, #12]
}
 8009ff4:	bf00      	nop
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffc:	4770      	bx	lr
 8009ffe:	bf00      	nop
 800a000:	58024800 	.word	0x58024800

0800a004 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b08c      	sub	sp, #48	; 0x30
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d102      	bne.n	800a018 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a012:	2301      	movs	r3, #1
 800a014:	f000 bc48 	b.w	800a8a8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f003 0301 	and.w	r3, r3, #1
 800a020:	2b00      	cmp	r3, #0
 800a022:	f000 8088 	beq.w	800a136 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a026:	4b99      	ldr	r3, [pc, #612]	; (800a28c <HAL_RCC_OscConfig+0x288>)
 800a028:	691b      	ldr	r3, [r3, #16]
 800a02a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a02e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a030:	4b96      	ldr	r3, [pc, #600]	; (800a28c <HAL_RCC_OscConfig+0x288>)
 800a032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a034:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a038:	2b10      	cmp	r3, #16
 800a03a:	d007      	beq.n	800a04c <HAL_RCC_OscConfig+0x48>
 800a03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a03e:	2b18      	cmp	r3, #24
 800a040:	d111      	bne.n	800a066 <HAL_RCC_OscConfig+0x62>
 800a042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a044:	f003 0303 	and.w	r3, r3, #3
 800a048:	2b02      	cmp	r3, #2
 800a04a:	d10c      	bne.n	800a066 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a04c:	4b8f      	ldr	r3, [pc, #572]	; (800a28c <HAL_RCC_OscConfig+0x288>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a054:	2b00      	cmp	r3, #0
 800a056:	d06d      	beq.n	800a134 <HAL_RCC_OscConfig+0x130>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d169      	bne.n	800a134 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a060:	2301      	movs	r3, #1
 800a062:	f000 bc21 	b.w	800a8a8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a06e:	d106      	bne.n	800a07e <HAL_RCC_OscConfig+0x7a>
 800a070:	4b86      	ldr	r3, [pc, #536]	; (800a28c <HAL_RCC_OscConfig+0x288>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a85      	ldr	r2, [pc, #532]	; (800a28c <HAL_RCC_OscConfig+0x288>)
 800a076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a07a:	6013      	str	r3, [r2, #0]
 800a07c:	e02e      	b.n	800a0dc <HAL_RCC_OscConfig+0xd8>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d10c      	bne.n	800a0a0 <HAL_RCC_OscConfig+0x9c>
 800a086:	4b81      	ldr	r3, [pc, #516]	; (800a28c <HAL_RCC_OscConfig+0x288>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a80      	ldr	r2, [pc, #512]	; (800a28c <HAL_RCC_OscConfig+0x288>)
 800a08c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a090:	6013      	str	r3, [r2, #0]
 800a092:	4b7e      	ldr	r3, [pc, #504]	; (800a28c <HAL_RCC_OscConfig+0x288>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4a7d      	ldr	r2, [pc, #500]	; (800a28c <HAL_RCC_OscConfig+0x288>)
 800a098:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a09c:	6013      	str	r3, [r2, #0]
 800a09e:	e01d      	b.n	800a0dc <HAL_RCC_OscConfig+0xd8>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a0a8:	d10c      	bne.n	800a0c4 <HAL_RCC_OscConfig+0xc0>
 800a0aa:	4b78      	ldr	r3, [pc, #480]	; (800a28c <HAL_RCC_OscConfig+0x288>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4a77      	ldr	r2, [pc, #476]	; (800a28c <HAL_RCC_OscConfig+0x288>)
 800a0b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a0b4:	6013      	str	r3, [r2, #0]
 800a0b6:	4b75      	ldr	r3, [pc, #468]	; (800a28c <HAL_RCC_OscConfig+0x288>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4a74      	ldr	r2, [pc, #464]	; (800a28c <HAL_RCC_OscConfig+0x288>)
 800a0bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0c0:	6013      	str	r3, [r2, #0]
 800a0c2:	e00b      	b.n	800a0dc <HAL_RCC_OscConfig+0xd8>
 800a0c4:	4b71      	ldr	r3, [pc, #452]	; (800a28c <HAL_RCC_OscConfig+0x288>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a70      	ldr	r2, [pc, #448]	; (800a28c <HAL_RCC_OscConfig+0x288>)
 800a0ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a0ce:	6013      	str	r3, [r2, #0]
 800a0d0:	4b6e      	ldr	r3, [pc, #440]	; (800a28c <HAL_RCC_OscConfig+0x288>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a6d      	ldr	r2, [pc, #436]	; (800a28c <HAL_RCC_OscConfig+0x288>)
 800a0d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a0da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d013      	beq.n	800a10c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0e4:	f7f9 f9a6 	bl	8003434 <HAL_GetTick>
 800a0e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a0ea:	e008      	b.n	800a0fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a0ec:	f7f9 f9a2 	bl	8003434 <HAL_GetTick>
 800a0f0:	4602      	mov	r2, r0
 800a0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f4:	1ad3      	subs	r3, r2, r3
 800a0f6:	2b64      	cmp	r3, #100	; 0x64
 800a0f8:	d901      	bls.n	800a0fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a0fa:	2303      	movs	r3, #3
 800a0fc:	e3d4      	b.n	800a8a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a0fe:	4b63      	ldr	r3, [pc, #396]	; (800a28c <HAL_RCC_OscConfig+0x288>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a106:	2b00      	cmp	r3, #0
 800a108:	d0f0      	beq.n	800a0ec <HAL_RCC_OscConfig+0xe8>
 800a10a:	e014      	b.n	800a136 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a10c:	f7f9 f992 	bl	8003434 <HAL_GetTick>
 800a110:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a112:	e008      	b.n	800a126 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a114:	f7f9 f98e 	bl	8003434 <HAL_GetTick>
 800a118:	4602      	mov	r2, r0
 800a11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11c:	1ad3      	subs	r3, r2, r3
 800a11e:	2b64      	cmp	r3, #100	; 0x64
 800a120:	d901      	bls.n	800a126 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a122:	2303      	movs	r3, #3
 800a124:	e3c0      	b.n	800a8a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a126:	4b59      	ldr	r3, [pc, #356]	; (800a28c <HAL_RCC_OscConfig+0x288>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d1f0      	bne.n	800a114 <HAL_RCC_OscConfig+0x110>
 800a132:	e000      	b.n	800a136 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f003 0302 	and.w	r3, r3, #2
 800a13e:	2b00      	cmp	r3, #0
 800a140:	f000 80ca 	beq.w	800a2d8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a144:	4b51      	ldr	r3, [pc, #324]	; (800a28c <HAL_RCC_OscConfig+0x288>)
 800a146:	691b      	ldr	r3, [r3, #16]
 800a148:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a14c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a14e:	4b4f      	ldr	r3, [pc, #316]	; (800a28c <HAL_RCC_OscConfig+0x288>)
 800a150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a152:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a154:	6a3b      	ldr	r3, [r7, #32]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d007      	beq.n	800a16a <HAL_RCC_OscConfig+0x166>
 800a15a:	6a3b      	ldr	r3, [r7, #32]
 800a15c:	2b18      	cmp	r3, #24
 800a15e:	d156      	bne.n	800a20e <HAL_RCC_OscConfig+0x20a>
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	f003 0303 	and.w	r3, r3, #3
 800a166:	2b00      	cmp	r3, #0
 800a168:	d151      	bne.n	800a20e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a16a:	4b48      	ldr	r3, [pc, #288]	; (800a28c <HAL_RCC_OscConfig+0x288>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f003 0304 	and.w	r3, r3, #4
 800a172:	2b00      	cmp	r3, #0
 800a174:	d005      	beq.n	800a182 <HAL_RCC_OscConfig+0x17e>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d101      	bne.n	800a182 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800a17e:	2301      	movs	r3, #1
 800a180:	e392      	b.n	800a8a8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a182:	4b42      	ldr	r3, [pc, #264]	; (800a28c <HAL_RCC_OscConfig+0x288>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f023 0219 	bic.w	r2, r3, #25
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	68db      	ldr	r3, [r3, #12]
 800a18e:	493f      	ldr	r1, [pc, #252]	; (800a28c <HAL_RCC_OscConfig+0x288>)
 800a190:	4313      	orrs	r3, r2
 800a192:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a194:	f7f9 f94e 	bl	8003434 <HAL_GetTick>
 800a198:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a19a:	e008      	b.n	800a1ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a19c:	f7f9 f94a 	bl	8003434 <HAL_GetTick>
 800a1a0:	4602      	mov	r2, r0
 800a1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a4:	1ad3      	subs	r3, r2, r3
 800a1a6:	2b02      	cmp	r3, #2
 800a1a8:	d901      	bls.n	800a1ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a1aa:	2303      	movs	r3, #3
 800a1ac:	e37c      	b.n	800a8a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a1ae:	4b37      	ldr	r3, [pc, #220]	; (800a28c <HAL_RCC_OscConfig+0x288>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f003 0304 	and.w	r3, r3, #4
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d0f0      	beq.n	800a19c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1ba:	f7f9 f96b 	bl	8003494 <HAL_GetREVID>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	f241 0203 	movw	r2, #4099	; 0x1003
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d817      	bhi.n	800a1f8 <HAL_RCC_OscConfig+0x1f4>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	691b      	ldr	r3, [r3, #16]
 800a1cc:	2b40      	cmp	r3, #64	; 0x40
 800a1ce:	d108      	bne.n	800a1e2 <HAL_RCC_OscConfig+0x1de>
 800a1d0:	4b2e      	ldr	r3, [pc, #184]	; (800a28c <HAL_RCC_OscConfig+0x288>)
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a1d8:	4a2c      	ldr	r2, [pc, #176]	; (800a28c <HAL_RCC_OscConfig+0x288>)
 800a1da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1de:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a1e0:	e07a      	b.n	800a2d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1e2:	4b2a      	ldr	r3, [pc, #168]	; (800a28c <HAL_RCC_OscConfig+0x288>)
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	691b      	ldr	r3, [r3, #16]
 800a1ee:	031b      	lsls	r3, r3, #12
 800a1f0:	4926      	ldr	r1, [pc, #152]	; (800a28c <HAL_RCC_OscConfig+0x288>)
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a1f6:	e06f      	b.n	800a2d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1f8:	4b24      	ldr	r3, [pc, #144]	; (800a28c <HAL_RCC_OscConfig+0x288>)
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	691b      	ldr	r3, [r3, #16]
 800a204:	061b      	lsls	r3, r3, #24
 800a206:	4921      	ldr	r1, [pc, #132]	; (800a28c <HAL_RCC_OscConfig+0x288>)
 800a208:	4313      	orrs	r3, r2
 800a20a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a20c:	e064      	b.n	800a2d8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	68db      	ldr	r3, [r3, #12]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d047      	beq.n	800a2a6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a216:	4b1d      	ldr	r3, [pc, #116]	; (800a28c <HAL_RCC_OscConfig+0x288>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f023 0219 	bic.w	r2, r3, #25
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	491a      	ldr	r1, [pc, #104]	; (800a28c <HAL_RCC_OscConfig+0x288>)
 800a224:	4313      	orrs	r3, r2
 800a226:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a228:	f7f9 f904 	bl	8003434 <HAL_GetTick>
 800a22c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a22e:	e008      	b.n	800a242 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a230:	f7f9 f900 	bl	8003434 <HAL_GetTick>
 800a234:	4602      	mov	r2, r0
 800a236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a238:	1ad3      	subs	r3, r2, r3
 800a23a:	2b02      	cmp	r3, #2
 800a23c:	d901      	bls.n	800a242 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a23e:	2303      	movs	r3, #3
 800a240:	e332      	b.n	800a8a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a242:	4b12      	ldr	r3, [pc, #72]	; (800a28c <HAL_RCC_OscConfig+0x288>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f003 0304 	and.w	r3, r3, #4
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d0f0      	beq.n	800a230 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a24e:	f7f9 f921 	bl	8003494 <HAL_GetREVID>
 800a252:	4603      	mov	r3, r0
 800a254:	f241 0203 	movw	r2, #4099	; 0x1003
 800a258:	4293      	cmp	r3, r2
 800a25a:	d819      	bhi.n	800a290 <HAL_RCC_OscConfig+0x28c>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	691b      	ldr	r3, [r3, #16]
 800a260:	2b40      	cmp	r3, #64	; 0x40
 800a262:	d108      	bne.n	800a276 <HAL_RCC_OscConfig+0x272>
 800a264:	4b09      	ldr	r3, [pc, #36]	; (800a28c <HAL_RCC_OscConfig+0x288>)
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a26c:	4a07      	ldr	r2, [pc, #28]	; (800a28c <HAL_RCC_OscConfig+0x288>)
 800a26e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a272:	6053      	str	r3, [r2, #4]
 800a274:	e030      	b.n	800a2d8 <HAL_RCC_OscConfig+0x2d4>
 800a276:	4b05      	ldr	r3, [pc, #20]	; (800a28c <HAL_RCC_OscConfig+0x288>)
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	691b      	ldr	r3, [r3, #16]
 800a282:	031b      	lsls	r3, r3, #12
 800a284:	4901      	ldr	r1, [pc, #4]	; (800a28c <HAL_RCC_OscConfig+0x288>)
 800a286:	4313      	orrs	r3, r2
 800a288:	604b      	str	r3, [r1, #4]
 800a28a:	e025      	b.n	800a2d8 <HAL_RCC_OscConfig+0x2d4>
 800a28c:	58024400 	.word	0x58024400
 800a290:	4b9a      	ldr	r3, [pc, #616]	; (800a4fc <HAL_RCC_OscConfig+0x4f8>)
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	691b      	ldr	r3, [r3, #16]
 800a29c:	061b      	lsls	r3, r3, #24
 800a29e:	4997      	ldr	r1, [pc, #604]	; (800a4fc <HAL_RCC_OscConfig+0x4f8>)
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	604b      	str	r3, [r1, #4]
 800a2a4:	e018      	b.n	800a2d8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a2a6:	4b95      	ldr	r3, [pc, #596]	; (800a4fc <HAL_RCC_OscConfig+0x4f8>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4a94      	ldr	r2, [pc, #592]	; (800a4fc <HAL_RCC_OscConfig+0x4f8>)
 800a2ac:	f023 0301 	bic.w	r3, r3, #1
 800a2b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2b2:	f7f9 f8bf 	bl	8003434 <HAL_GetTick>
 800a2b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a2b8:	e008      	b.n	800a2cc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a2ba:	f7f9 f8bb 	bl	8003434 <HAL_GetTick>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c2:	1ad3      	subs	r3, r2, r3
 800a2c4:	2b02      	cmp	r3, #2
 800a2c6:	d901      	bls.n	800a2cc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a2c8:	2303      	movs	r3, #3
 800a2ca:	e2ed      	b.n	800a8a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a2cc:	4b8b      	ldr	r3, [pc, #556]	; (800a4fc <HAL_RCC_OscConfig+0x4f8>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f003 0304 	and.w	r3, r3, #4
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d1f0      	bne.n	800a2ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f003 0310 	and.w	r3, r3, #16
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	f000 80a9 	beq.w	800a438 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a2e6:	4b85      	ldr	r3, [pc, #532]	; (800a4fc <HAL_RCC_OscConfig+0x4f8>)
 800a2e8:	691b      	ldr	r3, [r3, #16]
 800a2ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a2ee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a2f0:	4b82      	ldr	r3, [pc, #520]	; (800a4fc <HAL_RCC_OscConfig+0x4f8>)
 800a2f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2f4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a2f6:	69bb      	ldr	r3, [r7, #24]
 800a2f8:	2b08      	cmp	r3, #8
 800a2fa:	d007      	beq.n	800a30c <HAL_RCC_OscConfig+0x308>
 800a2fc:	69bb      	ldr	r3, [r7, #24]
 800a2fe:	2b18      	cmp	r3, #24
 800a300:	d13a      	bne.n	800a378 <HAL_RCC_OscConfig+0x374>
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	f003 0303 	and.w	r3, r3, #3
 800a308:	2b01      	cmp	r3, #1
 800a30a:	d135      	bne.n	800a378 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a30c:	4b7b      	ldr	r3, [pc, #492]	; (800a4fc <HAL_RCC_OscConfig+0x4f8>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a314:	2b00      	cmp	r3, #0
 800a316:	d005      	beq.n	800a324 <HAL_RCC_OscConfig+0x320>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	69db      	ldr	r3, [r3, #28]
 800a31c:	2b80      	cmp	r3, #128	; 0x80
 800a31e:	d001      	beq.n	800a324 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	e2c1      	b.n	800a8a8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a324:	f7f9 f8b6 	bl	8003494 <HAL_GetREVID>
 800a328:	4603      	mov	r3, r0
 800a32a:	f241 0203 	movw	r2, #4099	; 0x1003
 800a32e:	4293      	cmp	r3, r2
 800a330:	d817      	bhi.n	800a362 <HAL_RCC_OscConfig+0x35e>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6a1b      	ldr	r3, [r3, #32]
 800a336:	2b20      	cmp	r3, #32
 800a338:	d108      	bne.n	800a34c <HAL_RCC_OscConfig+0x348>
 800a33a:	4b70      	ldr	r3, [pc, #448]	; (800a4fc <HAL_RCC_OscConfig+0x4f8>)
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a342:	4a6e      	ldr	r2, [pc, #440]	; (800a4fc <HAL_RCC_OscConfig+0x4f8>)
 800a344:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a348:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a34a:	e075      	b.n	800a438 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a34c:	4b6b      	ldr	r3, [pc, #428]	; (800a4fc <HAL_RCC_OscConfig+0x4f8>)
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6a1b      	ldr	r3, [r3, #32]
 800a358:	069b      	lsls	r3, r3, #26
 800a35a:	4968      	ldr	r1, [pc, #416]	; (800a4fc <HAL_RCC_OscConfig+0x4f8>)
 800a35c:	4313      	orrs	r3, r2
 800a35e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a360:	e06a      	b.n	800a438 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a362:	4b66      	ldr	r3, [pc, #408]	; (800a4fc <HAL_RCC_OscConfig+0x4f8>)
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a1b      	ldr	r3, [r3, #32]
 800a36e:	061b      	lsls	r3, r3, #24
 800a370:	4962      	ldr	r1, [pc, #392]	; (800a4fc <HAL_RCC_OscConfig+0x4f8>)
 800a372:	4313      	orrs	r3, r2
 800a374:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a376:	e05f      	b.n	800a438 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	69db      	ldr	r3, [r3, #28]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d042      	beq.n	800a406 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a380:	4b5e      	ldr	r3, [pc, #376]	; (800a4fc <HAL_RCC_OscConfig+0x4f8>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a5d      	ldr	r2, [pc, #372]	; (800a4fc <HAL_RCC_OscConfig+0x4f8>)
 800a386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a38a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a38c:	f7f9 f852 	bl	8003434 <HAL_GetTick>
 800a390:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a392:	e008      	b.n	800a3a6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a394:	f7f9 f84e 	bl	8003434 <HAL_GetTick>
 800a398:	4602      	mov	r2, r0
 800a39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39c:	1ad3      	subs	r3, r2, r3
 800a39e:	2b02      	cmp	r3, #2
 800a3a0:	d901      	bls.n	800a3a6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a3a2:	2303      	movs	r3, #3
 800a3a4:	e280      	b.n	800a8a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a3a6:	4b55      	ldr	r3, [pc, #340]	; (800a4fc <HAL_RCC_OscConfig+0x4f8>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d0f0      	beq.n	800a394 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a3b2:	f7f9 f86f 	bl	8003494 <HAL_GetREVID>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	f241 0203 	movw	r2, #4099	; 0x1003
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d817      	bhi.n	800a3f0 <HAL_RCC_OscConfig+0x3ec>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6a1b      	ldr	r3, [r3, #32]
 800a3c4:	2b20      	cmp	r3, #32
 800a3c6:	d108      	bne.n	800a3da <HAL_RCC_OscConfig+0x3d6>
 800a3c8:	4b4c      	ldr	r3, [pc, #304]	; (800a4fc <HAL_RCC_OscConfig+0x4f8>)
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a3d0:	4a4a      	ldr	r2, [pc, #296]	; (800a4fc <HAL_RCC_OscConfig+0x4f8>)
 800a3d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a3d6:	6053      	str	r3, [r2, #4]
 800a3d8:	e02e      	b.n	800a438 <HAL_RCC_OscConfig+0x434>
 800a3da:	4b48      	ldr	r3, [pc, #288]	; (800a4fc <HAL_RCC_OscConfig+0x4f8>)
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6a1b      	ldr	r3, [r3, #32]
 800a3e6:	069b      	lsls	r3, r3, #26
 800a3e8:	4944      	ldr	r1, [pc, #272]	; (800a4fc <HAL_RCC_OscConfig+0x4f8>)
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	604b      	str	r3, [r1, #4]
 800a3ee:	e023      	b.n	800a438 <HAL_RCC_OscConfig+0x434>
 800a3f0:	4b42      	ldr	r3, [pc, #264]	; (800a4fc <HAL_RCC_OscConfig+0x4f8>)
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6a1b      	ldr	r3, [r3, #32]
 800a3fc:	061b      	lsls	r3, r3, #24
 800a3fe:	493f      	ldr	r1, [pc, #252]	; (800a4fc <HAL_RCC_OscConfig+0x4f8>)
 800a400:	4313      	orrs	r3, r2
 800a402:	60cb      	str	r3, [r1, #12]
 800a404:	e018      	b.n	800a438 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a406:	4b3d      	ldr	r3, [pc, #244]	; (800a4fc <HAL_RCC_OscConfig+0x4f8>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4a3c      	ldr	r2, [pc, #240]	; (800a4fc <HAL_RCC_OscConfig+0x4f8>)
 800a40c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a412:	f7f9 f80f 	bl	8003434 <HAL_GetTick>
 800a416:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a418:	e008      	b.n	800a42c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a41a:	f7f9 f80b 	bl	8003434 <HAL_GetTick>
 800a41e:	4602      	mov	r2, r0
 800a420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a422:	1ad3      	subs	r3, r2, r3
 800a424:	2b02      	cmp	r3, #2
 800a426:	d901      	bls.n	800a42c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a428:	2303      	movs	r3, #3
 800a42a:	e23d      	b.n	800a8a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a42c:	4b33      	ldr	r3, [pc, #204]	; (800a4fc <HAL_RCC_OscConfig+0x4f8>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a434:	2b00      	cmp	r3, #0
 800a436:	d1f0      	bne.n	800a41a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f003 0308 	and.w	r3, r3, #8
 800a440:	2b00      	cmp	r3, #0
 800a442:	d036      	beq.n	800a4b2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	695b      	ldr	r3, [r3, #20]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d019      	beq.n	800a480 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a44c:	4b2b      	ldr	r3, [pc, #172]	; (800a4fc <HAL_RCC_OscConfig+0x4f8>)
 800a44e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a450:	4a2a      	ldr	r2, [pc, #168]	; (800a4fc <HAL_RCC_OscConfig+0x4f8>)
 800a452:	f043 0301 	orr.w	r3, r3, #1
 800a456:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a458:	f7f8 ffec 	bl	8003434 <HAL_GetTick>
 800a45c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a45e:	e008      	b.n	800a472 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a460:	f7f8 ffe8 	bl	8003434 <HAL_GetTick>
 800a464:	4602      	mov	r2, r0
 800a466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a468:	1ad3      	subs	r3, r2, r3
 800a46a:	2b02      	cmp	r3, #2
 800a46c:	d901      	bls.n	800a472 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a46e:	2303      	movs	r3, #3
 800a470:	e21a      	b.n	800a8a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a472:	4b22      	ldr	r3, [pc, #136]	; (800a4fc <HAL_RCC_OscConfig+0x4f8>)
 800a474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a476:	f003 0302 	and.w	r3, r3, #2
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d0f0      	beq.n	800a460 <HAL_RCC_OscConfig+0x45c>
 800a47e:	e018      	b.n	800a4b2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a480:	4b1e      	ldr	r3, [pc, #120]	; (800a4fc <HAL_RCC_OscConfig+0x4f8>)
 800a482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a484:	4a1d      	ldr	r2, [pc, #116]	; (800a4fc <HAL_RCC_OscConfig+0x4f8>)
 800a486:	f023 0301 	bic.w	r3, r3, #1
 800a48a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a48c:	f7f8 ffd2 	bl	8003434 <HAL_GetTick>
 800a490:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a492:	e008      	b.n	800a4a6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a494:	f7f8 ffce 	bl	8003434 <HAL_GetTick>
 800a498:	4602      	mov	r2, r0
 800a49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49c:	1ad3      	subs	r3, r2, r3
 800a49e:	2b02      	cmp	r3, #2
 800a4a0:	d901      	bls.n	800a4a6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a4a2:	2303      	movs	r3, #3
 800a4a4:	e200      	b.n	800a8a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a4a6:	4b15      	ldr	r3, [pc, #84]	; (800a4fc <HAL_RCC_OscConfig+0x4f8>)
 800a4a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4aa:	f003 0302 	and.w	r3, r3, #2
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d1f0      	bne.n	800a494 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f003 0320 	and.w	r3, r3, #32
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d039      	beq.n	800a532 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	699b      	ldr	r3, [r3, #24]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d01c      	beq.n	800a500 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a4c6:	4b0d      	ldr	r3, [pc, #52]	; (800a4fc <HAL_RCC_OscConfig+0x4f8>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4a0c      	ldr	r2, [pc, #48]	; (800a4fc <HAL_RCC_OscConfig+0x4f8>)
 800a4cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a4d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a4d2:	f7f8 ffaf 	bl	8003434 <HAL_GetTick>
 800a4d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a4d8:	e008      	b.n	800a4ec <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a4da:	f7f8 ffab 	bl	8003434 <HAL_GetTick>
 800a4de:	4602      	mov	r2, r0
 800a4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e2:	1ad3      	subs	r3, r2, r3
 800a4e4:	2b02      	cmp	r3, #2
 800a4e6:	d901      	bls.n	800a4ec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a4e8:	2303      	movs	r3, #3
 800a4ea:	e1dd      	b.n	800a8a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a4ec:	4b03      	ldr	r3, [pc, #12]	; (800a4fc <HAL_RCC_OscConfig+0x4f8>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d0f0      	beq.n	800a4da <HAL_RCC_OscConfig+0x4d6>
 800a4f8:	e01b      	b.n	800a532 <HAL_RCC_OscConfig+0x52e>
 800a4fa:	bf00      	nop
 800a4fc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a500:	4b9b      	ldr	r3, [pc, #620]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4a9a      	ldr	r2, [pc, #616]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a506:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a50a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a50c:	f7f8 ff92 	bl	8003434 <HAL_GetTick>
 800a510:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a512:	e008      	b.n	800a526 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a514:	f7f8 ff8e 	bl	8003434 <HAL_GetTick>
 800a518:	4602      	mov	r2, r0
 800a51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51c:	1ad3      	subs	r3, r2, r3
 800a51e:	2b02      	cmp	r3, #2
 800a520:	d901      	bls.n	800a526 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a522:	2303      	movs	r3, #3
 800a524:	e1c0      	b.n	800a8a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a526:	4b92      	ldr	r3, [pc, #584]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d1f0      	bne.n	800a514 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f003 0304 	and.w	r3, r3, #4
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	f000 8081 	beq.w	800a642 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a540:	4b8c      	ldr	r3, [pc, #560]	; (800a774 <HAL_RCC_OscConfig+0x770>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4a8b      	ldr	r2, [pc, #556]	; (800a774 <HAL_RCC_OscConfig+0x770>)
 800a546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a54a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a54c:	f7f8 ff72 	bl	8003434 <HAL_GetTick>
 800a550:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a552:	e008      	b.n	800a566 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a554:	f7f8 ff6e 	bl	8003434 <HAL_GetTick>
 800a558:	4602      	mov	r2, r0
 800a55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55c:	1ad3      	subs	r3, r2, r3
 800a55e:	2b64      	cmp	r3, #100	; 0x64
 800a560:	d901      	bls.n	800a566 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a562:	2303      	movs	r3, #3
 800a564:	e1a0      	b.n	800a8a8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a566:	4b83      	ldr	r3, [pc, #524]	; (800a774 <HAL_RCC_OscConfig+0x770>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d0f0      	beq.n	800a554 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	689b      	ldr	r3, [r3, #8]
 800a576:	2b01      	cmp	r3, #1
 800a578:	d106      	bne.n	800a588 <HAL_RCC_OscConfig+0x584>
 800a57a:	4b7d      	ldr	r3, [pc, #500]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a57c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a57e:	4a7c      	ldr	r2, [pc, #496]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a580:	f043 0301 	orr.w	r3, r3, #1
 800a584:	6713      	str	r3, [r2, #112]	; 0x70
 800a586:	e02d      	b.n	800a5e4 <HAL_RCC_OscConfig+0x5e0>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	689b      	ldr	r3, [r3, #8]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d10c      	bne.n	800a5aa <HAL_RCC_OscConfig+0x5a6>
 800a590:	4b77      	ldr	r3, [pc, #476]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a594:	4a76      	ldr	r2, [pc, #472]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a596:	f023 0301 	bic.w	r3, r3, #1
 800a59a:	6713      	str	r3, [r2, #112]	; 0x70
 800a59c:	4b74      	ldr	r3, [pc, #464]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a59e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5a0:	4a73      	ldr	r2, [pc, #460]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a5a2:	f023 0304 	bic.w	r3, r3, #4
 800a5a6:	6713      	str	r3, [r2, #112]	; 0x70
 800a5a8:	e01c      	b.n	800a5e4 <HAL_RCC_OscConfig+0x5e0>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	689b      	ldr	r3, [r3, #8]
 800a5ae:	2b05      	cmp	r3, #5
 800a5b0:	d10c      	bne.n	800a5cc <HAL_RCC_OscConfig+0x5c8>
 800a5b2:	4b6f      	ldr	r3, [pc, #444]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a5b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5b6:	4a6e      	ldr	r2, [pc, #440]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a5b8:	f043 0304 	orr.w	r3, r3, #4
 800a5bc:	6713      	str	r3, [r2, #112]	; 0x70
 800a5be:	4b6c      	ldr	r3, [pc, #432]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a5c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5c2:	4a6b      	ldr	r2, [pc, #428]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a5c4:	f043 0301 	orr.w	r3, r3, #1
 800a5c8:	6713      	str	r3, [r2, #112]	; 0x70
 800a5ca:	e00b      	b.n	800a5e4 <HAL_RCC_OscConfig+0x5e0>
 800a5cc:	4b68      	ldr	r3, [pc, #416]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a5ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5d0:	4a67      	ldr	r2, [pc, #412]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a5d2:	f023 0301 	bic.w	r3, r3, #1
 800a5d6:	6713      	str	r3, [r2, #112]	; 0x70
 800a5d8:	4b65      	ldr	r3, [pc, #404]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a5da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5dc:	4a64      	ldr	r2, [pc, #400]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a5de:	f023 0304 	bic.w	r3, r3, #4
 800a5e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d015      	beq.n	800a618 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5ec:	f7f8 ff22 	bl	8003434 <HAL_GetTick>
 800a5f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a5f2:	e00a      	b.n	800a60a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5f4:	f7f8 ff1e 	bl	8003434 <HAL_GetTick>
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5fc:	1ad3      	subs	r3, r2, r3
 800a5fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800a602:	4293      	cmp	r3, r2
 800a604:	d901      	bls.n	800a60a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a606:	2303      	movs	r3, #3
 800a608:	e14e      	b.n	800a8a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a60a:	4b59      	ldr	r3, [pc, #356]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a60c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a60e:	f003 0302 	and.w	r3, r3, #2
 800a612:	2b00      	cmp	r3, #0
 800a614:	d0ee      	beq.n	800a5f4 <HAL_RCC_OscConfig+0x5f0>
 800a616:	e014      	b.n	800a642 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a618:	f7f8 ff0c 	bl	8003434 <HAL_GetTick>
 800a61c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a61e:	e00a      	b.n	800a636 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a620:	f7f8 ff08 	bl	8003434 <HAL_GetTick>
 800a624:	4602      	mov	r2, r0
 800a626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a628:	1ad3      	subs	r3, r2, r3
 800a62a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a62e:	4293      	cmp	r3, r2
 800a630:	d901      	bls.n	800a636 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a632:	2303      	movs	r3, #3
 800a634:	e138      	b.n	800a8a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a636:	4b4e      	ldr	r3, [pc, #312]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a63a:	f003 0302 	and.w	r3, r3, #2
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d1ee      	bne.n	800a620 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a646:	2b00      	cmp	r3, #0
 800a648:	f000 812d 	beq.w	800a8a6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a64c:	4b48      	ldr	r3, [pc, #288]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a64e:	691b      	ldr	r3, [r3, #16]
 800a650:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a654:	2b18      	cmp	r3, #24
 800a656:	f000 80bd 	beq.w	800a7d4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a65e:	2b02      	cmp	r3, #2
 800a660:	f040 809e 	bne.w	800a7a0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a664:	4b42      	ldr	r3, [pc, #264]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4a41      	ldr	r2, [pc, #260]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a66a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a66e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a670:	f7f8 fee0 	bl	8003434 <HAL_GetTick>
 800a674:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a676:	e008      	b.n	800a68a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a678:	f7f8 fedc 	bl	8003434 <HAL_GetTick>
 800a67c:	4602      	mov	r2, r0
 800a67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a680:	1ad3      	subs	r3, r2, r3
 800a682:	2b02      	cmp	r3, #2
 800a684:	d901      	bls.n	800a68a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a686:	2303      	movs	r3, #3
 800a688:	e10e      	b.n	800a8a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a68a:	4b39      	ldr	r3, [pc, #228]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a692:	2b00      	cmp	r3, #0
 800a694:	d1f0      	bne.n	800a678 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a696:	4b36      	ldr	r3, [pc, #216]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a698:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a69a:	4b37      	ldr	r3, [pc, #220]	; (800a778 <HAL_RCC_OscConfig+0x774>)
 800a69c:	4013      	ands	r3, r2
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a6a6:	0112      	lsls	r2, r2, #4
 800a6a8:	430a      	orrs	r2, r1
 800a6aa:	4931      	ldr	r1, [pc, #196]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	628b      	str	r3, [r1, #40]	; 0x28
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6b4:	3b01      	subs	r3, #1
 800a6b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6be:	3b01      	subs	r3, #1
 800a6c0:	025b      	lsls	r3, r3, #9
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	431a      	orrs	r2, r3
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ca:	3b01      	subs	r3, #1
 800a6cc:	041b      	lsls	r3, r3, #16
 800a6ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a6d2:	431a      	orrs	r2, r3
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6d8:	3b01      	subs	r3, #1
 800a6da:	061b      	lsls	r3, r3, #24
 800a6dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a6e0:	4923      	ldr	r1, [pc, #140]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a6e6:	4b22      	ldr	r3, [pc, #136]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a6e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ea:	4a21      	ldr	r2, [pc, #132]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a6ec:	f023 0301 	bic.w	r3, r3, #1
 800a6f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a6f2:	4b1f      	ldr	r3, [pc, #124]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a6f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6f6:	4b21      	ldr	r3, [pc, #132]	; (800a77c <HAL_RCC_OscConfig+0x778>)
 800a6f8:	4013      	ands	r3, r2
 800a6fa:	687a      	ldr	r2, [r7, #4]
 800a6fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a6fe:	00d2      	lsls	r2, r2, #3
 800a700:	491b      	ldr	r1, [pc, #108]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a702:	4313      	orrs	r3, r2
 800a704:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a706:	4b1a      	ldr	r3, [pc, #104]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a70a:	f023 020c 	bic.w	r2, r3, #12
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a712:	4917      	ldr	r1, [pc, #92]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a714:	4313      	orrs	r3, r2
 800a716:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a718:	4b15      	ldr	r3, [pc, #84]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a71c:	f023 0202 	bic.w	r2, r3, #2
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a724:	4912      	ldr	r1, [pc, #72]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a726:	4313      	orrs	r3, r2
 800a728:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a72a:	4b11      	ldr	r3, [pc, #68]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a72c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a72e:	4a10      	ldr	r2, [pc, #64]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a734:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a736:	4b0e      	ldr	r3, [pc, #56]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a73a:	4a0d      	ldr	r2, [pc, #52]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a73c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a740:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a742:	4b0b      	ldr	r3, [pc, #44]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a746:	4a0a      	ldr	r2, [pc, #40]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a74c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a74e:	4b08      	ldr	r3, [pc, #32]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a752:	4a07      	ldr	r2, [pc, #28]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a754:	f043 0301 	orr.w	r3, r3, #1
 800a758:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a75a:	4b05      	ldr	r3, [pc, #20]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	4a04      	ldr	r2, [pc, #16]	; (800a770 <HAL_RCC_OscConfig+0x76c>)
 800a760:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a764:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a766:	f7f8 fe65 	bl	8003434 <HAL_GetTick>
 800a76a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a76c:	e011      	b.n	800a792 <HAL_RCC_OscConfig+0x78e>
 800a76e:	bf00      	nop
 800a770:	58024400 	.word	0x58024400
 800a774:	58024800 	.word	0x58024800
 800a778:	fffffc0c 	.word	0xfffffc0c
 800a77c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a780:	f7f8 fe58 	bl	8003434 <HAL_GetTick>
 800a784:	4602      	mov	r2, r0
 800a786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a788:	1ad3      	subs	r3, r2, r3
 800a78a:	2b02      	cmp	r3, #2
 800a78c:	d901      	bls.n	800a792 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a78e:	2303      	movs	r3, #3
 800a790:	e08a      	b.n	800a8a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a792:	4b47      	ldr	r3, [pc, #284]	; (800a8b0 <HAL_RCC_OscConfig+0x8ac>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d0f0      	beq.n	800a780 <HAL_RCC_OscConfig+0x77c>
 800a79e:	e082      	b.n	800a8a6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a7a0:	4b43      	ldr	r3, [pc, #268]	; (800a8b0 <HAL_RCC_OscConfig+0x8ac>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a42      	ldr	r2, [pc, #264]	; (800a8b0 <HAL_RCC_OscConfig+0x8ac>)
 800a7a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a7aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7ac:	f7f8 fe42 	bl	8003434 <HAL_GetTick>
 800a7b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a7b2:	e008      	b.n	800a7c6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7b4:	f7f8 fe3e 	bl	8003434 <HAL_GetTick>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7bc:	1ad3      	subs	r3, r2, r3
 800a7be:	2b02      	cmp	r3, #2
 800a7c0:	d901      	bls.n	800a7c6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a7c2:	2303      	movs	r3, #3
 800a7c4:	e070      	b.n	800a8a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a7c6:	4b3a      	ldr	r3, [pc, #232]	; (800a8b0 <HAL_RCC_OscConfig+0x8ac>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d1f0      	bne.n	800a7b4 <HAL_RCC_OscConfig+0x7b0>
 800a7d2:	e068      	b.n	800a8a6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a7d4:	4b36      	ldr	r3, [pc, #216]	; (800a8b0 <HAL_RCC_OscConfig+0x8ac>)
 800a7d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a7da:	4b35      	ldr	r3, [pc, #212]	; (800a8b0 <HAL_RCC_OscConfig+0x8ac>)
 800a7dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7de:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d031      	beq.n	800a84c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	f003 0203 	and.w	r2, r3, #3
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d12a      	bne.n	800a84c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	091b      	lsrs	r3, r3, #4
 800a7fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a802:	429a      	cmp	r2, r3
 800a804:	d122      	bne.n	800a84c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a810:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a812:	429a      	cmp	r2, r3
 800a814:	d11a      	bne.n	800a84c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	0a5b      	lsrs	r3, r3, #9
 800a81a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a822:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a824:	429a      	cmp	r2, r3
 800a826:	d111      	bne.n	800a84c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	0c1b      	lsrs	r3, r3, #16
 800a82c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a834:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a836:	429a      	cmp	r2, r3
 800a838:	d108      	bne.n	800a84c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	0e1b      	lsrs	r3, r3, #24
 800a83e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a846:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a848:	429a      	cmp	r2, r3
 800a84a:	d001      	beq.n	800a850 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a84c:	2301      	movs	r3, #1
 800a84e:	e02b      	b.n	800a8a8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a850:	4b17      	ldr	r3, [pc, #92]	; (800a8b0 <HAL_RCC_OscConfig+0x8ac>)
 800a852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a854:	08db      	lsrs	r3, r3, #3
 800a856:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a85a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a860:	693a      	ldr	r2, [r7, #16]
 800a862:	429a      	cmp	r2, r3
 800a864:	d01f      	beq.n	800a8a6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a866:	4b12      	ldr	r3, [pc, #72]	; (800a8b0 <HAL_RCC_OscConfig+0x8ac>)
 800a868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a86a:	4a11      	ldr	r2, [pc, #68]	; (800a8b0 <HAL_RCC_OscConfig+0x8ac>)
 800a86c:	f023 0301 	bic.w	r3, r3, #1
 800a870:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a872:	f7f8 fddf 	bl	8003434 <HAL_GetTick>
 800a876:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a878:	bf00      	nop
 800a87a:	f7f8 fddb 	bl	8003434 <HAL_GetTick>
 800a87e:	4602      	mov	r2, r0
 800a880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a882:	4293      	cmp	r3, r2
 800a884:	d0f9      	beq.n	800a87a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a886:	4b0a      	ldr	r3, [pc, #40]	; (800a8b0 <HAL_RCC_OscConfig+0x8ac>)
 800a888:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a88a:	4b0a      	ldr	r3, [pc, #40]	; (800a8b4 <HAL_RCC_OscConfig+0x8b0>)
 800a88c:	4013      	ands	r3, r2
 800a88e:	687a      	ldr	r2, [r7, #4]
 800a890:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a892:	00d2      	lsls	r2, r2, #3
 800a894:	4906      	ldr	r1, [pc, #24]	; (800a8b0 <HAL_RCC_OscConfig+0x8ac>)
 800a896:	4313      	orrs	r3, r2
 800a898:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a89a:	4b05      	ldr	r3, [pc, #20]	; (800a8b0 <HAL_RCC_OscConfig+0x8ac>)
 800a89c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a89e:	4a04      	ldr	r2, [pc, #16]	; (800a8b0 <HAL_RCC_OscConfig+0x8ac>)
 800a8a0:	f043 0301 	orr.w	r3, r3, #1
 800a8a4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a8a6:	2300      	movs	r3, #0
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3730      	adds	r7, #48	; 0x30
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}
 800a8b0:	58024400 	.word	0x58024400
 800a8b4:	ffff0007 	.word	0xffff0007

0800a8b8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b086      	sub	sp, #24
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d101      	bne.n	800a8cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	e19c      	b.n	800ac06 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a8cc:	4b8a      	ldr	r3, [pc, #552]	; (800aaf8 <HAL_RCC_ClockConfig+0x240>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f003 030f 	and.w	r3, r3, #15
 800a8d4:	683a      	ldr	r2, [r7, #0]
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d910      	bls.n	800a8fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a8da:	4b87      	ldr	r3, [pc, #540]	; (800aaf8 <HAL_RCC_ClockConfig+0x240>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f023 020f 	bic.w	r2, r3, #15
 800a8e2:	4985      	ldr	r1, [pc, #532]	; (800aaf8 <HAL_RCC_ClockConfig+0x240>)
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	4313      	orrs	r3, r2
 800a8e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a8ea:	4b83      	ldr	r3, [pc, #524]	; (800aaf8 <HAL_RCC_ClockConfig+0x240>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f003 030f 	and.w	r3, r3, #15
 800a8f2:	683a      	ldr	r2, [r7, #0]
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	d001      	beq.n	800a8fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	e184      	b.n	800ac06 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f003 0304 	and.w	r3, r3, #4
 800a904:	2b00      	cmp	r3, #0
 800a906:	d010      	beq.n	800a92a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	691a      	ldr	r2, [r3, #16]
 800a90c:	4b7b      	ldr	r3, [pc, #492]	; (800aafc <HAL_RCC_ClockConfig+0x244>)
 800a90e:	699b      	ldr	r3, [r3, #24]
 800a910:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a914:	429a      	cmp	r2, r3
 800a916:	d908      	bls.n	800a92a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a918:	4b78      	ldr	r3, [pc, #480]	; (800aafc <HAL_RCC_ClockConfig+0x244>)
 800a91a:	699b      	ldr	r3, [r3, #24]
 800a91c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	691b      	ldr	r3, [r3, #16]
 800a924:	4975      	ldr	r1, [pc, #468]	; (800aafc <HAL_RCC_ClockConfig+0x244>)
 800a926:	4313      	orrs	r3, r2
 800a928:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f003 0308 	and.w	r3, r3, #8
 800a932:	2b00      	cmp	r3, #0
 800a934:	d010      	beq.n	800a958 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	695a      	ldr	r2, [r3, #20]
 800a93a:	4b70      	ldr	r3, [pc, #448]	; (800aafc <HAL_RCC_ClockConfig+0x244>)
 800a93c:	69db      	ldr	r3, [r3, #28]
 800a93e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a942:	429a      	cmp	r2, r3
 800a944:	d908      	bls.n	800a958 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a946:	4b6d      	ldr	r3, [pc, #436]	; (800aafc <HAL_RCC_ClockConfig+0x244>)
 800a948:	69db      	ldr	r3, [r3, #28]
 800a94a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	695b      	ldr	r3, [r3, #20]
 800a952:	496a      	ldr	r1, [pc, #424]	; (800aafc <HAL_RCC_ClockConfig+0x244>)
 800a954:	4313      	orrs	r3, r2
 800a956:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f003 0310 	and.w	r3, r3, #16
 800a960:	2b00      	cmp	r3, #0
 800a962:	d010      	beq.n	800a986 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	699a      	ldr	r2, [r3, #24]
 800a968:	4b64      	ldr	r3, [pc, #400]	; (800aafc <HAL_RCC_ClockConfig+0x244>)
 800a96a:	69db      	ldr	r3, [r3, #28]
 800a96c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a970:	429a      	cmp	r2, r3
 800a972:	d908      	bls.n	800a986 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a974:	4b61      	ldr	r3, [pc, #388]	; (800aafc <HAL_RCC_ClockConfig+0x244>)
 800a976:	69db      	ldr	r3, [r3, #28]
 800a978:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	699b      	ldr	r3, [r3, #24]
 800a980:	495e      	ldr	r1, [pc, #376]	; (800aafc <HAL_RCC_ClockConfig+0x244>)
 800a982:	4313      	orrs	r3, r2
 800a984:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f003 0320 	and.w	r3, r3, #32
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d010      	beq.n	800a9b4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	69da      	ldr	r2, [r3, #28]
 800a996:	4b59      	ldr	r3, [pc, #356]	; (800aafc <HAL_RCC_ClockConfig+0x244>)
 800a998:	6a1b      	ldr	r3, [r3, #32]
 800a99a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d908      	bls.n	800a9b4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a9a2:	4b56      	ldr	r3, [pc, #344]	; (800aafc <HAL_RCC_ClockConfig+0x244>)
 800a9a4:	6a1b      	ldr	r3, [r3, #32]
 800a9a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	69db      	ldr	r3, [r3, #28]
 800a9ae:	4953      	ldr	r1, [pc, #332]	; (800aafc <HAL_RCC_ClockConfig+0x244>)
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f003 0302 	and.w	r3, r3, #2
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d010      	beq.n	800a9e2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	68da      	ldr	r2, [r3, #12]
 800a9c4:	4b4d      	ldr	r3, [pc, #308]	; (800aafc <HAL_RCC_ClockConfig+0x244>)
 800a9c6:	699b      	ldr	r3, [r3, #24]
 800a9c8:	f003 030f 	and.w	r3, r3, #15
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d908      	bls.n	800a9e2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a9d0:	4b4a      	ldr	r3, [pc, #296]	; (800aafc <HAL_RCC_ClockConfig+0x244>)
 800a9d2:	699b      	ldr	r3, [r3, #24]
 800a9d4:	f023 020f 	bic.w	r2, r3, #15
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	4947      	ldr	r1, [pc, #284]	; (800aafc <HAL_RCC_ClockConfig+0x244>)
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f003 0301 	and.w	r3, r3, #1
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d055      	beq.n	800aa9a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a9ee:	4b43      	ldr	r3, [pc, #268]	; (800aafc <HAL_RCC_ClockConfig+0x244>)
 800a9f0:	699b      	ldr	r3, [r3, #24]
 800a9f2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	689b      	ldr	r3, [r3, #8]
 800a9fa:	4940      	ldr	r1, [pc, #256]	; (800aafc <HAL_RCC_ClockConfig+0x244>)
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	2b02      	cmp	r3, #2
 800aa06:	d107      	bne.n	800aa18 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aa08:	4b3c      	ldr	r3, [pc, #240]	; (800aafc <HAL_RCC_ClockConfig+0x244>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d121      	bne.n	800aa58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aa14:	2301      	movs	r3, #1
 800aa16:	e0f6      	b.n	800ac06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	2b03      	cmp	r3, #3
 800aa1e:	d107      	bne.n	800aa30 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aa20:	4b36      	ldr	r3, [pc, #216]	; (800aafc <HAL_RCC_ClockConfig+0x244>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d115      	bne.n	800aa58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	e0ea      	b.n	800ac06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d107      	bne.n	800aa48 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aa38:	4b30      	ldr	r3, [pc, #192]	; (800aafc <HAL_RCC_ClockConfig+0x244>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d109      	bne.n	800aa58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aa44:	2301      	movs	r3, #1
 800aa46:	e0de      	b.n	800ac06 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aa48:	4b2c      	ldr	r3, [pc, #176]	; (800aafc <HAL_RCC_ClockConfig+0x244>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f003 0304 	and.w	r3, r3, #4
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d101      	bne.n	800aa58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aa54:	2301      	movs	r3, #1
 800aa56:	e0d6      	b.n	800ac06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800aa58:	4b28      	ldr	r3, [pc, #160]	; (800aafc <HAL_RCC_ClockConfig+0x244>)
 800aa5a:	691b      	ldr	r3, [r3, #16]
 800aa5c:	f023 0207 	bic.w	r2, r3, #7
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	4925      	ldr	r1, [pc, #148]	; (800aafc <HAL_RCC_ClockConfig+0x244>)
 800aa66:	4313      	orrs	r3, r2
 800aa68:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa6a:	f7f8 fce3 	bl	8003434 <HAL_GetTick>
 800aa6e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa70:	e00a      	b.n	800aa88 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa72:	f7f8 fcdf 	bl	8003434 <HAL_GetTick>
 800aa76:	4602      	mov	r2, r0
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	1ad3      	subs	r3, r2, r3
 800aa7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d901      	bls.n	800aa88 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800aa84:	2303      	movs	r3, #3
 800aa86:	e0be      	b.n	800ac06 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa88:	4b1c      	ldr	r3, [pc, #112]	; (800aafc <HAL_RCC_ClockConfig+0x244>)
 800aa8a:	691b      	ldr	r3, [r3, #16]
 800aa8c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	00db      	lsls	r3, r3, #3
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d1eb      	bne.n	800aa72 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f003 0302 	and.w	r3, r3, #2
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d010      	beq.n	800aac8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	68da      	ldr	r2, [r3, #12]
 800aaaa:	4b14      	ldr	r3, [pc, #80]	; (800aafc <HAL_RCC_ClockConfig+0x244>)
 800aaac:	699b      	ldr	r3, [r3, #24]
 800aaae:	f003 030f 	and.w	r3, r3, #15
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d208      	bcs.n	800aac8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aab6:	4b11      	ldr	r3, [pc, #68]	; (800aafc <HAL_RCC_ClockConfig+0x244>)
 800aab8:	699b      	ldr	r3, [r3, #24]
 800aaba:	f023 020f 	bic.w	r2, r3, #15
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	68db      	ldr	r3, [r3, #12]
 800aac2:	490e      	ldr	r1, [pc, #56]	; (800aafc <HAL_RCC_ClockConfig+0x244>)
 800aac4:	4313      	orrs	r3, r2
 800aac6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800aac8:	4b0b      	ldr	r3, [pc, #44]	; (800aaf8 <HAL_RCC_ClockConfig+0x240>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f003 030f 	and.w	r3, r3, #15
 800aad0:	683a      	ldr	r2, [r7, #0]
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d214      	bcs.n	800ab00 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aad6:	4b08      	ldr	r3, [pc, #32]	; (800aaf8 <HAL_RCC_ClockConfig+0x240>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f023 020f 	bic.w	r2, r3, #15
 800aade:	4906      	ldr	r1, [pc, #24]	; (800aaf8 <HAL_RCC_ClockConfig+0x240>)
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	4313      	orrs	r3, r2
 800aae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aae6:	4b04      	ldr	r3, [pc, #16]	; (800aaf8 <HAL_RCC_ClockConfig+0x240>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f003 030f 	and.w	r3, r3, #15
 800aaee:	683a      	ldr	r2, [r7, #0]
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d005      	beq.n	800ab00 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	e086      	b.n	800ac06 <HAL_RCC_ClockConfig+0x34e>
 800aaf8:	52002000 	.word	0x52002000
 800aafc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f003 0304 	and.w	r3, r3, #4
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d010      	beq.n	800ab2e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	691a      	ldr	r2, [r3, #16]
 800ab10:	4b3f      	ldr	r3, [pc, #252]	; (800ac10 <HAL_RCC_ClockConfig+0x358>)
 800ab12:	699b      	ldr	r3, [r3, #24]
 800ab14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d208      	bcs.n	800ab2e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ab1c:	4b3c      	ldr	r3, [pc, #240]	; (800ac10 <HAL_RCC_ClockConfig+0x358>)
 800ab1e:	699b      	ldr	r3, [r3, #24]
 800ab20:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	691b      	ldr	r3, [r3, #16]
 800ab28:	4939      	ldr	r1, [pc, #228]	; (800ac10 <HAL_RCC_ClockConfig+0x358>)
 800ab2a:	4313      	orrs	r3, r2
 800ab2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f003 0308 	and.w	r3, r3, #8
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d010      	beq.n	800ab5c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	695a      	ldr	r2, [r3, #20]
 800ab3e:	4b34      	ldr	r3, [pc, #208]	; (800ac10 <HAL_RCC_ClockConfig+0x358>)
 800ab40:	69db      	ldr	r3, [r3, #28]
 800ab42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d208      	bcs.n	800ab5c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ab4a:	4b31      	ldr	r3, [pc, #196]	; (800ac10 <HAL_RCC_ClockConfig+0x358>)
 800ab4c:	69db      	ldr	r3, [r3, #28]
 800ab4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	695b      	ldr	r3, [r3, #20]
 800ab56:	492e      	ldr	r1, [pc, #184]	; (800ac10 <HAL_RCC_ClockConfig+0x358>)
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f003 0310 	and.w	r3, r3, #16
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d010      	beq.n	800ab8a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	699a      	ldr	r2, [r3, #24]
 800ab6c:	4b28      	ldr	r3, [pc, #160]	; (800ac10 <HAL_RCC_ClockConfig+0x358>)
 800ab6e:	69db      	ldr	r3, [r3, #28]
 800ab70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d208      	bcs.n	800ab8a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ab78:	4b25      	ldr	r3, [pc, #148]	; (800ac10 <HAL_RCC_ClockConfig+0x358>)
 800ab7a:	69db      	ldr	r3, [r3, #28]
 800ab7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	699b      	ldr	r3, [r3, #24]
 800ab84:	4922      	ldr	r1, [pc, #136]	; (800ac10 <HAL_RCC_ClockConfig+0x358>)
 800ab86:	4313      	orrs	r3, r2
 800ab88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f003 0320 	and.w	r3, r3, #32
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d010      	beq.n	800abb8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	69da      	ldr	r2, [r3, #28]
 800ab9a:	4b1d      	ldr	r3, [pc, #116]	; (800ac10 <HAL_RCC_ClockConfig+0x358>)
 800ab9c:	6a1b      	ldr	r3, [r3, #32]
 800ab9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d208      	bcs.n	800abb8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800aba6:	4b1a      	ldr	r3, [pc, #104]	; (800ac10 <HAL_RCC_ClockConfig+0x358>)
 800aba8:	6a1b      	ldr	r3, [r3, #32]
 800abaa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	69db      	ldr	r3, [r3, #28]
 800abb2:	4917      	ldr	r1, [pc, #92]	; (800ac10 <HAL_RCC_ClockConfig+0x358>)
 800abb4:	4313      	orrs	r3, r2
 800abb6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800abb8:	f000 f834 	bl	800ac24 <HAL_RCC_GetSysClockFreq>
 800abbc:	4602      	mov	r2, r0
 800abbe:	4b14      	ldr	r3, [pc, #80]	; (800ac10 <HAL_RCC_ClockConfig+0x358>)
 800abc0:	699b      	ldr	r3, [r3, #24]
 800abc2:	0a1b      	lsrs	r3, r3, #8
 800abc4:	f003 030f 	and.w	r3, r3, #15
 800abc8:	4912      	ldr	r1, [pc, #72]	; (800ac14 <HAL_RCC_ClockConfig+0x35c>)
 800abca:	5ccb      	ldrb	r3, [r1, r3]
 800abcc:	f003 031f 	and.w	r3, r3, #31
 800abd0:	fa22 f303 	lsr.w	r3, r2, r3
 800abd4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800abd6:	4b0e      	ldr	r3, [pc, #56]	; (800ac10 <HAL_RCC_ClockConfig+0x358>)
 800abd8:	699b      	ldr	r3, [r3, #24]
 800abda:	f003 030f 	and.w	r3, r3, #15
 800abde:	4a0d      	ldr	r2, [pc, #52]	; (800ac14 <HAL_RCC_ClockConfig+0x35c>)
 800abe0:	5cd3      	ldrb	r3, [r2, r3]
 800abe2:	f003 031f 	and.w	r3, r3, #31
 800abe6:	693a      	ldr	r2, [r7, #16]
 800abe8:	fa22 f303 	lsr.w	r3, r2, r3
 800abec:	4a0a      	ldr	r2, [pc, #40]	; (800ac18 <HAL_RCC_ClockConfig+0x360>)
 800abee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800abf0:	4a0a      	ldr	r2, [pc, #40]	; (800ac1c <HAL_RCC_ClockConfig+0x364>)
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800abf6:	4b0a      	ldr	r3, [pc, #40]	; (800ac20 <HAL_RCC_ClockConfig+0x368>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4618      	mov	r0, r3
 800abfc:	f7f8 fbd0 	bl	80033a0 <HAL_InitTick>
 800ac00:	4603      	mov	r3, r0
 800ac02:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ac04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3718      	adds	r7, #24
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	58024400 	.word	0x58024400
 800ac14:	0801c468 	.word	0x0801c468
 800ac18:	24000034 	.word	0x24000034
 800ac1c:	24000030 	.word	0x24000030
 800ac20:	24000038 	.word	0x24000038

0800ac24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b089      	sub	sp, #36	; 0x24
 800ac28:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ac2a:	4bb3      	ldr	r3, [pc, #716]	; (800aef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac2c:	691b      	ldr	r3, [r3, #16]
 800ac2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac32:	2b18      	cmp	r3, #24
 800ac34:	f200 8155 	bhi.w	800aee2 <HAL_RCC_GetSysClockFreq+0x2be>
 800ac38:	a201      	add	r2, pc, #4	; (adr r2, 800ac40 <HAL_RCC_GetSysClockFreq+0x1c>)
 800ac3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac3e:	bf00      	nop
 800ac40:	0800aca5 	.word	0x0800aca5
 800ac44:	0800aee3 	.word	0x0800aee3
 800ac48:	0800aee3 	.word	0x0800aee3
 800ac4c:	0800aee3 	.word	0x0800aee3
 800ac50:	0800aee3 	.word	0x0800aee3
 800ac54:	0800aee3 	.word	0x0800aee3
 800ac58:	0800aee3 	.word	0x0800aee3
 800ac5c:	0800aee3 	.word	0x0800aee3
 800ac60:	0800accb 	.word	0x0800accb
 800ac64:	0800aee3 	.word	0x0800aee3
 800ac68:	0800aee3 	.word	0x0800aee3
 800ac6c:	0800aee3 	.word	0x0800aee3
 800ac70:	0800aee3 	.word	0x0800aee3
 800ac74:	0800aee3 	.word	0x0800aee3
 800ac78:	0800aee3 	.word	0x0800aee3
 800ac7c:	0800aee3 	.word	0x0800aee3
 800ac80:	0800acd1 	.word	0x0800acd1
 800ac84:	0800aee3 	.word	0x0800aee3
 800ac88:	0800aee3 	.word	0x0800aee3
 800ac8c:	0800aee3 	.word	0x0800aee3
 800ac90:	0800aee3 	.word	0x0800aee3
 800ac94:	0800aee3 	.word	0x0800aee3
 800ac98:	0800aee3 	.word	0x0800aee3
 800ac9c:	0800aee3 	.word	0x0800aee3
 800aca0:	0800acd7 	.word	0x0800acd7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aca4:	4b94      	ldr	r3, [pc, #592]	; (800aef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f003 0320 	and.w	r3, r3, #32
 800acac:	2b00      	cmp	r3, #0
 800acae:	d009      	beq.n	800acc4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800acb0:	4b91      	ldr	r3, [pc, #580]	; (800aef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	08db      	lsrs	r3, r3, #3
 800acb6:	f003 0303 	and.w	r3, r3, #3
 800acba:	4a90      	ldr	r2, [pc, #576]	; (800aefc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800acbc:	fa22 f303 	lsr.w	r3, r2, r3
 800acc0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800acc2:	e111      	b.n	800aee8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800acc4:	4b8d      	ldr	r3, [pc, #564]	; (800aefc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800acc6:	61bb      	str	r3, [r7, #24]
      break;
 800acc8:	e10e      	b.n	800aee8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800acca:	4b8d      	ldr	r3, [pc, #564]	; (800af00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800accc:	61bb      	str	r3, [r7, #24]
      break;
 800acce:	e10b      	b.n	800aee8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800acd0:	4b8c      	ldr	r3, [pc, #560]	; (800af04 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800acd2:	61bb      	str	r3, [r7, #24]
      break;
 800acd4:	e108      	b.n	800aee8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800acd6:	4b88      	ldr	r3, [pc, #544]	; (800aef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acda:	f003 0303 	and.w	r3, r3, #3
 800acde:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ace0:	4b85      	ldr	r3, [pc, #532]	; (800aef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ace2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ace4:	091b      	lsrs	r3, r3, #4
 800ace6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800acea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800acec:	4b82      	ldr	r3, [pc, #520]	; (800aef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acf0:	f003 0301 	and.w	r3, r3, #1
 800acf4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800acf6:	4b80      	ldr	r3, [pc, #512]	; (800aef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acfa:	08db      	lsrs	r3, r3, #3
 800acfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ad00:	68fa      	ldr	r2, [r7, #12]
 800ad02:	fb02 f303 	mul.w	r3, r2, r3
 800ad06:	ee07 3a90 	vmov	s15, r3
 800ad0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad0e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	f000 80e1 	beq.w	800aedc <HAL_RCC_GetSysClockFreq+0x2b8>
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	2b02      	cmp	r3, #2
 800ad1e:	f000 8083 	beq.w	800ae28 <HAL_RCC_GetSysClockFreq+0x204>
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	2b02      	cmp	r3, #2
 800ad26:	f200 80a1 	bhi.w	800ae6c <HAL_RCC_GetSysClockFreq+0x248>
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d003      	beq.n	800ad38 <HAL_RCC_GetSysClockFreq+0x114>
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	2b01      	cmp	r3, #1
 800ad34:	d056      	beq.n	800ade4 <HAL_RCC_GetSysClockFreq+0x1c0>
 800ad36:	e099      	b.n	800ae6c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad38:	4b6f      	ldr	r3, [pc, #444]	; (800aef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f003 0320 	and.w	r3, r3, #32
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d02d      	beq.n	800ada0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad44:	4b6c      	ldr	r3, [pc, #432]	; (800aef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	08db      	lsrs	r3, r3, #3
 800ad4a:	f003 0303 	and.w	r3, r3, #3
 800ad4e:	4a6b      	ldr	r2, [pc, #428]	; (800aefc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ad50:	fa22 f303 	lsr.w	r3, r2, r3
 800ad54:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	ee07 3a90 	vmov	s15, r3
 800ad5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	ee07 3a90 	vmov	s15, r3
 800ad66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad6e:	4b62      	ldr	r3, [pc, #392]	; (800aef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad76:	ee07 3a90 	vmov	s15, r3
 800ad7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad7e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad82:	eddf 5a61 	vldr	s11, [pc, #388]	; 800af08 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad9a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800ad9e:	e087      	b.n	800aeb0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	ee07 3a90 	vmov	s15, r3
 800ada6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adaa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800af0c <HAL_RCC_GetSysClockFreq+0x2e8>
 800adae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adb2:	4b51      	ldr	r3, [pc, #324]	; (800aef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800adb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adba:	ee07 3a90 	vmov	s15, r3
 800adbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adc2:	ed97 6a02 	vldr	s12, [r7, #8]
 800adc6:	eddf 5a50 	vldr	s11, [pc, #320]	; 800af08 <HAL_RCC_GetSysClockFreq+0x2e4>
 800adca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800add2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800add6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ade2:	e065      	b.n	800aeb0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	ee07 3a90 	vmov	s15, r3
 800adea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adee:	eddf 6a48 	vldr	s13, [pc, #288]	; 800af10 <HAL_RCC_GetSysClockFreq+0x2ec>
 800adf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adf6:	4b40      	ldr	r3, [pc, #256]	; (800aef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800adf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adfe:	ee07 3a90 	vmov	s15, r3
 800ae02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae06:	ed97 6a02 	vldr	s12, [r7, #8]
 800ae0a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800af08 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ae0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ae26:	e043      	b.n	800aeb0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	ee07 3a90 	vmov	s15, r3
 800ae2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae32:	eddf 6a38 	vldr	s13, [pc, #224]	; 800af14 <HAL_RCC_GetSysClockFreq+0x2f0>
 800ae36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae3a:	4b2f      	ldr	r3, [pc, #188]	; (800aef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae42:	ee07 3a90 	vmov	s15, r3
 800ae46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae4a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ae4e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800af08 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ae52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ae6a:	e021      	b.n	800aeb0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae6c:	693b      	ldr	r3, [r7, #16]
 800ae6e:	ee07 3a90 	vmov	s15, r3
 800ae72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae76:	eddf 6a26 	vldr	s13, [pc, #152]	; 800af10 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ae7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae7e:	4b1e      	ldr	r3, [pc, #120]	; (800aef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae86:	ee07 3a90 	vmov	s15, r3
 800ae8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae8e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ae92:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800af08 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ae96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeaa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aeae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800aeb0:	4b11      	ldr	r3, [pc, #68]	; (800aef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aeb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeb4:	0a5b      	lsrs	r3, r3, #9
 800aeb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aeba:	3301      	adds	r3, #1
 800aebc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	ee07 3a90 	vmov	s15, r3
 800aec4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800aec8:	edd7 6a07 	vldr	s13, [r7, #28]
 800aecc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aed4:	ee17 3a90 	vmov	r3, s15
 800aed8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800aeda:	e005      	b.n	800aee8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800aedc:	2300      	movs	r3, #0
 800aede:	61bb      	str	r3, [r7, #24]
      break;
 800aee0:	e002      	b.n	800aee8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800aee2:	4b07      	ldr	r3, [pc, #28]	; (800af00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aee4:	61bb      	str	r3, [r7, #24]
      break;
 800aee6:	bf00      	nop
  }

  return sysclockfreq;
 800aee8:	69bb      	ldr	r3, [r7, #24]
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3724      	adds	r7, #36	; 0x24
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr
 800aef6:	bf00      	nop
 800aef8:	58024400 	.word	0x58024400
 800aefc:	03d09000 	.word	0x03d09000
 800af00:	003d0900 	.word	0x003d0900
 800af04:	007a1200 	.word	0x007a1200
 800af08:	46000000 	.word	0x46000000
 800af0c:	4c742400 	.word	0x4c742400
 800af10:	4a742400 	.word	0x4a742400
 800af14:	4af42400 	.word	0x4af42400

0800af18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800af1e:	f7ff fe81 	bl	800ac24 <HAL_RCC_GetSysClockFreq>
 800af22:	4602      	mov	r2, r0
 800af24:	4b10      	ldr	r3, [pc, #64]	; (800af68 <HAL_RCC_GetHCLKFreq+0x50>)
 800af26:	699b      	ldr	r3, [r3, #24]
 800af28:	0a1b      	lsrs	r3, r3, #8
 800af2a:	f003 030f 	and.w	r3, r3, #15
 800af2e:	490f      	ldr	r1, [pc, #60]	; (800af6c <HAL_RCC_GetHCLKFreq+0x54>)
 800af30:	5ccb      	ldrb	r3, [r1, r3]
 800af32:	f003 031f 	and.w	r3, r3, #31
 800af36:	fa22 f303 	lsr.w	r3, r2, r3
 800af3a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800af3c:	4b0a      	ldr	r3, [pc, #40]	; (800af68 <HAL_RCC_GetHCLKFreq+0x50>)
 800af3e:	699b      	ldr	r3, [r3, #24]
 800af40:	f003 030f 	and.w	r3, r3, #15
 800af44:	4a09      	ldr	r2, [pc, #36]	; (800af6c <HAL_RCC_GetHCLKFreq+0x54>)
 800af46:	5cd3      	ldrb	r3, [r2, r3]
 800af48:	f003 031f 	and.w	r3, r3, #31
 800af4c:	687a      	ldr	r2, [r7, #4]
 800af4e:	fa22 f303 	lsr.w	r3, r2, r3
 800af52:	4a07      	ldr	r2, [pc, #28]	; (800af70 <HAL_RCC_GetHCLKFreq+0x58>)
 800af54:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800af56:	4a07      	ldr	r2, [pc, #28]	; (800af74 <HAL_RCC_GetHCLKFreq+0x5c>)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800af5c:	4b04      	ldr	r3, [pc, #16]	; (800af70 <HAL_RCC_GetHCLKFreq+0x58>)
 800af5e:	681b      	ldr	r3, [r3, #0]
}
 800af60:	4618      	mov	r0, r3
 800af62:	3708      	adds	r7, #8
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}
 800af68:	58024400 	.word	0x58024400
 800af6c:	0801c468 	.word	0x0801c468
 800af70:	24000034 	.word	0x24000034
 800af74:	24000030 	.word	0x24000030

0800af78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800af7c:	f7ff ffcc 	bl	800af18 <HAL_RCC_GetHCLKFreq>
 800af80:	4602      	mov	r2, r0
 800af82:	4b06      	ldr	r3, [pc, #24]	; (800af9c <HAL_RCC_GetPCLK1Freq+0x24>)
 800af84:	69db      	ldr	r3, [r3, #28]
 800af86:	091b      	lsrs	r3, r3, #4
 800af88:	f003 0307 	and.w	r3, r3, #7
 800af8c:	4904      	ldr	r1, [pc, #16]	; (800afa0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800af8e:	5ccb      	ldrb	r3, [r1, r3]
 800af90:	f003 031f 	and.w	r3, r3, #31
 800af94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800af98:	4618      	mov	r0, r3
 800af9a:	bd80      	pop	{r7, pc}
 800af9c:	58024400 	.word	0x58024400
 800afa0:	0801c468 	.word	0x0801c468

0800afa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800afa8:	f7ff ffb6 	bl	800af18 <HAL_RCC_GetHCLKFreq>
 800afac:	4602      	mov	r2, r0
 800afae:	4b06      	ldr	r3, [pc, #24]	; (800afc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800afb0:	69db      	ldr	r3, [r3, #28]
 800afb2:	0a1b      	lsrs	r3, r3, #8
 800afb4:	f003 0307 	and.w	r3, r3, #7
 800afb8:	4904      	ldr	r1, [pc, #16]	; (800afcc <HAL_RCC_GetPCLK2Freq+0x28>)
 800afba:	5ccb      	ldrb	r3, [r1, r3]
 800afbc:	f003 031f 	and.w	r3, r3, #31
 800afc0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	58024400 	.word	0x58024400
 800afcc:	0801c468 	.word	0x0801c468

0800afd0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800afd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800afd4:	b0ca      	sub	sp, #296	; 0x128
 800afd6:	af00      	add	r7, sp, #0
 800afd8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800afdc:	2300      	movs	r3, #0
 800afde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800afe2:	2300      	movs	r3, #0
 800afe4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800afe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800aff4:	2500      	movs	r5, #0
 800aff6:	ea54 0305 	orrs.w	r3, r4, r5
 800affa:	d049      	beq.n	800b090 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800affc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b000:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b002:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b006:	d02f      	beq.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b008:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b00c:	d828      	bhi.n	800b060 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b00e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b012:	d01a      	beq.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b014:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b018:	d822      	bhi.n	800b060 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d003      	beq.n	800b026 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b01e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b022:	d007      	beq.n	800b034 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b024:	e01c      	b.n	800b060 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b026:	4bb8      	ldr	r3, [pc, #736]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b02a:	4ab7      	ldr	r2, [pc, #732]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b02c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b030:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b032:	e01a      	b.n	800b06a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b038:	3308      	adds	r3, #8
 800b03a:	2102      	movs	r1, #2
 800b03c:	4618      	mov	r0, r3
 800b03e:	f002 fb61 	bl	800d704 <RCCEx_PLL2_Config>
 800b042:	4603      	mov	r3, r0
 800b044:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b048:	e00f      	b.n	800b06a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b04a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b04e:	3328      	adds	r3, #40	; 0x28
 800b050:	2102      	movs	r1, #2
 800b052:	4618      	mov	r0, r3
 800b054:	f002 fc08 	bl	800d868 <RCCEx_PLL3_Config>
 800b058:	4603      	mov	r3, r0
 800b05a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b05e:	e004      	b.n	800b06a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b060:	2301      	movs	r3, #1
 800b062:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b066:	e000      	b.n	800b06a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b068:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b06a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d10a      	bne.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b072:	4ba5      	ldr	r3, [pc, #660]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b076:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b07a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b07e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b080:	4aa1      	ldr	r2, [pc, #644]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b082:	430b      	orrs	r3, r1
 800b084:	6513      	str	r3, [r2, #80]	; 0x50
 800b086:	e003      	b.n	800b090 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b088:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b08c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b098:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b09c:	f04f 0900 	mov.w	r9, #0
 800b0a0:	ea58 0309 	orrs.w	r3, r8, r9
 800b0a4:	d047      	beq.n	800b136 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b0a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0ac:	2b04      	cmp	r3, #4
 800b0ae:	d82a      	bhi.n	800b106 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b0b0:	a201      	add	r2, pc, #4	; (adr r2, 800b0b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b0b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0b6:	bf00      	nop
 800b0b8:	0800b0cd 	.word	0x0800b0cd
 800b0bc:	0800b0db 	.word	0x0800b0db
 800b0c0:	0800b0f1 	.word	0x0800b0f1
 800b0c4:	0800b10f 	.word	0x0800b10f
 800b0c8:	0800b10f 	.word	0x0800b10f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0cc:	4b8e      	ldr	r3, [pc, #568]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d0:	4a8d      	ldr	r2, [pc, #564]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b0d8:	e01a      	b.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b0da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0de:	3308      	adds	r3, #8
 800b0e0:	2100      	movs	r1, #0
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f002 fb0e 	bl	800d704 <RCCEx_PLL2_Config>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b0ee:	e00f      	b.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b0f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0f4:	3328      	adds	r3, #40	; 0x28
 800b0f6:	2100      	movs	r1, #0
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f002 fbb5 	bl	800d868 <RCCEx_PLL3_Config>
 800b0fe:	4603      	mov	r3, r0
 800b100:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b104:	e004      	b.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b106:	2301      	movs	r3, #1
 800b108:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b10c:	e000      	b.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b10e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b110:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b114:	2b00      	cmp	r3, #0
 800b116:	d10a      	bne.n	800b12e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b118:	4b7b      	ldr	r3, [pc, #492]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b11a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b11c:	f023 0107 	bic.w	r1, r3, #7
 800b120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b126:	4a78      	ldr	r2, [pc, #480]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b128:	430b      	orrs	r3, r1
 800b12a:	6513      	str	r3, [r2, #80]	; 0x50
 800b12c:	e003      	b.n	800b136 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b12e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b132:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b136:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b142:	f04f 0b00 	mov.w	fp, #0
 800b146:	ea5a 030b 	orrs.w	r3, sl, fp
 800b14a:	d04c      	beq.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800b14c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b156:	d030      	beq.n	800b1ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800b158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b15c:	d829      	bhi.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b15e:	2bc0      	cmp	r3, #192	; 0xc0
 800b160:	d02d      	beq.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b162:	2bc0      	cmp	r3, #192	; 0xc0
 800b164:	d825      	bhi.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b166:	2b80      	cmp	r3, #128	; 0x80
 800b168:	d018      	beq.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b16a:	2b80      	cmp	r3, #128	; 0x80
 800b16c:	d821      	bhi.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d002      	beq.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800b172:	2b40      	cmp	r3, #64	; 0x40
 800b174:	d007      	beq.n	800b186 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800b176:	e01c      	b.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b178:	4b63      	ldr	r3, [pc, #396]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b17c:	4a62      	ldr	r2, [pc, #392]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b17e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b182:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b184:	e01c      	b.n	800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b18a:	3308      	adds	r3, #8
 800b18c:	2100      	movs	r1, #0
 800b18e:	4618      	mov	r0, r3
 800b190:	f002 fab8 	bl	800d704 <RCCEx_PLL2_Config>
 800b194:	4603      	mov	r3, r0
 800b196:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b19a:	e011      	b.n	800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b19c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1a0:	3328      	adds	r3, #40	; 0x28
 800b1a2:	2100      	movs	r1, #0
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f002 fb5f 	bl	800d868 <RCCEx_PLL3_Config>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b1b0:	e006      	b.n	800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b1b8:	e002      	b.n	800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b1ba:	bf00      	nop
 800b1bc:	e000      	b.n	800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b1be:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d10a      	bne.n	800b1de <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b1c8:	4b4f      	ldr	r3, [pc, #316]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1cc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b1d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1d6:	4a4c      	ldr	r2, [pc, #304]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1d8:	430b      	orrs	r3, r1
 800b1da:	6513      	str	r3, [r2, #80]	; 0x50
 800b1dc:	e003      	b.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b1e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ee:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b1f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b1fc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800b200:	460b      	mov	r3, r1
 800b202:	4313      	orrs	r3, r2
 800b204:	d053      	beq.n	800b2ae <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b20a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b20e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b212:	d035      	beq.n	800b280 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b214:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b218:	d82e      	bhi.n	800b278 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b21a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b21e:	d031      	beq.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b220:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b224:	d828      	bhi.n	800b278 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b226:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b22a:	d01a      	beq.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b22c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b230:	d822      	bhi.n	800b278 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b232:	2b00      	cmp	r3, #0
 800b234:	d003      	beq.n	800b23e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b236:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b23a:	d007      	beq.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b23c:	e01c      	b.n	800b278 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b23e:	4b32      	ldr	r3, [pc, #200]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b242:	4a31      	ldr	r2, [pc, #196]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b248:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b24a:	e01c      	b.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b24c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b250:	3308      	adds	r3, #8
 800b252:	2100      	movs	r1, #0
 800b254:	4618      	mov	r0, r3
 800b256:	f002 fa55 	bl	800d704 <RCCEx_PLL2_Config>
 800b25a:	4603      	mov	r3, r0
 800b25c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b260:	e011      	b.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b266:	3328      	adds	r3, #40	; 0x28
 800b268:	2100      	movs	r1, #0
 800b26a:	4618      	mov	r0, r3
 800b26c:	f002 fafc 	bl	800d868 <RCCEx_PLL3_Config>
 800b270:	4603      	mov	r3, r0
 800b272:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b276:	e006      	b.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b278:	2301      	movs	r3, #1
 800b27a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b27e:	e002      	b.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b280:	bf00      	nop
 800b282:	e000      	b.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b284:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b286:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d10b      	bne.n	800b2a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b28e:	4b1e      	ldr	r3, [pc, #120]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b292:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b29a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b29e:	4a1a      	ldr	r2, [pc, #104]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b2a0:	430b      	orrs	r3, r1
 800b2a2:	6593      	str	r3, [r2, #88]	; 0x58
 800b2a4:	e003      	b.n	800b2ae <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b2ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b2ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b2be:	2300      	movs	r3, #0
 800b2c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b2c4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	4313      	orrs	r3, r2
 800b2cc:	d056      	beq.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b2ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b2d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b2da:	d038      	beq.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b2dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b2e0:	d831      	bhi.n	800b346 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b2e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b2e6:	d034      	beq.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b2e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b2ec:	d82b      	bhi.n	800b346 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b2ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2f2:	d01d      	beq.n	800b330 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b2f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2f8:	d825      	bhi.n	800b346 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d006      	beq.n	800b30c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b2fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b302:	d00a      	beq.n	800b31a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b304:	e01f      	b.n	800b346 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b306:	bf00      	nop
 800b308:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b30c:	4ba2      	ldr	r3, [pc, #648]	; (800b598 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b30e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b310:	4aa1      	ldr	r2, [pc, #644]	; (800b598 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b316:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b318:	e01c      	b.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b31a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b31e:	3308      	adds	r3, #8
 800b320:	2100      	movs	r1, #0
 800b322:	4618      	mov	r0, r3
 800b324:	f002 f9ee 	bl	800d704 <RCCEx_PLL2_Config>
 800b328:	4603      	mov	r3, r0
 800b32a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b32e:	e011      	b.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b330:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b334:	3328      	adds	r3, #40	; 0x28
 800b336:	2100      	movs	r1, #0
 800b338:	4618      	mov	r0, r3
 800b33a:	f002 fa95 	bl	800d868 <RCCEx_PLL3_Config>
 800b33e:	4603      	mov	r3, r0
 800b340:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b344:	e006      	b.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b346:	2301      	movs	r3, #1
 800b348:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b34c:	e002      	b.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b34e:	bf00      	nop
 800b350:	e000      	b.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b352:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b354:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d10b      	bne.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b35c:	4b8e      	ldr	r3, [pc, #568]	; (800b598 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b35e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b360:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b368:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b36c:	4a8a      	ldr	r2, [pc, #552]	; (800b598 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b36e:	430b      	orrs	r3, r1
 800b370:	6593      	str	r3, [r2, #88]	; 0x58
 800b372:	e003      	b.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b374:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b378:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b37c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b384:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b388:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b38c:	2300      	movs	r3, #0
 800b38e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b392:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b396:	460b      	mov	r3, r1
 800b398:	4313      	orrs	r3, r2
 800b39a:	d03a      	beq.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b39c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3a2:	2b30      	cmp	r3, #48	; 0x30
 800b3a4:	d01f      	beq.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b3a6:	2b30      	cmp	r3, #48	; 0x30
 800b3a8:	d819      	bhi.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b3aa:	2b20      	cmp	r3, #32
 800b3ac:	d00c      	beq.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b3ae:	2b20      	cmp	r3, #32
 800b3b0:	d815      	bhi.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d019      	beq.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b3b6:	2b10      	cmp	r3, #16
 800b3b8:	d111      	bne.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3ba:	4b77      	ldr	r3, [pc, #476]	; (800b598 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3be:	4a76      	ldr	r2, [pc, #472]	; (800b598 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b3c6:	e011      	b.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b3c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3cc:	3308      	adds	r3, #8
 800b3ce:	2102      	movs	r1, #2
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f002 f997 	bl	800d704 <RCCEx_PLL2_Config>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b3dc:	e006      	b.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b3e4:	e002      	b.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b3e6:	bf00      	nop
 800b3e8:	e000      	b.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b3ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d10a      	bne.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b3f4:	4b68      	ldr	r3, [pc, #416]	; (800b598 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3f8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b3fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b402:	4a65      	ldr	r2, [pc, #404]	; (800b598 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b404:	430b      	orrs	r3, r1
 800b406:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b408:	e003      	b.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b40a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b40e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b41e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b422:	2300      	movs	r3, #0
 800b424:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b428:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b42c:	460b      	mov	r3, r1
 800b42e:	4313      	orrs	r3, r2
 800b430:	d051      	beq.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b432:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b438:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b43c:	d035      	beq.n	800b4aa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b43e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b442:	d82e      	bhi.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b444:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b448:	d031      	beq.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b44a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b44e:	d828      	bhi.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b450:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b454:	d01a      	beq.n	800b48c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b45a:	d822      	bhi.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d003      	beq.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b464:	d007      	beq.n	800b476 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b466:	e01c      	b.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b468:	4b4b      	ldr	r3, [pc, #300]	; (800b598 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b46a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b46c:	4a4a      	ldr	r2, [pc, #296]	; (800b598 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b46e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b472:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b474:	e01c      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b47a:	3308      	adds	r3, #8
 800b47c:	2100      	movs	r1, #0
 800b47e:	4618      	mov	r0, r3
 800b480:	f002 f940 	bl	800d704 <RCCEx_PLL2_Config>
 800b484:	4603      	mov	r3, r0
 800b486:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b48a:	e011      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b48c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b490:	3328      	adds	r3, #40	; 0x28
 800b492:	2100      	movs	r1, #0
 800b494:	4618      	mov	r0, r3
 800b496:	f002 f9e7 	bl	800d868 <RCCEx_PLL3_Config>
 800b49a:	4603      	mov	r3, r0
 800b49c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b4a0:	e006      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b4a8:	e002      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b4aa:	bf00      	nop
 800b4ac:	e000      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b4ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d10a      	bne.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b4b8:	4b37      	ldr	r3, [pc, #220]	; (800b598 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4bc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b4c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b4c6:	4a34      	ldr	r2, [pc, #208]	; (800b598 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4c8:	430b      	orrs	r3, r1
 800b4ca:	6513      	str	r3, [r2, #80]	; 0x50
 800b4cc:	e003      	b.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b4d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4de:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b4e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b4ec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	4313      	orrs	r3, r2
 800b4f4:	d056      	beq.n	800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b4f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b500:	d033      	beq.n	800b56a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b502:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b506:	d82c      	bhi.n	800b562 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b508:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b50c:	d02f      	beq.n	800b56e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b50e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b512:	d826      	bhi.n	800b562 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b514:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b518:	d02b      	beq.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b51a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b51e:	d820      	bhi.n	800b562 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b520:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b524:	d012      	beq.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b526:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b52a:	d81a      	bhi.n	800b562 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d022      	beq.n	800b576 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b534:	d115      	bne.n	800b562 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b53a:	3308      	adds	r3, #8
 800b53c:	2101      	movs	r1, #1
 800b53e:	4618      	mov	r0, r3
 800b540:	f002 f8e0 	bl	800d704 <RCCEx_PLL2_Config>
 800b544:	4603      	mov	r3, r0
 800b546:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b54a:	e015      	b.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b54c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b550:	3328      	adds	r3, #40	; 0x28
 800b552:	2101      	movs	r1, #1
 800b554:	4618      	mov	r0, r3
 800b556:	f002 f987 	bl	800d868 <RCCEx_PLL3_Config>
 800b55a:	4603      	mov	r3, r0
 800b55c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b560:	e00a      	b.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b562:	2301      	movs	r3, #1
 800b564:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b568:	e006      	b.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b56a:	bf00      	nop
 800b56c:	e004      	b.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b56e:	bf00      	nop
 800b570:	e002      	b.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b572:	bf00      	nop
 800b574:	e000      	b.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b576:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b578:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d10d      	bne.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b580:	4b05      	ldr	r3, [pc, #20]	; (800b598 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b584:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b588:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b58c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b58e:	4a02      	ldr	r2, [pc, #8]	; (800b598 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b590:	430b      	orrs	r3, r1
 800b592:	6513      	str	r3, [r2, #80]	; 0x50
 800b594:	e006      	b.n	800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b596:	bf00      	nop
 800b598:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b59c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b5a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ac:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b5b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b5ba:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b5be:	460b      	mov	r3, r1
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	d055      	beq.n	800b670 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b5c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b5cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b5d0:	d033      	beq.n	800b63a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b5d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b5d6:	d82c      	bhi.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b5d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5dc:	d02f      	beq.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b5de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5e2:	d826      	bhi.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b5e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b5e8:	d02b      	beq.n	800b642 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b5ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b5ee:	d820      	bhi.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b5f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5f4:	d012      	beq.n	800b61c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b5f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5fa:	d81a      	bhi.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d022      	beq.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b600:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b604:	d115      	bne.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b60a:	3308      	adds	r3, #8
 800b60c:	2101      	movs	r1, #1
 800b60e:	4618      	mov	r0, r3
 800b610:	f002 f878 	bl	800d704 <RCCEx_PLL2_Config>
 800b614:	4603      	mov	r3, r0
 800b616:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b61a:	e015      	b.n	800b648 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b61c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b620:	3328      	adds	r3, #40	; 0x28
 800b622:	2101      	movs	r1, #1
 800b624:	4618      	mov	r0, r3
 800b626:	f002 f91f 	bl	800d868 <RCCEx_PLL3_Config>
 800b62a:	4603      	mov	r3, r0
 800b62c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b630:	e00a      	b.n	800b648 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b632:	2301      	movs	r3, #1
 800b634:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b638:	e006      	b.n	800b648 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b63a:	bf00      	nop
 800b63c:	e004      	b.n	800b648 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b63e:	bf00      	nop
 800b640:	e002      	b.n	800b648 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b642:	bf00      	nop
 800b644:	e000      	b.n	800b648 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b646:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b648:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d10b      	bne.n	800b668 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b650:	4ba3      	ldr	r3, [pc, #652]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b654:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b658:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b65c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b660:	4a9f      	ldr	r2, [pc, #636]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b662:	430b      	orrs	r3, r1
 800b664:	6593      	str	r3, [r2, #88]	; 0x58
 800b666:	e003      	b.n	800b670 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b668:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b66c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b678:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b67c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b680:	2300      	movs	r3, #0
 800b682:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b686:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b68a:	460b      	mov	r3, r1
 800b68c:	4313      	orrs	r3, r2
 800b68e:	d037      	beq.n	800b700 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b690:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b696:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b69a:	d00e      	beq.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b69c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6a0:	d816      	bhi.n	800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d018      	beq.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b6a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6aa:	d111      	bne.n	800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6ac:	4b8c      	ldr	r3, [pc, #560]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b0:	4a8b      	ldr	r2, [pc, #556]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b6b8:	e00f      	b.n	800b6da <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b6ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6be:	3308      	adds	r3, #8
 800b6c0:	2101      	movs	r1, #1
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f002 f81e 	bl	800d704 <RCCEx_PLL2_Config>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b6ce:	e004      	b.n	800b6da <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b6d6:	e000      	b.n	800b6da <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b6d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d10a      	bne.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b6e2:	4b7f      	ldr	r3, [pc, #508]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6e6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b6ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6f0:	4a7b      	ldr	r2, [pc, #492]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6f2:	430b      	orrs	r3, r1
 800b6f4:	6513      	str	r3, [r2, #80]	; 0x50
 800b6f6:	e003      	b.n	800b700 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b708:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b70c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b710:	2300      	movs	r3, #0
 800b712:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b716:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b71a:	460b      	mov	r3, r1
 800b71c:	4313      	orrs	r3, r2
 800b71e:	d039      	beq.n	800b794 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b720:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b726:	2b03      	cmp	r3, #3
 800b728:	d81c      	bhi.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b72a:	a201      	add	r2, pc, #4	; (adr r2, 800b730 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b730:	0800b76d 	.word	0x0800b76d
 800b734:	0800b741 	.word	0x0800b741
 800b738:	0800b74f 	.word	0x0800b74f
 800b73c:	0800b76d 	.word	0x0800b76d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b740:	4b67      	ldr	r3, [pc, #412]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b744:	4a66      	ldr	r2, [pc, #408]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b746:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b74a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b74c:	e00f      	b.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b74e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b752:	3308      	adds	r3, #8
 800b754:	2102      	movs	r1, #2
 800b756:	4618      	mov	r0, r3
 800b758:	f001 ffd4 	bl	800d704 <RCCEx_PLL2_Config>
 800b75c:	4603      	mov	r3, r0
 800b75e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b762:	e004      	b.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b764:	2301      	movs	r3, #1
 800b766:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b76a:	e000      	b.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b76c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b76e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b772:	2b00      	cmp	r3, #0
 800b774:	d10a      	bne.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b776:	4b5a      	ldr	r3, [pc, #360]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b77a:	f023 0103 	bic.w	r1, r3, #3
 800b77e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b784:	4a56      	ldr	r2, [pc, #344]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b786:	430b      	orrs	r3, r1
 800b788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b78a:	e003      	b.n	800b794 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b78c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b790:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b794:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b7a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b7aa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b7ae:	460b      	mov	r3, r1
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	f000 809f 	beq.w	800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b7b6:	4b4b      	ldr	r3, [pc, #300]	; (800b8e4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	4a4a      	ldr	r2, [pc, #296]	; (800b8e4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b7bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b7c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b7c2:	f7f7 fe37 	bl	8003434 <HAL_GetTick>
 800b7c6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b7ca:	e00b      	b.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b7cc:	f7f7 fe32 	bl	8003434 <HAL_GetTick>
 800b7d0:	4602      	mov	r2, r0
 800b7d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b7d6:	1ad3      	subs	r3, r2, r3
 800b7d8:	2b64      	cmp	r3, #100	; 0x64
 800b7da:	d903      	bls.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b7dc:	2303      	movs	r3, #3
 800b7de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b7e2:	e005      	b.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b7e4:	4b3f      	ldr	r3, [pc, #252]	; (800b8e4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d0ed      	beq.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b7f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d179      	bne.n	800b8ec <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b7f8:	4b39      	ldr	r3, [pc, #228]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b7fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b800:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b804:	4053      	eors	r3, r2
 800b806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d015      	beq.n	800b83a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b80e:	4b34      	ldr	r3, [pc, #208]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b816:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b81a:	4b31      	ldr	r3, [pc, #196]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b81c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b81e:	4a30      	ldr	r2, [pc, #192]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b824:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b826:	4b2e      	ldr	r3, [pc, #184]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b82a:	4a2d      	ldr	r2, [pc, #180]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b82c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b830:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b832:	4a2b      	ldr	r2, [pc, #172]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b834:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b838:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b83a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b83e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b846:	d118      	bne.n	800b87a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b848:	f7f7 fdf4 	bl	8003434 <HAL_GetTick>
 800b84c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b850:	e00d      	b.n	800b86e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b852:	f7f7 fdef 	bl	8003434 <HAL_GetTick>
 800b856:	4602      	mov	r2, r0
 800b858:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b85c:	1ad2      	subs	r2, r2, r3
 800b85e:	f241 3388 	movw	r3, #5000	; 0x1388
 800b862:	429a      	cmp	r2, r3
 800b864:	d903      	bls.n	800b86e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b866:	2303      	movs	r3, #3
 800b868:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b86c:	e005      	b.n	800b87a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b86e:	4b1c      	ldr	r3, [pc, #112]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b872:	f003 0302 	and.w	r3, r3, #2
 800b876:	2b00      	cmp	r3, #0
 800b878:	d0eb      	beq.n	800b852 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b87a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d129      	bne.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b886:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b88a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b88e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b892:	d10e      	bne.n	800b8b2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b894:	4b12      	ldr	r3, [pc, #72]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b896:	691b      	ldr	r3, [r3, #16]
 800b898:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b89c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b8a4:	091a      	lsrs	r2, r3, #4
 800b8a6:	4b10      	ldr	r3, [pc, #64]	; (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b8a8:	4013      	ands	r3, r2
 800b8aa:	4a0d      	ldr	r2, [pc, #52]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8ac:	430b      	orrs	r3, r1
 800b8ae:	6113      	str	r3, [r2, #16]
 800b8b0:	e005      	b.n	800b8be <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b8b2:	4b0b      	ldr	r3, [pc, #44]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8b4:	691b      	ldr	r3, [r3, #16]
 800b8b6:	4a0a      	ldr	r2, [pc, #40]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b8bc:	6113      	str	r3, [r2, #16]
 800b8be:	4b08      	ldr	r3, [pc, #32]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8c0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b8c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b8ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b8ce:	4a04      	ldr	r2, [pc, #16]	; (800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8d0:	430b      	orrs	r3, r1
 800b8d2:	6713      	str	r3, [r2, #112]	; 0x70
 800b8d4:	e00e      	b.n	800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b8d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b8de:	e009      	b.n	800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b8e0:	58024400 	.word	0x58024400
 800b8e4:	58024800 	.word	0x58024800
 800b8e8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b8f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fc:	f002 0301 	and.w	r3, r2, #1
 800b900:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b904:	2300      	movs	r3, #0
 800b906:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b90a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b90e:	460b      	mov	r3, r1
 800b910:	4313      	orrs	r3, r2
 800b912:	f000 8089 	beq.w	800ba28 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b91a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b91c:	2b28      	cmp	r3, #40	; 0x28
 800b91e:	d86b      	bhi.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b920:	a201      	add	r2, pc, #4	; (adr r2, 800b928 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b926:	bf00      	nop
 800b928:	0800ba01 	.word	0x0800ba01
 800b92c:	0800b9f9 	.word	0x0800b9f9
 800b930:	0800b9f9 	.word	0x0800b9f9
 800b934:	0800b9f9 	.word	0x0800b9f9
 800b938:	0800b9f9 	.word	0x0800b9f9
 800b93c:	0800b9f9 	.word	0x0800b9f9
 800b940:	0800b9f9 	.word	0x0800b9f9
 800b944:	0800b9f9 	.word	0x0800b9f9
 800b948:	0800b9cd 	.word	0x0800b9cd
 800b94c:	0800b9f9 	.word	0x0800b9f9
 800b950:	0800b9f9 	.word	0x0800b9f9
 800b954:	0800b9f9 	.word	0x0800b9f9
 800b958:	0800b9f9 	.word	0x0800b9f9
 800b95c:	0800b9f9 	.word	0x0800b9f9
 800b960:	0800b9f9 	.word	0x0800b9f9
 800b964:	0800b9f9 	.word	0x0800b9f9
 800b968:	0800b9e3 	.word	0x0800b9e3
 800b96c:	0800b9f9 	.word	0x0800b9f9
 800b970:	0800b9f9 	.word	0x0800b9f9
 800b974:	0800b9f9 	.word	0x0800b9f9
 800b978:	0800b9f9 	.word	0x0800b9f9
 800b97c:	0800b9f9 	.word	0x0800b9f9
 800b980:	0800b9f9 	.word	0x0800b9f9
 800b984:	0800b9f9 	.word	0x0800b9f9
 800b988:	0800ba01 	.word	0x0800ba01
 800b98c:	0800b9f9 	.word	0x0800b9f9
 800b990:	0800b9f9 	.word	0x0800b9f9
 800b994:	0800b9f9 	.word	0x0800b9f9
 800b998:	0800b9f9 	.word	0x0800b9f9
 800b99c:	0800b9f9 	.word	0x0800b9f9
 800b9a0:	0800b9f9 	.word	0x0800b9f9
 800b9a4:	0800b9f9 	.word	0x0800b9f9
 800b9a8:	0800ba01 	.word	0x0800ba01
 800b9ac:	0800b9f9 	.word	0x0800b9f9
 800b9b0:	0800b9f9 	.word	0x0800b9f9
 800b9b4:	0800b9f9 	.word	0x0800b9f9
 800b9b8:	0800b9f9 	.word	0x0800b9f9
 800b9bc:	0800b9f9 	.word	0x0800b9f9
 800b9c0:	0800b9f9 	.word	0x0800b9f9
 800b9c4:	0800b9f9 	.word	0x0800b9f9
 800b9c8:	0800ba01 	.word	0x0800ba01
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b9cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9d0:	3308      	adds	r3, #8
 800b9d2:	2101      	movs	r1, #1
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f001 fe95 	bl	800d704 <RCCEx_PLL2_Config>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b9e0:	e00f      	b.n	800ba02 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b9e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9e6:	3328      	adds	r3, #40	; 0x28
 800b9e8:	2101      	movs	r1, #1
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f001 ff3c 	bl	800d868 <RCCEx_PLL3_Config>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b9f6:	e004      	b.n	800ba02 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b9fe:	e000      	b.n	800ba02 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800ba00:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d10a      	bne.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ba0a:	4bbf      	ldr	r3, [pc, #764]	; (800bd08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba0e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800ba12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba18:	4abb      	ldr	r2, [pc, #748]	; (800bd08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba1a:	430b      	orrs	r3, r1
 800ba1c:	6553      	str	r3, [r2, #84]	; 0x54
 800ba1e:	e003      	b.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ba28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba30:	f002 0302 	and.w	r3, r2, #2
 800ba34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ba38:	2300      	movs	r3, #0
 800ba3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ba3e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800ba42:	460b      	mov	r3, r1
 800ba44:	4313      	orrs	r3, r2
 800ba46:	d041      	beq.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ba48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba4e:	2b05      	cmp	r3, #5
 800ba50:	d824      	bhi.n	800ba9c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800ba52:	a201      	add	r2, pc, #4	; (adr r2, 800ba58 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800ba54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba58:	0800baa5 	.word	0x0800baa5
 800ba5c:	0800ba71 	.word	0x0800ba71
 800ba60:	0800ba87 	.word	0x0800ba87
 800ba64:	0800baa5 	.word	0x0800baa5
 800ba68:	0800baa5 	.word	0x0800baa5
 800ba6c:	0800baa5 	.word	0x0800baa5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba74:	3308      	adds	r3, #8
 800ba76:	2101      	movs	r1, #1
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f001 fe43 	bl	800d704 <RCCEx_PLL2_Config>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ba84:	e00f      	b.n	800baa6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba8a:	3328      	adds	r3, #40	; 0x28
 800ba8c:	2101      	movs	r1, #1
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f001 feea 	bl	800d868 <RCCEx_PLL3_Config>
 800ba94:	4603      	mov	r3, r0
 800ba96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ba9a:	e004      	b.n	800baa6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800baa2:	e000      	b.n	800baa6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800baa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800baa6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d10a      	bne.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800baae:	4b96      	ldr	r3, [pc, #600]	; (800bd08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bab2:	f023 0107 	bic.w	r1, r3, #7
 800bab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800babc:	4a92      	ldr	r2, [pc, #584]	; (800bd08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800babe:	430b      	orrs	r3, r1
 800bac0:	6553      	str	r3, [r2, #84]	; 0x54
 800bac2:	e003      	b.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bac4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bac8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bacc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad4:	f002 0304 	and.w	r3, r2, #4
 800bad8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800badc:	2300      	movs	r3, #0
 800bade:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bae2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800bae6:	460b      	mov	r3, r1
 800bae8:	4313      	orrs	r3, r2
 800baea:	d044      	beq.n	800bb76 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800baec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800baf4:	2b05      	cmp	r3, #5
 800baf6:	d825      	bhi.n	800bb44 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800baf8:	a201      	add	r2, pc, #4	; (adr r2, 800bb00 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800bafa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bafe:	bf00      	nop
 800bb00:	0800bb4d 	.word	0x0800bb4d
 800bb04:	0800bb19 	.word	0x0800bb19
 800bb08:	0800bb2f 	.word	0x0800bb2f
 800bb0c:	0800bb4d 	.word	0x0800bb4d
 800bb10:	0800bb4d 	.word	0x0800bb4d
 800bb14:	0800bb4d 	.word	0x0800bb4d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb1c:	3308      	adds	r3, #8
 800bb1e:	2101      	movs	r1, #1
 800bb20:	4618      	mov	r0, r3
 800bb22:	f001 fdef 	bl	800d704 <RCCEx_PLL2_Config>
 800bb26:	4603      	mov	r3, r0
 800bb28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bb2c:	e00f      	b.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb32:	3328      	adds	r3, #40	; 0x28
 800bb34:	2101      	movs	r1, #1
 800bb36:	4618      	mov	r0, r3
 800bb38:	f001 fe96 	bl	800d868 <RCCEx_PLL3_Config>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bb42:	e004      	b.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb44:	2301      	movs	r3, #1
 800bb46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bb4a:	e000      	b.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800bb4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d10b      	bne.n	800bb6e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bb56:	4b6c      	ldr	r3, [pc, #432]	; (800bd08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb5a:	f023 0107 	bic.w	r1, r3, #7
 800bb5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb66:	4a68      	ldr	r2, [pc, #416]	; (800bd08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb68:	430b      	orrs	r3, r1
 800bb6a:	6593      	str	r3, [r2, #88]	; 0x58
 800bb6c:	e003      	b.n	800bb76 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bb76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7e:	f002 0320 	and.w	r3, r2, #32
 800bb82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bb86:	2300      	movs	r3, #0
 800bb88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bb8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bb90:	460b      	mov	r3, r1
 800bb92:	4313      	orrs	r3, r2
 800bb94:	d055      	beq.n	800bc42 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bb96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bba2:	d033      	beq.n	800bc0c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800bba4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bba8:	d82c      	bhi.n	800bc04 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bbaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbae:	d02f      	beq.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800bbb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbb4:	d826      	bhi.n	800bc04 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bbb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bbba:	d02b      	beq.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800bbbc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bbc0:	d820      	bhi.n	800bc04 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bbc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbc6:	d012      	beq.n	800bbee <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800bbc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbcc:	d81a      	bhi.n	800bc04 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d022      	beq.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800bbd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bbd6:	d115      	bne.n	800bc04 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bbd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbdc:	3308      	adds	r3, #8
 800bbde:	2100      	movs	r1, #0
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f001 fd8f 	bl	800d704 <RCCEx_PLL2_Config>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bbec:	e015      	b.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bbee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbf2:	3328      	adds	r3, #40	; 0x28
 800bbf4:	2102      	movs	r1, #2
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f001 fe36 	bl	800d868 <RCCEx_PLL3_Config>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bc02:	e00a      	b.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc04:	2301      	movs	r3, #1
 800bc06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc0a:	e006      	b.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bc0c:	bf00      	nop
 800bc0e:	e004      	b.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bc10:	bf00      	nop
 800bc12:	e002      	b.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bc14:	bf00      	nop
 800bc16:	e000      	b.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bc18:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d10b      	bne.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bc22:	4b39      	ldr	r3, [pc, #228]	; (800bd08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc26:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bc2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc32:	4a35      	ldr	r2, [pc, #212]	; (800bd08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc34:	430b      	orrs	r3, r1
 800bc36:	6553      	str	r3, [r2, #84]	; 0x54
 800bc38:	e003      	b.n	800bc42 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bc42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc4a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800bc4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bc52:	2300      	movs	r3, #0
 800bc54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bc58:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800bc5c:	460b      	mov	r3, r1
 800bc5e:	4313      	orrs	r3, r2
 800bc60:	d058      	beq.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bc62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bc6a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bc6e:	d033      	beq.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800bc70:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bc74:	d82c      	bhi.n	800bcd0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bc76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc7a:	d02f      	beq.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800bc7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc80:	d826      	bhi.n	800bcd0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bc82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bc86:	d02b      	beq.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800bc88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bc8c:	d820      	bhi.n	800bcd0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bc8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc92:	d012      	beq.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800bc94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc98:	d81a      	bhi.n	800bcd0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d022      	beq.n	800bce4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800bc9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bca2:	d115      	bne.n	800bcd0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bca8:	3308      	adds	r3, #8
 800bcaa:	2100      	movs	r1, #0
 800bcac:	4618      	mov	r0, r3
 800bcae:	f001 fd29 	bl	800d704 <RCCEx_PLL2_Config>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bcb8:	e015      	b.n	800bce6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bcba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcbe:	3328      	adds	r3, #40	; 0x28
 800bcc0:	2102      	movs	r1, #2
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f001 fdd0 	bl	800d868 <RCCEx_PLL3_Config>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bcce:	e00a      	b.n	800bce6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bcd6:	e006      	b.n	800bce6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bcd8:	bf00      	nop
 800bcda:	e004      	b.n	800bce6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bcdc:	bf00      	nop
 800bcde:	e002      	b.n	800bce6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bce0:	bf00      	nop
 800bce2:	e000      	b.n	800bce6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bce4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bce6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d10e      	bne.n	800bd0c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bcee:	4b06      	ldr	r3, [pc, #24]	; (800bd08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bcf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcf2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800bcf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bcfe:	4a02      	ldr	r2, [pc, #8]	; (800bd08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bd00:	430b      	orrs	r3, r1
 800bd02:	6593      	str	r3, [r2, #88]	; 0x58
 800bd04:	e006      	b.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800bd06:	bf00      	nop
 800bd08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bd14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800bd20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bd24:	2300      	movs	r3, #0
 800bd26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bd2a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800bd2e:	460b      	mov	r3, r1
 800bd30:	4313      	orrs	r3, r2
 800bd32:	d055      	beq.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bd34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bd3c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bd40:	d033      	beq.n	800bdaa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800bd42:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bd46:	d82c      	bhi.n	800bda2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bd48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd4c:	d02f      	beq.n	800bdae <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800bd4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd52:	d826      	bhi.n	800bda2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bd54:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bd58:	d02b      	beq.n	800bdb2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800bd5a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bd5e:	d820      	bhi.n	800bda2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bd60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bd64:	d012      	beq.n	800bd8c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800bd66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bd6a:	d81a      	bhi.n	800bda2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d022      	beq.n	800bdb6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800bd70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd74:	d115      	bne.n	800bda2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd7a:	3308      	adds	r3, #8
 800bd7c:	2100      	movs	r1, #0
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f001 fcc0 	bl	800d704 <RCCEx_PLL2_Config>
 800bd84:	4603      	mov	r3, r0
 800bd86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bd8a:	e015      	b.n	800bdb8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bd8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd90:	3328      	adds	r3, #40	; 0x28
 800bd92:	2102      	movs	r1, #2
 800bd94:	4618      	mov	r0, r3
 800bd96:	f001 fd67 	bl	800d868 <RCCEx_PLL3_Config>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bda0:	e00a      	b.n	800bdb8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bda2:	2301      	movs	r3, #1
 800bda4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bda8:	e006      	b.n	800bdb8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bdaa:	bf00      	nop
 800bdac:	e004      	b.n	800bdb8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bdae:	bf00      	nop
 800bdb0:	e002      	b.n	800bdb8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bdb2:	bf00      	nop
 800bdb4:	e000      	b.n	800bdb8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bdb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bdb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d10b      	bne.n	800bdd8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bdc0:	4ba1      	ldr	r3, [pc, #644]	; (800c048 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bdc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdc4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800bdc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdcc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bdd0:	4a9d      	ldr	r2, [pc, #628]	; (800c048 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bdd2:	430b      	orrs	r3, r1
 800bdd4:	6593      	str	r3, [r2, #88]	; 0x58
 800bdd6:	e003      	b.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bddc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bde0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bde4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde8:	f002 0308 	and.w	r3, r2, #8
 800bdec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bdf6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800bdfa:	460b      	mov	r3, r1
 800bdfc:	4313      	orrs	r3, r2
 800bdfe:	d01e      	beq.n	800be3e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800be00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be0c:	d10c      	bne.n	800be28 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800be0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be12:	3328      	adds	r3, #40	; 0x28
 800be14:	2102      	movs	r1, #2
 800be16:	4618      	mov	r0, r3
 800be18:	f001 fd26 	bl	800d868 <RCCEx_PLL3_Config>
 800be1c:	4603      	mov	r3, r0
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d002      	beq.n	800be28 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800be22:	2301      	movs	r3, #1
 800be24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800be28:	4b87      	ldr	r3, [pc, #540]	; (800c048 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be2c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800be30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be38:	4a83      	ldr	r2, [pc, #524]	; (800c048 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be3a:	430b      	orrs	r3, r1
 800be3c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800be3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be46:	f002 0310 	and.w	r3, r2, #16
 800be4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800be4e:	2300      	movs	r3, #0
 800be50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800be54:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800be58:	460b      	mov	r3, r1
 800be5a:	4313      	orrs	r3, r2
 800be5c:	d01e      	beq.n	800be9c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800be5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800be66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be6a:	d10c      	bne.n	800be86 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800be6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be70:	3328      	adds	r3, #40	; 0x28
 800be72:	2102      	movs	r1, #2
 800be74:	4618      	mov	r0, r3
 800be76:	f001 fcf7 	bl	800d868 <RCCEx_PLL3_Config>
 800be7a:	4603      	mov	r3, r0
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d002      	beq.n	800be86 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800be80:	2301      	movs	r3, #1
 800be82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800be86:	4b70      	ldr	r3, [pc, #448]	; (800c048 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800be8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800be96:	4a6c      	ldr	r2, [pc, #432]	; (800c048 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be98:	430b      	orrs	r3, r1
 800be9a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800be9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800bea8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800beac:	2300      	movs	r3, #0
 800beae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800beb2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800beb6:	460b      	mov	r3, r1
 800beb8:	4313      	orrs	r3, r2
 800beba:	d03e      	beq.n	800bf3a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bec0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bec4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bec8:	d022      	beq.n	800bf10 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800beca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bece:	d81b      	bhi.n	800bf08 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d003      	beq.n	800bedc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800bed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bed8:	d00b      	beq.n	800bef2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800beda:	e015      	b.n	800bf08 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bedc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bee0:	3308      	adds	r3, #8
 800bee2:	2100      	movs	r1, #0
 800bee4:	4618      	mov	r0, r3
 800bee6:	f001 fc0d 	bl	800d704 <RCCEx_PLL2_Config>
 800beea:	4603      	mov	r3, r0
 800beec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bef0:	e00f      	b.n	800bf12 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bef6:	3328      	adds	r3, #40	; 0x28
 800bef8:	2102      	movs	r1, #2
 800befa:	4618      	mov	r0, r3
 800befc:	f001 fcb4 	bl	800d868 <RCCEx_PLL3_Config>
 800bf00:	4603      	mov	r3, r0
 800bf02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bf06:	e004      	b.n	800bf12 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf08:	2301      	movs	r3, #1
 800bf0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bf0e:	e000      	b.n	800bf12 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800bf10:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d10b      	bne.n	800bf32 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bf1a:	4b4b      	ldr	r3, [pc, #300]	; (800c048 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf1e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800bf22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bf2a:	4a47      	ldr	r2, [pc, #284]	; (800c048 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf2c:	430b      	orrs	r3, r1
 800bf2e:	6593      	str	r3, [r2, #88]	; 0x58
 800bf30:	e003      	b.n	800bf3a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bf3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf42:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800bf46:	67bb      	str	r3, [r7, #120]	; 0x78
 800bf48:	2300      	movs	r3, #0
 800bf4a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bf4c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800bf50:	460b      	mov	r3, r1
 800bf52:	4313      	orrs	r3, r2
 800bf54:	d03b      	beq.n	800bfce <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800bf56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf5e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bf62:	d01f      	beq.n	800bfa4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800bf64:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bf68:	d818      	bhi.n	800bf9c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800bf6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf6e:	d003      	beq.n	800bf78 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800bf70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bf74:	d007      	beq.n	800bf86 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800bf76:	e011      	b.n	800bf9c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf78:	4b33      	ldr	r3, [pc, #204]	; (800c048 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf7c:	4a32      	ldr	r2, [pc, #200]	; (800c048 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bf84:	e00f      	b.n	800bfa6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf8a:	3328      	adds	r3, #40	; 0x28
 800bf8c:	2101      	movs	r1, #1
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f001 fc6a 	bl	800d868 <RCCEx_PLL3_Config>
 800bf94:	4603      	mov	r3, r0
 800bf96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800bf9a:	e004      	b.n	800bfa6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bfa2:	e000      	b.n	800bfa6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800bfa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bfa6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d10b      	bne.n	800bfc6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bfae:	4b26      	ldr	r3, [pc, #152]	; (800c048 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bfb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfb2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800bfb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfbe:	4a22      	ldr	r2, [pc, #136]	; (800c048 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bfc0:	430b      	orrs	r3, r1
 800bfc2:	6553      	str	r3, [r2, #84]	; 0x54
 800bfc4:	e003      	b.n	800bfce <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bfca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bfce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800bfda:	673b      	str	r3, [r7, #112]	; 0x70
 800bfdc:	2300      	movs	r3, #0
 800bfde:	677b      	str	r3, [r7, #116]	; 0x74
 800bfe0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	4313      	orrs	r3, r2
 800bfe8:	d034      	beq.n	800c054 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800bfea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d003      	beq.n	800bffc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800bff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bff8:	d007      	beq.n	800c00a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800bffa:	e011      	b.n	800c020 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bffc:	4b12      	ldr	r3, [pc, #72]	; (800c048 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c000:	4a11      	ldr	r2, [pc, #68]	; (800c048 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c002:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c006:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c008:	e00e      	b.n	800c028 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c00a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c00e:	3308      	adds	r3, #8
 800c010:	2102      	movs	r1, #2
 800c012:	4618      	mov	r0, r3
 800c014:	f001 fb76 	bl	800d704 <RCCEx_PLL2_Config>
 800c018:	4603      	mov	r3, r0
 800c01a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c01e:	e003      	b.n	800c028 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800c020:	2301      	movs	r3, #1
 800c022:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c026:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c028:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d10d      	bne.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c030:	4b05      	ldr	r3, [pc, #20]	; (800c048 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c034:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c038:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c03c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c03e:	4a02      	ldr	r2, [pc, #8]	; (800c048 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c040:	430b      	orrs	r3, r1
 800c042:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c044:	e006      	b.n	800c054 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800c046:	bf00      	nop
 800c048:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c04c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c050:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c054:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c05c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c060:	66bb      	str	r3, [r7, #104]	; 0x68
 800c062:	2300      	movs	r3, #0
 800c064:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c066:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c06a:	460b      	mov	r3, r1
 800c06c:	4313      	orrs	r3, r2
 800c06e:	d00c      	beq.n	800c08a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c070:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c074:	3328      	adds	r3, #40	; 0x28
 800c076:	2102      	movs	r1, #2
 800c078:	4618      	mov	r0, r3
 800c07a:	f001 fbf5 	bl	800d868 <RCCEx_PLL3_Config>
 800c07e:	4603      	mov	r3, r0
 800c080:	2b00      	cmp	r3, #0
 800c082:	d002      	beq.n	800c08a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800c084:	2301      	movs	r3, #1
 800c086:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c08a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c092:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c096:	663b      	str	r3, [r7, #96]	; 0x60
 800c098:	2300      	movs	r3, #0
 800c09a:	667b      	str	r3, [r7, #100]	; 0x64
 800c09c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c0a0:	460b      	mov	r3, r1
 800c0a2:	4313      	orrs	r3, r2
 800c0a4:	d038      	beq.n	800c118 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c0a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c0b2:	d018      	beq.n	800c0e6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800c0b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c0b8:	d811      	bhi.n	800c0de <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c0ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0be:	d014      	beq.n	800c0ea <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800c0c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0c4:	d80b      	bhi.n	800c0de <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d011      	beq.n	800c0ee <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800c0ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0ce:	d106      	bne.n	800c0de <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c0d0:	4bc3      	ldr	r3, [pc, #780]	; (800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0d4:	4ac2      	ldr	r2, [pc, #776]	; (800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c0da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c0dc:	e008      	b.n	800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c0de:	2301      	movs	r3, #1
 800c0e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c0e4:	e004      	b.n	800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c0e6:	bf00      	nop
 800c0e8:	e002      	b.n	800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c0ea:	bf00      	nop
 800c0ec:	e000      	b.n	800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c0ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d10b      	bne.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c0f8:	4bb9      	ldr	r3, [pc, #740]	; (800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0fc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c100:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c104:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c108:	4ab5      	ldr	r2, [pc, #724]	; (800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c10a:	430b      	orrs	r3, r1
 800c10c:	6553      	str	r3, [r2, #84]	; 0x54
 800c10e:	e003      	b.n	800c118 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c110:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c114:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c118:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c120:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c124:	65bb      	str	r3, [r7, #88]	; 0x58
 800c126:	2300      	movs	r3, #0
 800c128:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c12a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c12e:	460b      	mov	r3, r1
 800c130:	4313      	orrs	r3, r2
 800c132:	d009      	beq.n	800c148 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c134:	4baa      	ldr	r3, [pc, #680]	; (800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c138:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c13c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c142:	4aa7      	ldr	r2, [pc, #668]	; (800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c144:	430b      	orrs	r3, r1
 800c146:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c148:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c150:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800c154:	653b      	str	r3, [r7, #80]	; 0x50
 800c156:	2300      	movs	r3, #0
 800c158:	657b      	str	r3, [r7, #84]	; 0x54
 800c15a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c15e:	460b      	mov	r3, r1
 800c160:	4313      	orrs	r3, r2
 800c162:	d00a      	beq.n	800c17a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c164:	4b9e      	ldr	r3, [pc, #632]	; (800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c166:	691b      	ldr	r3, [r3, #16]
 800c168:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800c16c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c170:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c174:	4a9a      	ldr	r2, [pc, #616]	; (800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c176:	430b      	orrs	r3, r1
 800c178:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c17a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c182:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c186:	64bb      	str	r3, [r7, #72]	; 0x48
 800c188:	2300      	movs	r3, #0
 800c18a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c18c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c190:	460b      	mov	r3, r1
 800c192:	4313      	orrs	r3, r2
 800c194:	d009      	beq.n	800c1aa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c196:	4b92      	ldr	r3, [pc, #584]	; (800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c19a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c19e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1a4:	4a8e      	ldr	r2, [pc, #568]	; (800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1a6:	430b      	orrs	r3, r1
 800c1a8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c1aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c1b6:	643b      	str	r3, [r7, #64]	; 0x40
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	647b      	str	r3, [r7, #68]	; 0x44
 800c1bc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c1c0:	460b      	mov	r3, r1
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	d00e      	beq.n	800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c1c6:	4b86      	ldr	r3, [pc, #536]	; (800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1c8:	691b      	ldr	r3, [r3, #16]
 800c1ca:	4a85      	ldr	r2, [pc, #532]	; (800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c1d0:	6113      	str	r3, [r2, #16]
 800c1d2:	4b83      	ldr	r3, [pc, #524]	; (800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1d4:	6919      	ldr	r1, [r3, #16]
 800c1d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c1de:	4a80      	ldr	r2, [pc, #512]	; (800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1e0:	430b      	orrs	r3, r1
 800c1e2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c1e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ec:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c1f0:	63bb      	str	r3, [r7, #56]	; 0x38
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1f6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c1fa:	460b      	mov	r3, r1
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	d009      	beq.n	800c214 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c200:	4b77      	ldr	r3, [pc, #476]	; (800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c204:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c20c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c20e:	4a74      	ldr	r2, [pc, #464]	; (800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c210:	430b      	orrs	r3, r1
 800c212:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c21c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c220:	633b      	str	r3, [r7, #48]	; 0x30
 800c222:	2300      	movs	r3, #0
 800c224:	637b      	str	r3, [r7, #52]	; 0x34
 800c226:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c22a:	460b      	mov	r3, r1
 800c22c:	4313      	orrs	r3, r2
 800c22e:	d00a      	beq.n	800c246 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c230:	4b6b      	ldr	r3, [pc, #428]	; (800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c234:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c238:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c23c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c240:	4a67      	ldr	r2, [pc, #412]	; (800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c242:	430b      	orrs	r3, r1
 800c244:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c24e:	2100      	movs	r1, #0
 800c250:	62b9      	str	r1, [r7, #40]	; 0x28
 800c252:	f003 0301 	and.w	r3, r3, #1
 800c256:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c258:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c25c:	460b      	mov	r3, r1
 800c25e:	4313      	orrs	r3, r2
 800c260:	d011      	beq.n	800c286 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c266:	3308      	adds	r3, #8
 800c268:	2100      	movs	r1, #0
 800c26a:	4618      	mov	r0, r3
 800c26c:	f001 fa4a 	bl	800d704 <RCCEx_PLL2_Config>
 800c270:	4603      	mov	r3, r0
 800c272:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c276:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d003      	beq.n	800c286 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c27e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c282:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c28e:	2100      	movs	r1, #0
 800c290:	6239      	str	r1, [r7, #32]
 800c292:	f003 0302 	and.w	r3, r3, #2
 800c296:	627b      	str	r3, [r7, #36]	; 0x24
 800c298:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c29c:	460b      	mov	r3, r1
 800c29e:	4313      	orrs	r3, r2
 800c2a0:	d011      	beq.n	800c2c6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c2a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2a6:	3308      	adds	r3, #8
 800c2a8:	2101      	movs	r1, #1
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f001 fa2a 	bl	800d704 <RCCEx_PLL2_Config>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c2b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d003      	beq.n	800c2c6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c2c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ce:	2100      	movs	r1, #0
 800c2d0:	61b9      	str	r1, [r7, #24]
 800c2d2:	f003 0304 	and.w	r3, r3, #4
 800c2d6:	61fb      	str	r3, [r7, #28]
 800c2d8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c2dc:	460b      	mov	r3, r1
 800c2de:	4313      	orrs	r3, r2
 800c2e0:	d011      	beq.n	800c306 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c2e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2e6:	3308      	adds	r3, #8
 800c2e8:	2102      	movs	r1, #2
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f001 fa0a 	bl	800d704 <RCCEx_PLL2_Config>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c2f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d003      	beq.n	800c306 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c302:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c30e:	2100      	movs	r1, #0
 800c310:	6139      	str	r1, [r7, #16]
 800c312:	f003 0308 	and.w	r3, r3, #8
 800c316:	617b      	str	r3, [r7, #20]
 800c318:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c31c:	460b      	mov	r3, r1
 800c31e:	4313      	orrs	r3, r2
 800c320:	d011      	beq.n	800c346 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c326:	3328      	adds	r3, #40	; 0x28
 800c328:	2100      	movs	r1, #0
 800c32a:	4618      	mov	r0, r3
 800c32c:	f001 fa9c 	bl	800d868 <RCCEx_PLL3_Config>
 800c330:	4603      	mov	r3, r0
 800c332:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c336:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d003      	beq.n	800c346 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c33e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c342:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c346:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c34e:	2100      	movs	r1, #0
 800c350:	60b9      	str	r1, [r7, #8]
 800c352:	f003 0310 	and.w	r3, r3, #16
 800c356:	60fb      	str	r3, [r7, #12]
 800c358:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c35c:	460b      	mov	r3, r1
 800c35e:	4313      	orrs	r3, r2
 800c360:	d011      	beq.n	800c386 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c362:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c366:	3328      	adds	r3, #40	; 0x28
 800c368:	2101      	movs	r1, #1
 800c36a:	4618      	mov	r0, r3
 800c36c:	f001 fa7c 	bl	800d868 <RCCEx_PLL3_Config>
 800c370:	4603      	mov	r3, r0
 800c372:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c376:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d003      	beq.n	800c386 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c37e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c382:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c38e:	2100      	movs	r1, #0
 800c390:	6039      	str	r1, [r7, #0]
 800c392:	f003 0320 	and.w	r3, r3, #32
 800c396:	607b      	str	r3, [r7, #4]
 800c398:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c39c:	460b      	mov	r3, r1
 800c39e:	4313      	orrs	r3, r2
 800c3a0:	d011      	beq.n	800c3c6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c3a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3a6:	3328      	adds	r3, #40	; 0x28
 800c3a8:	2102      	movs	r1, #2
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f001 fa5c 	bl	800d868 <RCCEx_PLL3_Config>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c3b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d003      	beq.n	800c3c6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c3c6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d101      	bne.n	800c3d2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	e000      	b.n	800c3d4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c3d2:	2301      	movs	r3, #1
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c3e0:	58024400 	.word	0x58024400

0800c3e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b090      	sub	sp, #64	; 0x40
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c3ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3f2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c3f6:	430b      	orrs	r3, r1
 800c3f8:	f040 8094 	bne.w	800c524 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c3fc:	4b9e      	ldr	r3, [pc, #632]	; (800c678 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c400:	f003 0307 	and.w	r3, r3, #7
 800c404:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c408:	2b04      	cmp	r3, #4
 800c40a:	f200 8087 	bhi.w	800c51c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c40e:	a201      	add	r2, pc, #4	; (adr r2, 800c414 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c414:	0800c429 	.word	0x0800c429
 800c418:	0800c451 	.word	0x0800c451
 800c41c:	0800c479 	.word	0x0800c479
 800c420:	0800c515 	.word	0x0800c515
 800c424:	0800c4a1 	.word	0x0800c4a1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c428:	4b93      	ldr	r3, [pc, #588]	; (800c678 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c430:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c434:	d108      	bne.n	800c448 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c43a:	4618      	mov	r0, r3
 800c43c:	f001 f810 	bl	800d460 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c442:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c444:	f000 bd45 	b.w	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c448:	2300      	movs	r3, #0
 800c44a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c44c:	f000 bd41 	b.w	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c450:	4b89      	ldr	r3, [pc, #548]	; (800c678 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c458:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c45c:	d108      	bne.n	800c470 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c45e:	f107 0318 	add.w	r3, r7, #24
 800c462:	4618      	mov	r0, r3
 800c464:	f000 fd54 	bl	800cf10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c468:	69bb      	ldr	r3, [r7, #24]
 800c46a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c46c:	f000 bd31 	b.w	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c470:	2300      	movs	r3, #0
 800c472:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c474:	f000 bd2d 	b.w	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c478:	4b7f      	ldr	r3, [pc, #508]	; (800c678 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c480:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c484:	d108      	bne.n	800c498 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c486:	f107 030c 	add.w	r3, r7, #12
 800c48a:	4618      	mov	r0, r3
 800c48c:	f000 fe94 	bl	800d1b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c494:	f000 bd1d 	b.w	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c498:	2300      	movs	r3, #0
 800c49a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c49c:	f000 bd19 	b.w	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c4a0:	4b75      	ldr	r3, [pc, #468]	; (800c678 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c4a8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c4aa:	4b73      	ldr	r3, [pc, #460]	; (800c678 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f003 0304 	and.w	r3, r3, #4
 800c4b2:	2b04      	cmp	r3, #4
 800c4b4:	d10c      	bne.n	800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c4b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d109      	bne.n	800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c4bc:	4b6e      	ldr	r3, [pc, #440]	; (800c678 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	08db      	lsrs	r3, r3, #3
 800c4c2:	f003 0303 	and.w	r3, r3, #3
 800c4c6:	4a6d      	ldr	r2, [pc, #436]	; (800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c4c8:	fa22 f303 	lsr.w	r3, r2, r3
 800c4cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4ce:	e01f      	b.n	800c510 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c4d0:	4b69      	ldr	r3, [pc, #420]	; (800c678 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4dc:	d106      	bne.n	800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c4de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c4e4:	d102      	bne.n	800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c4e6:	4b66      	ldr	r3, [pc, #408]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4ea:	e011      	b.n	800c510 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c4ec:	4b62      	ldr	r3, [pc, #392]	; (800c678 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4f8:	d106      	bne.n	800c508 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c4fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c500:	d102      	bne.n	800c508 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c502:	4b60      	ldr	r3, [pc, #384]	; (800c684 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c504:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c506:	e003      	b.n	800c510 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c508:	2300      	movs	r3, #0
 800c50a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c50c:	f000 bce1 	b.w	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c510:	f000 bcdf 	b.w	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c514:	4b5c      	ldr	r3, [pc, #368]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c516:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c518:	f000 bcdb 	b.w	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c51c:	2300      	movs	r3, #0
 800c51e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c520:	f000 bcd7 	b.w	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c524:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c528:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c52c:	430b      	orrs	r3, r1
 800c52e:	f040 80ad 	bne.w	800c68c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c532:	4b51      	ldr	r3, [pc, #324]	; (800c678 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c536:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c53a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c53e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c542:	d056      	beq.n	800c5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c54a:	f200 8090 	bhi.w	800c66e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c550:	2bc0      	cmp	r3, #192	; 0xc0
 800c552:	f000 8088 	beq.w	800c666 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c558:	2bc0      	cmp	r3, #192	; 0xc0
 800c55a:	f200 8088 	bhi.w	800c66e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c560:	2b80      	cmp	r3, #128	; 0x80
 800c562:	d032      	beq.n	800c5ca <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c566:	2b80      	cmp	r3, #128	; 0x80
 800c568:	f200 8081 	bhi.w	800c66e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d003      	beq.n	800c57a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c574:	2b40      	cmp	r3, #64	; 0x40
 800c576:	d014      	beq.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c578:	e079      	b.n	800c66e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c57a:	4b3f      	ldr	r3, [pc, #252]	; (800c678 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c582:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c586:	d108      	bne.n	800c59a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c58c:	4618      	mov	r0, r3
 800c58e:	f000 ff67 	bl	800d460 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c594:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c596:	f000 bc9c 	b.w	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c59a:	2300      	movs	r3, #0
 800c59c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c59e:	f000 bc98 	b.w	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c5a2:	4b35      	ldr	r3, [pc, #212]	; (800c678 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5ae:	d108      	bne.n	800c5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5b0:	f107 0318 	add.w	r3, r7, #24
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f000 fcab 	bl	800cf10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c5ba:	69bb      	ldr	r3, [r7, #24]
 800c5bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5be:	f000 bc88 	b.w	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5c6:	f000 bc84 	b.w	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c5ca:	4b2b      	ldr	r3, [pc, #172]	; (800c678 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c5d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5d6:	d108      	bne.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5d8:	f107 030c 	add.w	r3, r7, #12
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f000 fdeb 	bl	800d1b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5e6:	f000 bc74 	b.w	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5ee:	f000 bc70 	b.w	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c5f2:	4b21      	ldr	r3, [pc, #132]	; (800c678 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c5fa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c5fc:	4b1e      	ldr	r3, [pc, #120]	; (800c678 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f003 0304 	and.w	r3, r3, #4
 800c604:	2b04      	cmp	r3, #4
 800c606:	d10c      	bne.n	800c622 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d109      	bne.n	800c622 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c60e:	4b1a      	ldr	r3, [pc, #104]	; (800c678 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	08db      	lsrs	r3, r3, #3
 800c614:	f003 0303 	and.w	r3, r3, #3
 800c618:	4a18      	ldr	r2, [pc, #96]	; (800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c61a:	fa22 f303 	lsr.w	r3, r2, r3
 800c61e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c620:	e01f      	b.n	800c662 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c622:	4b15      	ldr	r3, [pc, #84]	; (800c678 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c62a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c62e:	d106      	bne.n	800c63e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c632:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c636:	d102      	bne.n	800c63e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c638:	4b11      	ldr	r3, [pc, #68]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c63a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c63c:	e011      	b.n	800c662 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c63e:	4b0e      	ldr	r3, [pc, #56]	; (800c678 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c646:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c64a:	d106      	bne.n	800c65a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c64c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c64e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c652:	d102      	bne.n	800c65a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c654:	4b0b      	ldr	r3, [pc, #44]	; (800c684 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c656:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c658:	e003      	b.n	800c662 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c65a:	2300      	movs	r3, #0
 800c65c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c65e:	f000 bc38 	b.w	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c662:	f000 bc36 	b.w	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c666:	4b08      	ldr	r3, [pc, #32]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c668:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c66a:	f000 bc32 	b.w	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c66e:	2300      	movs	r3, #0
 800c670:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c672:	f000 bc2e 	b.w	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c676:	bf00      	nop
 800c678:	58024400 	.word	0x58024400
 800c67c:	03d09000 	.word	0x03d09000
 800c680:	003d0900 	.word	0x003d0900
 800c684:	007a1200 	.word	0x007a1200
 800c688:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c68c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c690:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c694:	430b      	orrs	r3, r1
 800c696:	f040 809c 	bne.w	800c7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c69a:	4b9e      	ldr	r3, [pc, #632]	; (800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c69c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c69e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c6a2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c6aa:	d054      	beq.n	800c756 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c6b2:	f200 808b 	bhi.w	800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c6bc:	f000 8083 	beq.w	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c6c6:	f200 8081 	bhi.w	800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c6d0:	d02f      	beq.n	800c732 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c6d8:	d878      	bhi.n	800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d004      	beq.n	800c6ea <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c6e6:	d012      	beq.n	800c70e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c6e8:	e070      	b.n	800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c6ea:	4b8a      	ldr	r3, [pc, #552]	; (800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c6f6:	d107      	bne.n	800c708 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c6f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f000 feaf 	bl	800d460 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c704:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c706:	e3e4      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c708:	2300      	movs	r3, #0
 800c70a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c70c:	e3e1      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c70e:	4b81      	ldr	r3, [pc, #516]	; (800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c716:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c71a:	d107      	bne.n	800c72c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c71c:	f107 0318 	add.w	r3, r7, #24
 800c720:	4618      	mov	r0, r3
 800c722:	f000 fbf5 	bl	800cf10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c726:	69bb      	ldr	r3, [r7, #24]
 800c728:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c72a:	e3d2      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c72c:	2300      	movs	r3, #0
 800c72e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c730:	e3cf      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c732:	4b78      	ldr	r3, [pc, #480]	; (800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c73a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c73e:	d107      	bne.n	800c750 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c740:	f107 030c 	add.w	r3, r7, #12
 800c744:	4618      	mov	r0, r3
 800c746:	f000 fd37 	bl	800d1b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c74e:	e3c0      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c750:	2300      	movs	r3, #0
 800c752:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c754:	e3bd      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c756:	4b6f      	ldr	r3, [pc, #444]	; (800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c75a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c75e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c760:	4b6c      	ldr	r3, [pc, #432]	; (800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f003 0304 	and.w	r3, r3, #4
 800c768:	2b04      	cmp	r3, #4
 800c76a:	d10c      	bne.n	800c786 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c76c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d109      	bne.n	800c786 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c772:	4b68      	ldr	r3, [pc, #416]	; (800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	08db      	lsrs	r3, r3, #3
 800c778:	f003 0303 	and.w	r3, r3, #3
 800c77c:	4a66      	ldr	r2, [pc, #408]	; (800c918 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c77e:	fa22 f303 	lsr.w	r3, r2, r3
 800c782:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c784:	e01e      	b.n	800c7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c786:	4b63      	ldr	r3, [pc, #396]	; (800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c78e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c792:	d106      	bne.n	800c7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c796:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c79a:	d102      	bne.n	800c7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c79c:	4b5f      	ldr	r3, [pc, #380]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c79e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7a0:	e010      	b.n	800c7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c7a2:	4b5c      	ldr	r3, [pc, #368]	; (800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c7ae:	d106      	bne.n	800c7be <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c7b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7b6:	d102      	bne.n	800c7be <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c7b8:	4b59      	ldr	r3, [pc, #356]	; (800c920 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c7ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7bc:	e002      	b.n	800c7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c7c2:	e386      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c7c4:	e385      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c7c6:	4b57      	ldr	r3, [pc, #348]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c7c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7ca:	e382      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7d0:	e37f      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c7d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7d6:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c7da:	430b      	orrs	r3, r1
 800c7dc:	f040 80a7 	bne.w	800c92e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c7e0:	4b4c      	ldr	r3, [pc, #304]	; (800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7e4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c7e8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c7f0:	d055      	beq.n	800c89e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c7f8:	f200 8096 	bhi.w	800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c802:	f000 8084 	beq.w	800c90e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c808:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c80c:	f200 808c 	bhi.w	800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c812:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c816:	d030      	beq.n	800c87a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c81a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c81e:	f200 8083 	bhi.w	800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c824:	2b00      	cmp	r3, #0
 800c826:	d004      	beq.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c82a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c82e:	d012      	beq.n	800c856 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c830:	e07a      	b.n	800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c832:	4b38      	ldr	r3, [pc, #224]	; (800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c83a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c83e:	d107      	bne.n	800c850 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c844:	4618      	mov	r0, r3
 800c846:	f000 fe0b 	bl	800d460 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c84c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c84e:	e340      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c850:	2300      	movs	r3, #0
 800c852:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c854:	e33d      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c856:	4b2f      	ldr	r3, [pc, #188]	; (800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c85e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c862:	d107      	bne.n	800c874 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c864:	f107 0318 	add.w	r3, r7, #24
 800c868:	4618      	mov	r0, r3
 800c86a:	f000 fb51 	bl	800cf10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c86e:	69bb      	ldr	r3, [r7, #24]
 800c870:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c872:	e32e      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c874:	2300      	movs	r3, #0
 800c876:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c878:	e32b      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c87a:	4b26      	ldr	r3, [pc, #152]	; (800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c882:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c886:	d107      	bne.n	800c898 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c888:	f107 030c 	add.w	r3, r7, #12
 800c88c:	4618      	mov	r0, r3
 800c88e:	f000 fc93 	bl	800d1b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c896:	e31c      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c898:	2300      	movs	r3, #0
 800c89a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c89c:	e319      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c89e:	4b1d      	ldr	r3, [pc, #116]	; (800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c8a6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c8a8:	4b1a      	ldr	r3, [pc, #104]	; (800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f003 0304 	and.w	r3, r3, #4
 800c8b0:	2b04      	cmp	r3, #4
 800c8b2:	d10c      	bne.n	800c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c8b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d109      	bne.n	800c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c8ba:	4b16      	ldr	r3, [pc, #88]	; (800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	08db      	lsrs	r3, r3, #3
 800c8c0:	f003 0303 	and.w	r3, r3, #3
 800c8c4:	4a14      	ldr	r2, [pc, #80]	; (800c918 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c8c6:	fa22 f303 	lsr.w	r3, r2, r3
 800c8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8cc:	e01e      	b.n	800c90c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c8ce:	4b11      	ldr	r3, [pc, #68]	; (800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8da:	d106      	bne.n	800c8ea <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c8dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c8e2:	d102      	bne.n	800c8ea <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c8e4:	4b0d      	ldr	r3, [pc, #52]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c8e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8e8:	e010      	b.n	800c90c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c8ea:	4b0a      	ldr	r3, [pc, #40]	; (800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8f6:	d106      	bne.n	800c906 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c8f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8fe:	d102      	bne.n	800c906 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c900:	4b07      	ldr	r3, [pc, #28]	; (800c920 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c902:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c904:	e002      	b.n	800c90c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c906:	2300      	movs	r3, #0
 800c908:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c90a:	e2e2      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c90c:	e2e1      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c90e:	4b05      	ldr	r3, [pc, #20]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c910:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c912:	e2de      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c914:	58024400 	.word	0x58024400
 800c918:	03d09000 	.word	0x03d09000
 800c91c:	003d0900 	.word	0x003d0900
 800c920:	007a1200 	.word	0x007a1200
 800c924:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c928:	2300      	movs	r3, #0
 800c92a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c92c:	e2d1      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c92e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c932:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c936:	430b      	orrs	r3, r1
 800c938:	f040 809c 	bne.w	800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c93c:	4b93      	ldr	r3, [pc, #588]	; (800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c93e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c940:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c944:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c948:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c94c:	d054      	beq.n	800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c950:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c954:	f200 808b 	bhi.w	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c95a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c95e:	f000 8083 	beq.w	800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c964:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c968:	f200 8081 	bhi.w	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c96e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c972:	d02f      	beq.n	800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c97a:	d878      	bhi.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d004      	beq.n	800c98c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c988:	d012      	beq.n	800c9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c98a:	e070      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c98c:	4b7f      	ldr	r3, [pc, #508]	; (800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c994:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c998:	d107      	bne.n	800c9aa <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c99a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f000 fd5e 	bl	800d460 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9a8:	e293      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9ae:	e290      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c9b0:	4b76      	ldr	r3, [pc, #472]	; (800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c9b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c9bc:	d107      	bne.n	800c9ce <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9be:	f107 0318 	add.w	r3, r7, #24
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f000 faa4 	bl	800cf10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c9c8:	69bb      	ldr	r3, [r7, #24]
 800c9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9cc:	e281      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9d2:	e27e      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c9d4:	4b6d      	ldr	r3, [pc, #436]	; (800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c9dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9e0:	d107      	bne.n	800c9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9e2:	f107 030c 	add.w	r3, r7, #12
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f000 fbe6 	bl	800d1b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9f0:	e26f      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9f6:	e26c      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c9f8:	4b64      	ldr	r3, [pc, #400]	; (800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ca00:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ca02:	4b62      	ldr	r3, [pc, #392]	; (800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f003 0304 	and.w	r3, r3, #4
 800ca0a:	2b04      	cmp	r3, #4
 800ca0c:	d10c      	bne.n	800ca28 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800ca0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d109      	bne.n	800ca28 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca14:	4b5d      	ldr	r3, [pc, #372]	; (800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	08db      	lsrs	r3, r3, #3
 800ca1a:	f003 0303 	and.w	r3, r3, #3
 800ca1e:	4a5c      	ldr	r2, [pc, #368]	; (800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ca20:	fa22 f303 	lsr.w	r3, r2, r3
 800ca24:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca26:	e01e      	b.n	800ca66 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ca28:	4b58      	ldr	r3, [pc, #352]	; (800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca34:	d106      	bne.n	800ca44 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800ca36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ca3c:	d102      	bne.n	800ca44 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ca3e:	4b55      	ldr	r3, [pc, #340]	; (800cb94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ca40:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca42:	e010      	b.n	800ca66 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ca44:	4b51      	ldr	r3, [pc, #324]	; (800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca50:	d106      	bne.n	800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800ca52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca58:	d102      	bne.n	800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ca5a:	4b4f      	ldr	r3, [pc, #316]	; (800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ca5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca5e:	e002      	b.n	800ca66 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ca60:	2300      	movs	r3, #0
 800ca62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ca64:	e235      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ca66:	e234      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ca68:	4b4c      	ldr	r3, [pc, #304]	; (800cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800ca6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca6c:	e231      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca72:	e22e      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ca74:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca78:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800ca7c:	430b      	orrs	r3, r1
 800ca7e:	f040 808f 	bne.w	800cba0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ca82:	4b42      	ldr	r3, [pc, #264]	; (800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca86:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800ca8a:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800ca8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ca92:	d06b      	beq.n	800cb6c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800ca94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ca9a:	d874      	bhi.n	800cb86 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ca9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800caa2:	d056      	beq.n	800cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800caa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800caaa:	d86c      	bhi.n	800cb86 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800caac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cab2:	d03b      	beq.n	800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800cab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800caba:	d864      	bhi.n	800cb86 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cabc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cabe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cac2:	d021      	beq.n	800cb08 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800cac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800caca:	d85c      	bhi.n	800cb86 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d004      	beq.n	800cadc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800cad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cad8:	d004      	beq.n	800cae4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800cada:	e054      	b.n	800cb86 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800cadc:	f7fe fa4c 	bl	800af78 <HAL_RCC_GetPCLK1Freq>
 800cae0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cae2:	e1f6      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cae4:	4b29      	ldr	r3, [pc, #164]	; (800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800caec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800caf0:	d107      	bne.n	800cb02 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800caf2:	f107 0318 	add.w	r3, r7, #24
 800caf6:	4618      	mov	r0, r3
 800caf8:	f000 fa0a 	bl	800cf10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cafc:	69fb      	ldr	r3, [r7, #28]
 800cafe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb00:	e1e7      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb02:	2300      	movs	r3, #0
 800cb04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb06:	e1e4      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cb08:	4b20      	ldr	r3, [pc, #128]	; (800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb14:	d107      	bne.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb16:	f107 030c 	add.w	r3, r7, #12
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f000 fb4c 	bl	800d1b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cb20:	693b      	ldr	r3, [r7, #16]
 800cb22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb24:	e1d5      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb26:	2300      	movs	r3, #0
 800cb28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb2a:	e1d2      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cb2c:	4b17      	ldr	r3, [pc, #92]	; (800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f003 0304 	and.w	r3, r3, #4
 800cb34:	2b04      	cmp	r3, #4
 800cb36:	d109      	bne.n	800cb4c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb38:	4b14      	ldr	r3, [pc, #80]	; (800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	08db      	lsrs	r3, r3, #3
 800cb3e:	f003 0303 	and.w	r3, r3, #3
 800cb42:	4a13      	ldr	r2, [pc, #76]	; (800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800cb44:	fa22 f303 	lsr.w	r3, r2, r3
 800cb48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb4a:	e1c2      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb50:	e1bf      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cb52:	4b0e      	ldr	r3, [pc, #56]	; (800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb5e:	d102      	bne.n	800cb66 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800cb60:	4b0c      	ldr	r3, [pc, #48]	; (800cb94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cb62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb64:	e1b5      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb66:	2300      	movs	r3, #0
 800cb68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb6a:	e1b2      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cb6c:	4b07      	ldr	r3, [pc, #28]	; (800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb78:	d102      	bne.n	800cb80 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800cb7a:	4b07      	ldr	r3, [pc, #28]	; (800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cb7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb7e:	e1a8      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb80:	2300      	movs	r3, #0
 800cb82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb84:	e1a5      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cb86:	2300      	movs	r3, #0
 800cb88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb8a:	e1a2      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cb8c:	58024400 	.word	0x58024400
 800cb90:	03d09000 	.word	0x03d09000
 800cb94:	003d0900 	.word	0x003d0900
 800cb98:	007a1200 	.word	0x007a1200
 800cb9c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cba0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cba4:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800cba8:	430b      	orrs	r3, r1
 800cbaa:	d173      	bne.n	800cc94 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cbac:	4b9c      	ldr	r3, [pc, #624]	; (800ce20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cbb4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cbb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbbc:	d02f      	beq.n	800cc1e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800cbbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbc4:	d863      	bhi.n	800cc8e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800cbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d004      	beq.n	800cbd6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800cbcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbd2:	d012      	beq.n	800cbfa <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800cbd4:	e05b      	b.n	800cc8e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cbd6:	4b92      	ldr	r3, [pc, #584]	; (800ce20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cbe2:	d107      	bne.n	800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbe4:	f107 0318 	add.w	r3, r7, #24
 800cbe8:	4618      	mov	r0, r3
 800cbea:	f000 f991 	bl	800cf10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cbee:	69bb      	ldr	r3, [r7, #24]
 800cbf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbf2:	e16e      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbf8:	e16b      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cbfa:	4b89      	ldr	r3, [pc, #548]	; (800ce20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc06:	d107      	bne.n	800cc18 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc08:	f107 030c 	add.w	r3, r7, #12
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f000 fad3 	bl	800d1b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc16:	e15c      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc1c:	e159      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cc1e:	4b80      	ldr	r3, [pc, #512]	; (800ce20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cc26:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cc28:	4b7d      	ldr	r3, [pc, #500]	; (800ce20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	f003 0304 	and.w	r3, r3, #4
 800cc30:	2b04      	cmp	r3, #4
 800cc32:	d10c      	bne.n	800cc4e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800cc34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d109      	bne.n	800cc4e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc3a:	4b79      	ldr	r3, [pc, #484]	; (800ce20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	08db      	lsrs	r3, r3, #3
 800cc40:	f003 0303 	and.w	r3, r3, #3
 800cc44:	4a77      	ldr	r2, [pc, #476]	; (800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cc46:	fa22 f303 	lsr.w	r3, r2, r3
 800cc4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc4c:	e01e      	b.n	800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cc4e:	4b74      	ldr	r3, [pc, #464]	; (800ce20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc5a:	d106      	bne.n	800cc6a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800cc5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cc62:	d102      	bne.n	800cc6a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cc64:	4b70      	ldr	r3, [pc, #448]	; (800ce28 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cc66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc68:	e010      	b.n	800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cc6a:	4b6d      	ldr	r3, [pc, #436]	; (800ce20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc76:	d106      	bne.n	800cc86 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800cc78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc7e:	d102      	bne.n	800cc86 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cc80:	4b6a      	ldr	r3, [pc, #424]	; (800ce2c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cc82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc84:	e002      	b.n	800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cc86:	2300      	movs	r3, #0
 800cc88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cc8a:	e122      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cc8c:	e121      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc92:	e11e      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cc94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc98:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800cc9c:	430b      	orrs	r3, r1
 800cc9e:	d133      	bne.n	800cd08 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cca0:	4b5f      	ldr	r3, [pc, #380]	; (800ce20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cca8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ccaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d004      	beq.n	800ccba <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800ccb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccb6:	d012      	beq.n	800ccde <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800ccb8:	e023      	b.n	800cd02 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ccba:	4b59      	ldr	r3, [pc, #356]	; (800ce20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ccc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ccc6:	d107      	bne.n	800ccd8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ccc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cccc:	4618      	mov	r0, r3
 800ccce:	f000 fbc7 	bl	800d460 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ccd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccd6:	e0fc      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccdc:	e0f9      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ccde:	4b50      	ldr	r3, [pc, #320]	; (800ce20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cce6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ccea:	d107      	bne.n	800ccfc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccec:	f107 0318 	add.w	r3, r7, #24
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f000 f90d 	bl	800cf10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ccf6:	6a3b      	ldr	r3, [r7, #32]
 800ccf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccfa:	e0ea      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd00:	e0e7      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cd02:	2300      	movs	r3, #0
 800cd04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd06:	e0e4      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cd08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd0c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800cd10:	430b      	orrs	r3, r1
 800cd12:	f040 808d 	bne.w	800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cd16:	4b42      	ldr	r3, [pc, #264]	; (800ce20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd1a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800cd1e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cd20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cd26:	d06b      	beq.n	800ce00 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800cd28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cd2e:	d874      	bhi.n	800ce1a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cd30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd36:	d056      	beq.n	800cde6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800cd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd3e:	d86c      	bhi.n	800ce1a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cd40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cd46:	d03b      	beq.n	800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800cd48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cd4e:	d864      	bhi.n	800ce1a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cd50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd56:	d021      	beq.n	800cd9c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800cd58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd5e:	d85c      	bhi.n	800ce1a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cd60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d004      	beq.n	800cd70 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800cd66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd6c:	d004      	beq.n	800cd78 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800cd6e:	e054      	b.n	800ce1a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800cd70:	f000 f8b8 	bl	800cee4 <HAL_RCCEx_GetD3PCLK1Freq>
 800cd74:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cd76:	e0ac      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd78:	4b29      	ldr	r3, [pc, #164]	; (800ce20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cd84:	d107      	bne.n	800cd96 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd86:	f107 0318 	add.w	r3, r7, #24
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f000 f8c0 	bl	800cf10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cd90:	69fb      	ldr	r3, [r7, #28]
 800cd92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd94:	e09d      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd96:	2300      	movs	r3, #0
 800cd98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd9a:	e09a      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd9c:	4b20      	ldr	r3, [pc, #128]	; (800ce20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cda4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cda8:	d107      	bne.n	800cdba <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cdaa:	f107 030c 	add.w	r3, r7, #12
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f000 fa02 	bl	800d1b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdb8:	e08b      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdbe:	e088      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cdc0:	4b17      	ldr	r3, [pc, #92]	; (800ce20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	f003 0304 	and.w	r3, r3, #4
 800cdc8:	2b04      	cmp	r3, #4
 800cdca:	d109      	bne.n	800cde0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cdcc:	4b14      	ldr	r3, [pc, #80]	; (800ce20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	08db      	lsrs	r3, r3, #3
 800cdd2:	f003 0303 	and.w	r3, r3, #3
 800cdd6:	4a13      	ldr	r2, [pc, #76]	; (800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cdd8:	fa22 f303 	lsr.w	r3, r2, r3
 800cddc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdde:	e078      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cde0:	2300      	movs	r3, #0
 800cde2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cde4:	e075      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cde6:	4b0e      	ldr	r3, [pc, #56]	; (800ce20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cdf2:	d102      	bne.n	800cdfa <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800cdf4:	4b0c      	ldr	r3, [pc, #48]	; (800ce28 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cdf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdf8:	e06b      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdfe:	e068      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ce00:	4b07      	ldr	r3, [pc, #28]	; (800ce20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce0c:	d102      	bne.n	800ce14 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800ce0e:	4b07      	ldr	r3, [pc, #28]	; (800ce2c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ce10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce12:	e05e      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce14:	2300      	movs	r3, #0
 800ce16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce18:	e05b      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce1e:	e058      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ce20:	58024400 	.word	0x58024400
 800ce24:	03d09000 	.word	0x03d09000
 800ce28:	003d0900 	.word	0x003d0900
 800ce2c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ce30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce34:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800ce38:	430b      	orrs	r3, r1
 800ce3a:	d148      	bne.n	800cece <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ce3c:	4b27      	ldr	r3, [pc, #156]	; (800cedc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ce3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ce44:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ce46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce4c:	d02a      	beq.n	800cea4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800ce4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce54:	d838      	bhi.n	800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ce56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d004      	beq.n	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ce5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ce62:	d00d      	beq.n	800ce80 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800ce64:	e030      	b.n	800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ce66:	4b1d      	ldr	r3, [pc, #116]	; (800cedc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce72:	d102      	bne.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800ce74:	4b1a      	ldr	r3, [pc, #104]	; (800cee0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ce76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce78:	e02b      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce7e:	e028      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ce80:	4b16      	ldr	r3, [pc, #88]	; (800cedc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ce8c:	d107      	bne.n	800ce9e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ce8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce92:	4618      	mov	r0, r3
 800ce94:	f000 fae4 	bl	800d460 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ce98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce9c:	e019      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce9e:	2300      	movs	r3, #0
 800cea0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cea2:	e016      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cea4:	4b0d      	ldr	r3, [pc, #52]	; (800cedc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ceac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ceb0:	d107      	bne.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ceb2:	f107 0318 	add.w	r3, r7, #24
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f000 f82a 	bl	800cf10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cebc:	69fb      	ldr	r3, [r7, #28]
 800cebe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cec0:	e007      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cec2:	2300      	movs	r3, #0
 800cec4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cec6:	e004      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cec8:	2300      	movs	r3, #0
 800ceca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cecc:	e001      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800cece:	2300      	movs	r3, #0
 800ced0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800ced2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	3740      	adds	r7, #64	; 0x40
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}
 800cedc:	58024400 	.word	0x58024400
 800cee0:	007a1200 	.word	0x007a1200

0800cee4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cee8:	f7fe f816 	bl	800af18 <HAL_RCC_GetHCLKFreq>
 800ceec:	4602      	mov	r2, r0
 800ceee:	4b06      	ldr	r3, [pc, #24]	; (800cf08 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cef0:	6a1b      	ldr	r3, [r3, #32]
 800cef2:	091b      	lsrs	r3, r3, #4
 800cef4:	f003 0307 	and.w	r3, r3, #7
 800cef8:	4904      	ldr	r1, [pc, #16]	; (800cf0c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cefa:	5ccb      	ldrb	r3, [r1, r3]
 800cefc:	f003 031f 	and.w	r3, r3, #31
 800cf00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cf04:	4618      	mov	r0, r3
 800cf06:	bd80      	pop	{r7, pc}
 800cf08:	58024400 	.word	0x58024400
 800cf0c:	0801c468 	.word	0x0801c468

0800cf10 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cf10:	b480      	push	{r7}
 800cf12:	b089      	sub	sp, #36	; 0x24
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cf18:	4ba1      	ldr	r3, [pc, #644]	; (800d1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf1c:	f003 0303 	and.w	r3, r3, #3
 800cf20:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800cf22:	4b9f      	ldr	r3, [pc, #636]	; (800d1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf26:	0b1b      	lsrs	r3, r3, #12
 800cf28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf2c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cf2e:	4b9c      	ldr	r3, [pc, #624]	; (800d1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf32:	091b      	lsrs	r3, r3, #4
 800cf34:	f003 0301 	and.w	r3, r3, #1
 800cf38:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cf3a:	4b99      	ldr	r3, [pc, #612]	; (800d1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf3e:	08db      	lsrs	r3, r3, #3
 800cf40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cf44:	693a      	ldr	r2, [r7, #16]
 800cf46:	fb02 f303 	mul.w	r3, r2, r3
 800cf4a:	ee07 3a90 	vmov	s15, r3
 800cf4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	f000 8111 	beq.w	800d180 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cf5e:	69bb      	ldr	r3, [r7, #24]
 800cf60:	2b02      	cmp	r3, #2
 800cf62:	f000 8083 	beq.w	800d06c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cf66:	69bb      	ldr	r3, [r7, #24]
 800cf68:	2b02      	cmp	r3, #2
 800cf6a:	f200 80a1 	bhi.w	800d0b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cf6e:	69bb      	ldr	r3, [r7, #24]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d003      	beq.n	800cf7c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cf74:	69bb      	ldr	r3, [r7, #24]
 800cf76:	2b01      	cmp	r3, #1
 800cf78:	d056      	beq.n	800d028 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cf7a:	e099      	b.n	800d0b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf7c:	4b88      	ldr	r3, [pc, #544]	; (800d1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	f003 0320 	and.w	r3, r3, #32
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d02d      	beq.n	800cfe4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf88:	4b85      	ldr	r3, [pc, #532]	; (800d1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	08db      	lsrs	r3, r3, #3
 800cf8e:	f003 0303 	and.w	r3, r3, #3
 800cf92:	4a84      	ldr	r2, [pc, #528]	; (800d1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cf94:	fa22 f303 	lsr.w	r3, r2, r3
 800cf98:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cf9a:	68bb      	ldr	r3, [r7, #8]
 800cf9c:	ee07 3a90 	vmov	s15, r3
 800cfa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfa4:	697b      	ldr	r3, [r7, #20]
 800cfa6:	ee07 3a90 	vmov	s15, r3
 800cfaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfb2:	4b7b      	ldr	r3, [pc, #492]	; (800d1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfba:	ee07 3a90 	vmov	s15, r3
 800cfbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfc2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfc6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cfca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfde:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cfe2:	e087      	b.n	800d0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cfe4:	697b      	ldr	r3, [r7, #20]
 800cfe6:	ee07 3a90 	vmov	s15, r3
 800cfea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d1ac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cff6:	4b6a      	ldr	r3, [pc, #424]	; (800d1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cffe:	ee07 3a90 	vmov	s15, r3
 800d002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d006:	ed97 6a03 	vldr	s12, [r7, #12]
 800d00a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d00e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d01a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d01e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d022:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d026:	e065      	b.n	800d0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	ee07 3a90 	vmov	s15, r3
 800d02e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d032:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d03a:	4b59      	ldr	r3, [pc, #356]	; (800d1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d03c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d03e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d042:	ee07 3a90 	vmov	s15, r3
 800d046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d04a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d04e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d05a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d05e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d062:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d066:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d06a:	e043      	b.n	800d0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	ee07 3a90 	vmov	s15, r3
 800d072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d076:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d1b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d07a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d07e:	4b48      	ldr	r3, [pc, #288]	; (800d1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d086:	ee07 3a90 	vmov	s15, r3
 800d08a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d08e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d092:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d09a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d09e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0ae:	e021      	b.n	800d0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	ee07 3a90 	vmov	s15, r3
 800d0b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0ba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d0be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0c2:	4b37      	ldr	r3, [pc, #220]	; (800d1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0ca:	ee07 3a90 	vmov	s15, r3
 800d0ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d0da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0f2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d0f4:	4b2a      	ldr	r3, [pc, #168]	; (800d1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0f8:	0a5b      	lsrs	r3, r3, #9
 800d0fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0fe:	ee07 3a90 	vmov	s15, r3
 800d102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d106:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d10a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d10e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d112:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d116:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d11a:	ee17 2a90 	vmov	r2, s15
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d122:	4b1f      	ldr	r3, [pc, #124]	; (800d1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d126:	0c1b      	lsrs	r3, r3, #16
 800d128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d12c:	ee07 3a90 	vmov	s15, r3
 800d130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d134:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d138:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d13c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d140:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d144:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d148:	ee17 2a90 	vmov	r2, s15
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d150:	4b13      	ldr	r3, [pc, #76]	; (800d1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d154:	0e1b      	lsrs	r3, r3, #24
 800d156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d15a:	ee07 3a90 	vmov	s15, r3
 800d15e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d162:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d166:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d16a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d16e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d172:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d176:	ee17 2a90 	vmov	r2, s15
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d17e:	e008      	b.n	800d192 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2200      	movs	r2, #0
 800d184:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	2200      	movs	r2, #0
 800d18a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2200      	movs	r2, #0
 800d190:	609a      	str	r2, [r3, #8]
}
 800d192:	bf00      	nop
 800d194:	3724      	adds	r7, #36	; 0x24
 800d196:	46bd      	mov	sp, r7
 800d198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19c:	4770      	bx	lr
 800d19e:	bf00      	nop
 800d1a0:	58024400 	.word	0x58024400
 800d1a4:	03d09000 	.word	0x03d09000
 800d1a8:	46000000 	.word	0x46000000
 800d1ac:	4c742400 	.word	0x4c742400
 800d1b0:	4a742400 	.word	0x4a742400
 800d1b4:	4af42400 	.word	0x4af42400

0800d1b8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b089      	sub	sp, #36	; 0x24
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d1c0:	4ba1      	ldr	r3, [pc, #644]	; (800d448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1c4:	f003 0303 	and.w	r3, r3, #3
 800d1c8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d1ca:	4b9f      	ldr	r3, [pc, #636]	; (800d448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1ce:	0d1b      	lsrs	r3, r3, #20
 800d1d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d1d4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d1d6:	4b9c      	ldr	r3, [pc, #624]	; (800d448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1da:	0a1b      	lsrs	r3, r3, #8
 800d1dc:	f003 0301 	and.w	r3, r3, #1
 800d1e0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d1e2:	4b99      	ldr	r3, [pc, #612]	; (800d448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1e6:	08db      	lsrs	r3, r3, #3
 800d1e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d1ec:	693a      	ldr	r2, [r7, #16]
 800d1ee:	fb02 f303 	mul.w	r3, r2, r3
 800d1f2:	ee07 3a90 	vmov	s15, r3
 800d1f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d1fe:	697b      	ldr	r3, [r7, #20]
 800d200:	2b00      	cmp	r3, #0
 800d202:	f000 8111 	beq.w	800d428 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d206:	69bb      	ldr	r3, [r7, #24]
 800d208:	2b02      	cmp	r3, #2
 800d20a:	f000 8083 	beq.w	800d314 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d20e:	69bb      	ldr	r3, [r7, #24]
 800d210:	2b02      	cmp	r3, #2
 800d212:	f200 80a1 	bhi.w	800d358 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d216:	69bb      	ldr	r3, [r7, #24]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d003      	beq.n	800d224 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d21c:	69bb      	ldr	r3, [r7, #24]
 800d21e:	2b01      	cmp	r3, #1
 800d220:	d056      	beq.n	800d2d0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d222:	e099      	b.n	800d358 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d224:	4b88      	ldr	r3, [pc, #544]	; (800d448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f003 0320 	and.w	r3, r3, #32
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d02d      	beq.n	800d28c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d230:	4b85      	ldr	r3, [pc, #532]	; (800d448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	08db      	lsrs	r3, r3, #3
 800d236:	f003 0303 	and.w	r3, r3, #3
 800d23a:	4a84      	ldr	r2, [pc, #528]	; (800d44c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d23c:	fa22 f303 	lsr.w	r3, r2, r3
 800d240:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	ee07 3a90 	vmov	s15, r3
 800d248:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	ee07 3a90 	vmov	s15, r3
 800d252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d25a:	4b7b      	ldr	r3, [pc, #492]	; (800d448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d25c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d25e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d262:	ee07 3a90 	vmov	s15, r3
 800d266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d26a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d26e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d450 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d27a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d27e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d282:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d286:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d28a:	e087      	b.n	800d39c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d28c:	697b      	ldr	r3, [r7, #20]
 800d28e:	ee07 3a90 	vmov	s15, r3
 800d292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d296:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d454 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d29a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d29e:	4b6a      	ldr	r3, [pc, #424]	; (800d448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2a6:	ee07 3a90 	vmov	s15, r3
 800d2aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2b2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d450 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d2b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2ce:	e065      	b.n	800d39c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d2d0:	697b      	ldr	r3, [r7, #20]
 800d2d2:	ee07 3a90 	vmov	s15, r3
 800d2d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2da:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d458 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d2de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2e2:	4b59      	ldr	r3, [pc, #356]	; (800d448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2ea:	ee07 3a90 	vmov	s15, r3
 800d2ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2f6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d450 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d2fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d302:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d30a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d30e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d312:	e043      	b.n	800d39c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	ee07 3a90 	vmov	s15, r3
 800d31a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d31e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d45c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d326:	4b48      	ldr	r3, [pc, #288]	; (800d448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d32a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d32e:	ee07 3a90 	vmov	s15, r3
 800d332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d336:	ed97 6a03 	vldr	s12, [r7, #12]
 800d33a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d450 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d33e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d346:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d34a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d34e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d352:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d356:	e021      	b.n	800d39c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	ee07 3a90 	vmov	s15, r3
 800d35e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d362:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d458 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d36a:	4b37      	ldr	r3, [pc, #220]	; (800d448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d36c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d36e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d372:	ee07 3a90 	vmov	s15, r3
 800d376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d37a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d37e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d450 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d38a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d38e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d392:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d396:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d39a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d39c:	4b2a      	ldr	r3, [pc, #168]	; (800d448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d39e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3a0:	0a5b      	lsrs	r3, r3, #9
 800d3a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3a6:	ee07 3a90 	vmov	s15, r3
 800d3aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d3b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d3b6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d3ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3c2:	ee17 2a90 	vmov	r2, s15
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d3ca:	4b1f      	ldr	r3, [pc, #124]	; (800d448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3ce:	0c1b      	lsrs	r3, r3, #16
 800d3d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3d4:	ee07 3a90 	vmov	s15, r3
 800d3d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d3e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d3e4:	edd7 6a07 	vldr	s13, [r7, #28]
 800d3e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3f0:	ee17 2a90 	vmov	r2, s15
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d3f8:	4b13      	ldr	r3, [pc, #76]	; (800d448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3fc:	0e1b      	lsrs	r3, r3, #24
 800d3fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d402:	ee07 3a90 	vmov	s15, r3
 800d406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d40a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d40e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d412:	edd7 6a07 	vldr	s13, [r7, #28]
 800d416:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d41a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d41e:	ee17 2a90 	vmov	r2, s15
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d426:	e008      	b.n	800d43a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2200      	movs	r2, #0
 800d42c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2200      	movs	r2, #0
 800d432:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2200      	movs	r2, #0
 800d438:	609a      	str	r2, [r3, #8]
}
 800d43a:	bf00      	nop
 800d43c:	3724      	adds	r7, #36	; 0x24
 800d43e:	46bd      	mov	sp, r7
 800d440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d444:	4770      	bx	lr
 800d446:	bf00      	nop
 800d448:	58024400 	.word	0x58024400
 800d44c:	03d09000 	.word	0x03d09000
 800d450:	46000000 	.word	0x46000000
 800d454:	4c742400 	.word	0x4c742400
 800d458:	4a742400 	.word	0x4a742400
 800d45c:	4af42400 	.word	0x4af42400

0800d460 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d460:	b480      	push	{r7}
 800d462:	b089      	sub	sp, #36	; 0x24
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d468:	4ba0      	ldr	r3, [pc, #640]	; (800d6ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d46a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d46c:	f003 0303 	and.w	r3, r3, #3
 800d470:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d472:	4b9e      	ldr	r3, [pc, #632]	; (800d6ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d476:	091b      	lsrs	r3, r3, #4
 800d478:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d47c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d47e:	4b9b      	ldr	r3, [pc, #620]	; (800d6ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d482:	f003 0301 	and.w	r3, r3, #1
 800d486:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d488:	4b98      	ldr	r3, [pc, #608]	; (800d6ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d48a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d48c:	08db      	lsrs	r3, r3, #3
 800d48e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d492:	693a      	ldr	r2, [r7, #16]
 800d494:	fb02 f303 	mul.w	r3, r2, r3
 800d498:	ee07 3a90 	vmov	s15, r3
 800d49c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4a0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d4a4:	697b      	ldr	r3, [r7, #20]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	f000 8111 	beq.w	800d6ce <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d4ac:	69bb      	ldr	r3, [r7, #24]
 800d4ae:	2b02      	cmp	r3, #2
 800d4b0:	f000 8083 	beq.w	800d5ba <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d4b4:	69bb      	ldr	r3, [r7, #24]
 800d4b6:	2b02      	cmp	r3, #2
 800d4b8:	f200 80a1 	bhi.w	800d5fe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d4bc:	69bb      	ldr	r3, [r7, #24]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d003      	beq.n	800d4ca <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d4c2:	69bb      	ldr	r3, [r7, #24]
 800d4c4:	2b01      	cmp	r3, #1
 800d4c6:	d056      	beq.n	800d576 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d4c8:	e099      	b.n	800d5fe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d4ca:	4b88      	ldr	r3, [pc, #544]	; (800d6ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	f003 0320 	and.w	r3, r3, #32
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d02d      	beq.n	800d532 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d4d6:	4b85      	ldr	r3, [pc, #532]	; (800d6ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	08db      	lsrs	r3, r3, #3
 800d4dc:	f003 0303 	and.w	r3, r3, #3
 800d4e0:	4a83      	ldr	r2, [pc, #524]	; (800d6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d4e2:	fa22 f303 	lsr.w	r3, r2, r3
 800d4e6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	ee07 3a90 	vmov	s15, r3
 800d4ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	ee07 3a90 	vmov	s15, r3
 800d4f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d500:	4b7a      	ldr	r3, [pc, #488]	; (800d6ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d508:	ee07 3a90 	vmov	s15, r3
 800d50c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d510:	ed97 6a03 	vldr	s12, [r7, #12]
 800d514:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d6f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d518:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d51c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d520:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d524:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d52c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d530:	e087      	b.n	800d642 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d532:	697b      	ldr	r3, [r7, #20]
 800d534:	ee07 3a90 	vmov	s15, r3
 800d538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d53c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d6f8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d540:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d544:	4b69      	ldr	r3, [pc, #420]	; (800d6ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d54c:	ee07 3a90 	vmov	s15, r3
 800d550:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d554:	ed97 6a03 	vldr	s12, [r7, #12]
 800d558:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d6f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d55c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d560:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d564:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d568:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d56c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d570:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d574:	e065      	b.n	800d642 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	ee07 3a90 	vmov	s15, r3
 800d57c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d580:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d6fc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d584:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d588:	4b58      	ldr	r3, [pc, #352]	; (800d6ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d58a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d58c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d590:	ee07 3a90 	vmov	s15, r3
 800d594:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d598:	ed97 6a03 	vldr	s12, [r7, #12]
 800d59c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d6f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d5a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d5b8:	e043      	b.n	800d642 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d5ba:	697b      	ldr	r3, [r7, #20]
 800d5bc:	ee07 3a90 	vmov	s15, r3
 800d5c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5c4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d700 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d5c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5cc:	4b47      	ldr	r3, [pc, #284]	; (800d6ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5d4:	ee07 3a90 	vmov	s15, r3
 800d5d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5dc:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5e0:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d6f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d5e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d5fc:	e021      	b.n	800d642 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	ee07 3a90 	vmov	s15, r3
 800d604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d608:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d6f8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d60c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d610:	4b36      	ldr	r3, [pc, #216]	; (800d6ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d618:	ee07 3a90 	vmov	s15, r3
 800d61c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d620:	ed97 6a03 	vldr	s12, [r7, #12]
 800d624:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d6f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d628:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d62c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d630:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d634:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d63c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d640:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d642:	4b2a      	ldr	r3, [pc, #168]	; (800d6ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d646:	0a5b      	lsrs	r3, r3, #9
 800d648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d64c:	ee07 3a90 	vmov	s15, r3
 800d650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d654:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d658:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d65c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d668:	ee17 2a90 	vmov	r2, s15
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d670:	4b1e      	ldr	r3, [pc, #120]	; (800d6ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d674:	0c1b      	lsrs	r3, r3, #16
 800d676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d67a:	ee07 3a90 	vmov	s15, r3
 800d67e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d682:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d686:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d68a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d68e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d696:	ee17 2a90 	vmov	r2, s15
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d69e:	4b13      	ldr	r3, [pc, #76]	; (800d6ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6a2:	0e1b      	lsrs	r3, r3, #24
 800d6a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6a8:	ee07 3a90 	vmov	s15, r3
 800d6ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d6b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d6b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d6bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d6c4:	ee17 2a90 	vmov	r2, s15
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d6cc:	e008      	b.n	800d6e0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	609a      	str	r2, [r3, #8]
}
 800d6e0:	bf00      	nop
 800d6e2:	3724      	adds	r7, #36	; 0x24
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ea:	4770      	bx	lr
 800d6ec:	58024400 	.word	0x58024400
 800d6f0:	03d09000 	.word	0x03d09000
 800d6f4:	46000000 	.word	0x46000000
 800d6f8:	4c742400 	.word	0x4c742400
 800d6fc:	4a742400 	.word	0x4a742400
 800d700:	4af42400 	.word	0x4af42400

0800d704 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b084      	sub	sp, #16
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
 800d70c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d70e:	2300      	movs	r3, #0
 800d710:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d712:	4b53      	ldr	r3, [pc, #332]	; (800d860 <RCCEx_PLL2_Config+0x15c>)
 800d714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d716:	f003 0303 	and.w	r3, r3, #3
 800d71a:	2b03      	cmp	r3, #3
 800d71c:	d101      	bne.n	800d722 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d71e:	2301      	movs	r3, #1
 800d720:	e099      	b.n	800d856 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d722:	4b4f      	ldr	r3, [pc, #316]	; (800d860 <RCCEx_PLL2_Config+0x15c>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	4a4e      	ldr	r2, [pc, #312]	; (800d860 <RCCEx_PLL2_Config+0x15c>)
 800d728:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d72c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d72e:	f7f5 fe81 	bl	8003434 <HAL_GetTick>
 800d732:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d734:	e008      	b.n	800d748 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d736:	f7f5 fe7d 	bl	8003434 <HAL_GetTick>
 800d73a:	4602      	mov	r2, r0
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	1ad3      	subs	r3, r2, r3
 800d740:	2b02      	cmp	r3, #2
 800d742:	d901      	bls.n	800d748 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d744:	2303      	movs	r3, #3
 800d746:	e086      	b.n	800d856 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d748:	4b45      	ldr	r3, [pc, #276]	; (800d860 <RCCEx_PLL2_Config+0x15c>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d750:	2b00      	cmp	r3, #0
 800d752:	d1f0      	bne.n	800d736 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d754:	4b42      	ldr	r3, [pc, #264]	; (800d860 <RCCEx_PLL2_Config+0x15c>)
 800d756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d758:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	031b      	lsls	r3, r3, #12
 800d762:	493f      	ldr	r1, [pc, #252]	; (800d860 <RCCEx_PLL2_Config+0x15c>)
 800d764:	4313      	orrs	r3, r2
 800d766:	628b      	str	r3, [r1, #40]	; 0x28
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	685b      	ldr	r3, [r3, #4]
 800d76c:	3b01      	subs	r3, #1
 800d76e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	689b      	ldr	r3, [r3, #8]
 800d776:	3b01      	subs	r3, #1
 800d778:	025b      	lsls	r3, r3, #9
 800d77a:	b29b      	uxth	r3, r3
 800d77c:	431a      	orrs	r2, r3
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	68db      	ldr	r3, [r3, #12]
 800d782:	3b01      	subs	r3, #1
 800d784:	041b      	lsls	r3, r3, #16
 800d786:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d78a:	431a      	orrs	r2, r3
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	691b      	ldr	r3, [r3, #16]
 800d790:	3b01      	subs	r3, #1
 800d792:	061b      	lsls	r3, r3, #24
 800d794:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d798:	4931      	ldr	r1, [pc, #196]	; (800d860 <RCCEx_PLL2_Config+0x15c>)
 800d79a:	4313      	orrs	r3, r2
 800d79c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d79e:	4b30      	ldr	r3, [pc, #192]	; (800d860 <RCCEx_PLL2_Config+0x15c>)
 800d7a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	695b      	ldr	r3, [r3, #20]
 800d7aa:	492d      	ldr	r1, [pc, #180]	; (800d860 <RCCEx_PLL2_Config+0x15c>)
 800d7ac:	4313      	orrs	r3, r2
 800d7ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d7b0:	4b2b      	ldr	r3, [pc, #172]	; (800d860 <RCCEx_PLL2_Config+0x15c>)
 800d7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7b4:	f023 0220 	bic.w	r2, r3, #32
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	699b      	ldr	r3, [r3, #24]
 800d7bc:	4928      	ldr	r1, [pc, #160]	; (800d860 <RCCEx_PLL2_Config+0x15c>)
 800d7be:	4313      	orrs	r3, r2
 800d7c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d7c2:	4b27      	ldr	r3, [pc, #156]	; (800d860 <RCCEx_PLL2_Config+0x15c>)
 800d7c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7c6:	4a26      	ldr	r2, [pc, #152]	; (800d860 <RCCEx_PLL2_Config+0x15c>)
 800d7c8:	f023 0310 	bic.w	r3, r3, #16
 800d7cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d7ce:	4b24      	ldr	r3, [pc, #144]	; (800d860 <RCCEx_PLL2_Config+0x15c>)
 800d7d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d7d2:	4b24      	ldr	r3, [pc, #144]	; (800d864 <RCCEx_PLL2_Config+0x160>)
 800d7d4:	4013      	ands	r3, r2
 800d7d6:	687a      	ldr	r2, [r7, #4]
 800d7d8:	69d2      	ldr	r2, [r2, #28]
 800d7da:	00d2      	lsls	r2, r2, #3
 800d7dc:	4920      	ldr	r1, [pc, #128]	; (800d860 <RCCEx_PLL2_Config+0x15c>)
 800d7de:	4313      	orrs	r3, r2
 800d7e0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d7e2:	4b1f      	ldr	r3, [pc, #124]	; (800d860 <RCCEx_PLL2_Config+0x15c>)
 800d7e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7e6:	4a1e      	ldr	r2, [pc, #120]	; (800d860 <RCCEx_PLL2_Config+0x15c>)
 800d7e8:	f043 0310 	orr.w	r3, r3, #16
 800d7ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d106      	bne.n	800d802 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d7f4:	4b1a      	ldr	r3, [pc, #104]	; (800d860 <RCCEx_PLL2_Config+0x15c>)
 800d7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7f8:	4a19      	ldr	r2, [pc, #100]	; (800d860 <RCCEx_PLL2_Config+0x15c>)
 800d7fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d7fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d800:	e00f      	b.n	800d822 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	2b01      	cmp	r3, #1
 800d806:	d106      	bne.n	800d816 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d808:	4b15      	ldr	r3, [pc, #84]	; (800d860 <RCCEx_PLL2_Config+0x15c>)
 800d80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d80c:	4a14      	ldr	r2, [pc, #80]	; (800d860 <RCCEx_PLL2_Config+0x15c>)
 800d80e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d812:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d814:	e005      	b.n	800d822 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d816:	4b12      	ldr	r3, [pc, #72]	; (800d860 <RCCEx_PLL2_Config+0x15c>)
 800d818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d81a:	4a11      	ldr	r2, [pc, #68]	; (800d860 <RCCEx_PLL2_Config+0x15c>)
 800d81c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d820:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d822:	4b0f      	ldr	r3, [pc, #60]	; (800d860 <RCCEx_PLL2_Config+0x15c>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	4a0e      	ldr	r2, [pc, #56]	; (800d860 <RCCEx_PLL2_Config+0x15c>)
 800d828:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d82c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d82e:	f7f5 fe01 	bl	8003434 <HAL_GetTick>
 800d832:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d834:	e008      	b.n	800d848 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d836:	f7f5 fdfd 	bl	8003434 <HAL_GetTick>
 800d83a:	4602      	mov	r2, r0
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	1ad3      	subs	r3, r2, r3
 800d840:	2b02      	cmp	r3, #2
 800d842:	d901      	bls.n	800d848 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d844:	2303      	movs	r3, #3
 800d846:	e006      	b.n	800d856 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d848:	4b05      	ldr	r3, [pc, #20]	; (800d860 <RCCEx_PLL2_Config+0x15c>)
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d850:	2b00      	cmp	r3, #0
 800d852:	d0f0      	beq.n	800d836 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d854:	7bfb      	ldrb	r3, [r7, #15]
}
 800d856:	4618      	mov	r0, r3
 800d858:	3710      	adds	r7, #16
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}
 800d85e:	bf00      	nop
 800d860:	58024400 	.word	0x58024400
 800d864:	ffff0007 	.word	0xffff0007

0800d868 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b084      	sub	sp, #16
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
 800d870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d872:	2300      	movs	r3, #0
 800d874:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d876:	4b53      	ldr	r3, [pc, #332]	; (800d9c4 <RCCEx_PLL3_Config+0x15c>)
 800d878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d87a:	f003 0303 	and.w	r3, r3, #3
 800d87e:	2b03      	cmp	r3, #3
 800d880:	d101      	bne.n	800d886 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d882:	2301      	movs	r3, #1
 800d884:	e099      	b.n	800d9ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d886:	4b4f      	ldr	r3, [pc, #316]	; (800d9c4 <RCCEx_PLL3_Config+0x15c>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	4a4e      	ldr	r2, [pc, #312]	; (800d9c4 <RCCEx_PLL3_Config+0x15c>)
 800d88c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d890:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d892:	f7f5 fdcf 	bl	8003434 <HAL_GetTick>
 800d896:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d898:	e008      	b.n	800d8ac <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d89a:	f7f5 fdcb 	bl	8003434 <HAL_GetTick>
 800d89e:	4602      	mov	r2, r0
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	1ad3      	subs	r3, r2, r3
 800d8a4:	2b02      	cmp	r3, #2
 800d8a6:	d901      	bls.n	800d8ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d8a8:	2303      	movs	r3, #3
 800d8aa:	e086      	b.n	800d9ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d8ac:	4b45      	ldr	r3, [pc, #276]	; (800d9c4 <RCCEx_PLL3_Config+0x15c>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d1f0      	bne.n	800d89a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d8b8:	4b42      	ldr	r3, [pc, #264]	; (800d9c4 <RCCEx_PLL3_Config+0x15c>)
 800d8ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8bc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	051b      	lsls	r3, r3, #20
 800d8c6:	493f      	ldr	r1, [pc, #252]	; (800d9c4 <RCCEx_PLL3_Config+0x15c>)
 800d8c8:	4313      	orrs	r3, r2
 800d8ca:	628b      	str	r3, [r1, #40]	; 0x28
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	685b      	ldr	r3, [r3, #4]
 800d8d0:	3b01      	subs	r3, #1
 800d8d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	689b      	ldr	r3, [r3, #8]
 800d8da:	3b01      	subs	r3, #1
 800d8dc:	025b      	lsls	r3, r3, #9
 800d8de:	b29b      	uxth	r3, r3
 800d8e0:	431a      	orrs	r2, r3
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	68db      	ldr	r3, [r3, #12]
 800d8e6:	3b01      	subs	r3, #1
 800d8e8:	041b      	lsls	r3, r3, #16
 800d8ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d8ee:	431a      	orrs	r2, r3
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	691b      	ldr	r3, [r3, #16]
 800d8f4:	3b01      	subs	r3, #1
 800d8f6:	061b      	lsls	r3, r3, #24
 800d8f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d8fc:	4931      	ldr	r1, [pc, #196]	; (800d9c4 <RCCEx_PLL3_Config+0x15c>)
 800d8fe:	4313      	orrs	r3, r2
 800d900:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d902:	4b30      	ldr	r3, [pc, #192]	; (800d9c4 <RCCEx_PLL3_Config+0x15c>)
 800d904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d906:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	695b      	ldr	r3, [r3, #20]
 800d90e:	492d      	ldr	r1, [pc, #180]	; (800d9c4 <RCCEx_PLL3_Config+0x15c>)
 800d910:	4313      	orrs	r3, r2
 800d912:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d914:	4b2b      	ldr	r3, [pc, #172]	; (800d9c4 <RCCEx_PLL3_Config+0x15c>)
 800d916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d918:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	699b      	ldr	r3, [r3, #24]
 800d920:	4928      	ldr	r1, [pc, #160]	; (800d9c4 <RCCEx_PLL3_Config+0x15c>)
 800d922:	4313      	orrs	r3, r2
 800d924:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d926:	4b27      	ldr	r3, [pc, #156]	; (800d9c4 <RCCEx_PLL3_Config+0x15c>)
 800d928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d92a:	4a26      	ldr	r2, [pc, #152]	; (800d9c4 <RCCEx_PLL3_Config+0x15c>)
 800d92c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d930:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d932:	4b24      	ldr	r3, [pc, #144]	; (800d9c4 <RCCEx_PLL3_Config+0x15c>)
 800d934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d936:	4b24      	ldr	r3, [pc, #144]	; (800d9c8 <RCCEx_PLL3_Config+0x160>)
 800d938:	4013      	ands	r3, r2
 800d93a:	687a      	ldr	r2, [r7, #4]
 800d93c:	69d2      	ldr	r2, [r2, #28]
 800d93e:	00d2      	lsls	r2, r2, #3
 800d940:	4920      	ldr	r1, [pc, #128]	; (800d9c4 <RCCEx_PLL3_Config+0x15c>)
 800d942:	4313      	orrs	r3, r2
 800d944:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d946:	4b1f      	ldr	r3, [pc, #124]	; (800d9c4 <RCCEx_PLL3_Config+0x15c>)
 800d948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d94a:	4a1e      	ldr	r2, [pc, #120]	; (800d9c4 <RCCEx_PLL3_Config+0x15c>)
 800d94c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d950:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d106      	bne.n	800d966 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d958:	4b1a      	ldr	r3, [pc, #104]	; (800d9c4 <RCCEx_PLL3_Config+0x15c>)
 800d95a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d95c:	4a19      	ldr	r2, [pc, #100]	; (800d9c4 <RCCEx_PLL3_Config+0x15c>)
 800d95e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d962:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d964:	e00f      	b.n	800d986 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	2b01      	cmp	r3, #1
 800d96a:	d106      	bne.n	800d97a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d96c:	4b15      	ldr	r3, [pc, #84]	; (800d9c4 <RCCEx_PLL3_Config+0x15c>)
 800d96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d970:	4a14      	ldr	r2, [pc, #80]	; (800d9c4 <RCCEx_PLL3_Config+0x15c>)
 800d972:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d976:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d978:	e005      	b.n	800d986 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d97a:	4b12      	ldr	r3, [pc, #72]	; (800d9c4 <RCCEx_PLL3_Config+0x15c>)
 800d97c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d97e:	4a11      	ldr	r2, [pc, #68]	; (800d9c4 <RCCEx_PLL3_Config+0x15c>)
 800d980:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d984:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d986:	4b0f      	ldr	r3, [pc, #60]	; (800d9c4 <RCCEx_PLL3_Config+0x15c>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	4a0e      	ldr	r2, [pc, #56]	; (800d9c4 <RCCEx_PLL3_Config+0x15c>)
 800d98c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d990:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d992:	f7f5 fd4f 	bl	8003434 <HAL_GetTick>
 800d996:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d998:	e008      	b.n	800d9ac <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d99a:	f7f5 fd4b 	bl	8003434 <HAL_GetTick>
 800d99e:	4602      	mov	r2, r0
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	1ad3      	subs	r3, r2, r3
 800d9a4:	2b02      	cmp	r3, #2
 800d9a6:	d901      	bls.n	800d9ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d9a8:	2303      	movs	r3, #3
 800d9aa:	e006      	b.n	800d9ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d9ac:	4b05      	ldr	r3, [pc, #20]	; (800d9c4 <RCCEx_PLL3_Config+0x15c>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d0f0      	beq.n	800d99a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d9b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	3710      	adds	r7, #16
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}
 800d9c2:	bf00      	nop
 800d9c4:	58024400 	.word	0x58024400
 800d9c8:	ffff0007 	.word	0xffff0007

0800d9cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b082      	sub	sp, #8
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d101      	bne.n	800d9de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d9da:	2301      	movs	r3, #1
 800d9dc:	e049      	b.n	800da72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d9e4:	b2db      	uxtb	r3, r3
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d106      	bne.n	800d9f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f7f4 fede 	bl	80027b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2202      	movs	r2, #2
 800d9fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681a      	ldr	r2, [r3, #0]
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	3304      	adds	r3, #4
 800da08:	4619      	mov	r1, r3
 800da0a:	4610      	mov	r0, r2
 800da0c:	f000 f99e 	bl	800dd4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2201      	movs	r2, #1
 800da14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2201      	movs	r2, #1
 800da1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2201      	movs	r2, #1
 800da24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2201      	movs	r2, #1
 800da2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2201      	movs	r2, #1
 800da34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2201      	movs	r2, #1
 800da3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2201      	movs	r2, #1
 800da44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2201      	movs	r2, #1
 800da4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2201      	movs	r2, #1
 800da54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2201      	movs	r2, #1
 800da5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2201      	movs	r2, #1
 800da64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2201      	movs	r2, #1
 800da6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800da70:	2300      	movs	r3, #0
}
 800da72:	4618      	mov	r0, r3
 800da74:	3708      	adds	r7, #8
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}
	...

0800da7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800da7c:	b480      	push	{r7}
 800da7e:	b085      	sub	sp, #20
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da8a:	b2db      	uxtb	r3, r3
 800da8c:	2b01      	cmp	r3, #1
 800da8e:	d001      	beq.n	800da94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800da90:	2301      	movs	r3, #1
 800da92:	e04c      	b.n	800db2e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2202      	movs	r2, #2
 800da98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	4a26      	ldr	r2, [pc, #152]	; (800db3c <HAL_TIM_Base_Start+0xc0>)
 800daa2:	4293      	cmp	r3, r2
 800daa4:	d022      	beq.n	800daec <HAL_TIM_Base_Start+0x70>
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800daae:	d01d      	beq.n	800daec <HAL_TIM_Base_Start+0x70>
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	4a22      	ldr	r2, [pc, #136]	; (800db40 <HAL_TIM_Base_Start+0xc4>)
 800dab6:	4293      	cmp	r3, r2
 800dab8:	d018      	beq.n	800daec <HAL_TIM_Base_Start+0x70>
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	4a21      	ldr	r2, [pc, #132]	; (800db44 <HAL_TIM_Base_Start+0xc8>)
 800dac0:	4293      	cmp	r3, r2
 800dac2:	d013      	beq.n	800daec <HAL_TIM_Base_Start+0x70>
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	4a1f      	ldr	r2, [pc, #124]	; (800db48 <HAL_TIM_Base_Start+0xcc>)
 800daca:	4293      	cmp	r3, r2
 800dacc:	d00e      	beq.n	800daec <HAL_TIM_Base_Start+0x70>
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	4a1e      	ldr	r2, [pc, #120]	; (800db4c <HAL_TIM_Base_Start+0xd0>)
 800dad4:	4293      	cmp	r3, r2
 800dad6:	d009      	beq.n	800daec <HAL_TIM_Base_Start+0x70>
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	4a1c      	ldr	r2, [pc, #112]	; (800db50 <HAL_TIM_Base_Start+0xd4>)
 800dade:	4293      	cmp	r3, r2
 800dae0:	d004      	beq.n	800daec <HAL_TIM_Base_Start+0x70>
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	4a1b      	ldr	r2, [pc, #108]	; (800db54 <HAL_TIM_Base_Start+0xd8>)
 800dae8:	4293      	cmp	r3, r2
 800daea:	d115      	bne.n	800db18 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	689a      	ldr	r2, [r3, #8]
 800daf2:	4b19      	ldr	r3, [pc, #100]	; (800db58 <HAL_TIM_Base_Start+0xdc>)
 800daf4:	4013      	ands	r3, r2
 800daf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	2b06      	cmp	r3, #6
 800dafc:	d015      	beq.n	800db2a <HAL_TIM_Base_Start+0xae>
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db04:	d011      	beq.n	800db2a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	681a      	ldr	r2, [r3, #0]
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	f042 0201 	orr.w	r2, r2, #1
 800db14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db16:	e008      	b.n	800db2a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	681a      	ldr	r2, [r3, #0]
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	f042 0201 	orr.w	r2, r2, #1
 800db26:	601a      	str	r2, [r3, #0]
 800db28:	e000      	b.n	800db2c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800db2c:	2300      	movs	r3, #0
}
 800db2e:	4618      	mov	r0, r3
 800db30:	3714      	adds	r7, #20
 800db32:	46bd      	mov	sp, r7
 800db34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db38:	4770      	bx	lr
 800db3a:	bf00      	nop
 800db3c:	40010000 	.word	0x40010000
 800db40:	40000400 	.word	0x40000400
 800db44:	40000800 	.word	0x40000800
 800db48:	40000c00 	.word	0x40000c00
 800db4c:	40010400 	.word	0x40010400
 800db50:	40001800 	.word	0x40001800
 800db54:	40014000 	.word	0x40014000
 800db58:	00010007 	.word	0x00010007

0800db5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b084      	sub	sp, #16
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
 800db64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800db66:	2300      	movs	r3, #0
 800db68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db70:	2b01      	cmp	r3, #1
 800db72:	d101      	bne.n	800db78 <HAL_TIM_ConfigClockSource+0x1c>
 800db74:	2302      	movs	r3, #2
 800db76:	e0dc      	b.n	800dd32 <HAL_TIM_ConfigClockSource+0x1d6>
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2201      	movs	r2, #1
 800db7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2202      	movs	r2, #2
 800db84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	689b      	ldr	r3, [r3, #8]
 800db8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800db90:	68ba      	ldr	r2, [r7, #8]
 800db92:	4b6a      	ldr	r3, [pc, #424]	; (800dd3c <HAL_TIM_ConfigClockSource+0x1e0>)
 800db94:	4013      	ands	r3, r2
 800db96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800db98:	68bb      	ldr	r3, [r7, #8]
 800db9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800db9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	68ba      	ldr	r2, [r7, #8]
 800dba6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	4a64      	ldr	r2, [pc, #400]	; (800dd40 <HAL_TIM_ConfigClockSource+0x1e4>)
 800dbae:	4293      	cmp	r3, r2
 800dbb0:	f000 80a9 	beq.w	800dd06 <HAL_TIM_ConfigClockSource+0x1aa>
 800dbb4:	4a62      	ldr	r2, [pc, #392]	; (800dd40 <HAL_TIM_ConfigClockSource+0x1e4>)
 800dbb6:	4293      	cmp	r3, r2
 800dbb8:	f200 80ae 	bhi.w	800dd18 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbbc:	4a61      	ldr	r2, [pc, #388]	; (800dd44 <HAL_TIM_ConfigClockSource+0x1e8>)
 800dbbe:	4293      	cmp	r3, r2
 800dbc0:	f000 80a1 	beq.w	800dd06 <HAL_TIM_ConfigClockSource+0x1aa>
 800dbc4:	4a5f      	ldr	r2, [pc, #380]	; (800dd44 <HAL_TIM_ConfigClockSource+0x1e8>)
 800dbc6:	4293      	cmp	r3, r2
 800dbc8:	f200 80a6 	bhi.w	800dd18 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbcc:	4a5e      	ldr	r2, [pc, #376]	; (800dd48 <HAL_TIM_ConfigClockSource+0x1ec>)
 800dbce:	4293      	cmp	r3, r2
 800dbd0:	f000 8099 	beq.w	800dd06 <HAL_TIM_ConfigClockSource+0x1aa>
 800dbd4:	4a5c      	ldr	r2, [pc, #368]	; (800dd48 <HAL_TIM_ConfigClockSource+0x1ec>)
 800dbd6:	4293      	cmp	r3, r2
 800dbd8:	f200 809e 	bhi.w	800dd18 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbdc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800dbe0:	f000 8091 	beq.w	800dd06 <HAL_TIM_ConfigClockSource+0x1aa>
 800dbe4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800dbe8:	f200 8096 	bhi.w	800dd18 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dbf0:	f000 8089 	beq.w	800dd06 <HAL_TIM_ConfigClockSource+0x1aa>
 800dbf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dbf8:	f200 808e 	bhi.w	800dd18 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dc00:	d03e      	beq.n	800dc80 <HAL_TIM_ConfigClockSource+0x124>
 800dc02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dc06:	f200 8087 	bhi.w	800dd18 <HAL_TIM_ConfigClockSource+0x1bc>
 800dc0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc0e:	f000 8086 	beq.w	800dd1e <HAL_TIM_ConfigClockSource+0x1c2>
 800dc12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc16:	d87f      	bhi.n	800dd18 <HAL_TIM_ConfigClockSource+0x1bc>
 800dc18:	2b70      	cmp	r3, #112	; 0x70
 800dc1a:	d01a      	beq.n	800dc52 <HAL_TIM_ConfigClockSource+0xf6>
 800dc1c:	2b70      	cmp	r3, #112	; 0x70
 800dc1e:	d87b      	bhi.n	800dd18 <HAL_TIM_ConfigClockSource+0x1bc>
 800dc20:	2b60      	cmp	r3, #96	; 0x60
 800dc22:	d050      	beq.n	800dcc6 <HAL_TIM_ConfigClockSource+0x16a>
 800dc24:	2b60      	cmp	r3, #96	; 0x60
 800dc26:	d877      	bhi.n	800dd18 <HAL_TIM_ConfigClockSource+0x1bc>
 800dc28:	2b50      	cmp	r3, #80	; 0x50
 800dc2a:	d03c      	beq.n	800dca6 <HAL_TIM_ConfigClockSource+0x14a>
 800dc2c:	2b50      	cmp	r3, #80	; 0x50
 800dc2e:	d873      	bhi.n	800dd18 <HAL_TIM_ConfigClockSource+0x1bc>
 800dc30:	2b40      	cmp	r3, #64	; 0x40
 800dc32:	d058      	beq.n	800dce6 <HAL_TIM_ConfigClockSource+0x18a>
 800dc34:	2b40      	cmp	r3, #64	; 0x40
 800dc36:	d86f      	bhi.n	800dd18 <HAL_TIM_ConfigClockSource+0x1bc>
 800dc38:	2b30      	cmp	r3, #48	; 0x30
 800dc3a:	d064      	beq.n	800dd06 <HAL_TIM_ConfigClockSource+0x1aa>
 800dc3c:	2b30      	cmp	r3, #48	; 0x30
 800dc3e:	d86b      	bhi.n	800dd18 <HAL_TIM_ConfigClockSource+0x1bc>
 800dc40:	2b20      	cmp	r3, #32
 800dc42:	d060      	beq.n	800dd06 <HAL_TIM_ConfigClockSource+0x1aa>
 800dc44:	2b20      	cmp	r3, #32
 800dc46:	d867      	bhi.n	800dd18 <HAL_TIM_ConfigClockSource+0x1bc>
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d05c      	beq.n	800dd06 <HAL_TIM_ConfigClockSource+0x1aa>
 800dc4c:	2b10      	cmp	r3, #16
 800dc4e:	d05a      	beq.n	800dd06 <HAL_TIM_ConfigClockSource+0x1aa>
 800dc50:	e062      	b.n	800dd18 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6818      	ldr	r0, [r3, #0]
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	6899      	ldr	r1, [r3, #8]
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	685a      	ldr	r2, [r3, #4]
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	68db      	ldr	r3, [r3, #12]
 800dc62:	f000 f98b 	bl	800df7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	689b      	ldr	r3, [r3, #8]
 800dc6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800dc74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	68ba      	ldr	r2, [r7, #8]
 800dc7c:	609a      	str	r2, [r3, #8]
      break;
 800dc7e:	e04f      	b.n	800dd20 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	6818      	ldr	r0, [r3, #0]
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	6899      	ldr	r1, [r3, #8]
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	685a      	ldr	r2, [r3, #4]
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	68db      	ldr	r3, [r3, #12]
 800dc90:	f000 f974 	bl	800df7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	689a      	ldr	r2, [r3, #8]
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dca2:	609a      	str	r2, [r3, #8]
      break;
 800dca4:	e03c      	b.n	800dd20 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	6818      	ldr	r0, [r3, #0]
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	6859      	ldr	r1, [r3, #4]
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	68db      	ldr	r3, [r3, #12]
 800dcb2:	461a      	mov	r2, r3
 800dcb4:	f000 f8e4 	bl	800de80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	2150      	movs	r1, #80	; 0x50
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f000 f93e 	bl	800df40 <TIM_ITRx_SetConfig>
      break;
 800dcc4:	e02c      	b.n	800dd20 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6818      	ldr	r0, [r3, #0]
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	6859      	ldr	r1, [r3, #4]
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	68db      	ldr	r3, [r3, #12]
 800dcd2:	461a      	mov	r2, r3
 800dcd4:	f000 f903 	bl	800dede <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	2160      	movs	r1, #96	; 0x60
 800dcde:	4618      	mov	r0, r3
 800dce0:	f000 f92e 	bl	800df40 <TIM_ITRx_SetConfig>
      break;
 800dce4:	e01c      	b.n	800dd20 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6818      	ldr	r0, [r3, #0]
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	6859      	ldr	r1, [r3, #4]
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	68db      	ldr	r3, [r3, #12]
 800dcf2:	461a      	mov	r2, r3
 800dcf4:	f000 f8c4 	bl	800de80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	2140      	movs	r1, #64	; 0x40
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f000 f91e 	bl	800df40 <TIM_ITRx_SetConfig>
      break;
 800dd04:	e00c      	b.n	800dd20 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681a      	ldr	r2, [r3, #0]
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	4619      	mov	r1, r3
 800dd10:	4610      	mov	r0, r2
 800dd12:	f000 f915 	bl	800df40 <TIM_ITRx_SetConfig>
      break;
 800dd16:	e003      	b.n	800dd20 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800dd18:	2301      	movs	r3, #1
 800dd1a:	73fb      	strb	r3, [r7, #15]
      break;
 800dd1c:	e000      	b.n	800dd20 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800dd1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2201      	movs	r2, #1
 800dd24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dd30:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd32:	4618      	mov	r0, r3
 800dd34:	3710      	adds	r7, #16
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd80      	pop	{r7, pc}
 800dd3a:	bf00      	nop
 800dd3c:	ffceff88 	.word	0xffceff88
 800dd40:	00100040 	.word	0x00100040
 800dd44:	00100030 	.word	0x00100030
 800dd48:	00100020 	.word	0x00100020

0800dd4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dd4c:	b480      	push	{r7}
 800dd4e:	b085      	sub	sp, #20
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
 800dd54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	4a40      	ldr	r2, [pc, #256]	; (800de60 <TIM_Base_SetConfig+0x114>)
 800dd60:	4293      	cmp	r3, r2
 800dd62:	d013      	beq.n	800dd8c <TIM_Base_SetConfig+0x40>
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd6a:	d00f      	beq.n	800dd8c <TIM_Base_SetConfig+0x40>
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	4a3d      	ldr	r2, [pc, #244]	; (800de64 <TIM_Base_SetConfig+0x118>)
 800dd70:	4293      	cmp	r3, r2
 800dd72:	d00b      	beq.n	800dd8c <TIM_Base_SetConfig+0x40>
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	4a3c      	ldr	r2, [pc, #240]	; (800de68 <TIM_Base_SetConfig+0x11c>)
 800dd78:	4293      	cmp	r3, r2
 800dd7a:	d007      	beq.n	800dd8c <TIM_Base_SetConfig+0x40>
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	4a3b      	ldr	r2, [pc, #236]	; (800de6c <TIM_Base_SetConfig+0x120>)
 800dd80:	4293      	cmp	r3, r2
 800dd82:	d003      	beq.n	800dd8c <TIM_Base_SetConfig+0x40>
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	4a3a      	ldr	r2, [pc, #232]	; (800de70 <TIM_Base_SetConfig+0x124>)
 800dd88:	4293      	cmp	r3, r2
 800dd8a:	d108      	bne.n	800dd9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	685b      	ldr	r3, [r3, #4]
 800dd98:	68fa      	ldr	r2, [r7, #12]
 800dd9a:	4313      	orrs	r3, r2
 800dd9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	4a2f      	ldr	r2, [pc, #188]	; (800de60 <TIM_Base_SetConfig+0x114>)
 800dda2:	4293      	cmp	r3, r2
 800dda4:	d01f      	beq.n	800dde6 <TIM_Base_SetConfig+0x9a>
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ddac:	d01b      	beq.n	800dde6 <TIM_Base_SetConfig+0x9a>
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	4a2c      	ldr	r2, [pc, #176]	; (800de64 <TIM_Base_SetConfig+0x118>)
 800ddb2:	4293      	cmp	r3, r2
 800ddb4:	d017      	beq.n	800dde6 <TIM_Base_SetConfig+0x9a>
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	4a2b      	ldr	r2, [pc, #172]	; (800de68 <TIM_Base_SetConfig+0x11c>)
 800ddba:	4293      	cmp	r3, r2
 800ddbc:	d013      	beq.n	800dde6 <TIM_Base_SetConfig+0x9a>
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	4a2a      	ldr	r2, [pc, #168]	; (800de6c <TIM_Base_SetConfig+0x120>)
 800ddc2:	4293      	cmp	r3, r2
 800ddc4:	d00f      	beq.n	800dde6 <TIM_Base_SetConfig+0x9a>
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	4a29      	ldr	r2, [pc, #164]	; (800de70 <TIM_Base_SetConfig+0x124>)
 800ddca:	4293      	cmp	r3, r2
 800ddcc:	d00b      	beq.n	800dde6 <TIM_Base_SetConfig+0x9a>
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	4a28      	ldr	r2, [pc, #160]	; (800de74 <TIM_Base_SetConfig+0x128>)
 800ddd2:	4293      	cmp	r3, r2
 800ddd4:	d007      	beq.n	800dde6 <TIM_Base_SetConfig+0x9a>
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	4a27      	ldr	r2, [pc, #156]	; (800de78 <TIM_Base_SetConfig+0x12c>)
 800ddda:	4293      	cmp	r3, r2
 800dddc:	d003      	beq.n	800dde6 <TIM_Base_SetConfig+0x9a>
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	4a26      	ldr	r2, [pc, #152]	; (800de7c <TIM_Base_SetConfig+0x130>)
 800dde2:	4293      	cmp	r3, r2
 800dde4:	d108      	bne.n	800ddf8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ddec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	68db      	ldr	r3, [r3, #12]
 800ddf2:	68fa      	ldr	r2, [r7, #12]
 800ddf4:	4313      	orrs	r3, r2
 800ddf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	695b      	ldr	r3, [r3, #20]
 800de02:	4313      	orrs	r3, r2
 800de04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	68fa      	ldr	r2, [r7, #12]
 800de0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	689a      	ldr	r2, [r3, #8]
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	681a      	ldr	r2, [r3, #0]
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	4a10      	ldr	r2, [pc, #64]	; (800de60 <TIM_Base_SetConfig+0x114>)
 800de20:	4293      	cmp	r3, r2
 800de22:	d00f      	beq.n	800de44 <TIM_Base_SetConfig+0xf8>
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	4a12      	ldr	r2, [pc, #72]	; (800de70 <TIM_Base_SetConfig+0x124>)
 800de28:	4293      	cmp	r3, r2
 800de2a:	d00b      	beq.n	800de44 <TIM_Base_SetConfig+0xf8>
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	4a11      	ldr	r2, [pc, #68]	; (800de74 <TIM_Base_SetConfig+0x128>)
 800de30:	4293      	cmp	r3, r2
 800de32:	d007      	beq.n	800de44 <TIM_Base_SetConfig+0xf8>
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	4a10      	ldr	r2, [pc, #64]	; (800de78 <TIM_Base_SetConfig+0x12c>)
 800de38:	4293      	cmp	r3, r2
 800de3a:	d003      	beq.n	800de44 <TIM_Base_SetConfig+0xf8>
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	4a0f      	ldr	r2, [pc, #60]	; (800de7c <TIM_Base_SetConfig+0x130>)
 800de40:	4293      	cmp	r3, r2
 800de42:	d103      	bne.n	800de4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	691a      	ldr	r2, [r3, #16]
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2201      	movs	r2, #1
 800de50:	615a      	str	r2, [r3, #20]
}
 800de52:	bf00      	nop
 800de54:	3714      	adds	r7, #20
 800de56:	46bd      	mov	sp, r7
 800de58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5c:	4770      	bx	lr
 800de5e:	bf00      	nop
 800de60:	40010000 	.word	0x40010000
 800de64:	40000400 	.word	0x40000400
 800de68:	40000800 	.word	0x40000800
 800de6c:	40000c00 	.word	0x40000c00
 800de70:	40010400 	.word	0x40010400
 800de74:	40014000 	.word	0x40014000
 800de78:	40014400 	.word	0x40014400
 800de7c:	40014800 	.word	0x40014800

0800de80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800de80:	b480      	push	{r7}
 800de82:	b087      	sub	sp, #28
 800de84:	af00      	add	r7, sp, #0
 800de86:	60f8      	str	r0, [r7, #12]
 800de88:	60b9      	str	r1, [r7, #8]
 800de8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	6a1b      	ldr	r3, [r3, #32]
 800de90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	6a1b      	ldr	r3, [r3, #32]
 800de96:	f023 0201 	bic.w	r2, r3, #1
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	699b      	ldr	r3, [r3, #24]
 800dea2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dea4:	693b      	ldr	r3, [r7, #16]
 800dea6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800deaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	011b      	lsls	r3, r3, #4
 800deb0:	693a      	ldr	r2, [r7, #16]
 800deb2:	4313      	orrs	r3, r2
 800deb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800deb6:	697b      	ldr	r3, [r7, #20]
 800deb8:	f023 030a 	bic.w	r3, r3, #10
 800debc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800debe:	697a      	ldr	r2, [r7, #20]
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	4313      	orrs	r3, r2
 800dec4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	693a      	ldr	r2, [r7, #16]
 800deca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	697a      	ldr	r2, [r7, #20]
 800ded0:	621a      	str	r2, [r3, #32]
}
 800ded2:	bf00      	nop
 800ded4:	371c      	adds	r7, #28
 800ded6:	46bd      	mov	sp, r7
 800ded8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dedc:	4770      	bx	lr

0800dede <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dede:	b480      	push	{r7}
 800dee0:	b087      	sub	sp, #28
 800dee2:	af00      	add	r7, sp, #0
 800dee4:	60f8      	str	r0, [r7, #12]
 800dee6:	60b9      	str	r1, [r7, #8]
 800dee8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	6a1b      	ldr	r3, [r3, #32]
 800deee:	f023 0210 	bic.w	r2, r3, #16
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	699b      	ldr	r3, [r3, #24]
 800defa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	6a1b      	ldr	r3, [r3, #32]
 800df00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800df02:	697b      	ldr	r3, [r7, #20]
 800df04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800df08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	031b      	lsls	r3, r3, #12
 800df0e:	697a      	ldr	r2, [r7, #20]
 800df10:	4313      	orrs	r3, r2
 800df12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800df14:	693b      	ldr	r3, [r7, #16]
 800df16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800df1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	011b      	lsls	r3, r3, #4
 800df20:	693a      	ldr	r2, [r7, #16]
 800df22:	4313      	orrs	r3, r2
 800df24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	697a      	ldr	r2, [r7, #20]
 800df2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	693a      	ldr	r2, [r7, #16]
 800df30:	621a      	str	r2, [r3, #32]
}
 800df32:	bf00      	nop
 800df34:	371c      	adds	r7, #28
 800df36:	46bd      	mov	sp, r7
 800df38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3c:	4770      	bx	lr
	...

0800df40 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800df40:	b480      	push	{r7}
 800df42:	b085      	sub	sp, #20
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
 800df48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	689b      	ldr	r3, [r3, #8]
 800df4e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800df50:	68fa      	ldr	r2, [r7, #12]
 800df52:	4b09      	ldr	r3, [pc, #36]	; (800df78 <TIM_ITRx_SetConfig+0x38>)
 800df54:	4013      	ands	r3, r2
 800df56:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800df58:	683a      	ldr	r2, [r7, #0]
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	4313      	orrs	r3, r2
 800df5e:	f043 0307 	orr.w	r3, r3, #7
 800df62:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	68fa      	ldr	r2, [r7, #12]
 800df68:	609a      	str	r2, [r3, #8]
}
 800df6a:	bf00      	nop
 800df6c:	3714      	adds	r7, #20
 800df6e:	46bd      	mov	sp, r7
 800df70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df74:	4770      	bx	lr
 800df76:	bf00      	nop
 800df78:	ffcfff8f 	.word	0xffcfff8f

0800df7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800df7c:	b480      	push	{r7}
 800df7e:	b087      	sub	sp, #28
 800df80:	af00      	add	r7, sp, #0
 800df82:	60f8      	str	r0, [r7, #12]
 800df84:	60b9      	str	r1, [r7, #8]
 800df86:	607a      	str	r2, [r7, #4]
 800df88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	689b      	ldr	r3, [r3, #8]
 800df8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800df90:	697b      	ldr	r3, [r7, #20]
 800df92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800df96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	021a      	lsls	r2, r3, #8
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	431a      	orrs	r2, r3
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	4313      	orrs	r3, r2
 800dfa4:	697a      	ldr	r2, [r7, #20]
 800dfa6:	4313      	orrs	r3, r2
 800dfa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	697a      	ldr	r2, [r7, #20]
 800dfae:	609a      	str	r2, [r3, #8]
}
 800dfb0:	bf00      	nop
 800dfb2:	371c      	adds	r7, #28
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfba:	4770      	bx	lr

0800dfbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dfbc:	b480      	push	{r7}
 800dfbe:	b085      	sub	sp, #20
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
 800dfc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dfcc:	2b01      	cmp	r3, #1
 800dfce:	d101      	bne.n	800dfd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dfd0:	2302      	movs	r3, #2
 800dfd2:	e06d      	b.n	800e0b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2201      	movs	r2, #1
 800dfd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2202      	movs	r2, #2
 800dfe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	685b      	ldr	r3, [r3, #4]
 800dfea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	689b      	ldr	r3, [r3, #8]
 800dff2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	4a30      	ldr	r2, [pc, #192]	; (800e0bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dffa:	4293      	cmp	r3, r2
 800dffc:	d004      	beq.n	800e008 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	4a2f      	ldr	r2, [pc, #188]	; (800e0c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e004:	4293      	cmp	r3, r2
 800e006:	d108      	bne.n	800e01a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e00e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	685b      	ldr	r3, [r3, #4]
 800e014:	68fa      	ldr	r2, [r7, #12]
 800e016:	4313      	orrs	r3, r2
 800e018:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e020:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	68fa      	ldr	r2, [r7, #12]
 800e028:	4313      	orrs	r3, r2
 800e02a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	68fa      	ldr	r2, [r7, #12]
 800e032:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	4a20      	ldr	r2, [pc, #128]	; (800e0bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e03a:	4293      	cmp	r3, r2
 800e03c:	d022      	beq.n	800e084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e046:	d01d      	beq.n	800e084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	4a1d      	ldr	r2, [pc, #116]	; (800e0c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e04e:	4293      	cmp	r3, r2
 800e050:	d018      	beq.n	800e084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	4a1c      	ldr	r2, [pc, #112]	; (800e0c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e058:	4293      	cmp	r3, r2
 800e05a:	d013      	beq.n	800e084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	4a1a      	ldr	r2, [pc, #104]	; (800e0cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e062:	4293      	cmp	r3, r2
 800e064:	d00e      	beq.n	800e084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	4a15      	ldr	r2, [pc, #84]	; (800e0c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e06c:	4293      	cmp	r3, r2
 800e06e:	d009      	beq.n	800e084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	4a16      	ldr	r2, [pc, #88]	; (800e0d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e076:	4293      	cmp	r3, r2
 800e078:	d004      	beq.n	800e084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	4a15      	ldr	r2, [pc, #84]	; (800e0d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e080:	4293      	cmp	r3, r2
 800e082:	d10c      	bne.n	800e09e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e08a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	689b      	ldr	r3, [r3, #8]
 800e090:	68ba      	ldr	r2, [r7, #8]
 800e092:	4313      	orrs	r3, r2
 800e094:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	68ba      	ldr	r2, [r7, #8]
 800e09c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	2201      	movs	r2, #1
 800e0a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e0ae:	2300      	movs	r3, #0
}
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	3714      	adds	r7, #20
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ba:	4770      	bx	lr
 800e0bc:	40010000 	.word	0x40010000
 800e0c0:	40010400 	.word	0x40010400
 800e0c4:	40000400 	.word	0x40000400
 800e0c8:	40000800 	.word	0x40000800
 800e0cc:	40000c00 	.word	0x40000c00
 800e0d0:	40001800 	.word	0x40001800
 800e0d4:	40014000 	.word	0x40014000

0800e0d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b082      	sub	sp, #8
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d101      	bne.n	800e0ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e0e6:	2301      	movs	r3, #1
 800e0e8:	e042      	b.n	800e170 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d106      	bne.n	800e102 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e0fc:	6878      	ldr	r0, [r7, #4]
 800e0fe:	f7f4 fb7b 	bl	80027f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2224      	movs	r2, #36	; 0x24
 800e106:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	681a      	ldr	r2, [r3, #0]
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	f022 0201 	bic.w	r2, r2, #1
 800e118:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	f000 f82c 	bl	800e178 <UART_SetConfig>
 800e120:	4603      	mov	r3, r0
 800e122:	2b01      	cmp	r3, #1
 800e124:	d101      	bne.n	800e12a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e126:	2301      	movs	r3, #1
 800e128:	e022      	b.n	800e170 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d002      	beq.n	800e138 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f000 fd88 	bl	800ec48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	685a      	ldr	r2, [r3, #4]
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e146:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	689a      	ldr	r2, [r3, #8]
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e156:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	681a      	ldr	r2, [r3, #0]
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	f042 0201 	orr.w	r2, r2, #1
 800e166:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f000 fe0f 	bl	800ed8c <UART_CheckIdleState>
 800e16e:	4603      	mov	r3, r0
}
 800e170:	4618      	mov	r0, r3
 800e172:	3708      	adds	r7, #8
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}

0800e178 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e17c:	b092      	sub	sp, #72	; 0x48
 800e17e:	af00      	add	r7, sp, #0
 800e180:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e182:	2300      	movs	r3, #0
 800e184:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e188:	697b      	ldr	r3, [r7, #20]
 800e18a:	689a      	ldr	r2, [r3, #8]
 800e18c:	697b      	ldr	r3, [r7, #20]
 800e18e:	691b      	ldr	r3, [r3, #16]
 800e190:	431a      	orrs	r2, r3
 800e192:	697b      	ldr	r3, [r7, #20]
 800e194:	695b      	ldr	r3, [r3, #20]
 800e196:	431a      	orrs	r2, r3
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	69db      	ldr	r3, [r3, #28]
 800e19c:	4313      	orrs	r3, r2
 800e19e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e1a0:	697b      	ldr	r3, [r7, #20]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	681a      	ldr	r2, [r3, #0]
 800e1a6:	4bbe      	ldr	r3, [pc, #760]	; (800e4a0 <UART_SetConfig+0x328>)
 800e1a8:	4013      	ands	r3, r2
 800e1aa:	697a      	ldr	r2, [r7, #20]
 800e1ac:	6812      	ldr	r2, [r2, #0]
 800e1ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e1b0:	430b      	orrs	r3, r1
 800e1b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e1b4:	697b      	ldr	r3, [r7, #20]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	685b      	ldr	r3, [r3, #4]
 800e1ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e1be:	697b      	ldr	r3, [r7, #20]
 800e1c0:	68da      	ldr	r2, [r3, #12]
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	430a      	orrs	r2, r1
 800e1c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	699b      	ldr	r3, [r3, #24]
 800e1ce:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e1d0:	697b      	ldr	r3, [r7, #20]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	4ab3      	ldr	r2, [pc, #716]	; (800e4a4 <UART_SetConfig+0x32c>)
 800e1d6:	4293      	cmp	r3, r2
 800e1d8:	d004      	beq.n	800e1e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	6a1b      	ldr	r3, [r3, #32]
 800e1de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e1e0:	4313      	orrs	r3, r2
 800e1e2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	689a      	ldr	r2, [r3, #8]
 800e1ea:	4baf      	ldr	r3, [pc, #700]	; (800e4a8 <UART_SetConfig+0x330>)
 800e1ec:	4013      	ands	r3, r2
 800e1ee:	697a      	ldr	r2, [r7, #20]
 800e1f0:	6812      	ldr	r2, [r2, #0]
 800e1f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e1f4:	430b      	orrs	r3, r1
 800e1f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e1f8:	697b      	ldr	r3, [r7, #20]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1fe:	f023 010f 	bic.w	r1, r3, #15
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	430a      	orrs	r2, r1
 800e20c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e20e:	697b      	ldr	r3, [r7, #20]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	4aa6      	ldr	r2, [pc, #664]	; (800e4ac <UART_SetConfig+0x334>)
 800e214:	4293      	cmp	r3, r2
 800e216:	d177      	bne.n	800e308 <UART_SetConfig+0x190>
 800e218:	4ba5      	ldr	r3, [pc, #660]	; (800e4b0 <UART_SetConfig+0x338>)
 800e21a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e21c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e220:	2b28      	cmp	r3, #40	; 0x28
 800e222:	d86d      	bhi.n	800e300 <UART_SetConfig+0x188>
 800e224:	a201      	add	r2, pc, #4	; (adr r2, 800e22c <UART_SetConfig+0xb4>)
 800e226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e22a:	bf00      	nop
 800e22c:	0800e2d1 	.word	0x0800e2d1
 800e230:	0800e301 	.word	0x0800e301
 800e234:	0800e301 	.word	0x0800e301
 800e238:	0800e301 	.word	0x0800e301
 800e23c:	0800e301 	.word	0x0800e301
 800e240:	0800e301 	.word	0x0800e301
 800e244:	0800e301 	.word	0x0800e301
 800e248:	0800e301 	.word	0x0800e301
 800e24c:	0800e2d9 	.word	0x0800e2d9
 800e250:	0800e301 	.word	0x0800e301
 800e254:	0800e301 	.word	0x0800e301
 800e258:	0800e301 	.word	0x0800e301
 800e25c:	0800e301 	.word	0x0800e301
 800e260:	0800e301 	.word	0x0800e301
 800e264:	0800e301 	.word	0x0800e301
 800e268:	0800e301 	.word	0x0800e301
 800e26c:	0800e2e1 	.word	0x0800e2e1
 800e270:	0800e301 	.word	0x0800e301
 800e274:	0800e301 	.word	0x0800e301
 800e278:	0800e301 	.word	0x0800e301
 800e27c:	0800e301 	.word	0x0800e301
 800e280:	0800e301 	.word	0x0800e301
 800e284:	0800e301 	.word	0x0800e301
 800e288:	0800e301 	.word	0x0800e301
 800e28c:	0800e2e9 	.word	0x0800e2e9
 800e290:	0800e301 	.word	0x0800e301
 800e294:	0800e301 	.word	0x0800e301
 800e298:	0800e301 	.word	0x0800e301
 800e29c:	0800e301 	.word	0x0800e301
 800e2a0:	0800e301 	.word	0x0800e301
 800e2a4:	0800e301 	.word	0x0800e301
 800e2a8:	0800e301 	.word	0x0800e301
 800e2ac:	0800e2f1 	.word	0x0800e2f1
 800e2b0:	0800e301 	.word	0x0800e301
 800e2b4:	0800e301 	.word	0x0800e301
 800e2b8:	0800e301 	.word	0x0800e301
 800e2bc:	0800e301 	.word	0x0800e301
 800e2c0:	0800e301 	.word	0x0800e301
 800e2c4:	0800e301 	.word	0x0800e301
 800e2c8:	0800e301 	.word	0x0800e301
 800e2cc:	0800e2f9 	.word	0x0800e2f9
 800e2d0:	2301      	movs	r3, #1
 800e2d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2d6:	e222      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e2d8:	2304      	movs	r3, #4
 800e2da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2de:	e21e      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e2e0:	2308      	movs	r3, #8
 800e2e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2e6:	e21a      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e2e8:	2310      	movs	r3, #16
 800e2ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ee:	e216      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e2f0:	2320      	movs	r3, #32
 800e2f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2f6:	e212      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e2f8:	2340      	movs	r3, #64	; 0x40
 800e2fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2fe:	e20e      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e300:	2380      	movs	r3, #128	; 0x80
 800e302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e306:	e20a      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e308:	697b      	ldr	r3, [r7, #20]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	4a69      	ldr	r2, [pc, #420]	; (800e4b4 <UART_SetConfig+0x33c>)
 800e30e:	4293      	cmp	r3, r2
 800e310:	d130      	bne.n	800e374 <UART_SetConfig+0x1fc>
 800e312:	4b67      	ldr	r3, [pc, #412]	; (800e4b0 <UART_SetConfig+0x338>)
 800e314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e316:	f003 0307 	and.w	r3, r3, #7
 800e31a:	2b05      	cmp	r3, #5
 800e31c:	d826      	bhi.n	800e36c <UART_SetConfig+0x1f4>
 800e31e:	a201      	add	r2, pc, #4	; (adr r2, 800e324 <UART_SetConfig+0x1ac>)
 800e320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e324:	0800e33d 	.word	0x0800e33d
 800e328:	0800e345 	.word	0x0800e345
 800e32c:	0800e34d 	.word	0x0800e34d
 800e330:	0800e355 	.word	0x0800e355
 800e334:	0800e35d 	.word	0x0800e35d
 800e338:	0800e365 	.word	0x0800e365
 800e33c:	2300      	movs	r3, #0
 800e33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e342:	e1ec      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e344:	2304      	movs	r3, #4
 800e346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e34a:	e1e8      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e34c:	2308      	movs	r3, #8
 800e34e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e352:	e1e4      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e354:	2310      	movs	r3, #16
 800e356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e35a:	e1e0      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e35c:	2320      	movs	r3, #32
 800e35e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e362:	e1dc      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e364:	2340      	movs	r3, #64	; 0x40
 800e366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e36a:	e1d8      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e36c:	2380      	movs	r3, #128	; 0x80
 800e36e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e372:	e1d4      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e374:	697b      	ldr	r3, [r7, #20]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	4a4f      	ldr	r2, [pc, #316]	; (800e4b8 <UART_SetConfig+0x340>)
 800e37a:	4293      	cmp	r3, r2
 800e37c:	d130      	bne.n	800e3e0 <UART_SetConfig+0x268>
 800e37e:	4b4c      	ldr	r3, [pc, #304]	; (800e4b0 <UART_SetConfig+0x338>)
 800e380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e382:	f003 0307 	and.w	r3, r3, #7
 800e386:	2b05      	cmp	r3, #5
 800e388:	d826      	bhi.n	800e3d8 <UART_SetConfig+0x260>
 800e38a:	a201      	add	r2, pc, #4	; (adr r2, 800e390 <UART_SetConfig+0x218>)
 800e38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e390:	0800e3a9 	.word	0x0800e3a9
 800e394:	0800e3b1 	.word	0x0800e3b1
 800e398:	0800e3b9 	.word	0x0800e3b9
 800e39c:	0800e3c1 	.word	0x0800e3c1
 800e3a0:	0800e3c9 	.word	0x0800e3c9
 800e3a4:	0800e3d1 	.word	0x0800e3d1
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ae:	e1b6      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e3b0:	2304      	movs	r3, #4
 800e3b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3b6:	e1b2      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e3b8:	2308      	movs	r3, #8
 800e3ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3be:	e1ae      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e3c0:	2310      	movs	r3, #16
 800e3c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3c6:	e1aa      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e3c8:	2320      	movs	r3, #32
 800e3ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ce:	e1a6      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e3d0:	2340      	movs	r3, #64	; 0x40
 800e3d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3d6:	e1a2      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e3d8:	2380      	movs	r3, #128	; 0x80
 800e3da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3de:	e19e      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e3e0:	697b      	ldr	r3, [r7, #20]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	4a35      	ldr	r2, [pc, #212]	; (800e4bc <UART_SetConfig+0x344>)
 800e3e6:	4293      	cmp	r3, r2
 800e3e8:	d130      	bne.n	800e44c <UART_SetConfig+0x2d4>
 800e3ea:	4b31      	ldr	r3, [pc, #196]	; (800e4b0 <UART_SetConfig+0x338>)
 800e3ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3ee:	f003 0307 	and.w	r3, r3, #7
 800e3f2:	2b05      	cmp	r3, #5
 800e3f4:	d826      	bhi.n	800e444 <UART_SetConfig+0x2cc>
 800e3f6:	a201      	add	r2, pc, #4	; (adr r2, 800e3fc <UART_SetConfig+0x284>)
 800e3f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3fc:	0800e415 	.word	0x0800e415
 800e400:	0800e41d 	.word	0x0800e41d
 800e404:	0800e425 	.word	0x0800e425
 800e408:	0800e42d 	.word	0x0800e42d
 800e40c:	0800e435 	.word	0x0800e435
 800e410:	0800e43d 	.word	0x0800e43d
 800e414:	2300      	movs	r3, #0
 800e416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e41a:	e180      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e41c:	2304      	movs	r3, #4
 800e41e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e422:	e17c      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e424:	2308      	movs	r3, #8
 800e426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e42a:	e178      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e42c:	2310      	movs	r3, #16
 800e42e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e432:	e174      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e434:	2320      	movs	r3, #32
 800e436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e43a:	e170      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e43c:	2340      	movs	r3, #64	; 0x40
 800e43e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e442:	e16c      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e444:	2380      	movs	r3, #128	; 0x80
 800e446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e44a:	e168      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e44c:	697b      	ldr	r3, [r7, #20]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	4a1b      	ldr	r2, [pc, #108]	; (800e4c0 <UART_SetConfig+0x348>)
 800e452:	4293      	cmp	r3, r2
 800e454:	d142      	bne.n	800e4dc <UART_SetConfig+0x364>
 800e456:	4b16      	ldr	r3, [pc, #88]	; (800e4b0 <UART_SetConfig+0x338>)
 800e458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e45a:	f003 0307 	and.w	r3, r3, #7
 800e45e:	2b05      	cmp	r3, #5
 800e460:	d838      	bhi.n	800e4d4 <UART_SetConfig+0x35c>
 800e462:	a201      	add	r2, pc, #4	; (adr r2, 800e468 <UART_SetConfig+0x2f0>)
 800e464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e468:	0800e481 	.word	0x0800e481
 800e46c:	0800e489 	.word	0x0800e489
 800e470:	0800e491 	.word	0x0800e491
 800e474:	0800e499 	.word	0x0800e499
 800e478:	0800e4c5 	.word	0x0800e4c5
 800e47c:	0800e4cd 	.word	0x0800e4cd
 800e480:	2300      	movs	r3, #0
 800e482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e486:	e14a      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e488:	2304      	movs	r3, #4
 800e48a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e48e:	e146      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e490:	2308      	movs	r3, #8
 800e492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e496:	e142      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e498:	2310      	movs	r3, #16
 800e49a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e49e:	e13e      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e4a0:	cfff69f3 	.word	0xcfff69f3
 800e4a4:	58000c00 	.word	0x58000c00
 800e4a8:	11fff4ff 	.word	0x11fff4ff
 800e4ac:	40011000 	.word	0x40011000
 800e4b0:	58024400 	.word	0x58024400
 800e4b4:	40004400 	.word	0x40004400
 800e4b8:	40004800 	.word	0x40004800
 800e4bc:	40004c00 	.word	0x40004c00
 800e4c0:	40005000 	.word	0x40005000
 800e4c4:	2320      	movs	r3, #32
 800e4c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ca:	e128      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e4cc:	2340      	movs	r3, #64	; 0x40
 800e4ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4d2:	e124      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e4d4:	2380      	movs	r3, #128	; 0x80
 800e4d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4da:	e120      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	4acb      	ldr	r2, [pc, #812]	; (800e810 <UART_SetConfig+0x698>)
 800e4e2:	4293      	cmp	r3, r2
 800e4e4:	d176      	bne.n	800e5d4 <UART_SetConfig+0x45c>
 800e4e6:	4bcb      	ldr	r3, [pc, #812]	; (800e814 <UART_SetConfig+0x69c>)
 800e4e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e4ee:	2b28      	cmp	r3, #40	; 0x28
 800e4f0:	d86c      	bhi.n	800e5cc <UART_SetConfig+0x454>
 800e4f2:	a201      	add	r2, pc, #4	; (adr r2, 800e4f8 <UART_SetConfig+0x380>)
 800e4f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4f8:	0800e59d 	.word	0x0800e59d
 800e4fc:	0800e5cd 	.word	0x0800e5cd
 800e500:	0800e5cd 	.word	0x0800e5cd
 800e504:	0800e5cd 	.word	0x0800e5cd
 800e508:	0800e5cd 	.word	0x0800e5cd
 800e50c:	0800e5cd 	.word	0x0800e5cd
 800e510:	0800e5cd 	.word	0x0800e5cd
 800e514:	0800e5cd 	.word	0x0800e5cd
 800e518:	0800e5a5 	.word	0x0800e5a5
 800e51c:	0800e5cd 	.word	0x0800e5cd
 800e520:	0800e5cd 	.word	0x0800e5cd
 800e524:	0800e5cd 	.word	0x0800e5cd
 800e528:	0800e5cd 	.word	0x0800e5cd
 800e52c:	0800e5cd 	.word	0x0800e5cd
 800e530:	0800e5cd 	.word	0x0800e5cd
 800e534:	0800e5cd 	.word	0x0800e5cd
 800e538:	0800e5ad 	.word	0x0800e5ad
 800e53c:	0800e5cd 	.word	0x0800e5cd
 800e540:	0800e5cd 	.word	0x0800e5cd
 800e544:	0800e5cd 	.word	0x0800e5cd
 800e548:	0800e5cd 	.word	0x0800e5cd
 800e54c:	0800e5cd 	.word	0x0800e5cd
 800e550:	0800e5cd 	.word	0x0800e5cd
 800e554:	0800e5cd 	.word	0x0800e5cd
 800e558:	0800e5b5 	.word	0x0800e5b5
 800e55c:	0800e5cd 	.word	0x0800e5cd
 800e560:	0800e5cd 	.word	0x0800e5cd
 800e564:	0800e5cd 	.word	0x0800e5cd
 800e568:	0800e5cd 	.word	0x0800e5cd
 800e56c:	0800e5cd 	.word	0x0800e5cd
 800e570:	0800e5cd 	.word	0x0800e5cd
 800e574:	0800e5cd 	.word	0x0800e5cd
 800e578:	0800e5bd 	.word	0x0800e5bd
 800e57c:	0800e5cd 	.word	0x0800e5cd
 800e580:	0800e5cd 	.word	0x0800e5cd
 800e584:	0800e5cd 	.word	0x0800e5cd
 800e588:	0800e5cd 	.word	0x0800e5cd
 800e58c:	0800e5cd 	.word	0x0800e5cd
 800e590:	0800e5cd 	.word	0x0800e5cd
 800e594:	0800e5cd 	.word	0x0800e5cd
 800e598:	0800e5c5 	.word	0x0800e5c5
 800e59c:	2301      	movs	r3, #1
 800e59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5a2:	e0bc      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e5a4:	2304      	movs	r3, #4
 800e5a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5aa:	e0b8      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e5ac:	2308      	movs	r3, #8
 800e5ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5b2:	e0b4      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e5b4:	2310      	movs	r3, #16
 800e5b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5ba:	e0b0      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e5bc:	2320      	movs	r3, #32
 800e5be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5c2:	e0ac      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e5c4:	2340      	movs	r3, #64	; 0x40
 800e5c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5ca:	e0a8      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e5cc:	2380      	movs	r3, #128	; 0x80
 800e5ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5d2:	e0a4      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e5d4:	697b      	ldr	r3, [r7, #20]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	4a8f      	ldr	r2, [pc, #572]	; (800e818 <UART_SetConfig+0x6a0>)
 800e5da:	4293      	cmp	r3, r2
 800e5dc:	d130      	bne.n	800e640 <UART_SetConfig+0x4c8>
 800e5de:	4b8d      	ldr	r3, [pc, #564]	; (800e814 <UART_SetConfig+0x69c>)
 800e5e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5e2:	f003 0307 	and.w	r3, r3, #7
 800e5e6:	2b05      	cmp	r3, #5
 800e5e8:	d826      	bhi.n	800e638 <UART_SetConfig+0x4c0>
 800e5ea:	a201      	add	r2, pc, #4	; (adr r2, 800e5f0 <UART_SetConfig+0x478>)
 800e5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5f0:	0800e609 	.word	0x0800e609
 800e5f4:	0800e611 	.word	0x0800e611
 800e5f8:	0800e619 	.word	0x0800e619
 800e5fc:	0800e621 	.word	0x0800e621
 800e600:	0800e629 	.word	0x0800e629
 800e604:	0800e631 	.word	0x0800e631
 800e608:	2300      	movs	r3, #0
 800e60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e60e:	e086      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e610:	2304      	movs	r3, #4
 800e612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e616:	e082      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e618:	2308      	movs	r3, #8
 800e61a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e61e:	e07e      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e620:	2310      	movs	r3, #16
 800e622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e626:	e07a      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e628:	2320      	movs	r3, #32
 800e62a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e62e:	e076      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e630:	2340      	movs	r3, #64	; 0x40
 800e632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e636:	e072      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e638:	2380      	movs	r3, #128	; 0x80
 800e63a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e63e:	e06e      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	4a75      	ldr	r2, [pc, #468]	; (800e81c <UART_SetConfig+0x6a4>)
 800e646:	4293      	cmp	r3, r2
 800e648:	d130      	bne.n	800e6ac <UART_SetConfig+0x534>
 800e64a:	4b72      	ldr	r3, [pc, #456]	; (800e814 <UART_SetConfig+0x69c>)
 800e64c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e64e:	f003 0307 	and.w	r3, r3, #7
 800e652:	2b05      	cmp	r3, #5
 800e654:	d826      	bhi.n	800e6a4 <UART_SetConfig+0x52c>
 800e656:	a201      	add	r2, pc, #4	; (adr r2, 800e65c <UART_SetConfig+0x4e4>)
 800e658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e65c:	0800e675 	.word	0x0800e675
 800e660:	0800e67d 	.word	0x0800e67d
 800e664:	0800e685 	.word	0x0800e685
 800e668:	0800e68d 	.word	0x0800e68d
 800e66c:	0800e695 	.word	0x0800e695
 800e670:	0800e69d 	.word	0x0800e69d
 800e674:	2300      	movs	r3, #0
 800e676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e67a:	e050      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e67c:	2304      	movs	r3, #4
 800e67e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e682:	e04c      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e684:	2308      	movs	r3, #8
 800e686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e68a:	e048      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e68c:	2310      	movs	r3, #16
 800e68e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e692:	e044      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e694:	2320      	movs	r3, #32
 800e696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e69a:	e040      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e69c:	2340      	movs	r3, #64	; 0x40
 800e69e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6a2:	e03c      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e6a4:	2380      	movs	r3, #128	; 0x80
 800e6a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6aa:	e038      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e6ac:	697b      	ldr	r3, [r7, #20]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	4a5b      	ldr	r2, [pc, #364]	; (800e820 <UART_SetConfig+0x6a8>)
 800e6b2:	4293      	cmp	r3, r2
 800e6b4:	d130      	bne.n	800e718 <UART_SetConfig+0x5a0>
 800e6b6:	4b57      	ldr	r3, [pc, #348]	; (800e814 <UART_SetConfig+0x69c>)
 800e6b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e6ba:	f003 0307 	and.w	r3, r3, #7
 800e6be:	2b05      	cmp	r3, #5
 800e6c0:	d826      	bhi.n	800e710 <UART_SetConfig+0x598>
 800e6c2:	a201      	add	r2, pc, #4	; (adr r2, 800e6c8 <UART_SetConfig+0x550>)
 800e6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6c8:	0800e6e1 	.word	0x0800e6e1
 800e6cc:	0800e6e9 	.word	0x0800e6e9
 800e6d0:	0800e6f1 	.word	0x0800e6f1
 800e6d4:	0800e6f9 	.word	0x0800e6f9
 800e6d8:	0800e701 	.word	0x0800e701
 800e6dc:	0800e709 	.word	0x0800e709
 800e6e0:	2302      	movs	r3, #2
 800e6e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6e6:	e01a      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e6e8:	2304      	movs	r3, #4
 800e6ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6ee:	e016      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e6f0:	2308      	movs	r3, #8
 800e6f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6f6:	e012      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e6f8:	2310      	movs	r3, #16
 800e6fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6fe:	e00e      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e700:	2320      	movs	r3, #32
 800e702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e706:	e00a      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e708:	2340      	movs	r3, #64	; 0x40
 800e70a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e70e:	e006      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e710:	2380      	movs	r3, #128	; 0x80
 800e712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e716:	e002      	b.n	800e71e <UART_SetConfig+0x5a6>
 800e718:	2380      	movs	r3, #128	; 0x80
 800e71a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e71e:	697b      	ldr	r3, [r7, #20]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	4a3f      	ldr	r2, [pc, #252]	; (800e820 <UART_SetConfig+0x6a8>)
 800e724:	4293      	cmp	r3, r2
 800e726:	f040 80f8 	bne.w	800e91a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e72a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e72e:	2b20      	cmp	r3, #32
 800e730:	dc46      	bgt.n	800e7c0 <UART_SetConfig+0x648>
 800e732:	2b02      	cmp	r3, #2
 800e734:	f2c0 8082 	blt.w	800e83c <UART_SetConfig+0x6c4>
 800e738:	3b02      	subs	r3, #2
 800e73a:	2b1e      	cmp	r3, #30
 800e73c:	d87e      	bhi.n	800e83c <UART_SetConfig+0x6c4>
 800e73e:	a201      	add	r2, pc, #4	; (adr r2, 800e744 <UART_SetConfig+0x5cc>)
 800e740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e744:	0800e7c7 	.word	0x0800e7c7
 800e748:	0800e83d 	.word	0x0800e83d
 800e74c:	0800e7cf 	.word	0x0800e7cf
 800e750:	0800e83d 	.word	0x0800e83d
 800e754:	0800e83d 	.word	0x0800e83d
 800e758:	0800e83d 	.word	0x0800e83d
 800e75c:	0800e7df 	.word	0x0800e7df
 800e760:	0800e83d 	.word	0x0800e83d
 800e764:	0800e83d 	.word	0x0800e83d
 800e768:	0800e83d 	.word	0x0800e83d
 800e76c:	0800e83d 	.word	0x0800e83d
 800e770:	0800e83d 	.word	0x0800e83d
 800e774:	0800e83d 	.word	0x0800e83d
 800e778:	0800e83d 	.word	0x0800e83d
 800e77c:	0800e7ef 	.word	0x0800e7ef
 800e780:	0800e83d 	.word	0x0800e83d
 800e784:	0800e83d 	.word	0x0800e83d
 800e788:	0800e83d 	.word	0x0800e83d
 800e78c:	0800e83d 	.word	0x0800e83d
 800e790:	0800e83d 	.word	0x0800e83d
 800e794:	0800e83d 	.word	0x0800e83d
 800e798:	0800e83d 	.word	0x0800e83d
 800e79c:	0800e83d 	.word	0x0800e83d
 800e7a0:	0800e83d 	.word	0x0800e83d
 800e7a4:	0800e83d 	.word	0x0800e83d
 800e7a8:	0800e83d 	.word	0x0800e83d
 800e7ac:	0800e83d 	.word	0x0800e83d
 800e7b0:	0800e83d 	.word	0x0800e83d
 800e7b4:	0800e83d 	.word	0x0800e83d
 800e7b8:	0800e83d 	.word	0x0800e83d
 800e7bc:	0800e82f 	.word	0x0800e82f
 800e7c0:	2b40      	cmp	r3, #64	; 0x40
 800e7c2:	d037      	beq.n	800e834 <UART_SetConfig+0x6bc>
 800e7c4:	e03a      	b.n	800e83c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e7c6:	f7fe fb8d 	bl	800cee4 <HAL_RCCEx_GetD3PCLK1Freq>
 800e7ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e7cc:	e03c      	b.n	800e848 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e7ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f7fe fb9c 	bl	800cf10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7dc:	e034      	b.n	800e848 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e7de:	f107 0318 	add.w	r3, r7, #24
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f7fe fce8 	bl	800d1b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e7e8:	69fb      	ldr	r3, [r7, #28]
 800e7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7ec:	e02c      	b.n	800e848 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e7ee:	4b09      	ldr	r3, [pc, #36]	; (800e814 <UART_SetConfig+0x69c>)
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	f003 0320 	and.w	r3, r3, #32
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d016      	beq.n	800e828 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e7fa:	4b06      	ldr	r3, [pc, #24]	; (800e814 <UART_SetConfig+0x69c>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	08db      	lsrs	r3, r3, #3
 800e800:	f003 0303 	and.w	r3, r3, #3
 800e804:	4a07      	ldr	r2, [pc, #28]	; (800e824 <UART_SetConfig+0x6ac>)
 800e806:	fa22 f303 	lsr.w	r3, r2, r3
 800e80a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e80c:	e01c      	b.n	800e848 <UART_SetConfig+0x6d0>
 800e80e:	bf00      	nop
 800e810:	40011400 	.word	0x40011400
 800e814:	58024400 	.word	0x58024400
 800e818:	40007800 	.word	0x40007800
 800e81c:	40007c00 	.word	0x40007c00
 800e820:	58000c00 	.word	0x58000c00
 800e824:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e828:	4b9d      	ldr	r3, [pc, #628]	; (800eaa0 <UART_SetConfig+0x928>)
 800e82a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e82c:	e00c      	b.n	800e848 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e82e:	4b9d      	ldr	r3, [pc, #628]	; (800eaa4 <UART_SetConfig+0x92c>)
 800e830:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e832:	e009      	b.n	800e848 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e834:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e838:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e83a:	e005      	b.n	800e848 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e83c:	2300      	movs	r3, #0
 800e83e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e840:	2301      	movs	r3, #1
 800e842:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e846:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	f000 81de 	beq.w	800ec0c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e850:	697b      	ldr	r3, [r7, #20]
 800e852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e854:	4a94      	ldr	r2, [pc, #592]	; (800eaa8 <UART_SetConfig+0x930>)
 800e856:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e85a:	461a      	mov	r2, r3
 800e85c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e85e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e862:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e864:	697b      	ldr	r3, [r7, #20]
 800e866:	685a      	ldr	r2, [r3, #4]
 800e868:	4613      	mov	r3, r2
 800e86a:	005b      	lsls	r3, r3, #1
 800e86c:	4413      	add	r3, r2
 800e86e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e870:	429a      	cmp	r2, r3
 800e872:	d305      	bcc.n	800e880 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e874:	697b      	ldr	r3, [r7, #20]
 800e876:	685b      	ldr	r3, [r3, #4]
 800e878:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e87a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e87c:	429a      	cmp	r2, r3
 800e87e:	d903      	bls.n	800e888 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e880:	2301      	movs	r3, #1
 800e882:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e886:	e1c1      	b.n	800ec0c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e88a:	2200      	movs	r2, #0
 800e88c:	60bb      	str	r3, [r7, #8]
 800e88e:	60fa      	str	r2, [r7, #12]
 800e890:	697b      	ldr	r3, [r7, #20]
 800e892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e894:	4a84      	ldr	r2, [pc, #528]	; (800eaa8 <UART_SetConfig+0x930>)
 800e896:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e89a:	b29b      	uxth	r3, r3
 800e89c:	2200      	movs	r2, #0
 800e89e:	603b      	str	r3, [r7, #0]
 800e8a0:	607a      	str	r2, [r7, #4]
 800e8a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e8a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e8aa:	f7f1 ff3d 	bl	8000728 <__aeabi_uldivmod>
 800e8ae:	4602      	mov	r2, r0
 800e8b0:	460b      	mov	r3, r1
 800e8b2:	4610      	mov	r0, r2
 800e8b4:	4619      	mov	r1, r3
 800e8b6:	f04f 0200 	mov.w	r2, #0
 800e8ba:	f04f 0300 	mov.w	r3, #0
 800e8be:	020b      	lsls	r3, r1, #8
 800e8c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e8c4:	0202      	lsls	r2, r0, #8
 800e8c6:	6979      	ldr	r1, [r7, #20]
 800e8c8:	6849      	ldr	r1, [r1, #4]
 800e8ca:	0849      	lsrs	r1, r1, #1
 800e8cc:	2000      	movs	r0, #0
 800e8ce:	460c      	mov	r4, r1
 800e8d0:	4605      	mov	r5, r0
 800e8d2:	eb12 0804 	adds.w	r8, r2, r4
 800e8d6:	eb43 0905 	adc.w	r9, r3, r5
 800e8da:	697b      	ldr	r3, [r7, #20]
 800e8dc:	685b      	ldr	r3, [r3, #4]
 800e8de:	2200      	movs	r2, #0
 800e8e0:	469a      	mov	sl, r3
 800e8e2:	4693      	mov	fp, r2
 800e8e4:	4652      	mov	r2, sl
 800e8e6:	465b      	mov	r3, fp
 800e8e8:	4640      	mov	r0, r8
 800e8ea:	4649      	mov	r1, r9
 800e8ec:	f7f1 ff1c 	bl	8000728 <__aeabi_uldivmod>
 800e8f0:	4602      	mov	r2, r0
 800e8f2:	460b      	mov	r3, r1
 800e8f4:	4613      	mov	r3, r2
 800e8f6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e8fe:	d308      	bcc.n	800e912 <UART_SetConfig+0x79a>
 800e900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e902:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e906:	d204      	bcs.n	800e912 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e908:	697b      	ldr	r3, [r7, #20]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e90e:	60da      	str	r2, [r3, #12]
 800e910:	e17c      	b.n	800ec0c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e912:	2301      	movs	r3, #1
 800e914:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e918:	e178      	b.n	800ec0c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e91a:	697b      	ldr	r3, [r7, #20]
 800e91c:	69db      	ldr	r3, [r3, #28]
 800e91e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e922:	f040 80c5 	bne.w	800eab0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e926:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e92a:	2b20      	cmp	r3, #32
 800e92c:	dc48      	bgt.n	800e9c0 <UART_SetConfig+0x848>
 800e92e:	2b00      	cmp	r3, #0
 800e930:	db7b      	blt.n	800ea2a <UART_SetConfig+0x8b2>
 800e932:	2b20      	cmp	r3, #32
 800e934:	d879      	bhi.n	800ea2a <UART_SetConfig+0x8b2>
 800e936:	a201      	add	r2, pc, #4	; (adr r2, 800e93c <UART_SetConfig+0x7c4>)
 800e938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e93c:	0800e9c7 	.word	0x0800e9c7
 800e940:	0800e9cf 	.word	0x0800e9cf
 800e944:	0800ea2b 	.word	0x0800ea2b
 800e948:	0800ea2b 	.word	0x0800ea2b
 800e94c:	0800e9d7 	.word	0x0800e9d7
 800e950:	0800ea2b 	.word	0x0800ea2b
 800e954:	0800ea2b 	.word	0x0800ea2b
 800e958:	0800ea2b 	.word	0x0800ea2b
 800e95c:	0800e9e7 	.word	0x0800e9e7
 800e960:	0800ea2b 	.word	0x0800ea2b
 800e964:	0800ea2b 	.word	0x0800ea2b
 800e968:	0800ea2b 	.word	0x0800ea2b
 800e96c:	0800ea2b 	.word	0x0800ea2b
 800e970:	0800ea2b 	.word	0x0800ea2b
 800e974:	0800ea2b 	.word	0x0800ea2b
 800e978:	0800ea2b 	.word	0x0800ea2b
 800e97c:	0800e9f7 	.word	0x0800e9f7
 800e980:	0800ea2b 	.word	0x0800ea2b
 800e984:	0800ea2b 	.word	0x0800ea2b
 800e988:	0800ea2b 	.word	0x0800ea2b
 800e98c:	0800ea2b 	.word	0x0800ea2b
 800e990:	0800ea2b 	.word	0x0800ea2b
 800e994:	0800ea2b 	.word	0x0800ea2b
 800e998:	0800ea2b 	.word	0x0800ea2b
 800e99c:	0800ea2b 	.word	0x0800ea2b
 800e9a0:	0800ea2b 	.word	0x0800ea2b
 800e9a4:	0800ea2b 	.word	0x0800ea2b
 800e9a8:	0800ea2b 	.word	0x0800ea2b
 800e9ac:	0800ea2b 	.word	0x0800ea2b
 800e9b0:	0800ea2b 	.word	0x0800ea2b
 800e9b4:	0800ea2b 	.word	0x0800ea2b
 800e9b8:	0800ea2b 	.word	0x0800ea2b
 800e9bc:	0800ea1d 	.word	0x0800ea1d
 800e9c0:	2b40      	cmp	r3, #64	; 0x40
 800e9c2:	d02e      	beq.n	800ea22 <UART_SetConfig+0x8aa>
 800e9c4:	e031      	b.n	800ea2a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e9c6:	f7fc fad7 	bl	800af78 <HAL_RCC_GetPCLK1Freq>
 800e9ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e9cc:	e033      	b.n	800ea36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e9ce:	f7fc fae9 	bl	800afa4 <HAL_RCC_GetPCLK2Freq>
 800e9d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e9d4:	e02f      	b.n	800ea36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e9d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f7fe fa98 	bl	800cf10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9e4:	e027      	b.n	800ea36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e9e6:	f107 0318 	add.w	r3, r7, #24
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	f7fe fbe4 	bl	800d1b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e9f0:	69fb      	ldr	r3, [r7, #28]
 800e9f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9f4:	e01f      	b.n	800ea36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e9f6:	4b2d      	ldr	r3, [pc, #180]	; (800eaac <UART_SetConfig+0x934>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	f003 0320 	and.w	r3, r3, #32
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d009      	beq.n	800ea16 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ea02:	4b2a      	ldr	r3, [pc, #168]	; (800eaac <UART_SetConfig+0x934>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	08db      	lsrs	r3, r3, #3
 800ea08:	f003 0303 	and.w	r3, r3, #3
 800ea0c:	4a24      	ldr	r2, [pc, #144]	; (800eaa0 <UART_SetConfig+0x928>)
 800ea0e:	fa22 f303 	lsr.w	r3, r2, r3
 800ea12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ea14:	e00f      	b.n	800ea36 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ea16:	4b22      	ldr	r3, [pc, #136]	; (800eaa0 <UART_SetConfig+0x928>)
 800ea18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea1a:	e00c      	b.n	800ea36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ea1c:	4b21      	ldr	r3, [pc, #132]	; (800eaa4 <UART_SetConfig+0x92c>)
 800ea1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea20:	e009      	b.n	800ea36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ea22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ea26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea28:	e005      	b.n	800ea36 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ea2e:	2301      	movs	r3, #1
 800ea30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ea34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ea36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	f000 80e7 	beq.w	800ec0c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ea3e:	697b      	ldr	r3, [r7, #20]
 800ea40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea42:	4a19      	ldr	r2, [pc, #100]	; (800eaa8 <UART_SetConfig+0x930>)
 800ea44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea48:	461a      	mov	r2, r3
 800ea4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea4c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea50:	005a      	lsls	r2, r3, #1
 800ea52:	697b      	ldr	r3, [r7, #20]
 800ea54:	685b      	ldr	r3, [r3, #4]
 800ea56:	085b      	lsrs	r3, r3, #1
 800ea58:	441a      	add	r2, r3
 800ea5a:	697b      	ldr	r3, [r7, #20]
 800ea5c:	685b      	ldr	r3, [r3, #4]
 800ea5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea62:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ea64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea66:	2b0f      	cmp	r3, #15
 800ea68:	d916      	bls.n	800ea98 <UART_SetConfig+0x920>
 800ea6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea70:	d212      	bcs.n	800ea98 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ea72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea74:	b29b      	uxth	r3, r3
 800ea76:	f023 030f 	bic.w	r3, r3, #15
 800ea7a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ea7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea7e:	085b      	lsrs	r3, r3, #1
 800ea80:	b29b      	uxth	r3, r3
 800ea82:	f003 0307 	and.w	r3, r3, #7
 800ea86:	b29a      	uxth	r2, r3
 800ea88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ea8a:	4313      	orrs	r3, r2
 800ea8c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ea94:	60da      	str	r2, [r3, #12]
 800ea96:	e0b9      	b.n	800ec0c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ea98:	2301      	movs	r3, #1
 800ea9a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ea9e:	e0b5      	b.n	800ec0c <UART_SetConfig+0xa94>
 800eaa0:	03d09000 	.word	0x03d09000
 800eaa4:	003d0900 	.word	0x003d0900
 800eaa8:	0801c480 	.word	0x0801c480
 800eaac:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800eab0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800eab4:	2b20      	cmp	r3, #32
 800eab6:	dc49      	bgt.n	800eb4c <UART_SetConfig+0x9d4>
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	db7c      	blt.n	800ebb6 <UART_SetConfig+0xa3e>
 800eabc:	2b20      	cmp	r3, #32
 800eabe:	d87a      	bhi.n	800ebb6 <UART_SetConfig+0xa3e>
 800eac0:	a201      	add	r2, pc, #4	; (adr r2, 800eac8 <UART_SetConfig+0x950>)
 800eac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eac6:	bf00      	nop
 800eac8:	0800eb53 	.word	0x0800eb53
 800eacc:	0800eb5b 	.word	0x0800eb5b
 800ead0:	0800ebb7 	.word	0x0800ebb7
 800ead4:	0800ebb7 	.word	0x0800ebb7
 800ead8:	0800eb63 	.word	0x0800eb63
 800eadc:	0800ebb7 	.word	0x0800ebb7
 800eae0:	0800ebb7 	.word	0x0800ebb7
 800eae4:	0800ebb7 	.word	0x0800ebb7
 800eae8:	0800eb73 	.word	0x0800eb73
 800eaec:	0800ebb7 	.word	0x0800ebb7
 800eaf0:	0800ebb7 	.word	0x0800ebb7
 800eaf4:	0800ebb7 	.word	0x0800ebb7
 800eaf8:	0800ebb7 	.word	0x0800ebb7
 800eafc:	0800ebb7 	.word	0x0800ebb7
 800eb00:	0800ebb7 	.word	0x0800ebb7
 800eb04:	0800ebb7 	.word	0x0800ebb7
 800eb08:	0800eb83 	.word	0x0800eb83
 800eb0c:	0800ebb7 	.word	0x0800ebb7
 800eb10:	0800ebb7 	.word	0x0800ebb7
 800eb14:	0800ebb7 	.word	0x0800ebb7
 800eb18:	0800ebb7 	.word	0x0800ebb7
 800eb1c:	0800ebb7 	.word	0x0800ebb7
 800eb20:	0800ebb7 	.word	0x0800ebb7
 800eb24:	0800ebb7 	.word	0x0800ebb7
 800eb28:	0800ebb7 	.word	0x0800ebb7
 800eb2c:	0800ebb7 	.word	0x0800ebb7
 800eb30:	0800ebb7 	.word	0x0800ebb7
 800eb34:	0800ebb7 	.word	0x0800ebb7
 800eb38:	0800ebb7 	.word	0x0800ebb7
 800eb3c:	0800ebb7 	.word	0x0800ebb7
 800eb40:	0800ebb7 	.word	0x0800ebb7
 800eb44:	0800ebb7 	.word	0x0800ebb7
 800eb48:	0800eba9 	.word	0x0800eba9
 800eb4c:	2b40      	cmp	r3, #64	; 0x40
 800eb4e:	d02e      	beq.n	800ebae <UART_SetConfig+0xa36>
 800eb50:	e031      	b.n	800ebb6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eb52:	f7fc fa11 	bl	800af78 <HAL_RCC_GetPCLK1Freq>
 800eb56:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eb58:	e033      	b.n	800ebc2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eb5a:	f7fc fa23 	bl	800afa4 <HAL_RCC_GetPCLK2Freq>
 800eb5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eb60:	e02f      	b.n	800ebc2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eb62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eb66:	4618      	mov	r0, r3
 800eb68:	f7fe f9d2 	bl	800cf10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800eb6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb70:	e027      	b.n	800ebc2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eb72:	f107 0318 	add.w	r3, r7, #24
 800eb76:	4618      	mov	r0, r3
 800eb78:	f7fe fb1e 	bl	800d1b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eb7c:	69fb      	ldr	r3, [r7, #28]
 800eb7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb80:	e01f      	b.n	800ebc2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eb82:	4b2d      	ldr	r3, [pc, #180]	; (800ec38 <UART_SetConfig+0xac0>)
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	f003 0320 	and.w	r3, r3, #32
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d009      	beq.n	800eba2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800eb8e:	4b2a      	ldr	r3, [pc, #168]	; (800ec38 <UART_SetConfig+0xac0>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	08db      	lsrs	r3, r3, #3
 800eb94:	f003 0303 	and.w	r3, r3, #3
 800eb98:	4a28      	ldr	r2, [pc, #160]	; (800ec3c <UART_SetConfig+0xac4>)
 800eb9a:	fa22 f303 	lsr.w	r3, r2, r3
 800eb9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800eba0:	e00f      	b.n	800ebc2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800eba2:	4b26      	ldr	r3, [pc, #152]	; (800ec3c <UART_SetConfig+0xac4>)
 800eba4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eba6:	e00c      	b.n	800ebc2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800eba8:	4b25      	ldr	r3, [pc, #148]	; (800ec40 <UART_SetConfig+0xac8>)
 800ebaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebac:	e009      	b.n	800ebc2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ebae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ebb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebb4:	e005      	b.n	800ebc2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ebba:	2301      	movs	r3, #1
 800ebbc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ebc0:	bf00      	nop
    }

    if (pclk != 0U)
 800ebc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d021      	beq.n	800ec0c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ebc8:	697b      	ldr	r3, [r7, #20]
 800ebca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebcc:	4a1d      	ldr	r2, [pc, #116]	; (800ec44 <UART_SetConfig+0xacc>)
 800ebce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ebd2:	461a      	mov	r2, r3
 800ebd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebd6:	fbb3 f2f2 	udiv	r2, r3, r2
 800ebda:	697b      	ldr	r3, [r7, #20]
 800ebdc:	685b      	ldr	r3, [r3, #4]
 800ebde:	085b      	lsrs	r3, r3, #1
 800ebe0:	441a      	add	r2, r3
 800ebe2:	697b      	ldr	r3, [r7, #20]
 800ebe4:	685b      	ldr	r3, [r3, #4]
 800ebe6:	fbb2 f3f3 	udiv	r3, r2, r3
 800ebea:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ebec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebee:	2b0f      	cmp	r3, #15
 800ebf0:	d909      	bls.n	800ec06 <UART_SetConfig+0xa8e>
 800ebf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ebf8:	d205      	bcs.n	800ec06 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ebfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebfc:	b29a      	uxth	r2, r3
 800ebfe:	697b      	ldr	r3, [r7, #20]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	60da      	str	r2, [r3, #12]
 800ec04:	e002      	b.n	800ec0c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ec06:	2301      	movs	r3, #1
 800ec08:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ec0c:	697b      	ldr	r3, [r7, #20]
 800ec0e:	2201      	movs	r2, #1
 800ec10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ec14:	697b      	ldr	r3, [r7, #20]
 800ec16:	2201      	movs	r2, #1
 800ec18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ec1c:	697b      	ldr	r3, [r7, #20]
 800ec1e:	2200      	movs	r2, #0
 800ec20:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ec22:	697b      	ldr	r3, [r7, #20]
 800ec24:	2200      	movs	r2, #0
 800ec26:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ec28:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	3748      	adds	r7, #72	; 0x48
 800ec30:	46bd      	mov	sp, r7
 800ec32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ec36:	bf00      	nop
 800ec38:	58024400 	.word	0x58024400
 800ec3c:	03d09000 	.word	0x03d09000
 800ec40:	003d0900 	.word	0x003d0900
 800ec44:	0801c480 	.word	0x0801c480

0800ec48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ec48:	b480      	push	{r7}
 800ec4a:	b083      	sub	sp, #12
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec54:	f003 0301 	and.w	r3, r3, #1
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d00a      	beq.n	800ec72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	685b      	ldr	r3, [r3, #4]
 800ec62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	430a      	orrs	r2, r1
 800ec70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec76:	f003 0302 	and.w	r3, r3, #2
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d00a      	beq.n	800ec94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	685b      	ldr	r3, [r3, #4]
 800ec84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	430a      	orrs	r2, r1
 800ec92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec98:	f003 0304 	and.w	r3, r3, #4
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d00a      	beq.n	800ecb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	685b      	ldr	r3, [r3, #4]
 800eca6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	430a      	orrs	r2, r1
 800ecb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecba:	f003 0308 	and.w	r3, r3, #8
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d00a      	beq.n	800ecd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	685b      	ldr	r3, [r3, #4]
 800ecc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	430a      	orrs	r2, r1
 800ecd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecdc:	f003 0310 	and.w	r3, r3, #16
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d00a      	beq.n	800ecfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	689b      	ldr	r3, [r3, #8]
 800ecea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	430a      	orrs	r2, r1
 800ecf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecfe:	f003 0320 	and.w	r3, r3, #32
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d00a      	beq.n	800ed1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	689b      	ldr	r3, [r3, #8]
 800ed0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	430a      	orrs	r2, r1
 800ed1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d01a      	beq.n	800ed5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	685b      	ldr	r3, [r3, #4]
 800ed2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	430a      	orrs	r2, r1
 800ed3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ed46:	d10a      	bne.n	800ed5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	685b      	ldr	r3, [r3, #4]
 800ed4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	430a      	orrs	r2, r1
 800ed5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d00a      	beq.n	800ed80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	685b      	ldr	r3, [r3, #4]
 800ed70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	430a      	orrs	r2, r1
 800ed7e:	605a      	str	r2, [r3, #4]
  }
}
 800ed80:	bf00      	nop
 800ed82:	370c      	adds	r7, #12
 800ed84:	46bd      	mov	sp, r7
 800ed86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8a:	4770      	bx	lr

0800ed8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b098      	sub	sp, #96	; 0x60
 800ed90:	af02      	add	r7, sp, #8
 800ed92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2200      	movs	r2, #0
 800ed98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ed9c:	f7f4 fb4a 	bl	8003434 <HAL_GetTick>
 800eda0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	f003 0308 	and.w	r3, r3, #8
 800edac:	2b08      	cmp	r3, #8
 800edae:	d12f      	bne.n	800ee10 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800edb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800edb4:	9300      	str	r3, [sp, #0]
 800edb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800edb8:	2200      	movs	r2, #0
 800edba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f000 f88e 	bl	800eee0 <UART_WaitOnFlagUntilTimeout>
 800edc4:	4603      	mov	r3, r0
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d022      	beq.n	800ee10 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edd2:	e853 3f00 	ldrex	r3, [r3]
 800edd6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800edd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800edde:	653b      	str	r3, [r7, #80]	; 0x50
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	461a      	mov	r2, r3
 800ede6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ede8:	647b      	str	r3, [r7, #68]	; 0x44
 800edea:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800edee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800edf0:	e841 2300 	strex	r3, r2, [r1]
 800edf4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800edf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d1e6      	bne.n	800edca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	2220      	movs	r2, #32
 800ee00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2200      	movs	r2, #0
 800ee08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ee0c:	2303      	movs	r3, #3
 800ee0e:	e063      	b.n	800eed8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	f003 0304 	and.w	r3, r3, #4
 800ee1a:	2b04      	cmp	r3, #4
 800ee1c:	d149      	bne.n	800eeb2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ee1e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ee22:	9300      	str	r3, [sp, #0]
 800ee24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee26:	2200      	movs	r2, #0
 800ee28:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ee2c:	6878      	ldr	r0, [r7, #4]
 800ee2e:	f000 f857 	bl	800eee0 <UART_WaitOnFlagUntilTimeout>
 800ee32:	4603      	mov	r3, r0
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d03c      	beq.n	800eeb2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee40:	e853 3f00 	ldrex	r3, [r3]
 800ee44:	623b      	str	r3, [r7, #32]
   return(result);
 800ee46:	6a3b      	ldr	r3, [r7, #32]
 800ee48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ee4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	461a      	mov	r2, r3
 800ee54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee56:	633b      	str	r3, [r7, #48]	; 0x30
 800ee58:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ee5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee5e:	e841 2300 	strex	r3, r2, [r1]
 800ee62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ee64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d1e6      	bne.n	800ee38 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	3308      	adds	r3, #8
 800ee70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee72:	693b      	ldr	r3, [r7, #16]
 800ee74:	e853 3f00 	ldrex	r3, [r3]
 800ee78:	60fb      	str	r3, [r7, #12]
   return(result);
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	f023 0301 	bic.w	r3, r3, #1
 800ee80:	64bb      	str	r3, [r7, #72]	; 0x48
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	3308      	adds	r3, #8
 800ee88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ee8a:	61fa      	str	r2, [r7, #28]
 800ee8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee8e:	69b9      	ldr	r1, [r7, #24]
 800ee90:	69fa      	ldr	r2, [r7, #28]
 800ee92:	e841 2300 	strex	r3, r2, [r1]
 800ee96:	617b      	str	r3, [r7, #20]
   return(result);
 800ee98:	697b      	ldr	r3, [r7, #20]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d1e5      	bne.n	800ee6a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	2220      	movs	r2, #32
 800eea2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	2200      	movs	r2, #0
 800eeaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eeae:	2303      	movs	r3, #3
 800eeb0:	e012      	b.n	800eed8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2220      	movs	r2, #32
 800eeb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	2220      	movs	r2, #32
 800eebe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	2200      	movs	r2, #0
 800eec6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2200      	movs	r2, #0
 800eecc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	2200      	movs	r2, #0
 800eed2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800eed6:	2300      	movs	r3, #0
}
 800eed8:	4618      	mov	r0, r3
 800eeda:	3758      	adds	r7, #88	; 0x58
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}

0800eee0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b084      	sub	sp, #16
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	60f8      	str	r0, [r7, #12]
 800eee8:	60b9      	str	r1, [r7, #8]
 800eeea:	603b      	str	r3, [r7, #0]
 800eeec:	4613      	mov	r3, r2
 800eeee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eef0:	e049      	b.n	800ef86 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eef2:	69bb      	ldr	r3, [r7, #24]
 800eef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eef8:	d045      	beq.n	800ef86 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eefa:	f7f4 fa9b 	bl	8003434 <HAL_GetTick>
 800eefe:	4602      	mov	r2, r0
 800ef00:	683b      	ldr	r3, [r7, #0]
 800ef02:	1ad3      	subs	r3, r2, r3
 800ef04:	69ba      	ldr	r2, [r7, #24]
 800ef06:	429a      	cmp	r2, r3
 800ef08:	d302      	bcc.n	800ef10 <UART_WaitOnFlagUntilTimeout+0x30>
 800ef0a:	69bb      	ldr	r3, [r7, #24]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d101      	bne.n	800ef14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ef10:	2303      	movs	r3, #3
 800ef12:	e048      	b.n	800efa6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	f003 0304 	and.w	r3, r3, #4
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d031      	beq.n	800ef86 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	69db      	ldr	r3, [r3, #28]
 800ef28:	f003 0308 	and.w	r3, r3, #8
 800ef2c:	2b08      	cmp	r3, #8
 800ef2e:	d110      	bne.n	800ef52 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	2208      	movs	r2, #8
 800ef36:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800ef38:	68f8      	ldr	r0, [r7, #12]
 800ef3a:	f000 f839 	bl	800efb0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	2208      	movs	r2, #8
 800ef42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	2200      	movs	r2, #0
 800ef4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800ef4e:	2301      	movs	r3, #1
 800ef50:	e029      	b.n	800efa6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	69db      	ldr	r3, [r3, #28]
 800ef58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ef5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ef60:	d111      	bne.n	800ef86 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ef6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ef6c:	68f8      	ldr	r0, [r7, #12]
 800ef6e:	f000 f81f 	bl	800efb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	2220      	movs	r2, #32
 800ef76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ef82:	2303      	movs	r3, #3
 800ef84:	e00f      	b.n	800efa6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	69da      	ldr	r2, [r3, #28]
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	4013      	ands	r3, r2
 800ef90:	68ba      	ldr	r2, [r7, #8]
 800ef92:	429a      	cmp	r2, r3
 800ef94:	bf0c      	ite	eq
 800ef96:	2301      	moveq	r3, #1
 800ef98:	2300      	movne	r3, #0
 800ef9a:	b2db      	uxtb	r3, r3
 800ef9c:	461a      	mov	r2, r3
 800ef9e:	79fb      	ldrb	r3, [r7, #7]
 800efa0:	429a      	cmp	r2, r3
 800efa2:	d0a6      	beq.n	800eef2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800efa4:	2300      	movs	r3, #0
}
 800efa6:	4618      	mov	r0, r3
 800efa8:	3710      	adds	r7, #16
 800efaa:	46bd      	mov	sp, r7
 800efac:	bd80      	pop	{r7, pc}
	...

0800efb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800efb0:	b480      	push	{r7}
 800efb2:	b095      	sub	sp, #84	; 0x54
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efc0:	e853 3f00 	ldrex	r3, [r3]
 800efc4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800efc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800efcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	461a      	mov	r2, r3
 800efd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efd6:	643b      	str	r3, [r7, #64]	; 0x40
 800efd8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efda:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800efdc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800efde:	e841 2300 	strex	r3, r2, [r1]
 800efe2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800efe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d1e6      	bne.n	800efb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	3308      	adds	r3, #8
 800eff0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eff2:	6a3b      	ldr	r3, [r7, #32]
 800eff4:	e853 3f00 	ldrex	r3, [r3]
 800eff8:	61fb      	str	r3, [r7, #28]
   return(result);
 800effa:	69fa      	ldr	r2, [r7, #28]
 800effc:	4b1e      	ldr	r3, [pc, #120]	; (800f078 <UART_EndRxTransfer+0xc8>)
 800effe:	4013      	ands	r3, r2
 800f000:	64bb      	str	r3, [r7, #72]	; 0x48
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	3308      	adds	r3, #8
 800f008:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f00a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f00c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f00e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f012:	e841 2300 	strex	r3, r2, [r1]
 800f016:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d1e5      	bne.n	800efea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f022:	2b01      	cmp	r3, #1
 800f024:	d118      	bne.n	800f058 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	e853 3f00 	ldrex	r3, [r3]
 800f032:	60bb      	str	r3, [r7, #8]
   return(result);
 800f034:	68bb      	ldr	r3, [r7, #8]
 800f036:	f023 0310 	bic.w	r3, r3, #16
 800f03a:	647b      	str	r3, [r7, #68]	; 0x44
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	461a      	mov	r2, r3
 800f042:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f044:	61bb      	str	r3, [r7, #24]
 800f046:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f048:	6979      	ldr	r1, [r7, #20]
 800f04a:	69ba      	ldr	r2, [r7, #24]
 800f04c:	e841 2300 	strex	r3, r2, [r1]
 800f050:	613b      	str	r3, [r7, #16]
   return(result);
 800f052:	693b      	ldr	r3, [r7, #16]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d1e6      	bne.n	800f026 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	2220      	movs	r2, #32
 800f05c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2200      	movs	r2, #0
 800f064:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	2200      	movs	r2, #0
 800f06a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f06c:	bf00      	nop
 800f06e:	3754      	adds	r7, #84	; 0x54
 800f070:	46bd      	mov	sp, r7
 800f072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f076:	4770      	bx	lr
 800f078:	effffffe 	.word	0xeffffffe

0800f07c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f07c:	b480      	push	{r7}
 800f07e:	b085      	sub	sp, #20
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f08a:	2b01      	cmp	r3, #1
 800f08c:	d101      	bne.n	800f092 <HAL_UARTEx_DisableFifoMode+0x16>
 800f08e:	2302      	movs	r3, #2
 800f090:	e027      	b.n	800f0e2 <HAL_UARTEx_DisableFifoMode+0x66>
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	2201      	movs	r2, #1
 800f096:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	2224      	movs	r2, #36	; 0x24
 800f09e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	681a      	ldr	r2, [r3, #0]
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	f022 0201 	bic.w	r2, r2, #1
 800f0b8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f0c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	68fa      	ldr	r2, [r7, #12]
 800f0ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2220      	movs	r2, #32
 800f0d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2200      	movs	r2, #0
 800f0dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f0e0:	2300      	movs	r3, #0
}
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	3714      	adds	r7, #20
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ec:	4770      	bx	lr

0800f0ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f0ee:	b580      	push	{r7, lr}
 800f0f0:	b084      	sub	sp, #16
 800f0f2:	af00      	add	r7, sp, #0
 800f0f4:	6078      	str	r0, [r7, #4]
 800f0f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f0fe:	2b01      	cmp	r3, #1
 800f100:	d101      	bne.n	800f106 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f102:	2302      	movs	r3, #2
 800f104:	e02d      	b.n	800f162 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	2201      	movs	r2, #1
 800f10a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	2224      	movs	r2, #36	; 0x24
 800f112:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	681a      	ldr	r2, [r3, #0]
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	f022 0201 	bic.w	r2, r2, #1
 800f12c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	689b      	ldr	r3, [r3, #8]
 800f134:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	683a      	ldr	r2, [r7, #0]
 800f13e:	430a      	orrs	r2, r1
 800f140:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	f000 f850 	bl	800f1e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	68fa      	ldr	r2, [r7, #12]
 800f14e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	2220      	movs	r2, #32
 800f154:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	2200      	movs	r2, #0
 800f15c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f160:	2300      	movs	r3, #0
}
 800f162:	4618      	mov	r0, r3
 800f164:	3710      	adds	r7, #16
 800f166:	46bd      	mov	sp, r7
 800f168:	bd80      	pop	{r7, pc}

0800f16a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f16a:	b580      	push	{r7, lr}
 800f16c:	b084      	sub	sp, #16
 800f16e:	af00      	add	r7, sp, #0
 800f170:	6078      	str	r0, [r7, #4]
 800f172:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f17a:	2b01      	cmp	r3, #1
 800f17c:	d101      	bne.n	800f182 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f17e:	2302      	movs	r3, #2
 800f180:	e02d      	b.n	800f1de <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	2201      	movs	r2, #1
 800f186:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	2224      	movs	r2, #36	; 0x24
 800f18e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	681a      	ldr	r2, [r3, #0]
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	f022 0201 	bic.w	r2, r2, #1
 800f1a8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	689b      	ldr	r3, [r3, #8]
 800f1b0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	683a      	ldr	r2, [r7, #0]
 800f1ba:	430a      	orrs	r2, r1
 800f1bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f1be:	6878      	ldr	r0, [r7, #4]
 800f1c0:	f000 f812 	bl	800f1e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	68fa      	ldr	r2, [r7, #12]
 800f1ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	2220      	movs	r2, #32
 800f1d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f1dc:	2300      	movs	r3, #0
}
 800f1de:	4618      	mov	r0, r3
 800f1e0:	3710      	adds	r7, #16
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bd80      	pop	{r7, pc}
	...

0800f1e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f1e8:	b480      	push	{r7}
 800f1ea:	b085      	sub	sp, #20
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d108      	bne.n	800f20a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	2201      	movs	r2, #1
 800f1fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	2201      	movs	r2, #1
 800f204:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f208:	e031      	b.n	800f26e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f20a:	2310      	movs	r3, #16
 800f20c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f20e:	2310      	movs	r3, #16
 800f210:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	689b      	ldr	r3, [r3, #8]
 800f218:	0e5b      	lsrs	r3, r3, #25
 800f21a:	b2db      	uxtb	r3, r3
 800f21c:	f003 0307 	and.w	r3, r3, #7
 800f220:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	689b      	ldr	r3, [r3, #8]
 800f228:	0f5b      	lsrs	r3, r3, #29
 800f22a:	b2db      	uxtb	r3, r3
 800f22c:	f003 0307 	and.w	r3, r3, #7
 800f230:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f232:	7bbb      	ldrb	r3, [r7, #14]
 800f234:	7b3a      	ldrb	r2, [r7, #12]
 800f236:	4911      	ldr	r1, [pc, #68]	; (800f27c <UARTEx_SetNbDataToProcess+0x94>)
 800f238:	5c8a      	ldrb	r2, [r1, r2]
 800f23a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f23e:	7b3a      	ldrb	r2, [r7, #12]
 800f240:	490f      	ldr	r1, [pc, #60]	; (800f280 <UARTEx_SetNbDataToProcess+0x98>)
 800f242:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f244:	fb93 f3f2 	sdiv	r3, r3, r2
 800f248:	b29a      	uxth	r2, r3
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f250:	7bfb      	ldrb	r3, [r7, #15]
 800f252:	7b7a      	ldrb	r2, [r7, #13]
 800f254:	4909      	ldr	r1, [pc, #36]	; (800f27c <UARTEx_SetNbDataToProcess+0x94>)
 800f256:	5c8a      	ldrb	r2, [r1, r2]
 800f258:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f25c:	7b7a      	ldrb	r2, [r7, #13]
 800f25e:	4908      	ldr	r1, [pc, #32]	; (800f280 <UARTEx_SetNbDataToProcess+0x98>)
 800f260:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f262:	fb93 f3f2 	sdiv	r3, r3, r2
 800f266:	b29a      	uxth	r2, r3
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f26e:	bf00      	nop
 800f270:	3714      	adds	r7, #20
 800f272:	46bd      	mov	sp, r7
 800f274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f278:	4770      	bx	lr
 800f27a:	bf00      	nop
 800f27c:	0801c498 	.word	0x0801c498
 800f280:	0801c4a0 	.word	0x0801c4a0

0800f284 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f284:	b084      	sub	sp, #16
 800f286:	b580      	push	{r7, lr}
 800f288:	b084      	sub	sp, #16
 800f28a:	af00      	add	r7, sp, #0
 800f28c:	6078      	str	r0, [r7, #4]
 800f28e:	f107 001c 	add.w	r0, r7, #28
 800f292:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f298:	2b01      	cmp	r3, #1
 800f29a:	d120      	bne.n	800f2de <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	68da      	ldr	r2, [r3, #12]
 800f2ac:	4b2a      	ldr	r3, [pc, #168]	; (800f358 <USB_CoreInit+0xd4>)
 800f2ae:	4013      	ands	r3, r2
 800f2b0:	687a      	ldr	r2, [r7, #4]
 800f2b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	68db      	ldr	r3, [r3, #12]
 800f2b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f2c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f2c2:	2b01      	cmp	r3, #1
 800f2c4:	d105      	bne.n	800f2d2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	68db      	ldr	r3, [r3, #12]
 800f2ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f2d2:	6878      	ldr	r0, [r7, #4]
 800f2d4:	f000 f9ee 	bl	800f6b4 <USB_CoreReset>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	73fb      	strb	r3, [r7, #15]
 800f2dc:	e01a      	b.n	800f314 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	68db      	ldr	r3, [r3, #12]
 800f2e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f2ea:	6878      	ldr	r0, [r7, #4]
 800f2ec:	f000 f9e2 	bl	800f6b4 <USB_CoreReset>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f2f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d106      	bne.n	800f308 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	639a      	str	r2, [r3, #56]	; 0x38
 800f306:	e005      	b.n	800f314 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f30c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f316:	2b01      	cmp	r3, #1
 800f318:	d116      	bne.n	800f348 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f31e:	b29a      	uxth	r2, r3
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f328:	4b0c      	ldr	r3, [pc, #48]	; (800f35c <USB_CoreInit+0xd8>)
 800f32a:	4313      	orrs	r3, r2
 800f32c:	687a      	ldr	r2, [r7, #4]
 800f32e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	689b      	ldr	r3, [r3, #8]
 800f334:	f043 0206 	orr.w	r2, r3, #6
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	689b      	ldr	r3, [r3, #8]
 800f340:	f043 0220 	orr.w	r2, r3, #32
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f348:	7bfb      	ldrb	r3, [r7, #15]
}
 800f34a:	4618      	mov	r0, r3
 800f34c:	3710      	adds	r7, #16
 800f34e:	46bd      	mov	sp, r7
 800f350:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f354:	b004      	add	sp, #16
 800f356:	4770      	bx	lr
 800f358:	ffbdffbf 	.word	0xffbdffbf
 800f35c:	03ee0000 	.word	0x03ee0000

0800f360 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f360:	b480      	push	{r7}
 800f362:	b083      	sub	sp, #12
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	689b      	ldr	r3, [r3, #8]
 800f36c:	f043 0201 	orr.w	r2, r3, #1
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f374:	2300      	movs	r3, #0
}
 800f376:	4618      	mov	r0, r3
 800f378:	370c      	adds	r7, #12
 800f37a:	46bd      	mov	sp, r7
 800f37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f380:	4770      	bx	lr

0800f382 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f382:	b480      	push	{r7}
 800f384:	b083      	sub	sp, #12
 800f386:	af00      	add	r7, sp, #0
 800f388:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	689b      	ldr	r3, [r3, #8]
 800f38e:	f023 0201 	bic.w	r2, r3, #1
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f396:	2300      	movs	r3, #0
}
 800f398:	4618      	mov	r0, r3
 800f39a:	370c      	adds	r7, #12
 800f39c:	46bd      	mov	sp, r7
 800f39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a2:	4770      	bx	lr

0800f3a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b084      	sub	sp, #16
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
 800f3ac:	460b      	mov	r3, r1
 800f3ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	68db      	ldr	r3, [r3, #12]
 800f3b8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f3c0:	78fb      	ldrb	r3, [r7, #3]
 800f3c2:	2b01      	cmp	r3, #1
 800f3c4:	d115      	bne.n	800f3f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	68db      	ldr	r3, [r3, #12]
 800f3ca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f3d2:	2001      	movs	r0, #1
 800f3d4:	f7f4 f83a 	bl	800344c <HAL_Delay>
      ms++;
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	3301      	adds	r3, #1
 800f3dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800f3de:	6878      	ldr	r0, [r7, #4]
 800f3e0:	f000 f95a 	bl	800f698 <USB_GetMode>
 800f3e4:	4603      	mov	r3, r0
 800f3e6:	2b01      	cmp	r3, #1
 800f3e8:	d01e      	beq.n	800f428 <USB_SetCurrentMode+0x84>
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	2b31      	cmp	r3, #49	; 0x31
 800f3ee:	d9f0      	bls.n	800f3d2 <USB_SetCurrentMode+0x2e>
 800f3f0:	e01a      	b.n	800f428 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f3f2:	78fb      	ldrb	r3, [r7, #3]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d115      	bne.n	800f424 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	68db      	ldr	r3, [r3, #12]
 800f3fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f404:	2001      	movs	r0, #1
 800f406:	f7f4 f821 	bl	800344c <HAL_Delay>
      ms++;
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	3301      	adds	r3, #1
 800f40e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800f410:	6878      	ldr	r0, [r7, #4]
 800f412:	f000 f941 	bl	800f698 <USB_GetMode>
 800f416:	4603      	mov	r3, r0
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d005      	beq.n	800f428 <USB_SetCurrentMode+0x84>
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	2b31      	cmp	r3, #49	; 0x31
 800f420:	d9f0      	bls.n	800f404 <USB_SetCurrentMode+0x60>
 800f422:	e001      	b.n	800f428 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f424:	2301      	movs	r3, #1
 800f426:	e005      	b.n	800f434 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	2b32      	cmp	r3, #50	; 0x32
 800f42c:	d101      	bne.n	800f432 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f42e:	2301      	movs	r3, #1
 800f430:	e000      	b.n	800f434 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f432:	2300      	movs	r3, #0
}
 800f434:	4618      	mov	r0, r3
 800f436:	3710      	adds	r7, #16
 800f438:	46bd      	mov	sp, r7
 800f43a:	bd80      	pop	{r7, pc}

0800f43c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f43c:	b480      	push	{r7}
 800f43e:	b085      	sub	sp, #20
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
 800f444:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f446:	2300      	movs	r3, #0
 800f448:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	3301      	adds	r3, #1
 800f44e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	4a13      	ldr	r2, [pc, #76]	; (800f4a0 <USB_FlushTxFifo+0x64>)
 800f454:	4293      	cmp	r3, r2
 800f456:	d901      	bls.n	800f45c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800f458:	2303      	movs	r3, #3
 800f45a:	e01b      	b.n	800f494 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	691b      	ldr	r3, [r3, #16]
 800f460:	2b00      	cmp	r3, #0
 800f462:	daf2      	bge.n	800f44a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800f464:	2300      	movs	r3, #0
 800f466:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	019b      	lsls	r3, r3, #6
 800f46c:	f043 0220 	orr.w	r2, r3, #32
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	3301      	adds	r3, #1
 800f478:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	4a08      	ldr	r2, [pc, #32]	; (800f4a0 <USB_FlushTxFifo+0x64>)
 800f47e:	4293      	cmp	r3, r2
 800f480:	d901      	bls.n	800f486 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800f482:	2303      	movs	r3, #3
 800f484:	e006      	b.n	800f494 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	691b      	ldr	r3, [r3, #16]
 800f48a:	f003 0320 	and.w	r3, r3, #32
 800f48e:	2b20      	cmp	r3, #32
 800f490:	d0f0      	beq.n	800f474 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800f492:	2300      	movs	r3, #0
}
 800f494:	4618      	mov	r0, r3
 800f496:	3714      	adds	r7, #20
 800f498:	46bd      	mov	sp, r7
 800f49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49e:	4770      	bx	lr
 800f4a0:	00030d40 	.word	0x00030d40

0800f4a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f4a4:	b480      	push	{r7}
 800f4a6:	b085      	sub	sp, #20
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	3301      	adds	r3, #1
 800f4b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	4a11      	ldr	r2, [pc, #68]	; (800f500 <USB_FlushRxFifo+0x5c>)
 800f4ba:	4293      	cmp	r3, r2
 800f4bc:	d901      	bls.n	800f4c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800f4be:	2303      	movs	r3, #3
 800f4c0:	e018      	b.n	800f4f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	691b      	ldr	r3, [r3, #16]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	daf2      	bge.n	800f4b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	2210      	movs	r2, #16
 800f4d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	3301      	adds	r3, #1
 800f4d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	4a08      	ldr	r2, [pc, #32]	; (800f500 <USB_FlushRxFifo+0x5c>)
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	d901      	bls.n	800f4e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800f4e2:	2303      	movs	r3, #3
 800f4e4:	e006      	b.n	800f4f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	691b      	ldr	r3, [r3, #16]
 800f4ea:	f003 0310 	and.w	r3, r3, #16
 800f4ee:	2b10      	cmp	r3, #16
 800f4f0:	d0f0      	beq.n	800f4d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800f4f2:	2300      	movs	r3, #0
}
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	3714      	adds	r7, #20
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fe:	4770      	bx	lr
 800f500:	00030d40 	.word	0x00030d40

0800f504 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f504:	b480      	push	{r7}
 800f506:	b089      	sub	sp, #36	; 0x24
 800f508:	af00      	add	r7, sp, #0
 800f50a:	60f8      	str	r0, [r7, #12]
 800f50c:	60b9      	str	r1, [r7, #8]
 800f50e:	4611      	mov	r1, r2
 800f510:	461a      	mov	r2, r3
 800f512:	460b      	mov	r3, r1
 800f514:	71fb      	strb	r3, [r7, #7]
 800f516:	4613      	mov	r3, r2
 800f518:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800f522:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f526:	2b00      	cmp	r3, #0
 800f528:	d123      	bne.n	800f572 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f52a:	88bb      	ldrh	r3, [r7, #4]
 800f52c:	3303      	adds	r3, #3
 800f52e:	089b      	lsrs	r3, r3, #2
 800f530:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f532:	2300      	movs	r3, #0
 800f534:	61bb      	str	r3, [r7, #24]
 800f536:	e018      	b.n	800f56a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f538:	79fb      	ldrb	r3, [r7, #7]
 800f53a:	031a      	lsls	r2, r3, #12
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	4413      	add	r3, r2
 800f540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f544:	461a      	mov	r2, r3
 800f546:	69fb      	ldr	r3, [r7, #28]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f54c:	69fb      	ldr	r3, [r7, #28]
 800f54e:	3301      	adds	r3, #1
 800f550:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f552:	69fb      	ldr	r3, [r7, #28]
 800f554:	3301      	adds	r3, #1
 800f556:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f558:	69fb      	ldr	r3, [r7, #28]
 800f55a:	3301      	adds	r3, #1
 800f55c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f55e:	69fb      	ldr	r3, [r7, #28]
 800f560:	3301      	adds	r3, #1
 800f562:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f564:	69bb      	ldr	r3, [r7, #24]
 800f566:	3301      	adds	r3, #1
 800f568:	61bb      	str	r3, [r7, #24]
 800f56a:	69ba      	ldr	r2, [r7, #24]
 800f56c:	693b      	ldr	r3, [r7, #16]
 800f56e:	429a      	cmp	r2, r3
 800f570:	d3e2      	bcc.n	800f538 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f572:	2300      	movs	r3, #0
}
 800f574:	4618      	mov	r0, r3
 800f576:	3724      	adds	r7, #36	; 0x24
 800f578:	46bd      	mov	sp, r7
 800f57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57e:	4770      	bx	lr

0800f580 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f580:	b480      	push	{r7}
 800f582:	b08b      	sub	sp, #44	; 0x2c
 800f584:	af00      	add	r7, sp, #0
 800f586:	60f8      	str	r0, [r7, #12]
 800f588:	60b9      	str	r1, [r7, #8]
 800f58a:	4613      	mov	r3, r2
 800f58c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800f592:	68bb      	ldr	r3, [r7, #8]
 800f594:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800f596:	88fb      	ldrh	r3, [r7, #6]
 800f598:	089b      	lsrs	r3, r3, #2
 800f59a:	b29b      	uxth	r3, r3
 800f59c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800f59e:	88fb      	ldrh	r3, [r7, #6]
 800f5a0:	f003 0303 	and.w	r3, r3, #3
 800f5a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	623b      	str	r3, [r7, #32]
 800f5aa:	e014      	b.n	800f5d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f5ac:	69bb      	ldr	r3, [r7, #24]
 800f5ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f5b2:	681a      	ldr	r2, [r3, #0]
 800f5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b6:	601a      	str	r2, [r3, #0]
    pDest++;
 800f5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ba:	3301      	adds	r3, #1
 800f5bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c0:	3301      	adds	r3, #1
 800f5c2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c6:	3301      	adds	r3, #1
 800f5c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5cc:	3301      	adds	r3, #1
 800f5ce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800f5d0:	6a3b      	ldr	r3, [r7, #32]
 800f5d2:	3301      	adds	r3, #1
 800f5d4:	623b      	str	r3, [r7, #32]
 800f5d6:	6a3a      	ldr	r2, [r7, #32]
 800f5d8:	697b      	ldr	r3, [r7, #20]
 800f5da:	429a      	cmp	r2, r3
 800f5dc:	d3e6      	bcc.n	800f5ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800f5de:	8bfb      	ldrh	r3, [r7, #30]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d01e      	beq.n	800f622 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f5e8:	69bb      	ldr	r3, [r7, #24]
 800f5ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f5ee:	461a      	mov	r2, r3
 800f5f0:	f107 0310 	add.w	r3, r7, #16
 800f5f4:	6812      	ldr	r2, [r2, #0]
 800f5f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f5f8:	693a      	ldr	r2, [r7, #16]
 800f5fa:	6a3b      	ldr	r3, [r7, #32]
 800f5fc:	b2db      	uxtb	r3, r3
 800f5fe:	00db      	lsls	r3, r3, #3
 800f600:	fa22 f303 	lsr.w	r3, r2, r3
 800f604:	b2da      	uxtb	r2, r3
 800f606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f608:	701a      	strb	r2, [r3, #0]
      i++;
 800f60a:	6a3b      	ldr	r3, [r7, #32]
 800f60c:	3301      	adds	r3, #1
 800f60e:	623b      	str	r3, [r7, #32]
      pDest++;
 800f610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f612:	3301      	adds	r3, #1
 800f614:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800f616:	8bfb      	ldrh	r3, [r7, #30]
 800f618:	3b01      	subs	r3, #1
 800f61a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800f61c:	8bfb      	ldrh	r3, [r7, #30]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d1ea      	bne.n	800f5f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800f622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f624:	4618      	mov	r0, r3
 800f626:	372c      	adds	r7, #44	; 0x2c
 800f628:	46bd      	mov	sp, r7
 800f62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62e:	4770      	bx	lr

0800f630 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800f630:	b480      	push	{r7}
 800f632:	b085      	sub	sp, #20
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	695b      	ldr	r3, [r3, #20]
 800f63c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	699b      	ldr	r3, [r3, #24]
 800f642:	68fa      	ldr	r2, [r7, #12]
 800f644:	4013      	ands	r3, r2
 800f646:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f648:	68fb      	ldr	r3, [r7, #12]
}
 800f64a:	4618      	mov	r0, r3
 800f64c:	3714      	adds	r7, #20
 800f64e:	46bd      	mov	sp, r7
 800f650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f654:	4770      	bx	lr

0800f656 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800f656:	b480      	push	{r7}
 800f658:	b085      	sub	sp, #20
 800f65a:	af00      	add	r7, sp, #0
 800f65c:	6078      	str	r0, [r7, #4]
 800f65e:	460b      	mov	r3, r1
 800f660:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800f666:	78fb      	ldrb	r3, [r7, #3]
 800f668:	015a      	lsls	r2, r3, #5
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	4413      	add	r3, r2
 800f66e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f672:	689b      	ldr	r3, [r3, #8]
 800f674:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800f676:	78fb      	ldrb	r3, [r7, #3]
 800f678:	015a      	lsls	r2, r3, #5
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	4413      	add	r3, r2
 800f67e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f682:	68db      	ldr	r3, [r3, #12]
 800f684:	68ba      	ldr	r2, [r7, #8]
 800f686:	4013      	ands	r3, r2
 800f688:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f68a:	68bb      	ldr	r3, [r7, #8]
}
 800f68c:	4618      	mov	r0, r3
 800f68e:	3714      	adds	r7, #20
 800f690:	46bd      	mov	sp, r7
 800f692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f696:	4770      	bx	lr

0800f698 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f698:	b480      	push	{r7}
 800f69a:	b083      	sub	sp, #12
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	695b      	ldr	r3, [r3, #20]
 800f6a4:	f003 0301 	and.w	r3, r3, #1
}
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	370c      	adds	r7, #12
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b2:	4770      	bx	lr

0800f6b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f6b4:	b480      	push	{r7}
 800f6b6:	b085      	sub	sp, #20
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f6bc:	2300      	movs	r3, #0
 800f6be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	3301      	adds	r3, #1
 800f6c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	4a13      	ldr	r2, [pc, #76]	; (800f718 <USB_CoreReset+0x64>)
 800f6ca:	4293      	cmp	r3, r2
 800f6cc:	d901      	bls.n	800f6d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f6ce:	2303      	movs	r3, #3
 800f6d0:	e01b      	b.n	800f70a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	691b      	ldr	r3, [r3, #16]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	daf2      	bge.n	800f6c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f6da:	2300      	movs	r3, #0
 800f6dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	691b      	ldr	r3, [r3, #16]
 800f6e2:	f043 0201 	orr.w	r2, r3, #1
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	3301      	adds	r3, #1
 800f6ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	4a09      	ldr	r2, [pc, #36]	; (800f718 <USB_CoreReset+0x64>)
 800f6f4:	4293      	cmp	r3, r2
 800f6f6:	d901      	bls.n	800f6fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f6f8:	2303      	movs	r3, #3
 800f6fa:	e006      	b.n	800f70a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	691b      	ldr	r3, [r3, #16]
 800f700:	f003 0301 	and.w	r3, r3, #1
 800f704:	2b01      	cmp	r3, #1
 800f706:	d0f0      	beq.n	800f6ea <USB_CoreReset+0x36>

  return HAL_OK;
 800f708:	2300      	movs	r3, #0
}
 800f70a:	4618      	mov	r0, r3
 800f70c:	3714      	adds	r7, #20
 800f70e:	46bd      	mov	sp, r7
 800f710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f714:	4770      	bx	lr
 800f716:	bf00      	nop
 800f718:	00030d40 	.word	0x00030d40

0800f71c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f71c:	b084      	sub	sp, #16
 800f71e:	b580      	push	{r7, lr}
 800f720:	b086      	sub	sp, #24
 800f722:	af00      	add	r7, sp, #0
 800f724:	6078      	str	r0, [r7, #4]
 800f726:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f72a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f72e:	2300      	movs	r3, #0
 800f730:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f73c:	461a      	mov	r2, r3
 800f73e:	2300      	movs	r3, #0
 800f740:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f746:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f752:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f75e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f762:	2b00      	cmp	r3, #0
 800f764:	d018      	beq.n	800f798 <USB_HostInit+0x7c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800f766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f768:	2b01      	cmp	r3, #1
 800f76a:	d10a      	bne.n	800f782 <USB_HostInit+0x66>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	68fa      	ldr	r2, [r7, #12]
 800f776:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f77a:	f043 0304 	orr.w	r3, r3, #4
 800f77e:	6013      	str	r3, [r2, #0]
 800f780:	e014      	b.n	800f7ac <USB_HostInit+0x90>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	68fa      	ldr	r2, [r7, #12]
 800f78c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f790:	f023 0304 	bic.w	r3, r3, #4
 800f794:	6013      	str	r3, [r2, #0]
 800f796:	e009      	b.n	800f7ac <USB_HostInit+0x90>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	68fa      	ldr	r2, [r7, #12]
 800f7a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f7a6:	f023 0304 	bic.w	r3, r3, #4
 800f7aa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f7ac:	2110      	movs	r1, #16
 800f7ae:	6878      	ldr	r0, [r7, #4]
 800f7b0:	f7ff fe44 	bl	800f43c <USB_FlushTxFifo>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d001      	beq.n	800f7be <USB_HostInit+0xa2>
  {
    ret = HAL_ERROR;
 800f7ba:	2301      	movs	r3, #1
 800f7bc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f7be:	6878      	ldr	r0, [r7, #4]
 800f7c0:	f7ff fe70 	bl	800f4a4 <USB_FlushRxFifo>
 800f7c4:	4603      	mov	r3, r0
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d001      	beq.n	800f7ce <USB_HostInit+0xb2>
  {
    ret = HAL_ERROR;
 800f7ca:	2301      	movs	r3, #1
 800f7cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	613b      	str	r3, [r7, #16]
 800f7d2:	e015      	b.n	800f800 <USB_HostInit+0xe4>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800f7d4:	693b      	ldr	r3, [r7, #16]
 800f7d6:	015a      	lsls	r2, r3, #5
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	4413      	add	r3, r2
 800f7dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f7e0:	461a      	mov	r2, r3
 800f7e2:	f04f 33ff 	mov.w	r3, #4294967295
 800f7e6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800f7e8:	693b      	ldr	r3, [r7, #16]
 800f7ea:	015a      	lsls	r2, r3, #5
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	4413      	add	r3, r2
 800f7f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f7f4:	461a      	mov	r2, r3
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800f7fa:	693b      	ldr	r3, [r7, #16]
 800f7fc:	3301      	adds	r3, #1
 800f7fe:	613b      	str	r3, [r7, #16]
 800f800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f802:	693a      	ldr	r2, [r7, #16]
 800f804:	429a      	cmp	r2, r3
 800f806:	d3e5      	bcc.n	800f7d4 <USB_HostInit+0xb8>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	2200      	movs	r2, #0
 800f80c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	f04f 32ff 	mov.w	r2, #4294967295
 800f814:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f81a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d00b      	beq.n	800f83a <USB_HostInit+0x11e>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f828:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	4a13      	ldr	r2, [pc, #76]	; (800f87c <USB_HostInit+0x160>)
 800f82e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	4a13      	ldr	r2, [pc, #76]	; (800f880 <USB_HostInit+0x164>)
 800f834:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800f838:	e009      	b.n	800f84e <USB_HostInit+0x132>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	2280      	movs	r2, #128	; 0x80
 800f83e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	4a10      	ldr	r2, [pc, #64]	; (800f884 <USB_HostInit+0x168>)
 800f844:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	4a0f      	ldr	r2, [pc, #60]	; (800f888 <USB_HostInit+0x16c>)
 800f84a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f850:	2b00      	cmp	r3, #0
 800f852:	d105      	bne.n	800f860 <USB_HostInit+0x144>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	699b      	ldr	r3, [r3, #24]
 800f858:	f043 0210 	orr.w	r2, r3, #16
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	699a      	ldr	r2, [r3, #24]
 800f864:	4b09      	ldr	r3, [pc, #36]	; (800f88c <USB_HostInit+0x170>)
 800f866:	4313      	orrs	r3, r2
 800f868:	687a      	ldr	r2, [r7, #4]
 800f86a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800f86c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f86e:	4618      	mov	r0, r3
 800f870:	3718      	adds	r7, #24
 800f872:	46bd      	mov	sp, r7
 800f874:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f878:	b004      	add	sp, #16
 800f87a:	4770      	bx	lr
 800f87c:	01000200 	.word	0x01000200
 800f880:	00e00300 	.word	0x00e00300
 800f884:	00600080 	.word	0x00600080
 800f888:	004000e0 	.word	0x004000e0
 800f88c:	a3200008 	.word	0xa3200008

0800f890 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800f890:	b480      	push	{r7}
 800f892:	b085      	sub	sp, #20
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
 800f898:	460b      	mov	r3, r1
 800f89a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	68fa      	ldr	r2, [r7, #12]
 800f8aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f8ae:	f023 0303 	bic.w	r3, r3, #3
 800f8b2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f8ba:	681a      	ldr	r2, [r3, #0]
 800f8bc:	78fb      	ldrb	r3, [r7, #3]
 800f8be:	f003 0303 	and.w	r3, r3, #3
 800f8c2:	68f9      	ldr	r1, [r7, #12]
 800f8c4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f8c8:	4313      	orrs	r3, r2
 800f8ca:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800f8cc:	78fb      	ldrb	r3, [r7, #3]
 800f8ce:	2b01      	cmp	r3, #1
 800f8d0:	d107      	bne.n	800f8e2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f8d8:	461a      	mov	r2, r3
 800f8da:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800f8de:	6053      	str	r3, [r2, #4]
 800f8e0:	e00c      	b.n	800f8fc <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800f8e2:	78fb      	ldrb	r3, [r7, #3]
 800f8e4:	2b02      	cmp	r3, #2
 800f8e6:	d107      	bne.n	800f8f8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f8ee:	461a      	mov	r2, r3
 800f8f0:	f241 7370 	movw	r3, #6000	; 0x1770
 800f8f4:	6053      	str	r3, [r2, #4]
 800f8f6:	e001      	b.n	800f8fc <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800f8f8:	2301      	movs	r3, #1
 800f8fa:	e000      	b.n	800f8fe <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800f8fc:	2300      	movs	r3, #0
}
 800f8fe:	4618      	mov	r0, r3
 800f900:	3714      	adds	r7, #20
 800f902:	46bd      	mov	sp, r7
 800f904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f908:	4770      	bx	lr

0800f90a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800f90a:	b580      	push	{r7, lr}
 800f90c:	b084      	sub	sp, #16
 800f90e:	af00      	add	r7, sp, #0
 800f910:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800f916:	2300      	movs	r3, #0
 800f918:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800f92a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800f92c:	68bb      	ldr	r3, [r7, #8]
 800f92e:	68fa      	ldr	r2, [r7, #12]
 800f930:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800f934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f938:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800f93a:	2064      	movs	r0, #100	; 0x64
 800f93c:	f7f3 fd86 	bl	800344c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800f940:	68bb      	ldr	r3, [r7, #8]
 800f942:	68fa      	ldr	r2, [r7, #12]
 800f944:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800f948:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f94c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800f94e:	200a      	movs	r0, #10
 800f950:	f7f3 fd7c 	bl	800344c <HAL_Delay>

  return HAL_OK;
 800f954:	2300      	movs	r3, #0
}
 800f956:	4618      	mov	r0, r3
 800f958:	3710      	adds	r7, #16
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd80      	pop	{r7, pc}

0800f95e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800f95e:	b480      	push	{r7}
 800f960:	b085      	sub	sp, #20
 800f962:	af00      	add	r7, sp, #0
 800f964:	6078      	str	r0, [r7, #4]
 800f966:	460b      	mov	r3, r1
 800f968:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800f96e:	2300      	movs	r3, #0
 800f970:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800f97c:	68bb      	ldr	r3, [r7, #8]
 800f97e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800f982:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800f984:	68bb      	ldr	r3, [r7, #8]
 800f986:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d109      	bne.n	800f9a2 <USB_DriveVbus+0x44>
 800f98e:	78fb      	ldrb	r3, [r7, #3]
 800f990:	2b01      	cmp	r3, #1
 800f992:	d106      	bne.n	800f9a2 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800f994:	68bb      	ldr	r3, [r7, #8]
 800f996:	68fa      	ldr	r2, [r7, #12]
 800f998:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800f99c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f9a0:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800f9a2:	68bb      	ldr	r3, [r7, #8]
 800f9a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f9a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f9ac:	d109      	bne.n	800f9c2 <USB_DriveVbus+0x64>
 800f9ae:	78fb      	ldrb	r3, [r7, #3]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d106      	bne.n	800f9c2 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800f9b4:	68bb      	ldr	r3, [r7, #8]
 800f9b6:	68fa      	ldr	r2, [r7, #12]
 800f9b8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800f9bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f9c0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800f9c2:	2300      	movs	r3, #0
}
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	3714      	adds	r7, #20
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ce:	4770      	bx	lr

0800f9d0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800f9d0:	b480      	push	{r7}
 800f9d2:	b085      	sub	sp, #20
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800f9dc:	2300      	movs	r3, #0
 800f9de:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800f9ea:	68bb      	ldr	r3, [r7, #8]
 800f9ec:	0c5b      	lsrs	r3, r3, #17
 800f9ee:	f003 0303 	and.w	r3, r3, #3
}
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	3714      	adds	r7, #20
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fc:	4770      	bx	lr

0800f9fe <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800f9fe:	b480      	push	{r7}
 800fa00:	b085      	sub	sp, #20
 800fa02:	af00      	add	r7, sp, #0
 800fa04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fa10:	689b      	ldr	r3, [r3, #8]
 800fa12:	b29b      	uxth	r3, r3
}
 800fa14:	4618      	mov	r0, r3
 800fa16:	3714      	adds	r7, #20
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1e:	4770      	bx	lr

0800fa20 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b088      	sub	sp, #32
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
 800fa28:	4608      	mov	r0, r1
 800fa2a:	4611      	mov	r1, r2
 800fa2c:	461a      	mov	r2, r3
 800fa2e:	4603      	mov	r3, r0
 800fa30:	70fb      	strb	r3, [r7, #3]
 800fa32:	460b      	mov	r3, r1
 800fa34:	70bb      	strb	r3, [r7, #2]
 800fa36:	4613      	mov	r3, r2
 800fa38:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800fa42:	78fb      	ldrb	r3, [r7, #3]
 800fa44:	015a      	lsls	r2, r3, #5
 800fa46:	693b      	ldr	r3, [r7, #16]
 800fa48:	4413      	add	r3, r2
 800fa4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fa4e:	461a      	mov	r2, r3
 800fa50:	f04f 33ff 	mov.w	r3, #4294967295
 800fa54:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800fa56:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fa5a:	2b03      	cmp	r3, #3
 800fa5c:	d87e      	bhi.n	800fb5c <USB_HC_Init+0x13c>
 800fa5e:	a201      	add	r2, pc, #4	; (adr r2, 800fa64 <USB_HC_Init+0x44>)
 800fa60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa64:	0800fa75 	.word	0x0800fa75
 800fa68:	0800fb1f 	.word	0x0800fb1f
 800fa6c:	0800fa75 	.word	0x0800fa75
 800fa70:	0800fae1 	.word	0x0800fae1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800fa74:	78fb      	ldrb	r3, [r7, #3]
 800fa76:	015a      	lsls	r2, r3, #5
 800fa78:	693b      	ldr	r3, [r7, #16]
 800fa7a:	4413      	add	r3, r2
 800fa7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fa80:	461a      	mov	r2, r3
 800fa82:	f240 439d 	movw	r3, #1181	; 0x49d
 800fa86:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800fa88:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	da10      	bge.n	800fab2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800fa90:	78fb      	ldrb	r3, [r7, #3]
 800fa92:	015a      	lsls	r2, r3, #5
 800fa94:	693b      	ldr	r3, [r7, #16]
 800fa96:	4413      	add	r3, r2
 800fa98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fa9c:	68db      	ldr	r3, [r3, #12]
 800fa9e:	78fa      	ldrb	r2, [r7, #3]
 800faa0:	0151      	lsls	r1, r2, #5
 800faa2:	693a      	ldr	r2, [r7, #16]
 800faa4:	440a      	add	r2, r1
 800faa6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800faaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800faae:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800fab0:	e057      	b.n	800fb62 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d051      	beq.n	800fb62 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800fabe:	78fb      	ldrb	r3, [r7, #3]
 800fac0:	015a      	lsls	r2, r3, #5
 800fac2:	693b      	ldr	r3, [r7, #16]
 800fac4:	4413      	add	r3, r2
 800fac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800faca:	68db      	ldr	r3, [r3, #12]
 800facc:	78fa      	ldrb	r2, [r7, #3]
 800face:	0151      	lsls	r1, r2, #5
 800fad0:	693a      	ldr	r2, [r7, #16]
 800fad2:	440a      	add	r2, r1
 800fad4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fad8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800fadc:	60d3      	str	r3, [r2, #12]
      break;
 800fade:	e040      	b.n	800fb62 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800fae0:	78fb      	ldrb	r3, [r7, #3]
 800fae2:	015a      	lsls	r2, r3, #5
 800fae4:	693b      	ldr	r3, [r7, #16]
 800fae6:	4413      	add	r3, r2
 800fae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800faec:	461a      	mov	r2, r3
 800faee:	f240 639d 	movw	r3, #1693	; 0x69d
 800faf2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800faf4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	da34      	bge.n	800fb66 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800fafc:	78fb      	ldrb	r3, [r7, #3]
 800fafe:	015a      	lsls	r2, r3, #5
 800fb00:	693b      	ldr	r3, [r7, #16]
 800fb02:	4413      	add	r3, r2
 800fb04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fb08:	68db      	ldr	r3, [r3, #12]
 800fb0a:	78fa      	ldrb	r2, [r7, #3]
 800fb0c:	0151      	lsls	r1, r2, #5
 800fb0e:	693a      	ldr	r2, [r7, #16]
 800fb10:	440a      	add	r2, r1
 800fb12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fb16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fb1a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800fb1c:	e023      	b.n	800fb66 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800fb1e:	78fb      	ldrb	r3, [r7, #3]
 800fb20:	015a      	lsls	r2, r3, #5
 800fb22:	693b      	ldr	r3, [r7, #16]
 800fb24:	4413      	add	r3, r2
 800fb26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fb2a:	461a      	mov	r2, r3
 800fb2c:	f240 2325 	movw	r3, #549	; 0x225
 800fb30:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800fb32:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	da17      	bge.n	800fb6a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800fb3a:	78fb      	ldrb	r3, [r7, #3]
 800fb3c:	015a      	lsls	r2, r3, #5
 800fb3e:	693b      	ldr	r3, [r7, #16]
 800fb40:	4413      	add	r3, r2
 800fb42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fb46:	68db      	ldr	r3, [r3, #12]
 800fb48:	78fa      	ldrb	r2, [r7, #3]
 800fb4a:	0151      	lsls	r1, r2, #5
 800fb4c:	693a      	ldr	r2, [r7, #16]
 800fb4e:	440a      	add	r2, r1
 800fb50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fb54:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800fb58:	60d3      	str	r3, [r2, #12]
      }
      break;
 800fb5a:	e006      	b.n	800fb6a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800fb5c:	2301      	movs	r3, #1
 800fb5e:	77fb      	strb	r3, [r7, #31]
      break;
 800fb60:	e004      	b.n	800fb6c <USB_HC_Init+0x14c>
      break;
 800fb62:	bf00      	nop
 800fb64:	e002      	b.n	800fb6c <USB_HC_Init+0x14c>
      break;
 800fb66:	bf00      	nop
 800fb68:	e000      	b.n	800fb6c <USB_HC_Init+0x14c>
      break;
 800fb6a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800fb6c:	78fb      	ldrb	r3, [r7, #3]
 800fb6e:	015a      	lsls	r2, r3, #5
 800fb70:	693b      	ldr	r3, [r7, #16]
 800fb72:	4413      	add	r3, r2
 800fb74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fb78:	68db      	ldr	r3, [r3, #12]
 800fb7a:	78fa      	ldrb	r2, [r7, #3]
 800fb7c:	0151      	lsls	r1, r2, #5
 800fb7e:	693a      	ldr	r2, [r7, #16]
 800fb80:	440a      	add	r2, r1
 800fb82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fb86:	f043 0302 	orr.w	r3, r3, #2
 800fb8a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800fb8c:	693b      	ldr	r3, [r7, #16]
 800fb8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fb92:	699a      	ldr	r2, [r3, #24]
 800fb94:	78fb      	ldrb	r3, [r7, #3]
 800fb96:	f003 030f 	and.w	r3, r3, #15
 800fb9a:	2101      	movs	r1, #1
 800fb9c:	fa01 f303 	lsl.w	r3, r1, r3
 800fba0:	6939      	ldr	r1, [r7, #16]
 800fba2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fba6:	4313      	orrs	r3, r2
 800fba8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	699b      	ldr	r3, [r3, #24]
 800fbae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800fbb6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	da03      	bge.n	800fbc6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800fbbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fbc2:	61bb      	str	r3, [r7, #24]
 800fbc4:	e001      	b.n	800fbca <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800fbca:	6878      	ldr	r0, [r7, #4]
 800fbcc:	f7ff ff00 	bl	800f9d0 <USB_GetHostSpeed>
 800fbd0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800fbd2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fbd6:	2b02      	cmp	r3, #2
 800fbd8:	d106      	bne.n	800fbe8 <USB_HC_Init+0x1c8>
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	2b02      	cmp	r3, #2
 800fbde:	d003      	beq.n	800fbe8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800fbe0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800fbe4:	617b      	str	r3, [r7, #20]
 800fbe6:	e001      	b.n	800fbec <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800fbe8:	2300      	movs	r3, #0
 800fbea:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800fbec:	787b      	ldrb	r3, [r7, #1]
 800fbee:	059b      	lsls	r3, r3, #22
 800fbf0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800fbf4:	78bb      	ldrb	r3, [r7, #2]
 800fbf6:	02db      	lsls	r3, r3, #11
 800fbf8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800fbfc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800fbfe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fc02:	049b      	lsls	r3, r3, #18
 800fc04:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800fc08:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800fc0a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800fc0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800fc10:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800fc12:	69bb      	ldr	r3, [r7, #24]
 800fc14:	431a      	orrs	r2, r3
 800fc16:	697b      	ldr	r3, [r7, #20]
 800fc18:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800fc1a:	78fa      	ldrb	r2, [r7, #3]
 800fc1c:	0151      	lsls	r1, r2, #5
 800fc1e:	693a      	ldr	r2, [r7, #16]
 800fc20:	440a      	add	r2, r1
 800fc22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800fc26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800fc2a:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800fc2c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fc30:	2b03      	cmp	r3, #3
 800fc32:	d003      	beq.n	800fc3c <USB_HC_Init+0x21c>
 800fc34:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fc38:	2b01      	cmp	r3, #1
 800fc3a:	d10f      	bne.n	800fc5c <USB_HC_Init+0x23c>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800fc3c:	78fb      	ldrb	r3, [r7, #3]
 800fc3e:	015a      	lsls	r2, r3, #5
 800fc40:	693b      	ldr	r3, [r7, #16]
 800fc42:	4413      	add	r3, r2
 800fc44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	78fa      	ldrb	r2, [r7, #3]
 800fc4c:	0151      	lsls	r1, r2, #5
 800fc4e:	693a      	ldr	r2, [r7, #16]
 800fc50:	440a      	add	r2, r1
 800fc52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fc56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fc5a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800fc5c:	7ffb      	ldrb	r3, [r7, #31]
}
 800fc5e:	4618      	mov	r0, r3
 800fc60:	3720      	adds	r7, #32
 800fc62:	46bd      	mov	sp, r7
 800fc64:	bd80      	pop	{r7, pc}
 800fc66:	bf00      	nop

0800fc68 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b08c      	sub	sp, #48	; 0x30
 800fc6c:	af02      	add	r7, sp, #8
 800fc6e:	60f8      	str	r0, [r7, #12]
 800fc70:	60b9      	str	r1, [r7, #8]
 800fc72:	4613      	mov	r3, r2
 800fc74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800fc7a:	68bb      	ldr	r3, [r7, #8]
 800fc7c:	785b      	ldrb	r3, [r3, #1]
 800fc7e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800fc80:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fc84:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d02d      	beq.n	800fcee <USB_HC_StartXfer+0x86>
 800fc92:	68bb      	ldr	r3, [r7, #8]
 800fc94:	791b      	ldrb	r3, [r3, #4]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d129      	bne.n	800fcee <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800fc9a:	79fb      	ldrb	r3, [r7, #7]
 800fc9c:	2b01      	cmp	r3, #1
 800fc9e:	d117      	bne.n	800fcd0 <USB_HC_StartXfer+0x68>
 800fca0:	68bb      	ldr	r3, [r7, #8]
 800fca2:	79db      	ldrb	r3, [r3, #7]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d003      	beq.n	800fcb0 <USB_HC_StartXfer+0x48>
 800fca8:	68bb      	ldr	r3, [r7, #8]
 800fcaa:	79db      	ldrb	r3, [r3, #7]
 800fcac:	2b02      	cmp	r3, #2
 800fcae:	d10f      	bne.n	800fcd0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800fcb0:	69fb      	ldr	r3, [r7, #28]
 800fcb2:	015a      	lsls	r2, r3, #5
 800fcb4:	6a3b      	ldr	r3, [r7, #32]
 800fcb6:	4413      	add	r3, r2
 800fcb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fcbc:	68db      	ldr	r3, [r3, #12]
 800fcbe:	69fa      	ldr	r2, [r7, #28]
 800fcc0:	0151      	lsls	r1, r2, #5
 800fcc2:	6a3a      	ldr	r2, [r7, #32]
 800fcc4:	440a      	add	r2, r1
 800fcc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fcca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fcce:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800fcd0:	79fb      	ldrb	r3, [r7, #7]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d10b      	bne.n	800fcee <USB_HC_StartXfer+0x86>
 800fcd6:	68bb      	ldr	r3, [r7, #8]
 800fcd8:	795b      	ldrb	r3, [r3, #5]
 800fcda:	2b01      	cmp	r3, #1
 800fcdc:	d107      	bne.n	800fcee <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800fcde:	68bb      	ldr	r3, [r7, #8]
 800fce0:	785b      	ldrb	r3, [r3, #1]
 800fce2:	4619      	mov	r1, r3
 800fce4:	68f8      	ldr	r0, [r7, #12]
 800fce6:	f000 fa0f 	bl	8010108 <USB_DoPing>
      return HAL_OK;
 800fcea:	2300      	movs	r3, #0
 800fcec:	e0f8      	b.n	800fee0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800fcee:	68bb      	ldr	r3, [r7, #8]
 800fcf0:	695b      	ldr	r3, [r3, #20]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d018      	beq.n	800fd28 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800fcf6:	68bb      	ldr	r3, [r7, #8]
 800fcf8:	695b      	ldr	r3, [r3, #20]
 800fcfa:	68ba      	ldr	r2, [r7, #8]
 800fcfc:	8912      	ldrh	r2, [r2, #8]
 800fcfe:	4413      	add	r3, r2
 800fd00:	3b01      	subs	r3, #1
 800fd02:	68ba      	ldr	r2, [r7, #8]
 800fd04:	8912      	ldrh	r2, [r2, #8]
 800fd06:	fbb3 f3f2 	udiv	r3, r3, r2
 800fd0a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800fd0c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800fd0e:	8b7b      	ldrh	r3, [r7, #26]
 800fd10:	429a      	cmp	r2, r3
 800fd12:	d90b      	bls.n	800fd2c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800fd14:	8b7b      	ldrh	r3, [r7, #26]
 800fd16:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800fd18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fd1a:	68ba      	ldr	r2, [r7, #8]
 800fd1c:	8912      	ldrh	r2, [r2, #8]
 800fd1e:	fb03 f202 	mul.w	r2, r3, r2
 800fd22:	68bb      	ldr	r3, [r7, #8]
 800fd24:	611a      	str	r2, [r3, #16]
 800fd26:	e001      	b.n	800fd2c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800fd28:	2301      	movs	r3, #1
 800fd2a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800fd2c:	68bb      	ldr	r3, [r7, #8]
 800fd2e:	78db      	ldrb	r3, [r3, #3]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d007      	beq.n	800fd44 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800fd34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fd36:	68ba      	ldr	r2, [r7, #8]
 800fd38:	8912      	ldrh	r2, [r2, #8]
 800fd3a:	fb03 f202 	mul.w	r2, r3, r2
 800fd3e:	68bb      	ldr	r3, [r7, #8]
 800fd40:	611a      	str	r2, [r3, #16]
 800fd42:	e003      	b.n	800fd4c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800fd44:	68bb      	ldr	r3, [r7, #8]
 800fd46:	695a      	ldr	r2, [r3, #20]
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800fd4c:	68bb      	ldr	r3, [r7, #8]
 800fd4e:	691b      	ldr	r3, [r3, #16]
 800fd50:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800fd54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fd56:	04d9      	lsls	r1, r3, #19
 800fd58:	4b63      	ldr	r3, [pc, #396]	; (800fee8 <USB_HC_StartXfer+0x280>)
 800fd5a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800fd5c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800fd5e:	68bb      	ldr	r3, [r7, #8]
 800fd60:	7a9b      	ldrb	r3, [r3, #10]
 800fd62:	075b      	lsls	r3, r3, #29
 800fd64:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800fd68:	69f9      	ldr	r1, [r7, #28]
 800fd6a:	0148      	lsls	r0, r1, #5
 800fd6c:	6a39      	ldr	r1, [r7, #32]
 800fd6e:	4401      	add	r1, r0
 800fd70:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800fd74:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800fd76:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800fd78:	79fb      	ldrb	r3, [r7, #7]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d009      	beq.n	800fd92 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800fd7e:	68bb      	ldr	r3, [r7, #8]
 800fd80:	68d9      	ldr	r1, [r3, #12]
 800fd82:	69fb      	ldr	r3, [r7, #28]
 800fd84:	015a      	lsls	r2, r3, #5
 800fd86:	6a3b      	ldr	r3, [r7, #32]
 800fd88:	4413      	add	r3, r2
 800fd8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fd8e:	460a      	mov	r2, r1
 800fd90:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800fd92:	6a3b      	ldr	r3, [r7, #32]
 800fd94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fd98:	689b      	ldr	r3, [r3, #8]
 800fd9a:	f003 0301 	and.w	r3, r3, #1
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	bf0c      	ite	eq
 800fda2:	2301      	moveq	r3, #1
 800fda4:	2300      	movne	r3, #0
 800fda6:	b2db      	uxtb	r3, r3
 800fda8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800fdaa:	69fb      	ldr	r3, [r7, #28]
 800fdac:	015a      	lsls	r2, r3, #5
 800fdae:	6a3b      	ldr	r3, [r7, #32]
 800fdb0:	4413      	add	r3, r2
 800fdb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	69fa      	ldr	r2, [r7, #28]
 800fdba:	0151      	lsls	r1, r2, #5
 800fdbc:	6a3a      	ldr	r2, [r7, #32]
 800fdbe:	440a      	add	r2, r1
 800fdc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fdc4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fdc8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800fdca:	69fb      	ldr	r3, [r7, #28]
 800fdcc:	015a      	lsls	r2, r3, #5
 800fdce:	6a3b      	ldr	r3, [r7, #32]
 800fdd0:	4413      	add	r3, r2
 800fdd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fdd6:	681a      	ldr	r2, [r3, #0]
 800fdd8:	7e7b      	ldrb	r3, [r7, #25]
 800fdda:	075b      	lsls	r3, r3, #29
 800fddc:	69f9      	ldr	r1, [r7, #28]
 800fdde:	0148      	lsls	r0, r1, #5
 800fde0:	6a39      	ldr	r1, [r7, #32]
 800fde2:	4401      	add	r1, r0
 800fde4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800fde8:	4313      	orrs	r3, r2
 800fdea:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800fdec:	69fb      	ldr	r3, [r7, #28]
 800fdee:	015a      	lsls	r2, r3, #5
 800fdf0:	6a3b      	ldr	r3, [r7, #32]
 800fdf2:	4413      	add	r3, r2
 800fdf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800fdfc:	693b      	ldr	r3, [r7, #16]
 800fdfe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fe02:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800fe04:	68bb      	ldr	r3, [r7, #8]
 800fe06:	78db      	ldrb	r3, [r3, #3]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d004      	beq.n	800fe16 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800fe0c:	693b      	ldr	r3, [r7, #16]
 800fe0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fe12:	613b      	str	r3, [r7, #16]
 800fe14:	e003      	b.n	800fe1e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800fe16:	693b      	ldr	r3, [r7, #16]
 800fe18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fe1c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800fe1e:	693b      	ldr	r3, [r7, #16]
 800fe20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fe24:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800fe26:	69fb      	ldr	r3, [r7, #28]
 800fe28:	015a      	lsls	r2, r3, #5
 800fe2a:	6a3b      	ldr	r3, [r7, #32]
 800fe2c:	4413      	add	r3, r2
 800fe2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fe32:	461a      	mov	r2, r3
 800fe34:	693b      	ldr	r3, [r7, #16]
 800fe36:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800fe38:	79fb      	ldrb	r3, [r7, #7]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d001      	beq.n	800fe42 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800fe3e:	2300      	movs	r3, #0
 800fe40:	e04e      	b.n	800fee0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800fe42:	68bb      	ldr	r3, [r7, #8]
 800fe44:	78db      	ldrb	r3, [r3, #3]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d149      	bne.n	800fede <USB_HC_StartXfer+0x276>
 800fe4a:	68bb      	ldr	r3, [r7, #8]
 800fe4c:	695b      	ldr	r3, [r3, #20]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d045      	beq.n	800fede <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800fe52:	68bb      	ldr	r3, [r7, #8]
 800fe54:	79db      	ldrb	r3, [r3, #7]
 800fe56:	2b03      	cmp	r3, #3
 800fe58:	d830      	bhi.n	800febc <USB_HC_StartXfer+0x254>
 800fe5a:	a201      	add	r2, pc, #4	; (adr r2, 800fe60 <USB_HC_StartXfer+0x1f8>)
 800fe5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe60:	0800fe71 	.word	0x0800fe71
 800fe64:	0800fe95 	.word	0x0800fe95
 800fe68:	0800fe71 	.word	0x0800fe71
 800fe6c:	0800fe95 	.word	0x0800fe95
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800fe70:	68bb      	ldr	r3, [r7, #8]
 800fe72:	695b      	ldr	r3, [r3, #20]
 800fe74:	3303      	adds	r3, #3
 800fe76:	089b      	lsrs	r3, r3, #2
 800fe78:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800fe7a:	8afa      	ldrh	r2, [r7, #22]
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe80:	b29b      	uxth	r3, r3
 800fe82:	429a      	cmp	r2, r3
 800fe84:	d91c      	bls.n	800fec0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	699b      	ldr	r3, [r3, #24]
 800fe8a:	f043 0220 	orr.w	r2, r3, #32
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	619a      	str	r2, [r3, #24]
        }
        break;
 800fe92:	e015      	b.n	800fec0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800fe94:	68bb      	ldr	r3, [r7, #8]
 800fe96:	695b      	ldr	r3, [r3, #20]
 800fe98:	3303      	adds	r3, #3
 800fe9a:	089b      	lsrs	r3, r3, #2
 800fe9c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800fe9e:	8afa      	ldrh	r2, [r7, #22]
 800fea0:	6a3b      	ldr	r3, [r7, #32]
 800fea2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fea6:	691b      	ldr	r3, [r3, #16]
 800fea8:	b29b      	uxth	r3, r3
 800feaa:	429a      	cmp	r2, r3
 800feac:	d90a      	bls.n	800fec4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	699b      	ldr	r3, [r3, #24]
 800feb2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	619a      	str	r2, [r3, #24]
        }
        break;
 800feba:	e003      	b.n	800fec4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800febc:	bf00      	nop
 800febe:	e002      	b.n	800fec6 <USB_HC_StartXfer+0x25e>
        break;
 800fec0:	bf00      	nop
 800fec2:	e000      	b.n	800fec6 <USB_HC_StartXfer+0x25e>
        break;
 800fec4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800fec6:	68bb      	ldr	r3, [r7, #8]
 800fec8:	68d9      	ldr	r1, [r3, #12]
 800feca:	68bb      	ldr	r3, [r7, #8]
 800fecc:	785a      	ldrb	r2, [r3, #1]
 800fece:	68bb      	ldr	r3, [r7, #8]
 800fed0:	695b      	ldr	r3, [r3, #20]
 800fed2:	b29b      	uxth	r3, r3
 800fed4:	2000      	movs	r0, #0
 800fed6:	9000      	str	r0, [sp, #0]
 800fed8:	68f8      	ldr	r0, [r7, #12]
 800feda:	f7ff fb13 	bl	800f504 <USB_WritePacket>
  }

  return HAL_OK;
 800fede:	2300      	movs	r3, #0
}
 800fee0:	4618      	mov	r0, r3
 800fee2:	3728      	adds	r7, #40	; 0x28
 800fee4:	46bd      	mov	sp, r7
 800fee6:	bd80      	pop	{r7, pc}
 800fee8:	1ff80000 	.word	0x1ff80000

0800feec <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800feec:	b480      	push	{r7}
 800feee:	b085      	sub	sp, #20
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fefe:	695b      	ldr	r3, [r3, #20]
 800ff00:	b29b      	uxth	r3, r3
}
 800ff02:	4618      	mov	r0, r3
 800ff04:	3714      	adds	r7, #20
 800ff06:	46bd      	mov	sp, r7
 800ff08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0c:	4770      	bx	lr

0800ff0e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800ff0e:	b480      	push	{r7}
 800ff10:	b089      	sub	sp, #36	; 0x24
 800ff12:	af00      	add	r7, sp, #0
 800ff14:	6078      	str	r0, [r7, #4]
 800ff16:	460b      	mov	r3, r1
 800ff18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800ff1e:	78fb      	ldrb	r3, [r7, #3]
 800ff20:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800ff22:	2300      	movs	r3, #0
 800ff24:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ff26:	69bb      	ldr	r3, [r7, #24]
 800ff28:	015a      	lsls	r2, r3, #5
 800ff2a:	69fb      	ldr	r3, [r7, #28]
 800ff2c:	4413      	add	r3, r2
 800ff2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	0c9b      	lsrs	r3, r3, #18
 800ff36:	f003 0303 	and.w	r3, r3, #3
 800ff3a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800ff3c:	69bb      	ldr	r3, [r7, #24]
 800ff3e:	015a      	lsls	r2, r3, #5
 800ff40:	69fb      	ldr	r3, [r7, #28]
 800ff42:	4413      	add	r3, r2
 800ff44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	0fdb      	lsrs	r3, r3, #31
 800ff4c:	f003 0301 	and.w	r3, r3, #1
 800ff50:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	689b      	ldr	r3, [r3, #8]
 800ff56:	f003 0320 	and.w	r3, r3, #32
 800ff5a:	2b20      	cmp	r3, #32
 800ff5c:	d104      	bne.n	800ff68 <USB_HC_Halt+0x5a>
 800ff5e:	693b      	ldr	r3, [r7, #16]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d101      	bne.n	800ff68 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800ff64:	2300      	movs	r3, #0
 800ff66:	e0c8      	b.n	80100fa <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ff68:	697b      	ldr	r3, [r7, #20]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d002      	beq.n	800ff74 <USB_HC_Halt+0x66>
 800ff6e:	697b      	ldr	r3, [r7, #20]
 800ff70:	2b02      	cmp	r3, #2
 800ff72:	d163      	bne.n	801003c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ff74:	69bb      	ldr	r3, [r7, #24]
 800ff76:	015a      	lsls	r2, r3, #5
 800ff78:	69fb      	ldr	r3, [r7, #28]
 800ff7a:	4413      	add	r3, r2
 800ff7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	69ba      	ldr	r2, [r7, #24]
 800ff84:	0151      	lsls	r1, r2, #5
 800ff86:	69fa      	ldr	r2, [r7, #28]
 800ff88:	440a      	add	r2, r1
 800ff8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ff8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ff92:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	689b      	ldr	r3, [r3, #8]
 800ff98:	f003 0320 	and.w	r3, r3, #32
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	f040 80ab 	bne.w	80100f8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffa6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d133      	bne.n	8010016 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ffae:	69bb      	ldr	r3, [r7, #24]
 800ffb0:	015a      	lsls	r2, r3, #5
 800ffb2:	69fb      	ldr	r3, [r7, #28]
 800ffb4:	4413      	add	r3, r2
 800ffb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	69ba      	ldr	r2, [r7, #24]
 800ffbe:	0151      	lsls	r1, r2, #5
 800ffc0:	69fa      	ldr	r2, [r7, #28]
 800ffc2:	440a      	add	r2, r1
 800ffc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ffc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ffcc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ffce:	69bb      	ldr	r3, [r7, #24]
 800ffd0:	015a      	lsls	r2, r3, #5
 800ffd2:	69fb      	ldr	r3, [r7, #28]
 800ffd4:	4413      	add	r3, r2
 800ffd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	69ba      	ldr	r2, [r7, #24]
 800ffde:	0151      	lsls	r1, r2, #5
 800ffe0:	69fa      	ldr	r2, [r7, #28]
 800ffe2:	440a      	add	r2, r1
 800ffe4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ffe8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ffec:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	3301      	adds	r3, #1
 800fff2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fffa:	d81d      	bhi.n	8010038 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800fffc:	69bb      	ldr	r3, [r7, #24]
 800fffe:	015a      	lsls	r2, r3, #5
 8010000:	69fb      	ldr	r3, [r7, #28]
 8010002:	4413      	add	r3, r2
 8010004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801000e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010012:	d0ec      	beq.n	800ffee <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8010014:	e070      	b.n	80100f8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8010016:	69bb      	ldr	r3, [r7, #24]
 8010018:	015a      	lsls	r2, r3, #5
 801001a:	69fb      	ldr	r3, [r7, #28]
 801001c:	4413      	add	r3, r2
 801001e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	69ba      	ldr	r2, [r7, #24]
 8010026:	0151      	lsls	r1, r2, #5
 8010028:	69fa      	ldr	r2, [r7, #28]
 801002a:	440a      	add	r2, r1
 801002c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010030:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010034:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8010036:	e05f      	b.n	80100f8 <USB_HC_Halt+0x1ea>
            break;
 8010038:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801003a:	e05d      	b.n	80100f8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 801003c:	69bb      	ldr	r3, [r7, #24]
 801003e:	015a      	lsls	r2, r3, #5
 8010040:	69fb      	ldr	r3, [r7, #28]
 8010042:	4413      	add	r3, r2
 8010044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	69ba      	ldr	r2, [r7, #24]
 801004c:	0151      	lsls	r1, r2, #5
 801004e:	69fa      	ldr	r2, [r7, #28]
 8010050:	440a      	add	r2, r1
 8010052:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010056:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801005a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 801005c:	69fb      	ldr	r3, [r7, #28]
 801005e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010062:	691b      	ldr	r3, [r3, #16]
 8010064:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010068:	2b00      	cmp	r3, #0
 801006a:	d133      	bne.n	80100d4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 801006c:	69bb      	ldr	r3, [r7, #24]
 801006e:	015a      	lsls	r2, r3, #5
 8010070:	69fb      	ldr	r3, [r7, #28]
 8010072:	4413      	add	r3, r2
 8010074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	69ba      	ldr	r2, [r7, #24]
 801007c:	0151      	lsls	r1, r2, #5
 801007e:	69fa      	ldr	r2, [r7, #28]
 8010080:	440a      	add	r2, r1
 8010082:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010086:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801008a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801008c:	69bb      	ldr	r3, [r7, #24]
 801008e:	015a      	lsls	r2, r3, #5
 8010090:	69fb      	ldr	r3, [r7, #28]
 8010092:	4413      	add	r3, r2
 8010094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	69ba      	ldr	r2, [r7, #24]
 801009c:	0151      	lsls	r1, r2, #5
 801009e:	69fa      	ldr	r2, [r7, #28]
 80100a0:	440a      	add	r2, r1
 80100a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80100a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80100aa:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	3301      	adds	r3, #1
 80100b0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80100b8:	d81d      	bhi.n	80100f6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80100ba:	69bb      	ldr	r3, [r7, #24]
 80100bc:	015a      	lsls	r2, r3, #5
 80100be:	69fb      	ldr	r3, [r7, #28]
 80100c0:	4413      	add	r3, r2
 80100c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80100cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80100d0:	d0ec      	beq.n	80100ac <USB_HC_Halt+0x19e>
 80100d2:	e011      	b.n	80100f8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80100d4:	69bb      	ldr	r3, [r7, #24]
 80100d6:	015a      	lsls	r2, r3, #5
 80100d8:	69fb      	ldr	r3, [r7, #28]
 80100da:	4413      	add	r3, r2
 80100dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	69ba      	ldr	r2, [r7, #24]
 80100e4:	0151      	lsls	r1, r2, #5
 80100e6:	69fa      	ldr	r2, [r7, #28]
 80100e8:	440a      	add	r2, r1
 80100ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80100ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80100f2:	6013      	str	r3, [r2, #0]
 80100f4:	e000      	b.n	80100f8 <USB_HC_Halt+0x1ea>
          break;
 80100f6:	bf00      	nop
    }
  }

  return HAL_OK;
 80100f8:	2300      	movs	r3, #0
}
 80100fa:	4618      	mov	r0, r3
 80100fc:	3724      	adds	r7, #36	; 0x24
 80100fe:	46bd      	mov	sp, r7
 8010100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010104:	4770      	bx	lr
	...

08010108 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8010108:	b480      	push	{r7}
 801010a:	b087      	sub	sp, #28
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
 8010110:	460b      	mov	r3, r1
 8010112:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8010118:	78fb      	ldrb	r3, [r7, #3]
 801011a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 801011c:	2301      	movs	r3, #1
 801011e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	04da      	lsls	r2, r3, #19
 8010124:	4b15      	ldr	r3, [pc, #84]	; (801017c <USB_DoPing+0x74>)
 8010126:	4013      	ands	r3, r2
 8010128:	693a      	ldr	r2, [r7, #16]
 801012a:	0151      	lsls	r1, r2, #5
 801012c:	697a      	ldr	r2, [r7, #20]
 801012e:	440a      	add	r2, r1
 8010130:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010134:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010138:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 801013a:	693b      	ldr	r3, [r7, #16]
 801013c:	015a      	lsls	r2, r3, #5
 801013e:	697b      	ldr	r3, [r7, #20]
 8010140:	4413      	add	r3, r2
 8010142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801014a:	68bb      	ldr	r3, [r7, #8]
 801014c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010150:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8010152:	68bb      	ldr	r3, [r7, #8]
 8010154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010158:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 801015a:	693b      	ldr	r3, [r7, #16]
 801015c:	015a      	lsls	r2, r3, #5
 801015e:	697b      	ldr	r3, [r7, #20]
 8010160:	4413      	add	r3, r2
 8010162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010166:	461a      	mov	r2, r3
 8010168:	68bb      	ldr	r3, [r7, #8]
 801016a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 801016c:	2300      	movs	r3, #0
}
 801016e:	4618      	mov	r0, r3
 8010170:	371c      	adds	r7, #28
 8010172:	46bd      	mov	sp, r7
 8010174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010178:	4770      	bx	lr
 801017a:	bf00      	nop
 801017c:	1ff80000 	.word	0x1ff80000

08010180 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b088      	sub	sp, #32
 8010184:	af00      	add	r7, sp, #0
 8010186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8010188:	2300      	movs	r3, #0
 801018a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8010190:	2300      	movs	r3, #0
 8010192:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8010194:	6878      	ldr	r0, [r7, #4]
 8010196:	f7ff f8f4 	bl	800f382 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801019a:	2110      	movs	r1, #16
 801019c:	6878      	ldr	r0, [r7, #4]
 801019e:	f7ff f94d 	bl	800f43c <USB_FlushTxFifo>
 80101a2:	4603      	mov	r3, r0
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d001      	beq.n	80101ac <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80101a8:	2301      	movs	r3, #1
 80101aa:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80101ac:	6878      	ldr	r0, [r7, #4]
 80101ae:	f7ff f979 	bl	800f4a4 <USB_FlushRxFifo>
 80101b2:	4603      	mov	r3, r0
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d001      	beq.n	80101bc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80101b8:	2301      	movs	r3, #1
 80101ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80101bc:	2300      	movs	r3, #0
 80101be:	61bb      	str	r3, [r7, #24]
 80101c0:	e01f      	b.n	8010202 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80101c2:	69bb      	ldr	r3, [r7, #24]
 80101c4:	015a      	lsls	r2, r3, #5
 80101c6:	697b      	ldr	r3, [r7, #20]
 80101c8:	4413      	add	r3, r2
 80101ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80101d2:	693b      	ldr	r3, [r7, #16]
 80101d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80101d8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80101da:	693b      	ldr	r3, [r7, #16]
 80101dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80101e0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80101e2:	693b      	ldr	r3, [r7, #16]
 80101e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80101e8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80101ea:	69bb      	ldr	r3, [r7, #24]
 80101ec:	015a      	lsls	r2, r3, #5
 80101ee:	697b      	ldr	r3, [r7, #20]
 80101f0:	4413      	add	r3, r2
 80101f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80101f6:	461a      	mov	r2, r3
 80101f8:	693b      	ldr	r3, [r7, #16]
 80101fa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80101fc:	69bb      	ldr	r3, [r7, #24]
 80101fe:	3301      	adds	r3, #1
 8010200:	61bb      	str	r3, [r7, #24]
 8010202:	69bb      	ldr	r3, [r7, #24]
 8010204:	2b0f      	cmp	r3, #15
 8010206:	d9dc      	bls.n	80101c2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8010208:	2300      	movs	r3, #0
 801020a:	61bb      	str	r3, [r7, #24]
 801020c:	e034      	b.n	8010278 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 801020e:	69bb      	ldr	r3, [r7, #24]
 8010210:	015a      	lsls	r2, r3, #5
 8010212:	697b      	ldr	r3, [r7, #20]
 8010214:	4413      	add	r3, r2
 8010216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 801021e:	693b      	ldr	r3, [r7, #16]
 8010220:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010224:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8010226:	693b      	ldr	r3, [r7, #16]
 8010228:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801022c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 801022e:	693b      	ldr	r3, [r7, #16]
 8010230:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8010234:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8010236:	69bb      	ldr	r3, [r7, #24]
 8010238:	015a      	lsls	r2, r3, #5
 801023a:	697b      	ldr	r3, [r7, #20]
 801023c:	4413      	add	r3, r2
 801023e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010242:	461a      	mov	r2, r3
 8010244:	693b      	ldr	r3, [r7, #16]
 8010246:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	3301      	adds	r3, #1
 801024c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010254:	d80c      	bhi.n	8010270 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8010256:	69bb      	ldr	r3, [r7, #24]
 8010258:	015a      	lsls	r2, r3, #5
 801025a:	697b      	ldr	r3, [r7, #20]
 801025c:	4413      	add	r3, r2
 801025e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010268:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801026c:	d0ec      	beq.n	8010248 <USB_StopHost+0xc8>
 801026e:	e000      	b.n	8010272 <USB_StopHost+0xf2>
        break;
 8010270:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8010272:	69bb      	ldr	r3, [r7, #24]
 8010274:	3301      	adds	r3, #1
 8010276:	61bb      	str	r3, [r7, #24]
 8010278:	69bb      	ldr	r3, [r7, #24]
 801027a:	2b0f      	cmp	r3, #15
 801027c:	d9c7      	bls.n	801020e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 801027e:	697b      	ldr	r3, [r7, #20]
 8010280:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010284:	461a      	mov	r2, r3
 8010286:	f04f 33ff 	mov.w	r3, #4294967295
 801028a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	f04f 32ff 	mov.w	r2, #4294967295
 8010292:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8010294:	6878      	ldr	r0, [r7, #4]
 8010296:	f7ff f863 	bl	800f360 <USB_EnableGlobalInt>

  return ret;
 801029a:	7ffb      	ldrb	r3, [r7, #31]
}
 801029c:	4618      	mov	r0, r3
 801029e:	3720      	adds	r7, #32
 80102a0:	46bd      	mov	sp, r7
 80102a2:	bd80      	pop	{r7, pc}

080102a4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80102a8:	4904      	ldr	r1, [pc, #16]	; (80102bc <MX_FATFS_Init+0x18>)
 80102aa:	4805      	ldr	r0, [pc, #20]	; (80102c0 <MX_FATFS_Init+0x1c>)
 80102ac:	f005 fb62 	bl	8015974 <FATFS_LinkDriver>
 80102b0:	4603      	mov	r3, r0
 80102b2:	461a      	mov	r2, r3
 80102b4:	4b03      	ldr	r3, [pc, #12]	; (80102c4 <MX_FATFS_Init+0x20>)
 80102b6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80102b8:	bf00      	nop
 80102ba:	bd80      	pop	{r7, pc}
 80102bc:	24030874 	.word	0x24030874
 80102c0:	0801c4a8 	.word	0x0801c4a8
 80102c4:	24030870 	.word	0x24030870

080102c8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80102c8:	b480      	push	{r7}
 80102ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80102cc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80102ce:	4618      	mov	r0, r3
 80102d0:	46bd      	mov	sp, r7
 80102d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d6:	4770      	bx	lr

080102d8 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80102d8:	b480      	push	{r7}
 80102da:	b083      	sub	sp, #12
 80102dc:	af00      	add	r7, sp, #0
 80102de:	4603      	mov	r3, r0
 80102e0:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80102e2:	2300      	movs	r3, #0
}
 80102e4:	4618      	mov	r0, r3
 80102e6:	370c      	adds	r7, #12
 80102e8:	46bd      	mov	sp, r7
 80102ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ee:	4770      	bx	lr

080102f0 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b084      	sub	sp, #16
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	4603      	mov	r3, r0
 80102f8:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80102fa:	2301      	movs	r3, #1
 80102fc:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80102fe:	79fb      	ldrb	r3, [r7, #7]
 8010300:	4619      	mov	r1, r3
 8010302:	4808      	ldr	r0, [pc, #32]	; (8010324 <USBH_status+0x34>)
 8010304:	f000 fe32 	bl	8010f6c <USBH_MSC_UnitIsReady>
 8010308:	4603      	mov	r3, r0
 801030a:	2b00      	cmp	r3, #0
 801030c:	d002      	beq.n	8010314 <USBH_status+0x24>
  {
    res = RES_OK;
 801030e:	2300      	movs	r3, #0
 8010310:	73fb      	strb	r3, [r7, #15]
 8010312:	e001      	b.n	8010318 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8010314:	2301      	movs	r3, #1
 8010316:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8010318:	7bfb      	ldrb	r3, [r7, #15]
}
 801031a:	4618      	mov	r0, r3
 801031c:	3710      	adds	r7, #16
 801031e:	46bd      	mov	sp, r7
 8010320:	bd80      	pop	{r7, pc}
 8010322:	bf00      	nop
 8010324:	24030adc 	.word	0x24030adc

08010328 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010328:	b580      	push	{r7, lr}
 801032a:	b094      	sub	sp, #80	; 0x50
 801032c:	af02      	add	r7, sp, #8
 801032e:	60b9      	str	r1, [r7, #8]
 8010330:	607a      	str	r2, [r7, #4]
 8010332:	603b      	str	r3, [r7, #0]
 8010334:	4603      	mov	r3, r0
 8010336:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010338:	2301      	movs	r3, #1
 801033a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 801033e:	7bf9      	ldrb	r1, [r7, #15]
 8010340:	683b      	ldr	r3, [r7, #0]
 8010342:	9300      	str	r3, [sp, #0]
 8010344:	68bb      	ldr	r3, [r7, #8]
 8010346:	687a      	ldr	r2, [r7, #4]
 8010348:	4813      	ldr	r0, [pc, #76]	; (8010398 <USBH_read+0x70>)
 801034a:	f000 fe59 	bl	8011000 <USBH_MSC_Read>
 801034e:	4603      	mov	r3, r0
 8010350:	2b00      	cmp	r3, #0
 8010352:	d103      	bne.n	801035c <USBH_read+0x34>
  {
    res = RES_OK;
 8010354:	2300      	movs	r3, #0
 8010356:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801035a:	e017      	b.n	801038c <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 801035c:	f107 0210 	add.w	r2, r7, #16
 8010360:	7bfb      	ldrb	r3, [r7, #15]
 8010362:	4619      	mov	r1, r3
 8010364:	480c      	ldr	r0, [pc, #48]	; (8010398 <USBH_read+0x70>)
 8010366:	f000 fe27 	bl	8010fb8 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 801036a:	7f7b      	ldrb	r3, [r7, #29]
 801036c:	2b3a      	cmp	r3, #58	; 0x3a
 801036e:	d005      	beq.n	801037c <USBH_read+0x54>
 8010370:	2b3a      	cmp	r3, #58	; 0x3a
 8010372:	dc07      	bgt.n	8010384 <USBH_read+0x5c>
 8010374:	2b04      	cmp	r3, #4
 8010376:	d001      	beq.n	801037c <USBH_read+0x54>
 8010378:	2b28      	cmp	r3, #40	; 0x28
 801037a:	d103      	bne.n	8010384 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 801037c:	2303      	movs	r3, #3
 801037e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8010382:	e003      	b.n	801038c <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8010384:	2301      	movs	r3, #1
 8010386:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 801038a:	bf00      	nop
    }
  }

  return res;
 801038c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8010390:	4618      	mov	r0, r3
 8010392:	3748      	adds	r7, #72	; 0x48
 8010394:	46bd      	mov	sp, r7
 8010396:	bd80      	pop	{r7, pc}
 8010398:	24030adc 	.word	0x24030adc

0801039c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b094      	sub	sp, #80	; 0x50
 80103a0:	af02      	add	r7, sp, #8
 80103a2:	60b9      	str	r1, [r7, #8]
 80103a4:	607a      	str	r2, [r7, #4]
 80103a6:	603b      	str	r3, [r7, #0]
 80103a8:	4603      	mov	r3, r0
 80103aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80103ac:	2301      	movs	r3, #1
 80103ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80103b2:	7bf9      	ldrb	r1, [r7, #15]
 80103b4:	683b      	ldr	r3, [r7, #0]
 80103b6:	9300      	str	r3, [sp, #0]
 80103b8:	68bb      	ldr	r3, [r7, #8]
 80103ba:	687a      	ldr	r2, [r7, #4]
 80103bc:	4817      	ldr	r0, [pc, #92]	; (801041c <USBH_write+0x80>)
 80103be:	f000 fe88 	bl	80110d2 <USBH_MSC_Write>
 80103c2:	4603      	mov	r3, r0
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d103      	bne.n	80103d0 <USBH_write+0x34>
  {
    res = RES_OK;
 80103c8:	2300      	movs	r3, #0
 80103ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80103ce:	e01f      	b.n	8010410 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80103d0:	f107 0210 	add.w	r2, r7, #16
 80103d4:	7bfb      	ldrb	r3, [r7, #15]
 80103d6:	4619      	mov	r1, r3
 80103d8:	4810      	ldr	r0, [pc, #64]	; (801041c <USBH_write+0x80>)
 80103da:	f000 fded 	bl	8010fb8 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80103de:	7f7b      	ldrb	r3, [r7, #29]
 80103e0:	2b3a      	cmp	r3, #58	; 0x3a
 80103e2:	d00d      	beq.n	8010400 <USBH_write+0x64>
 80103e4:	2b3a      	cmp	r3, #58	; 0x3a
 80103e6:	dc0f      	bgt.n	8010408 <USBH_write+0x6c>
 80103e8:	2b28      	cmp	r3, #40	; 0x28
 80103ea:	d009      	beq.n	8010400 <USBH_write+0x64>
 80103ec:	2b28      	cmp	r3, #40	; 0x28
 80103ee:	dc0b      	bgt.n	8010408 <USBH_write+0x6c>
 80103f0:	2b04      	cmp	r3, #4
 80103f2:	d005      	beq.n	8010400 <USBH_write+0x64>
 80103f4:	2b27      	cmp	r3, #39	; 0x27
 80103f6:	d107      	bne.n	8010408 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 80103f8:	2302      	movs	r3, #2
 80103fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80103fe:	e007      	b.n	8010410 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8010400:	2303      	movs	r3, #3
 8010402:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8010406:	e003      	b.n	8010410 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8010408:	2301      	movs	r3, #1
 801040a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 801040e:	bf00      	nop
    }
  }

  return res;
 8010410:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8010414:	4618      	mov	r0, r3
 8010416:	3748      	adds	r7, #72	; 0x48
 8010418:	46bd      	mov	sp, r7
 801041a:	bd80      	pop	{r7, pc}
 801041c:	24030adc 	.word	0x24030adc

08010420 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010420:	b580      	push	{r7, lr}
 8010422:	b090      	sub	sp, #64	; 0x40
 8010424:	af00      	add	r7, sp, #0
 8010426:	4603      	mov	r3, r0
 8010428:	603a      	str	r2, [r7, #0]
 801042a:	71fb      	strb	r3, [r7, #7]
 801042c:	460b      	mov	r3, r1
 801042e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010430:	2301      	movs	r3, #1
 8010432:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8010436:	79bb      	ldrb	r3, [r7, #6]
 8010438:	2b03      	cmp	r3, #3
 801043a:	d852      	bhi.n	80104e2 <USBH_ioctl+0xc2>
 801043c:	a201      	add	r2, pc, #4	; (adr r2, 8010444 <USBH_ioctl+0x24>)
 801043e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010442:	bf00      	nop
 8010444:	08010455 	.word	0x08010455
 8010448:	0801045d 	.word	0x0801045d
 801044c:	08010487 	.word	0x08010487
 8010450:	080104b3 	.word	0x080104b3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8010454:	2300      	movs	r3, #0
 8010456:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 801045a:	e045      	b.n	80104e8 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 801045c:	f107 0208 	add.w	r2, r7, #8
 8010460:	79fb      	ldrb	r3, [r7, #7]
 8010462:	4619      	mov	r1, r3
 8010464:	4823      	ldr	r0, [pc, #140]	; (80104f4 <USBH_ioctl+0xd4>)
 8010466:	f000 fda7 	bl	8010fb8 <USBH_MSC_GetLUNInfo>
 801046a:	4603      	mov	r3, r0
 801046c:	2b00      	cmp	r3, #0
 801046e:	d106      	bne.n	801047e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8010470:	68fa      	ldr	r2, [r7, #12]
 8010472:	683b      	ldr	r3, [r7, #0]
 8010474:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8010476:	2300      	movs	r3, #0
 8010478:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 801047c:	e034      	b.n	80104e8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 801047e:	2301      	movs	r3, #1
 8010480:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8010484:	e030      	b.n	80104e8 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8010486:	f107 0208 	add.w	r2, r7, #8
 801048a:	79fb      	ldrb	r3, [r7, #7]
 801048c:	4619      	mov	r1, r3
 801048e:	4819      	ldr	r0, [pc, #100]	; (80104f4 <USBH_ioctl+0xd4>)
 8010490:	f000 fd92 	bl	8010fb8 <USBH_MSC_GetLUNInfo>
 8010494:	4603      	mov	r3, r0
 8010496:	2b00      	cmp	r3, #0
 8010498:	d107      	bne.n	80104aa <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 801049a:	8a3b      	ldrh	r3, [r7, #16]
 801049c:	461a      	mov	r2, r3
 801049e:	683b      	ldr	r3, [r7, #0]
 80104a0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80104a2:	2300      	movs	r3, #0
 80104a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80104a8:	e01e      	b.n	80104e8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80104aa:	2301      	movs	r3, #1
 80104ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80104b0:	e01a      	b.n	80104e8 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80104b2:	f107 0208 	add.w	r2, r7, #8
 80104b6:	79fb      	ldrb	r3, [r7, #7]
 80104b8:	4619      	mov	r1, r3
 80104ba:	480e      	ldr	r0, [pc, #56]	; (80104f4 <USBH_ioctl+0xd4>)
 80104bc:	f000 fd7c 	bl	8010fb8 <USBH_MSC_GetLUNInfo>
 80104c0:	4603      	mov	r3, r0
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d109      	bne.n	80104da <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80104c6:	8a3b      	ldrh	r3, [r7, #16]
 80104c8:	0a5b      	lsrs	r3, r3, #9
 80104ca:	b29b      	uxth	r3, r3
 80104cc:	461a      	mov	r2, r3
 80104ce:	683b      	ldr	r3, [r7, #0]
 80104d0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80104d2:	2300      	movs	r3, #0
 80104d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80104d8:	e006      	b.n	80104e8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80104da:	2301      	movs	r3, #1
 80104dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80104e0:	e002      	b.n	80104e8 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 80104e2:	2304      	movs	r3, #4
 80104e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 80104e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80104ec:	4618      	mov	r0, r3
 80104ee:	3740      	adds	r7, #64	; 0x40
 80104f0:	46bd      	mov	sp, r7
 80104f2:	bd80      	pop	{r7, pc}
 80104f4:	24030adc 	.word	0x24030adc

080104f8 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80104f8:	b590      	push	{r4, r7, lr}
 80104fa:	b089      	sub	sp, #36	; 0x24
 80104fc:	af04      	add	r7, sp, #16
 80104fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010506:	7919      	ldrb	r1, [r3, #4]
 8010508:	2350      	movs	r3, #80	; 0x50
 801050a:	2206      	movs	r2, #6
 801050c:	6878      	ldr	r0, [r7, #4]
 801050e:	f001 fc8a 	bl	8011e26 <USBH_FindInterface>
 8010512:	4603      	mov	r3, r0
 8010514:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8010516:	7bfb      	ldrb	r3, [r7, #15]
 8010518:	2bff      	cmp	r3, #255	; 0xff
 801051a:	d002      	beq.n	8010522 <USBH_MSC_InterfaceInit+0x2a>
 801051c:	7bfb      	ldrb	r3, [r7, #15]
 801051e:	2b01      	cmp	r3, #1
 8010520:	d901      	bls.n	8010526 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8010522:	2302      	movs	r3, #2
 8010524:	e106      	b.n	8010734 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8010526:	7bfb      	ldrb	r3, [r7, #15]
 8010528:	4619      	mov	r1, r3
 801052a:	6878      	ldr	r0, [r7, #4]
 801052c:	f001 fc5f 	bl	8011dee <USBH_SelectInterface>
 8010530:	4603      	mov	r3, r0
 8010532:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8010534:	7bbb      	ldrb	r3, [r7, #14]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d001      	beq.n	801053e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 801053a:	2302      	movs	r3, #2
 801053c:	e0fa      	b.n	8010734 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8010544:	f44f 7080 	mov.w	r0, #256	; 0x100
 8010548:	f007 fee0 	bl	801830c <malloc>
 801054c:	4603      	mov	r3, r0
 801054e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010556:	69db      	ldr	r3, [r3, #28]
 8010558:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 801055a:	68bb      	ldr	r3, [r7, #8]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d101      	bne.n	8010564 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8010560:	2302      	movs	r3, #2
 8010562:	e0e7      	b.n	8010734 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8010564:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010568:	2100      	movs	r1, #0
 801056a:	68b8      	ldr	r0, [r7, #8]
 801056c:	f007 feec 	bl	8018348 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8010570:	7bfb      	ldrb	r3, [r7, #15]
 8010572:	687a      	ldr	r2, [r7, #4]
 8010574:	211a      	movs	r1, #26
 8010576:	fb01 f303 	mul.w	r3, r1, r3
 801057a:	4413      	add	r3, r2
 801057c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8010580:	781b      	ldrb	r3, [r3, #0]
 8010582:	b25b      	sxtb	r3, r3
 8010584:	2b00      	cmp	r3, #0
 8010586:	da16      	bge.n	80105b6 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8010588:	7bfb      	ldrb	r3, [r7, #15]
 801058a:	687a      	ldr	r2, [r7, #4]
 801058c:	211a      	movs	r1, #26
 801058e:	fb01 f303 	mul.w	r3, r1, r3
 8010592:	4413      	add	r3, r2
 8010594:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8010598:	781a      	ldrb	r2, [r3, #0]
 801059a:	68bb      	ldr	r3, [r7, #8]
 801059c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 801059e:	7bfb      	ldrb	r3, [r7, #15]
 80105a0:	687a      	ldr	r2, [r7, #4]
 80105a2:	211a      	movs	r1, #26
 80105a4:	fb01 f303 	mul.w	r3, r1, r3
 80105a8:	4413      	add	r3, r2
 80105aa:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80105ae:	881a      	ldrh	r2, [r3, #0]
 80105b0:	68bb      	ldr	r3, [r7, #8]
 80105b2:	815a      	strh	r2, [r3, #10]
 80105b4:	e015      	b.n	80105e2 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80105b6:	7bfb      	ldrb	r3, [r7, #15]
 80105b8:	687a      	ldr	r2, [r7, #4]
 80105ba:	211a      	movs	r1, #26
 80105bc:	fb01 f303 	mul.w	r3, r1, r3
 80105c0:	4413      	add	r3, r2
 80105c2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80105c6:	781a      	ldrb	r2, [r3, #0]
 80105c8:	68bb      	ldr	r3, [r7, #8]
 80105ca:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80105cc:	7bfb      	ldrb	r3, [r7, #15]
 80105ce:	687a      	ldr	r2, [r7, #4]
 80105d0:	211a      	movs	r1, #26
 80105d2:	fb01 f303 	mul.w	r3, r1, r3
 80105d6:	4413      	add	r3, r2
 80105d8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80105dc:	881a      	ldrh	r2, [r3, #0]
 80105de:	68bb      	ldr	r3, [r7, #8]
 80105e0:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80105e2:	7bfb      	ldrb	r3, [r7, #15]
 80105e4:	687a      	ldr	r2, [r7, #4]
 80105e6:	211a      	movs	r1, #26
 80105e8:	fb01 f303 	mul.w	r3, r1, r3
 80105ec:	4413      	add	r3, r2
 80105ee:	f203 3356 	addw	r3, r3, #854	; 0x356
 80105f2:	781b      	ldrb	r3, [r3, #0]
 80105f4:	b25b      	sxtb	r3, r3
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	da16      	bge.n	8010628 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80105fa:	7bfb      	ldrb	r3, [r7, #15]
 80105fc:	687a      	ldr	r2, [r7, #4]
 80105fe:	211a      	movs	r1, #26
 8010600:	fb01 f303 	mul.w	r3, r1, r3
 8010604:	4413      	add	r3, r2
 8010606:	f203 3356 	addw	r3, r3, #854	; 0x356
 801060a:	781a      	ldrb	r2, [r3, #0]
 801060c:	68bb      	ldr	r3, [r7, #8]
 801060e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8010610:	7bfb      	ldrb	r3, [r7, #15]
 8010612:	687a      	ldr	r2, [r7, #4]
 8010614:	211a      	movs	r1, #26
 8010616:	fb01 f303 	mul.w	r3, r1, r3
 801061a:	4413      	add	r3, r2
 801061c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8010620:	881a      	ldrh	r2, [r3, #0]
 8010622:	68bb      	ldr	r3, [r7, #8]
 8010624:	815a      	strh	r2, [r3, #10]
 8010626:	e015      	b.n	8010654 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8010628:	7bfb      	ldrb	r3, [r7, #15]
 801062a:	687a      	ldr	r2, [r7, #4]
 801062c:	211a      	movs	r1, #26
 801062e:	fb01 f303 	mul.w	r3, r1, r3
 8010632:	4413      	add	r3, r2
 8010634:	f203 3356 	addw	r3, r3, #854	; 0x356
 8010638:	781a      	ldrb	r2, [r3, #0]
 801063a:	68bb      	ldr	r3, [r7, #8]
 801063c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 801063e:	7bfb      	ldrb	r3, [r7, #15]
 8010640:	687a      	ldr	r2, [r7, #4]
 8010642:	211a      	movs	r1, #26
 8010644:	fb01 f303 	mul.w	r3, r1, r3
 8010648:	4413      	add	r3, r2
 801064a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 801064e:	881a      	ldrh	r2, [r3, #0]
 8010650:	68bb      	ldr	r3, [r7, #8]
 8010652:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8010654:	68bb      	ldr	r3, [r7, #8]
 8010656:	2200      	movs	r2, #0
 8010658:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 801065a:	68bb      	ldr	r3, [r7, #8]
 801065c:	2200      	movs	r2, #0
 801065e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8010660:	68bb      	ldr	r3, [r7, #8]
 8010662:	2200      	movs	r2, #0
 8010664:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8010666:	68bb      	ldr	r3, [r7, #8]
 8010668:	799b      	ldrb	r3, [r3, #6]
 801066a:	4619      	mov	r1, r3
 801066c:	6878      	ldr	r0, [r7, #4]
 801066e:	f002 ff6c 	bl	801354a <USBH_AllocPipe>
 8010672:	4603      	mov	r3, r0
 8010674:	461a      	mov	r2, r3
 8010676:	68bb      	ldr	r3, [r7, #8]
 8010678:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 801067a:	68bb      	ldr	r3, [r7, #8]
 801067c:	79db      	ldrb	r3, [r3, #7]
 801067e:	4619      	mov	r1, r3
 8010680:	6878      	ldr	r0, [r7, #4]
 8010682:	f002 ff62 	bl	801354a <USBH_AllocPipe>
 8010686:	4603      	mov	r3, r0
 8010688:	461a      	mov	r2, r3
 801068a:	68bb      	ldr	r3, [r7, #8]
 801068c:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 801068e:	6878      	ldr	r0, [r7, #4]
 8010690:	f000 fdc4 	bl	801121c <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8010694:	68bb      	ldr	r3, [r7, #8]
 8010696:	799b      	ldrb	r3, [r3, #6]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d01e      	beq.n	80106da <USBH_MSC_InterfaceInit+0x1e2>
 801069c:	68bb      	ldr	r3, [r7, #8]
 801069e:	891b      	ldrh	r3, [r3, #8]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d01a      	beq.n	80106da <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80106a4:	68bb      	ldr	r3, [r7, #8]
 80106a6:	7959      	ldrb	r1, [r3, #5]
 80106a8:	68bb      	ldr	r3, [r7, #8]
 80106aa:	7998      	ldrb	r0, [r3, #6]
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80106b8:	68ba      	ldr	r2, [r7, #8]
 80106ba:	8912      	ldrh	r2, [r2, #8]
 80106bc:	9202      	str	r2, [sp, #8]
 80106be:	2202      	movs	r2, #2
 80106c0:	9201      	str	r2, [sp, #4]
 80106c2:	9300      	str	r3, [sp, #0]
 80106c4:	4623      	mov	r3, r4
 80106c6:	4602      	mov	r2, r0
 80106c8:	6878      	ldr	r0, [r7, #4]
 80106ca:	f002 ff0f 	bl	80134ec <USBH_OpenPipe>
 80106ce:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 80106d0:	68bb      	ldr	r3, [r7, #8]
 80106d2:	79db      	ldrb	r3, [r3, #7]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d02c      	beq.n	8010732 <USBH_MSC_InterfaceInit+0x23a>
 80106d8:	e001      	b.n	80106de <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 80106da:	2303      	movs	r3, #3
 80106dc:	e02a      	b.n	8010734 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 80106de:	68bb      	ldr	r3, [r7, #8]
 80106e0:	895b      	ldrh	r3, [r3, #10]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d025      	beq.n	8010732 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80106e6:	68bb      	ldr	r3, [r7, #8]
 80106e8:	7919      	ldrb	r1, [r3, #4]
 80106ea:	68bb      	ldr	r3, [r7, #8]
 80106ec:	79d8      	ldrb	r0, [r3, #7]
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80106fa:	68ba      	ldr	r2, [r7, #8]
 80106fc:	8952      	ldrh	r2, [r2, #10]
 80106fe:	9202      	str	r2, [sp, #8]
 8010700:	2202      	movs	r2, #2
 8010702:	9201      	str	r2, [sp, #4]
 8010704:	9300      	str	r3, [sp, #0]
 8010706:	4623      	mov	r3, r4
 8010708:	4602      	mov	r2, r0
 801070a:	6878      	ldr	r0, [r7, #4]
 801070c:	f002 feee 	bl	80134ec <USBH_OpenPipe>
 8010710:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8010712:	68bb      	ldr	r3, [r7, #8]
 8010714:	791b      	ldrb	r3, [r3, #4]
 8010716:	2200      	movs	r2, #0
 8010718:	4619      	mov	r1, r3
 801071a:	6878      	ldr	r0, [r7, #4]
 801071c:	f005 ff80 	bl	8016620 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8010720:	68bb      	ldr	r3, [r7, #8]
 8010722:	795b      	ldrb	r3, [r3, #5]
 8010724:	2200      	movs	r2, #0
 8010726:	4619      	mov	r1, r3
 8010728:	6878      	ldr	r0, [r7, #4]
 801072a:	f005 ff79 	bl	8016620 <USBH_LL_SetToggle>

  return USBH_OK;
 801072e:	2300      	movs	r3, #0
 8010730:	e000      	b.n	8010734 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 8010732:	2303      	movs	r3, #3
}
 8010734:	4618      	mov	r0, r3
 8010736:	3714      	adds	r7, #20
 8010738:	46bd      	mov	sp, r7
 801073a:	bd90      	pop	{r4, r7, pc}

0801073c <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b084      	sub	sp, #16
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801074a:	69db      	ldr	r3, [r3, #28]
 801074c:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	795b      	ldrb	r3, [r3, #5]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d00e      	beq.n	8010774 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	795b      	ldrb	r3, [r3, #5]
 801075a:	4619      	mov	r1, r3
 801075c:	6878      	ldr	r0, [r7, #4]
 801075e:	f002 fee4 	bl	801352a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	795b      	ldrb	r3, [r3, #5]
 8010766:	4619      	mov	r1, r3
 8010768:	6878      	ldr	r0, [r7, #4]
 801076a:	f002 ff0f 	bl	801358c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	2200      	movs	r2, #0
 8010772:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	791b      	ldrb	r3, [r3, #4]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d00e      	beq.n	801079a <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	791b      	ldrb	r3, [r3, #4]
 8010780:	4619      	mov	r1, r3
 8010782:	6878      	ldr	r0, [r7, #4]
 8010784:	f002 fed1 	bl	801352a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	791b      	ldrb	r3, [r3, #4]
 801078c:	4619      	mov	r1, r3
 801078e:	6878      	ldr	r0, [r7, #4]
 8010790:	f002 fefc 	bl	801358c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	2200      	movs	r2, #0
 8010798:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80107a0:	69db      	ldr	r3, [r3, #28]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d00b      	beq.n	80107be <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80107ac:	69db      	ldr	r3, [r3, #28]
 80107ae:	4618      	mov	r0, r3
 80107b0:	f007 fdb4 	bl	801831c <free>
    phost->pActiveClass->pData = 0U;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80107ba:	2200      	movs	r2, #0
 80107bc:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80107be:	2300      	movs	r3, #0
}
 80107c0:	4618      	mov	r0, r3
 80107c2:	3710      	adds	r7, #16
 80107c4:	46bd      	mov	sp, r7
 80107c6:	bd80      	pop	{r7, pc}

080107c8 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80107c8:	b580      	push	{r7, lr}
 80107ca:	b084      	sub	sp, #16
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80107d6:	69db      	ldr	r3, [r3, #28]
 80107d8:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80107da:	2301      	movs	r3, #1
 80107dc:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80107de:	68bb      	ldr	r3, [r7, #8]
 80107e0:	7b9b      	ldrb	r3, [r3, #14]
 80107e2:	2b03      	cmp	r3, #3
 80107e4:	d041      	beq.n	801086a <USBH_MSC_ClassRequest+0xa2>
 80107e6:	2b03      	cmp	r3, #3
 80107e8:	dc4b      	bgt.n	8010882 <USBH_MSC_ClassRequest+0xba>
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d001      	beq.n	80107f2 <USBH_MSC_ClassRequest+0x2a>
 80107ee:	2b02      	cmp	r3, #2
 80107f0:	d147      	bne.n	8010882 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80107f2:	68bb      	ldr	r3, [r7, #8]
 80107f4:	4619      	mov	r1, r3
 80107f6:	6878      	ldr	r0, [r7, #4]
 80107f8:	f000 fcf1 	bl	80111de <USBH_MSC_BOT_REQ_GetMaxLUN>
 80107fc:	4603      	mov	r3, r0
 80107fe:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8010800:	7bfb      	ldrb	r3, [r7, #15]
 8010802:	2b03      	cmp	r3, #3
 8010804:	d104      	bne.n	8010810 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8010806:	68bb      	ldr	r3, [r7, #8]
 8010808:	2200      	movs	r2, #0
 801080a:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 801080c:	2300      	movs	r3, #0
 801080e:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8010810:	7bfb      	ldrb	r3, [r7, #15]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d137      	bne.n	8010886 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8010816:	68bb      	ldr	r3, [r7, #8]
 8010818:	781b      	ldrb	r3, [r3, #0]
 801081a:	2b02      	cmp	r3, #2
 801081c:	d804      	bhi.n	8010828 <USBH_MSC_ClassRequest+0x60>
 801081e:	68bb      	ldr	r3, [r7, #8]
 8010820:	781b      	ldrb	r3, [r3, #0]
 8010822:	3301      	adds	r3, #1
 8010824:	b2da      	uxtb	r2, r3
 8010826:	e000      	b.n	801082a <USBH_MSC_ClassRequest+0x62>
 8010828:	2202      	movs	r2, #2
 801082a:	68bb      	ldr	r3, [r7, #8]
 801082c:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 801082e:	2300      	movs	r3, #0
 8010830:	73bb      	strb	r3, [r7, #14]
 8010832:	e014      	b.n	801085e <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8010834:	7bbb      	ldrb	r3, [r7, #14]
 8010836:	68ba      	ldr	r2, [r7, #8]
 8010838:	2134      	movs	r1, #52	; 0x34
 801083a:	fb01 f303 	mul.w	r3, r1, r3
 801083e:	4413      	add	r3, r2
 8010840:	3392      	adds	r3, #146	; 0x92
 8010842:	2202      	movs	r2, #2
 8010844:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8010846:	7bbb      	ldrb	r3, [r7, #14]
 8010848:	68ba      	ldr	r2, [r7, #8]
 801084a:	2134      	movs	r1, #52	; 0x34
 801084c:	fb01 f303 	mul.w	r3, r1, r3
 8010850:	4413      	add	r3, r2
 8010852:	33c1      	adds	r3, #193	; 0xc1
 8010854:	2200      	movs	r2, #0
 8010856:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8010858:	7bbb      	ldrb	r3, [r7, #14]
 801085a:	3301      	adds	r3, #1
 801085c:	73bb      	strb	r3, [r7, #14]
 801085e:	68bb      	ldr	r3, [r7, #8]
 8010860:	781b      	ldrb	r3, [r3, #0]
 8010862:	7bba      	ldrb	r2, [r7, #14]
 8010864:	429a      	cmp	r2, r3
 8010866:	d3e5      	bcc.n	8010834 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8010868:	e00d      	b.n	8010886 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 801086a:	2100      	movs	r1, #0
 801086c:	6878      	ldr	r0, [r7, #4]
 801086e:	f002 f8bb 	bl	80129e8 <USBH_ClrFeature>
 8010872:	4603      	mov	r3, r0
 8010874:	2b00      	cmp	r3, #0
 8010876:	d108      	bne.n	801088a <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8010878:	68bb      	ldr	r3, [r7, #8]
 801087a:	7bda      	ldrb	r2, [r3, #15]
 801087c:	68bb      	ldr	r3, [r7, #8]
 801087e:	739a      	strb	r2, [r3, #14]
      }
      break;
 8010880:	e003      	b.n	801088a <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8010882:	bf00      	nop
 8010884:	e002      	b.n	801088c <USBH_MSC_ClassRequest+0xc4>
      break;
 8010886:	bf00      	nop
 8010888:	e000      	b.n	801088c <USBH_MSC_ClassRequest+0xc4>
      break;
 801088a:	bf00      	nop
  }

  return status;
 801088c:	7bfb      	ldrb	r3, [r7, #15]
}
 801088e:	4618      	mov	r0, r3
 8010890:	3710      	adds	r7, #16
 8010892:	46bd      	mov	sp, r7
 8010894:	bd80      	pop	{r7, pc}
	...

08010898 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8010898:	b580      	push	{r7, lr}
 801089a:	b086      	sub	sp, #24
 801089c:	af00      	add	r7, sp, #0
 801089e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80108a6:	69db      	ldr	r3, [r3, #28]
 80108a8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80108aa:	2301      	movs	r3, #1
 80108ac:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80108ae:	2301      	movs	r3, #1
 80108b0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80108b2:	2301      	movs	r3, #1
 80108b4:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80108b6:	693b      	ldr	r3, [r7, #16]
 80108b8:	7b1b      	ldrb	r3, [r3, #12]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d003      	beq.n	80108c6 <USBH_MSC_Process+0x2e>
 80108be:	2b01      	cmp	r3, #1
 80108c0:	f000 8271 	beq.w	8010da6 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80108c4:	e272      	b.n	8010dac <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80108c6:	693b      	ldr	r3, [r7, #16]
 80108c8:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80108cc:	693b      	ldr	r3, [r7, #16]
 80108ce:	781b      	ldrb	r3, [r3, #0]
 80108d0:	b29b      	uxth	r3, r3
 80108d2:	429a      	cmp	r2, r3
 80108d4:	f080 824f 	bcs.w	8010d76 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80108d8:	693b      	ldr	r3, [r7, #16]
 80108da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80108de:	4619      	mov	r1, r3
 80108e0:	693a      	ldr	r2, [r7, #16]
 80108e2:	2334      	movs	r3, #52	; 0x34
 80108e4:	fb01 f303 	mul.w	r3, r1, r3
 80108e8:	4413      	add	r3, r2
 80108ea:	3391      	adds	r3, #145	; 0x91
 80108ec:	2201      	movs	r2, #1
 80108ee:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80108f0:	693b      	ldr	r3, [r7, #16]
 80108f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80108f6:	4619      	mov	r1, r3
 80108f8:	693a      	ldr	r2, [r7, #16]
 80108fa:	2334      	movs	r3, #52	; 0x34
 80108fc:	fb01 f303 	mul.w	r3, r1, r3
 8010900:	4413      	add	r3, r2
 8010902:	3390      	adds	r3, #144	; 0x90
 8010904:	781b      	ldrb	r3, [r3, #0]
 8010906:	2b08      	cmp	r3, #8
 8010908:	f200 8243 	bhi.w	8010d92 <USBH_MSC_Process+0x4fa>
 801090c:	a201      	add	r2, pc, #4	; (adr r2, 8010914 <USBH_MSC_Process+0x7c>)
 801090e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010912:	bf00      	nop
 8010914:	08010939 	.word	0x08010939
 8010918:	08010d93 	.word	0x08010d93
 801091c:	08010a01 	.word	0x08010a01
 8010920:	08010b85 	.word	0x08010b85
 8010924:	0801095f 	.word	0x0801095f
 8010928:	08010c51 	.word	0x08010c51
 801092c:	08010d93 	.word	0x08010d93
 8010930:	08010d93 	.word	0x08010d93
 8010934:	08010d65 	.word	0x08010d65
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8010938:	693b      	ldr	r3, [r7, #16]
 801093a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801093e:	4619      	mov	r1, r3
 8010940:	693a      	ldr	r2, [r7, #16]
 8010942:	2334      	movs	r3, #52	; 0x34
 8010944:	fb01 f303 	mul.w	r3, r1, r3
 8010948:	4413      	add	r3, r2
 801094a:	3390      	adds	r3, #144	; 0x90
 801094c:	2204      	movs	r2, #4
 801094e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8010956:	693b      	ldr	r3, [r7, #16]
 8010958:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 801095c:	e222      	b.n	8010da4 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 801095e:	693b      	ldr	r3, [r7, #16]
 8010960:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010964:	b2d9      	uxtb	r1, r3
 8010966:	693b      	ldr	r3, [r7, #16]
 8010968:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801096c:	461a      	mov	r2, r3
 801096e:	2334      	movs	r3, #52	; 0x34
 8010970:	fb02 f303 	mul.w	r3, r2, r3
 8010974:	3398      	adds	r3, #152	; 0x98
 8010976:	693a      	ldr	r2, [r7, #16]
 8010978:	4413      	add	r3, r2
 801097a:	3307      	adds	r3, #7
 801097c:	461a      	mov	r2, r3
 801097e:	6878      	ldr	r0, [r7, #4]
 8010980:	f000 ff6a 	bl	8011858 <USBH_MSC_SCSI_Inquiry>
 8010984:	4603      	mov	r3, r0
 8010986:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8010988:	7bfb      	ldrb	r3, [r7, #15]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d10b      	bne.n	80109a6 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 801098e:	693b      	ldr	r3, [r7, #16]
 8010990:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010994:	4619      	mov	r1, r3
 8010996:	693a      	ldr	r2, [r7, #16]
 8010998:	2334      	movs	r3, #52	; 0x34
 801099a:	fb01 f303 	mul.w	r3, r1, r3
 801099e:	4413      	add	r3, r2
 80109a0:	3390      	adds	r3, #144	; 0x90
 80109a2:	2202      	movs	r2, #2
 80109a4:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80109a6:	7bfb      	ldrb	r3, [r7, #15]
 80109a8:	2b02      	cmp	r3, #2
 80109aa:	d10c      	bne.n	80109c6 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80109ac:	693b      	ldr	r3, [r7, #16]
 80109ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80109b2:	4619      	mov	r1, r3
 80109b4:	693a      	ldr	r2, [r7, #16]
 80109b6:	2334      	movs	r3, #52	; 0x34
 80109b8:	fb01 f303 	mul.w	r3, r1, r3
 80109bc:	4413      	add	r3, r2
 80109be:	3390      	adds	r3, #144	; 0x90
 80109c0:	2205      	movs	r2, #5
 80109c2:	701a      	strb	r2, [r3, #0]
            break;
 80109c4:	e1e7      	b.n	8010d96 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80109c6:	7bfb      	ldrb	r3, [r7, #15]
 80109c8:	2b04      	cmp	r3, #4
 80109ca:	f040 81e4 	bne.w	8010d96 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80109ce:	693b      	ldr	r3, [r7, #16]
 80109d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80109d4:	4619      	mov	r1, r3
 80109d6:	693a      	ldr	r2, [r7, #16]
 80109d8:	2334      	movs	r3, #52	; 0x34
 80109da:	fb01 f303 	mul.w	r3, r1, r3
 80109de:	4413      	add	r3, r2
 80109e0:	3390      	adds	r3, #144	; 0x90
 80109e2:	2201      	movs	r2, #1
 80109e4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80109e6:	693b      	ldr	r3, [r7, #16]
 80109e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80109ec:	4619      	mov	r1, r3
 80109ee:	693a      	ldr	r2, [r7, #16]
 80109f0:	2334      	movs	r3, #52	; 0x34
 80109f2:	fb01 f303 	mul.w	r3, r1, r3
 80109f6:	4413      	add	r3, r2
 80109f8:	3391      	adds	r3, #145	; 0x91
 80109fa:	2202      	movs	r2, #2
 80109fc:	701a      	strb	r2, [r3, #0]
            break;
 80109fe:	e1ca      	b.n	8010d96 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8010a00:	693b      	ldr	r3, [r7, #16]
 8010a02:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010a06:	b2db      	uxtb	r3, r3
 8010a08:	4619      	mov	r1, r3
 8010a0a:	6878      	ldr	r0, [r7, #4]
 8010a0c:	f000 fe66 	bl	80116dc <USBH_MSC_SCSI_TestUnitReady>
 8010a10:	4603      	mov	r3, r0
 8010a12:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8010a14:	7bbb      	ldrb	r3, [r7, #14]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d149      	bne.n	8010aae <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8010a1a:	693b      	ldr	r3, [r7, #16]
 8010a1c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010a20:	4619      	mov	r1, r3
 8010a22:	693a      	ldr	r2, [r7, #16]
 8010a24:	2334      	movs	r3, #52	; 0x34
 8010a26:	fb01 f303 	mul.w	r3, r1, r3
 8010a2a:	4413      	add	r3, r2
 8010a2c:	3392      	adds	r3, #146	; 0x92
 8010a2e:	781b      	ldrb	r3, [r3, #0]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d00c      	beq.n	8010a4e <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8010a34:	693b      	ldr	r3, [r7, #16]
 8010a36:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010a3a:	4619      	mov	r1, r3
 8010a3c:	693a      	ldr	r2, [r7, #16]
 8010a3e:	2334      	movs	r3, #52	; 0x34
 8010a40:	fb01 f303 	mul.w	r3, r1, r3
 8010a44:	4413      	add	r3, r2
 8010a46:	33c1      	adds	r3, #193	; 0xc1
 8010a48:	2201      	movs	r2, #1
 8010a4a:	701a      	strb	r2, [r3, #0]
 8010a4c:	e00b      	b.n	8010a66 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8010a4e:	693b      	ldr	r3, [r7, #16]
 8010a50:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010a54:	4619      	mov	r1, r3
 8010a56:	693a      	ldr	r2, [r7, #16]
 8010a58:	2334      	movs	r3, #52	; 0x34
 8010a5a:	fb01 f303 	mul.w	r3, r1, r3
 8010a5e:	4413      	add	r3, r2
 8010a60:	33c1      	adds	r3, #193	; 0xc1
 8010a62:	2200      	movs	r2, #0
 8010a64:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8010a66:	693b      	ldr	r3, [r7, #16]
 8010a68:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010a6c:	4619      	mov	r1, r3
 8010a6e:	693a      	ldr	r2, [r7, #16]
 8010a70:	2334      	movs	r3, #52	; 0x34
 8010a72:	fb01 f303 	mul.w	r3, r1, r3
 8010a76:	4413      	add	r3, r2
 8010a78:	3390      	adds	r3, #144	; 0x90
 8010a7a:	2203      	movs	r2, #3
 8010a7c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8010a7e:	693b      	ldr	r3, [r7, #16]
 8010a80:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010a84:	4619      	mov	r1, r3
 8010a86:	693a      	ldr	r2, [r7, #16]
 8010a88:	2334      	movs	r3, #52	; 0x34
 8010a8a:	fb01 f303 	mul.w	r3, r1, r3
 8010a8e:	4413      	add	r3, r2
 8010a90:	3391      	adds	r3, #145	; 0x91
 8010a92:	2200      	movs	r2, #0
 8010a94:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8010a96:	693b      	ldr	r3, [r7, #16]
 8010a98:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010a9c:	4619      	mov	r1, r3
 8010a9e:	693a      	ldr	r2, [r7, #16]
 8010aa0:	2334      	movs	r3, #52	; 0x34
 8010aa2:	fb01 f303 	mul.w	r3, r1, r3
 8010aa6:	4413      	add	r3, r2
 8010aa8:	3392      	adds	r3, #146	; 0x92
 8010aaa:	2200      	movs	r2, #0
 8010aac:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8010aae:	7bbb      	ldrb	r3, [r7, #14]
 8010ab0:	2b02      	cmp	r3, #2
 8010ab2:	d14a      	bne.n	8010b4a <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8010ab4:	693b      	ldr	r3, [r7, #16]
 8010ab6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010aba:	4619      	mov	r1, r3
 8010abc:	693a      	ldr	r2, [r7, #16]
 8010abe:	2334      	movs	r3, #52	; 0x34
 8010ac0:	fb01 f303 	mul.w	r3, r1, r3
 8010ac4:	4413      	add	r3, r2
 8010ac6:	3392      	adds	r3, #146	; 0x92
 8010ac8:	781b      	ldrb	r3, [r3, #0]
 8010aca:	2b02      	cmp	r3, #2
 8010acc:	d00c      	beq.n	8010ae8 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8010ace:	693b      	ldr	r3, [r7, #16]
 8010ad0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010ad4:	4619      	mov	r1, r3
 8010ad6:	693a      	ldr	r2, [r7, #16]
 8010ad8:	2334      	movs	r3, #52	; 0x34
 8010ada:	fb01 f303 	mul.w	r3, r1, r3
 8010ade:	4413      	add	r3, r2
 8010ae0:	33c1      	adds	r3, #193	; 0xc1
 8010ae2:	2201      	movs	r2, #1
 8010ae4:	701a      	strb	r2, [r3, #0]
 8010ae6:	e00b      	b.n	8010b00 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8010ae8:	693b      	ldr	r3, [r7, #16]
 8010aea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010aee:	4619      	mov	r1, r3
 8010af0:	693a      	ldr	r2, [r7, #16]
 8010af2:	2334      	movs	r3, #52	; 0x34
 8010af4:	fb01 f303 	mul.w	r3, r1, r3
 8010af8:	4413      	add	r3, r2
 8010afa:	33c1      	adds	r3, #193	; 0xc1
 8010afc:	2200      	movs	r2, #0
 8010afe:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8010b00:	693b      	ldr	r3, [r7, #16]
 8010b02:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010b06:	4619      	mov	r1, r3
 8010b08:	693a      	ldr	r2, [r7, #16]
 8010b0a:	2334      	movs	r3, #52	; 0x34
 8010b0c:	fb01 f303 	mul.w	r3, r1, r3
 8010b10:	4413      	add	r3, r2
 8010b12:	3390      	adds	r3, #144	; 0x90
 8010b14:	2205      	movs	r2, #5
 8010b16:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8010b18:	693b      	ldr	r3, [r7, #16]
 8010b1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010b1e:	4619      	mov	r1, r3
 8010b20:	693a      	ldr	r2, [r7, #16]
 8010b22:	2334      	movs	r3, #52	; 0x34
 8010b24:	fb01 f303 	mul.w	r3, r1, r3
 8010b28:	4413      	add	r3, r2
 8010b2a:	3391      	adds	r3, #145	; 0x91
 8010b2c:	2201      	movs	r2, #1
 8010b2e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8010b30:	693b      	ldr	r3, [r7, #16]
 8010b32:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010b36:	4619      	mov	r1, r3
 8010b38:	693a      	ldr	r2, [r7, #16]
 8010b3a:	2334      	movs	r3, #52	; 0x34
 8010b3c:	fb01 f303 	mul.w	r3, r1, r3
 8010b40:	4413      	add	r3, r2
 8010b42:	3392      	adds	r3, #146	; 0x92
 8010b44:	2202      	movs	r2, #2
 8010b46:	701a      	strb	r2, [r3, #0]
            break;
 8010b48:	e127      	b.n	8010d9a <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8010b4a:	7bbb      	ldrb	r3, [r7, #14]
 8010b4c:	2b04      	cmp	r3, #4
 8010b4e:	f040 8124 	bne.w	8010d9a <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8010b52:	693b      	ldr	r3, [r7, #16]
 8010b54:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010b58:	4619      	mov	r1, r3
 8010b5a:	693a      	ldr	r2, [r7, #16]
 8010b5c:	2334      	movs	r3, #52	; 0x34
 8010b5e:	fb01 f303 	mul.w	r3, r1, r3
 8010b62:	4413      	add	r3, r2
 8010b64:	3390      	adds	r3, #144	; 0x90
 8010b66:	2201      	movs	r2, #1
 8010b68:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8010b6a:	693b      	ldr	r3, [r7, #16]
 8010b6c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010b70:	4619      	mov	r1, r3
 8010b72:	693a      	ldr	r2, [r7, #16]
 8010b74:	2334      	movs	r3, #52	; 0x34
 8010b76:	fb01 f303 	mul.w	r3, r1, r3
 8010b7a:	4413      	add	r3, r2
 8010b7c:	3391      	adds	r3, #145	; 0x91
 8010b7e:	2202      	movs	r2, #2
 8010b80:	701a      	strb	r2, [r3, #0]
            break;
 8010b82:	e10a      	b.n	8010d9a <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity);
 8010b84:	693b      	ldr	r3, [r7, #16]
 8010b86:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010b8a:	b2d9      	uxtb	r1, r3
 8010b8c:	693b      	ldr	r3, [r7, #16]
 8010b8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010b92:	461a      	mov	r2, r3
 8010b94:	2334      	movs	r3, #52	; 0x34
 8010b96:	fb02 f303 	mul.w	r3, r2, r3
 8010b9a:	3390      	adds	r3, #144	; 0x90
 8010b9c:	693a      	ldr	r2, [r7, #16]
 8010b9e:	4413      	add	r3, r2
 8010ba0:	3304      	adds	r3, #4
 8010ba2:	461a      	mov	r2, r3
 8010ba4:	6878      	ldr	r0, [r7, #4]
 8010ba6:	f000 fddc 	bl	8011762 <USBH_MSC_SCSI_ReadCapacity>
 8010baa:	4603      	mov	r3, r0
 8010bac:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8010bae:	7bfb      	ldrb	r3, [r7, #15]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d120      	bne.n	8010bf6 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8010bb4:	693b      	ldr	r3, [r7, #16]
 8010bb6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010bba:	4619      	mov	r1, r3
 8010bbc:	693a      	ldr	r2, [r7, #16]
 8010bbe:	2334      	movs	r3, #52	; 0x34
 8010bc0:	fb01 f303 	mul.w	r3, r1, r3
 8010bc4:	4413      	add	r3, r2
 8010bc6:	3390      	adds	r3, #144	; 0x90
 8010bc8:	2201      	movs	r2, #1
 8010bca:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8010bcc:	693b      	ldr	r3, [r7, #16]
 8010bce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010bd2:	4619      	mov	r1, r3
 8010bd4:	693a      	ldr	r2, [r7, #16]
 8010bd6:	2334      	movs	r3, #52	; 0x34
 8010bd8:	fb01 f303 	mul.w	r3, r1, r3
 8010bdc:	4413      	add	r3, r2
 8010bde:	3391      	adds	r3, #145	; 0x91
 8010be0:	2200      	movs	r2, #0
 8010be2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8010be4:	693b      	ldr	r3, [r7, #16]
 8010be6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010bea:	3301      	adds	r3, #1
 8010bec:	b29a      	uxth	r2, r3
 8010bee:	693b      	ldr	r3, [r7, #16]
 8010bf0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8010bf4:	e0d3      	b.n	8010d9e <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8010bf6:	7bfb      	ldrb	r3, [r7, #15]
 8010bf8:	2b02      	cmp	r3, #2
 8010bfa:	d10c      	bne.n	8010c16 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8010bfc:	693b      	ldr	r3, [r7, #16]
 8010bfe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010c02:	4619      	mov	r1, r3
 8010c04:	693a      	ldr	r2, [r7, #16]
 8010c06:	2334      	movs	r3, #52	; 0x34
 8010c08:	fb01 f303 	mul.w	r3, r1, r3
 8010c0c:	4413      	add	r3, r2
 8010c0e:	3390      	adds	r3, #144	; 0x90
 8010c10:	2205      	movs	r2, #5
 8010c12:	701a      	strb	r2, [r3, #0]
            break;
 8010c14:	e0c3      	b.n	8010d9e <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8010c16:	7bfb      	ldrb	r3, [r7, #15]
 8010c18:	2b04      	cmp	r3, #4
 8010c1a:	f040 80c0 	bne.w	8010d9e <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8010c1e:	693b      	ldr	r3, [r7, #16]
 8010c20:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010c24:	4619      	mov	r1, r3
 8010c26:	693a      	ldr	r2, [r7, #16]
 8010c28:	2334      	movs	r3, #52	; 0x34
 8010c2a:	fb01 f303 	mul.w	r3, r1, r3
 8010c2e:	4413      	add	r3, r2
 8010c30:	3390      	adds	r3, #144	; 0x90
 8010c32:	2201      	movs	r2, #1
 8010c34:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8010c36:	693b      	ldr	r3, [r7, #16]
 8010c38:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010c3c:	4619      	mov	r1, r3
 8010c3e:	693a      	ldr	r2, [r7, #16]
 8010c40:	2334      	movs	r3, #52	; 0x34
 8010c42:	fb01 f303 	mul.w	r3, r1, r3
 8010c46:	4413      	add	r3, r2
 8010c48:	3391      	adds	r3, #145	; 0x91
 8010c4a:	2202      	movs	r2, #2
 8010c4c:	701a      	strb	r2, [r3, #0]
            break;
 8010c4e:	e0a6      	b.n	8010d9e <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8010c50:	693b      	ldr	r3, [r7, #16]
 8010c52:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010c56:	b2d9      	uxtb	r1, r3
 8010c58:	693b      	ldr	r3, [r7, #16]
 8010c5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010c5e:	461a      	mov	r2, r3
 8010c60:	2334      	movs	r3, #52	; 0x34
 8010c62:	fb02 f303 	mul.w	r3, r2, r3
 8010c66:	3398      	adds	r3, #152	; 0x98
 8010c68:	693a      	ldr	r2, [r7, #16]
 8010c6a:	4413      	add	r3, r2
 8010c6c:	3304      	adds	r3, #4
 8010c6e:	461a      	mov	r2, r3
 8010c70:	6878      	ldr	r0, [r7, #4]
 8010c72:	f000 fe96 	bl	80119a2 <USBH_MSC_SCSI_RequestSense>
 8010c76:	4603      	mov	r3, r0
 8010c78:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8010c7a:	7bfb      	ldrb	r3, [r7, #15]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d145      	bne.n	8010d0c <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8010c80:	693b      	ldr	r3, [r7, #16]
 8010c82:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010c86:	4619      	mov	r1, r3
 8010c88:	693a      	ldr	r2, [r7, #16]
 8010c8a:	2334      	movs	r3, #52	; 0x34
 8010c8c:	fb01 f303 	mul.w	r3, r1, r3
 8010c90:	4413      	add	r3, r2
 8010c92:	339c      	adds	r3, #156	; 0x9c
 8010c94:	781b      	ldrb	r3, [r3, #0]
 8010c96:	2b06      	cmp	r3, #6
 8010c98:	d00c      	beq.n	8010cb4 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8010c9a:	693b      	ldr	r3, [r7, #16]
 8010c9c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010ca0:	4619      	mov	r1, r3
 8010ca2:	693a      	ldr	r2, [r7, #16]
 8010ca4:	2334      	movs	r3, #52	; 0x34
 8010ca6:	fb01 f303 	mul.w	r3, r1, r3
 8010caa:	4413      	add	r3, r2
 8010cac:	339c      	adds	r3, #156	; 0x9c
 8010cae:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8010cb0:	2b02      	cmp	r3, #2
 8010cb2:	d117      	bne.n	8010ce4 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8010cba:	693b      	ldr	r3, [r7, #16]
 8010cbc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8010cc0:	1ad3      	subs	r3, r2, r3
 8010cc2:	f242 720f 	movw	r2, #9999	; 0x270f
 8010cc6:	4293      	cmp	r3, r2
 8010cc8:	d80c      	bhi.n	8010ce4 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8010cca:	693b      	ldr	r3, [r7, #16]
 8010ccc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010cd0:	4619      	mov	r1, r3
 8010cd2:	693a      	ldr	r2, [r7, #16]
 8010cd4:	2334      	movs	r3, #52	; 0x34
 8010cd6:	fb01 f303 	mul.w	r3, r1, r3
 8010cda:	4413      	add	r3, r2
 8010cdc:	3390      	adds	r3, #144	; 0x90
 8010cde:	2202      	movs	r2, #2
 8010ce0:	701a      	strb	r2, [r3, #0]
                  break;
 8010ce2:	e05f      	b.n	8010da4 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8010ce4:	693b      	ldr	r3, [r7, #16]
 8010ce6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010cea:	4619      	mov	r1, r3
 8010cec:	693a      	ldr	r2, [r7, #16]
 8010cee:	2334      	movs	r3, #52	; 0x34
 8010cf0:	fb01 f303 	mul.w	r3, r1, r3
 8010cf4:	4413      	add	r3, r2
 8010cf6:	3390      	adds	r3, #144	; 0x90
 8010cf8:	2201      	movs	r2, #1
 8010cfa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8010cfc:	693b      	ldr	r3, [r7, #16]
 8010cfe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010d02:	3301      	adds	r3, #1
 8010d04:	b29a      	uxth	r2, r3
 8010d06:	693b      	ldr	r3, [r7, #16]
 8010d08:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8010d0c:	7bfb      	ldrb	r3, [r7, #15]
 8010d0e:	2b02      	cmp	r3, #2
 8010d10:	d10c      	bne.n	8010d2c <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8010d12:	693b      	ldr	r3, [r7, #16]
 8010d14:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010d18:	4619      	mov	r1, r3
 8010d1a:	693a      	ldr	r2, [r7, #16]
 8010d1c:	2334      	movs	r3, #52	; 0x34
 8010d1e:	fb01 f303 	mul.w	r3, r1, r3
 8010d22:	4413      	add	r3, r2
 8010d24:	3390      	adds	r3, #144	; 0x90
 8010d26:	2208      	movs	r2, #8
 8010d28:	701a      	strb	r2, [r3, #0]
            break;
 8010d2a:	e03a      	b.n	8010da2 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8010d2c:	7bfb      	ldrb	r3, [r7, #15]
 8010d2e:	2b04      	cmp	r3, #4
 8010d30:	d137      	bne.n	8010da2 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8010d32:	693b      	ldr	r3, [r7, #16]
 8010d34:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010d38:	4619      	mov	r1, r3
 8010d3a:	693a      	ldr	r2, [r7, #16]
 8010d3c:	2334      	movs	r3, #52	; 0x34
 8010d3e:	fb01 f303 	mul.w	r3, r1, r3
 8010d42:	4413      	add	r3, r2
 8010d44:	3390      	adds	r3, #144	; 0x90
 8010d46:	2201      	movs	r2, #1
 8010d48:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8010d4a:	693b      	ldr	r3, [r7, #16]
 8010d4c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010d50:	4619      	mov	r1, r3
 8010d52:	693a      	ldr	r2, [r7, #16]
 8010d54:	2334      	movs	r3, #52	; 0x34
 8010d56:	fb01 f303 	mul.w	r3, r1, r3
 8010d5a:	4413      	add	r3, r2
 8010d5c:	3391      	adds	r3, #145	; 0x91
 8010d5e:	2202      	movs	r2, #2
 8010d60:	701a      	strb	r2, [r3, #0]
            break;
 8010d62:	e01e      	b.n	8010da2 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8010d64:	693b      	ldr	r3, [r7, #16]
 8010d66:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010d6a:	3301      	adds	r3, #1
 8010d6c:	b29a      	uxth	r2, r3
 8010d6e:	693b      	ldr	r3, [r7, #16]
 8010d70:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8010d74:	e016      	b.n	8010da4 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8010d76:	693b      	ldr	r3, [r7, #16]
 8010d78:	2200      	movs	r2, #0
 8010d7a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8010d7e:	693b      	ldr	r3, [r7, #16]
 8010d80:	2201      	movs	r2, #1
 8010d82:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010d8a:	2102      	movs	r1, #2
 8010d8c:	6878      	ldr	r0, [r7, #4]
 8010d8e:	4798      	blx	r3
      break;
 8010d90:	e00c      	b.n	8010dac <USBH_MSC_Process+0x514>
            break;
 8010d92:	bf00      	nop
 8010d94:	e00a      	b.n	8010dac <USBH_MSC_Process+0x514>
            break;
 8010d96:	bf00      	nop
 8010d98:	e008      	b.n	8010dac <USBH_MSC_Process+0x514>
            break;
 8010d9a:	bf00      	nop
 8010d9c:	e006      	b.n	8010dac <USBH_MSC_Process+0x514>
            break;
 8010d9e:	bf00      	nop
 8010da0:	e004      	b.n	8010dac <USBH_MSC_Process+0x514>
            break;
 8010da2:	bf00      	nop
      break;
 8010da4:	e002      	b.n	8010dac <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8010da6:	2300      	movs	r3, #0
 8010da8:	75fb      	strb	r3, [r7, #23]
      break;
 8010daa:	bf00      	nop
  }
  return error;
 8010dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8010dae:	4618      	mov	r0, r3
 8010db0:	3718      	adds	r7, #24
 8010db2:	46bd      	mov	sp, r7
 8010db4:	bd80      	pop	{r7, pc}
 8010db6:	bf00      	nop

08010db8 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8010db8:	b480      	push	{r7}
 8010dba:	b083      	sub	sp, #12
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8010dc0:	2300      	movs	r3, #0
}
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	370c      	adds	r7, #12
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dcc:	4770      	bx	lr

08010dce <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8010dce:	b580      	push	{r7, lr}
 8010dd0:	b088      	sub	sp, #32
 8010dd2:	af02      	add	r7, sp, #8
 8010dd4:	6078      	str	r0, [r7, #4]
 8010dd6:	460b      	mov	r3, r1
 8010dd8:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010de0:	69db      	ldr	r3, [r3, #28]
 8010de2:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8010de4:	2301      	movs	r3, #1
 8010de6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8010de8:	2301      	movs	r3, #1
 8010dea:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8010dec:	78fb      	ldrb	r3, [r7, #3]
 8010dee:	693a      	ldr	r2, [r7, #16]
 8010df0:	2134      	movs	r1, #52	; 0x34
 8010df2:	fb01 f303 	mul.w	r3, r1, r3
 8010df6:	4413      	add	r3, r2
 8010df8:	3390      	adds	r3, #144	; 0x90
 8010dfa:	781b      	ldrb	r3, [r3, #0]
 8010dfc:	2b07      	cmp	r3, #7
 8010dfe:	d03c      	beq.n	8010e7a <USBH_MSC_RdWrProcess+0xac>
 8010e00:	2b07      	cmp	r3, #7
 8010e02:	f300 80a7 	bgt.w	8010f54 <USBH_MSC_RdWrProcess+0x186>
 8010e06:	2b05      	cmp	r3, #5
 8010e08:	d06c      	beq.n	8010ee4 <USBH_MSC_RdWrProcess+0x116>
 8010e0a:	2b06      	cmp	r3, #6
 8010e0c:	f040 80a2 	bne.w	8010f54 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8010e10:	78f9      	ldrb	r1, [r7, #3]
 8010e12:	2300      	movs	r3, #0
 8010e14:	9300      	str	r3, [sp, #0]
 8010e16:	2300      	movs	r3, #0
 8010e18:	2200      	movs	r2, #0
 8010e1a:	6878      	ldr	r0, [r7, #4]
 8010e1c:	f000 fea5 	bl	8011b6a <USBH_MSC_SCSI_Read>
 8010e20:	4603      	mov	r3, r0
 8010e22:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8010e24:	7bfb      	ldrb	r3, [r7, #15]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d10b      	bne.n	8010e42 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8010e2a:	78fb      	ldrb	r3, [r7, #3]
 8010e2c:	693a      	ldr	r2, [r7, #16]
 8010e2e:	2134      	movs	r1, #52	; 0x34
 8010e30:	fb01 f303 	mul.w	r3, r1, r3
 8010e34:	4413      	add	r3, r2
 8010e36:	3390      	adds	r3, #144	; 0x90
 8010e38:	2201      	movs	r2, #1
 8010e3a:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8010e40:	e08a      	b.n	8010f58 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8010e42:	7bfb      	ldrb	r3, [r7, #15]
 8010e44:	2b02      	cmp	r3, #2
 8010e46:	d109      	bne.n	8010e5c <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8010e48:	78fb      	ldrb	r3, [r7, #3]
 8010e4a:	693a      	ldr	r2, [r7, #16]
 8010e4c:	2134      	movs	r1, #52	; 0x34
 8010e4e:	fb01 f303 	mul.w	r3, r1, r3
 8010e52:	4413      	add	r3, r2
 8010e54:	3390      	adds	r3, #144	; 0x90
 8010e56:	2205      	movs	r2, #5
 8010e58:	701a      	strb	r2, [r3, #0]
      break;
 8010e5a:	e07d      	b.n	8010f58 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8010e5c:	7bfb      	ldrb	r3, [r7, #15]
 8010e5e:	2b04      	cmp	r3, #4
 8010e60:	d17a      	bne.n	8010f58 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8010e62:	78fb      	ldrb	r3, [r7, #3]
 8010e64:	693a      	ldr	r2, [r7, #16]
 8010e66:	2134      	movs	r1, #52	; 0x34
 8010e68:	fb01 f303 	mul.w	r3, r1, r3
 8010e6c:	4413      	add	r3, r2
 8010e6e:	3390      	adds	r3, #144	; 0x90
 8010e70:	2208      	movs	r2, #8
 8010e72:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8010e74:	2302      	movs	r3, #2
 8010e76:	75fb      	strb	r3, [r7, #23]
      break;
 8010e78:	e06e      	b.n	8010f58 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8010e7a:	78f9      	ldrb	r1, [r7, #3]
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	9300      	str	r3, [sp, #0]
 8010e80:	2300      	movs	r3, #0
 8010e82:	2200      	movs	r2, #0
 8010e84:	6878      	ldr	r0, [r7, #4]
 8010e86:	f000 fe05 	bl	8011a94 <USBH_MSC_SCSI_Write>
 8010e8a:	4603      	mov	r3, r0
 8010e8c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8010e8e:	7bfb      	ldrb	r3, [r7, #15]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d10b      	bne.n	8010eac <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8010e94:	78fb      	ldrb	r3, [r7, #3]
 8010e96:	693a      	ldr	r2, [r7, #16]
 8010e98:	2134      	movs	r1, #52	; 0x34
 8010e9a:	fb01 f303 	mul.w	r3, r1, r3
 8010e9e:	4413      	add	r3, r2
 8010ea0:	3390      	adds	r3, #144	; 0x90
 8010ea2:	2201      	movs	r2, #1
 8010ea4:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8010eaa:	e057      	b.n	8010f5c <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8010eac:	7bfb      	ldrb	r3, [r7, #15]
 8010eae:	2b02      	cmp	r3, #2
 8010eb0:	d109      	bne.n	8010ec6 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8010eb2:	78fb      	ldrb	r3, [r7, #3]
 8010eb4:	693a      	ldr	r2, [r7, #16]
 8010eb6:	2134      	movs	r1, #52	; 0x34
 8010eb8:	fb01 f303 	mul.w	r3, r1, r3
 8010ebc:	4413      	add	r3, r2
 8010ebe:	3390      	adds	r3, #144	; 0x90
 8010ec0:	2205      	movs	r2, #5
 8010ec2:	701a      	strb	r2, [r3, #0]
      break;
 8010ec4:	e04a      	b.n	8010f5c <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8010ec6:	7bfb      	ldrb	r3, [r7, #15]
 8010ec8:	2b04      	cmp	r3, #4
 8010eca:	d147      	bne.n	8010f5c <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8010ecc:	78fb      	ldrb	r3, [r7, #3]
 8010ece:	693a      	ldr	r2, [r7, #16]
 8010ed0:	2134      	movs	r1, #52	; 0x34
 8010ed2:	fb01 f303 	mul.w	r3, r1, r3
 8010ed6:	4413      	add	r3, r2
 8010ed8:	3390      	adds	r3, #144	; 0x90
 8010eda:	2208      	movs	r2, #8
 8010edc:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8010ede:	2302      	movs	r3, #2
 8010ee0:	75fb      	strb	r3, [r7, #23]
      break;
 8010ee2:	e03b      	b.n	8010f5c <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8010ee4:	78fb      	ldrb	r3, [r7, #3]
 8010ee6:	2234      	movs	r2, #52	; 0x34
 8010ee8:	fb02 f303 	mul.w	r3, r2, r3
 8010eec:	3398      	adds	r3, #152	; 0x98
 8010eee:	693a      	ldr	r2, [r7, #16]
 8010ef0:	4413      	add	r3, r2
 8010ef2:	1d1a      	adds	r2, r3, #4
 8010ef4:	78fb      	ldrb	r3, [r7, #3]
 8010ef6:	4619      	mov	r1, r3
 8010ef8:	6878      	ldr	r0, [r7, #4]
 8010efa:	f000 fd52 	bl	80119a2 <USBH_MSC_SCSI_RequestSense>
 8010efe:	4603      	mov	r3, r0
 8010f00:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8010f02:	7bfb      	ldrb	r3, [r7, #15]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d113      	bne.n	8010f30 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8010f08:	78fb      	ldrb	r3, [r7, #3]
 8010f0a:	693a      	ldr	r2, [r7, #16]
 8010f0c:	2134      	movs	r1, #52	; 0x34
 8010f0e:	fb01 f303 	mul.w	r3, r1, r3
 8010f12:	4413      	add	r3, r2
 8010f14:	3390      	adds	r3, #144	; 0x90
 8010f16:	2201      	movs	r2, #1
 8010f18:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8010f1a:	78fb      	ldrb	r3, [r7, #3]
 8010f1c:	693a      	ldr	r2, [r7, #16]
 8010f1e:	2134      	movs	r1, #52	; 0x34
 8010f20:	fb01 f303 	mul.w	r3, r1, r3
 8010f24:	4413      	add	r3, r2
 8010f26:	3391      	adds	r3, #145	; 0x91
 8010f28:	2202      	movs	r2, #2
 8010f2a:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8010f2c:	2302      	movs	r3, #2
 8010f2e:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8010f30:	7bfb      	ldrb	r3, [r7, #15]
 8010f32:	2b02      	cmp	r3, #2
 8010f34:	d014      	beq.n	8010f60 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8010f36:	7bfb      	ldrb	r3, [r7, #15]
 8010f38:	2b04      	cmp	r3, #4
 8010f3a:	d111      	bne.n	8010f60 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8010f3c:	78fb      	ldrb	r3, [r7, #3]
 8010f3e:	693a      	ldr	r2, [r7, #16]
 8010f40:	2134      	movs	r1, #52	; 0x34
 8010f42:	fb01 f303 	mul.w	r3, r1, r3
 8010f46:	4413      	add	r3, r2
 8010f48:	3390      	adds	r3, #144	; 0x90
 8010f4a:	2208      	movs	r2, #8
 8010f4c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8010f4e:	2302      	movs	r3, #2
 8010f50:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8010f52:	e005      	b.n	8010f60 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8010f54:	bf00      	nop
 8010f56:	e004      	b.n	8010f62 <USBH_MSC_RdWrProcess+0x194>
      break;
 8010f58:	bf00      	nop
 8010f5a:	e002      	b.n	8010f62 <USBH_MSC_RdWrProcess+0x194>
      break;
 8010f5c:	bf00      	nop
 8010f5e:	e000      	b.n	8010f62 <USBH_MSC_RdWrProcess+0x194>
      break;
 8010f60:	bf00      	nop

  }
  return error;
 8010f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f64:	4618      	mov	r0, r3
 8010f66:	3718      	adds	r7, #24
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	bd80      	pop	{r7, pc}

08010f6c <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8010f6c:	b480      	push	{r7}
 8010f6e:	b085      	sub	sp, #20
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	6078      	str	r0, [r7, #4]
 8010f74:	460b      	mov	r3, r1
 8010f76:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010f7e:	69db      	ldr	r3, [r3, #28]
 8010f80:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	781b      	ldrb	r3, [r3, #0]
 8010f86:	b2db      	uxtb	r3, r3
 8010f88:	2b0b      	cmp	r3, #11
 8010f8a:	d10c      	bne.n	8010fa6 <USBH_MSC_UnitIsReady+0x3a>
 8010f8c:	78fb      	ldrb	r3, [r7, #3]
 8010f8e:	68ba      	ldr	r2, [r7, #8]
 8010f90:	2134      	movs	r1, #52	; 0x34
 8010f92:	fb01 f303 	mul.w	r3, r1, r3
 8010f96:	4413      	add	r3, r2
 8010f98:	3391      	adds	r3, #145	; 0x91
 8010f9a:	781b      	ldrb	r3, [r3, #0]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d102      	bne.n	8010fa6 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8010fa0:	2301      	movs	r3, #1
 8010fa2:	73fb      	strb	r3, [r7, #15]
 8010fa4:	e001      	b.n	8010faa <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8010fa6:	2300      	movs	r3, #0
 8010fa8:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8010faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fac:	4618      	mov	r0, r3
 8010fae:	3714      	adds	r7, #20
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb6:	4770      	bx	lr

08010fb8 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b086      	sub	sp, #24
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	60f8      	str	r0, [r7, #12]
 8010fc0:	460b      	mov	r3, r1
 8010fc2:	607a      	str	r2, [r7, #4]
 8010fc4:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010fcc:	69db      	ldr	r3, [r3, #28]
 8010fce:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	781b      	ldrb	r3, [r3, #0]
 8010fd4:	b2db      	uxtb	r3, r3
 8010fd6:	2b0b      	cmp	r3, #11
 8010fd8:	d10d      	bne.n	8010ff6 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8010fda:	7afb      	ldrb	r3, [r7, #11]
 8010fdc:	2234      	movs	r2, #52	; 0x34
 8010fde:	fb02 f303 	mul.w	r3, r2, r3
 8010fe2:	3390      	adds	r3, #144	; 0x90
 8010fe4:	697a      	ldr	r2, [r7, #20]
 8010fe6:	4413      	add	r3, r2
 8010fe8:	2234      	movs	r2, #52	; 0x34
 8010fea:	4619      	mov	r1, r3
 8010fec:	6878      	ldr	r0, [r7, #4]
 8010fee:	f007 f99d 	bl	801832c <memcpy>
    return USBH_OK;
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	e000      	b.n	8010ff8 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8010ff6:	2302      	movs	r3, #2
  }
}
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	3718      	adds	r7, #24
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	bd80      	pop	{r7, pc}

08011000 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8011000:	b580      	push	{r7, lr}
 8011002:	b088      	sub	sp, #32
 8011004:	af02      	add	r7, sp, #8
 8011006:	60f8      	str	r0, [r7, #12]
 8011008:	607a      	str	r2, [r7, #4]
 801100a:	603b      	str	r3, [r7, #0]
 801100c:	460b      	mov	r3, r1
 801100e:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011016:	69db      	ldr	r3, [r3, #28]
 8011018:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8011020:	b2db      	uxtb	r3, r3
 8011022:	2b00      	cmp	r3, #0
 8011024:	d00e      	beq.n	8011044 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	781b      	ldrb	r3, [r3, #0]
 801102a:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 801102c:	2b0b      	cmp	r3, #11
 801102e:	d109      	bne.n	8011044 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8011030:	7afb      	ldrb	r3, [r7, #11]
 8011032:	697a      	ldr	r2, [r7, #20]
 8011034:	2134      	movs	r1, #52	; 0x34
 8011036:	fb01 f303 	mul.w	r3, r1, r3
 801103a:	4413      	add	r3, r2
 801103c:	3390      	adds	r3, #144	; 0x90
 801103e:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8011040:	2b01      	cmp	r3, #1
 8011042:	d001      	beq.n	8011048 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8011044:	2302      	movs	r3, #2
 8011046:	e040      	b.n	80110ca <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8011048:	697b      	ldr	r3, [r7, #20]
 801104a:	2206      	movs	r2, #6
 801104c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 801104e:	7afb      	ldrb	r3, [r7, #11]
 8011050:	697a      	ldr	r2, [r7, #20]
 8011052:	2134      	movs	r1, #52	; 0x34
 8011054:	fb01 f303 	mul.w	r3, r1, r3
 8011058:	4413      	add	r3, r2
 801105a:	3390      	adds	r3, #144	; 0x90
 801105c:	2206      	movs	r2, #6
 801105e:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8011060:	7afb      	ldrb	r3, [r7, #11]
 8011062:	b29a      	uxth	r2, r3
 8011064:	697b      	ldr	r3, [r7, #20]
 8011066:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 801106a:	7af9      	ldrb	r1, [r7, #11]
 801106c:	6a3b      	ldr	r3, [r7, #32]
 801106e:	9300      	str	r3, [sp, #0]
 8011070:	683b      	ldr	r3, [r7, #0]
 8011072:	687a      	ldr	r2, [r7, #4]
 8011074:	68f8      	ldr	r0, [r7, #12]
 8011076:	f000 fd78 	bl	8011b6a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8011080:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8011082:	e016      	b.n	80110b2 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 801108a:	693b      	ldr	r3, [r7, #16]
 801108c:	1ad2      	subs	r2, r2, r3
 801108e:	6a3b      	ldr	r3, [r7, #32]
 8011090:	f242 7110 	movw	r1, #10000	; 0x2710
 8011094:	fb01 f303 	mul.w	r3, r1, r3
 8011098:	429a      	cmp	r2, r3
 801109a:	d805      	bhi.n	80110a8 <USBH_MSC_Read+0xa8>
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80110a2:	b2db      	uxtb	r3, r3
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d104      	bne.n	80110b2 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80110a8:	697b      	ldr	r3, [r7, #20]
 80110aa:	2201      	movs	r2, #1
 80110ac:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80110ae:	2302      	movs	r3, #2
 80110b0:	e00b      	b.n	80110ca <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80110b2:	7afb      	ldrb	r3, [r7, #11]
 80110b4:	4619      	mov	r1, r3
 80110b6:	68f8      	ldr	r0, [r7, #12]
 80110b8:	f7ff fe89 	bl	8010dce <USBH_MSC_RdWrProcess>
 80110bc:	4603      	mov	r3, r0
 80110be:	2b01      	cmp	r3, #1
 80110c0:	d0e0      	beq.n	8011084 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80110c2:	697b      	ldr	r3, [r7, #20]
 80110c4:	2201      	movs	r2, #1
 80110c6:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 80110c8:	2300      	movs	r3, #0
}
 80110ca:	4618      	mov	r0, r3
 80110cc:	3718      	adds	r7, #24
 80110ce:	46bd      	mov	sp, r7
 80110d0:	bd80      	pop	{r7, pc}

080110d2 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 80110d2:	b580      	push	{r7, lr}
 80110d4:	b088      	sub	sp, #32
 80110d6:	af02      	add	r7, sp, #8
 80110d8:	60f8      	str	r0, [r7, #12]
 80110da:	607a      	str	r2, [r7, #4]
 80110dc:	603b      	str	r3, [r7, #0]
 80110de:	460b      	mov	r3, r1
 80110e0:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80110e8:	69db      	ldr	r3, [r3, #28]
 80110ea:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80110f2:	b2db      	uxtb	r3, r3
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d00e      	beq.n	8011116 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	781b      	ldrb	r3, [r3, #0]
 80110fc:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80110fe:	2b0b      	cmp	r3, #11
 8011100:	d109      	bne.n	8011116 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8011102:	7afb      	ldrb	r3, [r7, #11]
 8011104:	697a      	ldr	r2, [r7, #20]
 8011106:	2134      	movs	r1, #52	; 0x34
 8011108:	fb01 f303 	mul.w	r3, r1, r3
 801110c:	4413      	add	r3, r2
 801110e:	3390      	adds	r3, #144	; 0x90
 8011110:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8011112:	2b01      	cmp	r3, #1
 8011114:	d001      	beq.n	801111a <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8011116:	2302      	movs	r3, #2
 8011118:	e040      	b.n	801119c <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 801111a:	697b      	ldr	r3, [r7, #20]
 801111c:	2207      	movs	r2, #7
 801111e:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8011120:	7afb      	ldrb	r3, [r7, #11]
 8011122:	697a      	ldr	r2, [r7, #20]
 8011124:	2134      	movs	r1, #52	; 0x34
 8011126:	fb01 f303 	mul.w	r3, r1, r3
 801112a:	4413      	add	r3, r2
 801112c:	3390      	adds	r3, #144	; 0x90
 801112e:	2207      	movs	r2, #7
 8011130:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8011132:	7afb      	ldrb	r3, [r7, #11]
 8011134:	b29a      	uxth	r2, r3
 8011136:	697b      	ldr	r3, [r7, #20]
 8011138:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 801113c:	7af9      	ldrb	r1, [r7, #11]
 801113e:	6a3b      	ldr	r3, [r7, #32]
 8011140:	9300      	str	r3, [sp, #0]
 8011142:	683b      	ldr	r3, [r7, #0]
 8011144:	687a      	ldr	r2, [r7, #4]
 8011146:	68f8      	ldr	r0, [r7, #12]
 8011148:	f000 fca4 	bl	8011a94 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8011152:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8011154:	e016      	b.n	8011184 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 801115c:	693b      	ldr	r3, [r7, #16]
 801115e:	1ad2      	subs	r2, r2, r3
 8011160:	6a3b      	ldr	r3, [r7, #32]
 8011162:	f242 7110 	movw	r1, #10000	; 0x2710
 8011166:	fb01 f303 	mul.w	r3, r1, r3
 801116a:	429a      	cmp	r2, r3
 801116c:	d805      	bhi.n	801117a <USBH_MSC_Write+0xa8>
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8011174:	b2db      	uxtb	r3, r3
 8011176:	2b00      	cmp	r3, #0
 8011178:	d104      	bne.n	8011184 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 801117a:	697b      	ldr	r3, [r7, #20]
 801117c:	2201      	movs	r2, #1
 801117e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8011180:	2302      	movs	r3, #2
 8011182:	e00b      	b.n	801119c <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8011184:	7afb      	ldrb	r3, [r7, #11]
 8011186:	4619      	mov	r1, r3
 8011188:	68f8      	ldr	r0, [r7, #12]
 801118a:	f7ff fe20 	bl	8010dce <USBH_MSC_RdWrProcess>
 801118e:	4603      	mov	r3, r0
 8011190:	2b01      	cmp	r3, #1
 8011192:	d0e0      	beq.n	8011156 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8011194:	697b      	ldr	r3, [r7, #20]
 8011196:	2201      	movs	r2, #1
 8011198:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 801119a:	2300      	movs	r3, #0
}
 801119c:	4618      	mov	r0, r3
 801119e:	3718      	adds	r7, #24
 80111a0:	46bd      	mov	sp, r7
 80111a2:	bd80      	pop	{r7, pc}

080111a4 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b082      	sub	sp, #8
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	2221      	movs	r2, #33	; 0x21
 80111b0:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	22ff      	movs	r2, #255	; 0xff
 80111b6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	2200      	movs	r2, #0
 80111bc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	2200      	movs	r2, #0
 80111c2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	2200      	movs	r2, #0
 80111c8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 80111ca:	2200      	movs	r2, #0
 80111cc:	2100      	movs	r1, #0
 80111ce:	6878      	ldr	r0, [r7, #4]
 80111d0:	f001 ff3b 	bl	801304a <USBH_CtlReq>
 80111d4:	4603      	mov	r3, r0
}
 80111d6:	4618      	mov	r0, r3
 80111d8:	3708      	adds	r7, #8
 80111da:	46bd      	mov	sp, r7
 80111dc:	bd80      	pop	{r7, pc}

080111de <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80111de:	b580      	push	{r7, lr}
 80111e0:	b082      	sub	sp, #8
 80111e2:	af00      	add	r7, sp, #0
 80111e4:	6078      	str	r0, [r7, #4]
 80111e6:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	22a1      	movs	r2, #161	; 0xa1
 80111ec:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	22fe      	movs	r2, #254	; 0xfe
 80111f2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	2200      	movs	r2, #0
 80111f8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	2200      	movs	r2, #0
 80111fe:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	2201      	movs	r2, #1
 8011204:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8011206:	2201      	movs	r2, #1
 8011208:	6839      	ldr	r1, [r7, #0]
 801120a:	6878      	ldr	r0, [r7, #4]
 801120c:	f001 ff1d 	bl	801304a <USBH_CtlReq>
 8011210:	4603      	mov	r3, r0
}
 8011212:	4618      	mov	r0, r3
 8011214:	3708      	adds	r7, #8
 8011216:	46bd      	mov	sp, r7
 8011218:	bd80      	pop	{r7, pc}
	...

0801121c <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 801121c:	b480      	push	{r7}
 801121e:	b085      	sub	sp, #20
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801122a:	69db      	ldr	r3, [r3, #28]
 801122c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	4a09      	ldr	r2, [pc, #36]	; (8011258 <USBH_MSC_BOT_Init+0x3c>)
 8011232:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	4a09      	ldr	r2, [pc, #36]	; (801125c <USBH_MSC_BOT_Init+0x40>)
 8011238:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	2201      	movs	r2, #1
 801123e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	2201      	movs	r2, #1
 8011246:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 801124a:	2300      	movs	r3, #0
}
 801124c:	4618      	mov	r0, r3
 801124e:	3714      	adds	r7, #20
 8011250:	46bd      	mov	sp, r7
 8011252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011256:	4770      	bx	lr
 8011258:	43425355 	.word	0x43425355
 801125c:	20304050 	.word	0x20304050

08011260 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8011260:	b580      	push	{r7, lr}
 8011262:	b088      	sub	sp, #32
 8011264:	af02      	add	r7, sp, #8
 8011266:	6078      	str	r0, [r7, #4]
 8011268:	460b      	mov	r3, r1
 801126a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 801126c:	2301      	movs	r3, #1
 801126e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8011270:	2301      	movs	r3, #1
 8011272:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8011274:	2301      	movs	r3, #1
 8011276:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8011278:	2300      	movs	r3, #0
 801127a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011282:	69db      	ldr	r3, [r3, #28]
 8011284:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8011286:	2300      	movs	r3, #0
 8011288:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 801128a:	693b      	ldr	r3, [r7, #16]
 801128c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8011290:	3b01      	subs	r3, #1
 8011292:	2b0a      	cmp	r3, #10
 8011294:	f200 819e 	bhi.w	80115d4 <USBH_MSC_BOT_Process+0x374>
 8011298:	a201      	add	r2, pc, #4	; (adr r2, 80112a0 <USBH_MSC_BOT_Process+0x40>)
 801129a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801129e:	bf00      	nop
 80112a0:	080112cd 	.word	0x080112cd
 80112a4:	080112f5 	.word	0x080112f5
 80112a8:	0801135f 	.word	0x0801135f
 80112ac:	0801137d 	.word	0x0801137d
 80112b0:	08011401 	.word	0x08011401
 80112b4:	08011423 	.word	0x08011423
 80112b8:	080114bb 	.word	0x080114bb
 80112bc:	080114d7 	.word	0x080114d7
 80112c0:	08011529 	.word	0x08011529
 80112c4:	08011559 	.word	0x08011559
 80112c8:	080115bb 	.word	0x080115bb
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80112cc:	693b      	ldr	r3, [r7, #16]
 80112ce:	78fa      	ldrb	r2, [r7, #3]
 80112d0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80112d4:	693b      	ldr	r3, [r7, #16]
 80112d6:	2202      	movs	r2, #2
 80112d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80112dc:	693b      	ldr	r3, [r7, #16]
 80112de:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80112e2:	693b      	ldr	r3, [r7, #16]
 80112e4:	795b      	ldrb	r3, [r3, #5]
 80112e6:	2201      	movs	r2, #1
 80112e8:	9200      	str	r2, [sp, #0]
 80112ea:	221f      	movs	r2, #31
 80112ec:	6878      	ldr	r0, [r7, #4]
 80112ee:	f002 f8ba 	bl	8013466 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 80112f2:	e17e      	b.n	80115f2 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80112f4:	693b      	ldr	r3, [r7, #16]
 80112f6:	795b      	ldrb	r3, [r3, #5]
 80112f8:	4619      	mov	r1, r3
 80112fa:	6878      	ldr	r0, [r7, #4]
 80112fc:	f005 f966 	bl	80165cc <USBH_LL_GetURBState>
 8011300:	4603      	mov	r3, r0
 8011302:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8011304:	7d3b      	ldrb	r3, [r7, #20]
 8011306:	2b01      	cmp	r3, #1
 8011308:	d118      	bne.n	801133c <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 801130a:	693b      	ldr	r3, [r7, #16]
 801130c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801130e:	2b00      	cmp	r3, #0
 8011310:	d00f      	beq.n	8011332 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8011312:	693b      	ldr	r3, [r7, #16]
 8011314:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8011318:	b25b      	sxtb	r3, r3
 801131a:	2b00      	cmp	r3, #0
 801131c:	da04      	bge.n	8011328 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 801131e:	693b      	ldr	r3, [r7, #16]
 8011320:	2203      	movs	r2, #3
 8011322:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8011326:	e157      	b.n	80115d8 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8011328:	693b      	ldr	r3, [r7, #16]
 801132a:	2205      	movs	r2, #5
 801132c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8011330:	e152      	b.n	80115d8 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8011332:	693b      	ldr	r3, [r7, #16]
 8011334:	2207      	movs	r2, #7
 8011336:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 801133a:	e14d      	b.n	80115d8 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 801133c:	7d3b      	ldrb	r3, [r7, #20]
 801133e:	2b02      	cmp	r3, #2
 8011340:	d104      	bne.n	801134c <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8011342:	693b      	ldr	r3, [r7, #16]
 8011344:	2201      	movs	r2, #1
 8011346:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 801134a:	e145      	b.n	80115d8 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 801134c:	7d3b      	ldrb	r3, [r7, #20]
 801134e:	2b05      	cmp	r3, #5
 8011350:	f040 8142 	bne.w	80115d8 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8011354:	693b      	ldr	r3, [r7, #16]
 8011356:	220a      	movs	r2, #10
 8011358:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 801135c:	e13c      	b.n	80115d8 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 801135e:	693b      	ldr	r3, [r7, #16]
 8011360:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8011364:	693b      	ldr	r3, [r7, #16]
 8011366:	895a      	ldrh	r2, [r3, #10]
 8011368:	693b      	ldr	r3, [r7, #16]
 801136a:	791b      	ldrb	r3, [r3, #4]
 801136c:	6878      	ldr	r0, [r7, #4]
 801136e:	f002 f89f 	bl	80134b0 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8011372:	693b      	ldr	r3, [r7, #16]
 8011374:	2204      	movs	r2, #4
 8011376:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 801137a:	e13a      	b.n	80115f2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 801137c:	693b      	ldr	r3, [r7, #16]
 801137e:	791b      	ldrb	r3, [r3, #4]
 8011380:	4619      	mov	r1, r3
 8011382:	6878      	ldr	r0, [r7, #4]
 8011384:	f005 f922 	bl	80165cc <USBH_LL_GetURBState>
 8011388:	4603      	mov	r3, r0
 801138a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 801138c:	7d3b      	ldrb	r3, [r7, #20]
 801138e:	2b01      	cmp	r3, #1
 8011390:	d12d      	bne.n	80113ee <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8011392:	693b      	ldr	r3, [r7, #16]
 8011394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011396:	693a      	ldr	r2, [r7, #16]
 8011398:	8952      	ldrh	r2, [r2, #10]
 801139a:	4293      	cmp	r3, r2
 801139c:	d910      	bls.n	80113c0 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 801139e:	693b      	ldr	r3, [r7, #16]
 80113a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80113a4:	693a      	ldr	r2, [r7, #16]
 80113a6:	8952      	ldrh	r2, [r2, #10]
 80113a8:	441a      	add	r2, r3
 80113aa:	693b      	ldr	r3, [r7, #16]
 80113ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 80113b0:	693b      	ldr	r3, [r7, #16]
 80113b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80113b4:	693a      	ldr	r2, [r7, #16]
 80113b6:	8952      	ldrh	r2, [r2, #10]
 80113b8:	1a9a      	subs	r2, r3, r2
 80113ba:	693b      	ldr	r3, [r7, #16]
 80113bc:	65da      	str	r2, [r3, #92]	; 0x5c
 80113be:	e002      	b.n	80113c6 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80113c0:	693b      	ldr	r3, [r7, #16]
 80113c2:	2200      	movs	r2, #0
 80113c4:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80113c6:	693b      	ldr	r3, [r7, #16]
 80113c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d00a      	beq.n	80113e4 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80113ce:	693b      	ldr	r3, [r7, #16]
 80113d0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80113d4:	693b      	ldr	r3, [r7, #16]
 80113d6:	895a      	ldrh	r2, [r3, #10]
 80113d8:	693b      	ldr	r3, [r7, #16]
 80113da:	791b      	ldrb	r3, [r3, #4]
 80113dc:	6878      	ldr	r0, [r7, #4]
 80113de:	f002 f867 	bl	80134b0 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 80113e2:	e0fb      	b.n	80115dc <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80113e4:	693b      	ldr	r3, [r7, #16]
 80113e6:	2207      	movs	r2, #7
 80113e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80113ec:	e0f6      	b.n	80115dc <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 80113ee:	7d3b      	ldrb	r3, [r7, #20]
 80113f0:	2b05      	cmp	r3, #5
 80113f2:	f040 80f3 	bne.w	80115dc <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80113f6:	693b      	ldr	r3, [r7, #16]
 80113f8:	2209      	movs	r2, #9
 80113fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80113fe:	e0ed      	b.n	80115dc <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8011400:	693b      	ldr	r3, [r7, #16]
 8011402:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8011406:	693b      	ldr	r3, [r7, #16]
 8011408:	891a      	ldrh	r2, [r3, #8]
 801140a:	693b      	ldr	r3, [r7, #16]
 801140c:	795b      	ldrb	r3, [r3, #5]
 801140e:	2001      	movs	r0, #1
 8011410:	9000      	str	r0, [sp, #0]
 8011412:	6878      	ldr	r0, [r7, #4]
 8011414:	f002 f827 	bl	8013466 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8011418:	693b      	ldr	r3, [r7, #16]
 801141a:	2206      	movs	r2, #6
 801141c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8011420:	e0e7      	b.n	80115f2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8011422:	693b      	ldr	r3, [r7, #16]
 8011424:	795b      	ldrb	r3, [r3, #5]
 8011426:	4619      	mov	r1, r3
 8011428:	6878      	ldr	r0, [r7, #4]
 801142a:	f005 f8cf 	bl	80165cc <USBH_LL_GetURBState>
 801142e:	4603      	mov	r3, r0
 8011430:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8011432:	7d3b      	ldrb	r3, [r7, #20]
 8011434:	2b01      	cmp	r3, #1
 8011436:	d12f      	bne.n	8011498 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8011438:	693b      	ldr	r3, [r7, #16]
 801143a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801143c:	693a      	ldr	r2, [r7, #16]
 801143e:	8912      	ldrh	r2, [r2, #8]
 8011440:	4293      	cmp	r3, r2
 8011442:	d910      	bls.n	8011466 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8011444:	693b      	ldr	r3, [r7, #16]
 8011446:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801144a:	693a      	ldr	r2, [r7, #16]
 801144c:	8912      	ldrh	r2, [r2, #8]
 801144e:	441a      	add	r2, r3
 8011450:	693b      	ldr	r3, [r7, #16]
 8011452:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8011456:	693b      	ldr	r3, [r7, #16]
 8011458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801145a:	693a      	ldr	r2, [r7, #16]
 801145c:	8912      	ldrh	r2, [r2, #8]
 801145e:	1a9a      	subs	r2, r3, r2
 8011460:	693b      	ldr	r3, [r7, #16]
 8011462:	65da      	str	r2, [r3, #92]	; 0x5c
 8011464:	e002      	b.n	801146c <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8011466:	693b      	ldr	r3, [r7, #16]
 8011468:	2200      	movs	r2, #0
 801146a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 801146c:	693b      	ldr	r3, [r7, #16]
 801146e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011470:	2b00      	cmp	r3, #0
 8011472:	d00c      	beq.n	801148e <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8011474:	693b      	ldr	r3, [r7, #16]
 8011476:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 801147a:	693b      	ldr	r3, [r7, #16]
 801147c:	891a      	ldrh	r2, [r3, #8]
 801147e:	693b      	ldr	r3, [r7, #16]
 8011480:	795b      	ldrb	r3, [r3, #5]
 8011482:	2001      	movs	r0, #1
 8011484:	9000      	str	r0, [sp, #0]
 8011486:	6878      	ldr	r0, [r7, #4]
 8011488:	f001 ffed 	bl	8013466 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 801148c:	e0a8      	b.n	80115e0 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 801148e:	693b      	ldr	r3, [r7, #16]
 8011490:	2207      	movs	r2, #7
 8011492:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8011496:	e0a3      	b.n	80115e0 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8011498:	7d3b      	ldrb	r3, [r7, #20]
 801149a:	2b02      	cmp	r3, #2
 801149c:	d104      	bne.n	80114a8 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 801149e:	693b      	ldr	r3, [r7, #16]
 80114a0:	2205      	movs	r2, #5
 80114a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80114a6:	e09b      	b.n	80115e0 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 80114a8:	7d3b      	ldrb	r3, [r7, #20]
 80114aa:	2b05      	cmp	r3, #5
 80114ac:	f040 8098 	bne.w	80115e0 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80114b0:	693b      	ldr	r3, [r7, #16]
 80114b2:	220a      	movs	r2, #10
 80114b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80114b8:	e092      	b.n	80115e0 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 80114ba:	693b      	ldr	r3, [r7, #16]
 80114bc:	f103 0178 	add.w	r1, r3, #120	; 0x78
 80114c0:	693b      	ldr	r3, [r7, #16]
 80114c2:	791b      	ldrb	r3, [r3, #4]
 80114c4:	220d      	movs	r2, #13
 80114c6:	6878      	ldr	r0, [r7, #4]
 80114c8:	f001 fff2 	bl	80134b0 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 80114cc:	693b      	ldr	r3, [r7, #16]
 80114ce:	2208      	movs	r2, #8
 80114d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80114d4:	e08d      	b.n	80115f2 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80114d6:	693b      	ldr	r3, [r7, #16]
 80114d8:	791b      	ldrb	r3, [r3, #4]
 80114da:	4619      	mov	r1, r3
 80114dc:	6878      	ldr	r0, [r7, #4]
 80114de:	f005 f875 	bl	80165cc <USBH_LL_GetURBState>
 80114e2:	4603      	mov	r3, r0
 80114e4:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 80114e6:	7d3b      	ldrb	r3, [r7, #20]
 80114e8:	2b01      	cmp	r3, #1
 80114ea:	d115      	bne.n	8011518 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80114ec:	693b      	ldr	r3, [r7, #16]
 80114ee:	2201      	movs	r2, #1
 80114f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80114f4:	693b      	ldr	r3, [r7, #16]
 80114f6:	2201      	movs	r2, #1
 80114f8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 80114fc:	6878      	ldr	r0, [r7, #4]
 80114fe:	f000 f8a9 	bl	8011654 <USBH_MSC_DecodeCSW>
 8011502:	4603      	mov	r3, r0
 8011504:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8011506:	7d7b      	ldrb	r3, [r7, #21]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d102      	bne.n	8011512 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 801150c:	2300      	movs	r3, #0
 801150e:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8011510:	e068      	b.n	80115e4 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8011512:	2302      	movs	r3, #2
 8011514:	75fb      	strb	r3, [r7, #23]
      break;
 8011516:	e065      	b.n	80115e4 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8011518:	7d3b      	ldrb	r3, [r7, #20]
 801151a:	2b05      	cmp	r3, #5
 801151c:	d162      	bne.n	80115e4 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 801151e:	693b      	ldr	r3, [r7, #16]
 8011520:	2209      	movs	r2, #9
 8011522:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8011526:	e05d      	b.n	80115e4 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8011528:	78fb      	ldrb	r3, [r7, #3]
 801152a:	2200      	movs	r2, #0
 801152c:	4619      	mov	r1, r3
 801152e:	6878      	ldr	r0, [r7, #4]
 8011530:	f000 f864 	bl	80115fc <USBH_MSC_BOT_Abort>
 8011534:	4603      	mov	r3, r0
 8011536:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8011538:	7dbb      	ldrb	r3, [r7, #22]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d104      	bne.n	8011548 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 801153e:	693b      	ldr	r3, [r7, #16]
 8011540:	2207      	movs	r2, #7
 8011542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8011546:	e04f      	b.n	80115e8 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8011548:	7dbb      	ldrb	r3, [r7, #22]
 801154a:	2b04      	cmp	r3, #4
 801154c:	d14c      	bne.n	80115e8 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 801154e:	693b      	ldr	r3, [r7, #16]
 8011550:	220b      	movs	r2, #11
 8011552:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8011556:	e047      	b.n	80115e8 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8011558:	78fb      	ldrb	r3, [r7, #3]
 801155a:	2201      	movs	r2, #1
 801155c:	4619      	mov	r1, r3
 801155e:	6878      	ldr	r0, [r7, #4]
 8011560:	f000 f84c 	bl	80115fc <USBH_MSC_BOT_Abort>
 8011564:	4603      	mov	r3, r0
 8011566:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8011568:	7dbb      	ldrb	r3, [r7, #22]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d11d      	bne.n	80115aa <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 801156e:	693b      	ldr	r3, [r7, #16]
 8011570:	795b      	ldrb	r3, [r3, #5]
 8011572:	4619      	mov	r1, r3
 8011574:	6878      	ldr	r0, [r7, #4]
 8011576:	f005 f883 	bl	8016680 <USBH_LL_GetToggle>
 801157a:	4603      	mov	r3, r0
 801157c:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 801157e:	693b      	ldr	r3, [r7, #16]
 8011580:	7959      	ldrb	r1, [r3, #5]
 8011582:	7bfb      	ldrb	r3, [r7, #15]
 8011584:	f1c3 0301 	rsb	r3, r3, #1
 8011588:	b2db      	uxtb	r3, r3
 801158a:	461a      	mov	r2, r3
 801158c:	6878      	ldr	r0, [r7, #4]
 801158e:	f005 f847 	bl	8016620 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8011592:	693b      	ldr	r3, [r7, #16]
 8011594:	791b      	ldrb	r3, [r3, #4]
 8011596:	2200      	movs	r2, #0
 8011598:	4619      	mov	r1, r3
 801159a:	6878      	ldr	r0, [r7, #4]
 801159c:	f005 f840 	bl	8016620 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 80115a0:	693b      	ldr	r3, [r7, #16]
 80115a2:	2209      	movs	r2, #9
 80115a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 80115a8:	e020      	b.n	80115ec <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 80115aa:	7dbb      	ldrb	r3, [r7, #22]
 80115ac:	2b04      	cmp	r3, #4
 80115ae:	d11d      	bne.n	80115ec <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80115b0:	693b      	ldr	r3, [r7, #16]
 80115b2:	220b      	movs	r2, #11
 80115b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80115b8:	e018      	b.n	80115ec <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 80115ba:	6878      	ldr	r0, [r7, #4]
 80115bc:	f7ff fdf2 	bl	80111a4 <USBH_MSC_BOT_REQ_Reset>
 80115c0:	4603      	mov	r3, r0
 80115c2:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80115c4:	7dfb      	ldrb	r3, [r7, #23]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d112      	bne.n	80115f0 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80115ca:	693b      	ldr	r3, [r7, #16]
 80115cc:	2201      	movs	r2, #1
 80115ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 80115d2:	e00d      	b.n	80115f0 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 80115d4:	bf00      	nop
 80115d6:	e00c      	b.n	80115f2 <USBH_MSC_BOT_Process+0x392>
      break;
 80115d8:	bf00      	nop
 80115da:	e00a      	b.n	80115f2 <USBH_MSC_BOT_Process+0x392>
      break;
 80115dc:	bf00      	nop
 80115de:	e008      	b.n	80115f2 <USBH_MSC_BOT_Process+0x392>
      break;
 80115e0:	bf00      	nop
 80115e2:	e006      	b.n	80115f2 <USBH_MSC_BOT_Process+0x392>
      break;
 80115e4:	bf00      	nop
 80115e6:	e004      	b.n	80115f2 <USBH_MSC_BOT_Process+0x392>
      break;
 80115e8:	bf00      	nop
 80115ea:	e002      	b.n	80115f2 <USBH_MSC_BOT_Process+0x392>
      break;
 80115ec:	bf00      	nop
 80115ee:	e000      	b.n	80115f2 <USBH_MSC_BOT_Process+0x392>
      break;
 80115f0:	bf00      	nop
  }
  return status;
 80115f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80115f4:	4618      	mov	r0, r3
 80115f6:	3718      	adds	r7, #24
 80115f8:	46bd      	mov	sp, r7
 80115fa:	bd80      	pop	{r7, pc}

080115fc <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 80115fc:	b580      	push	{r7, lr}
 80115fe:	b084      	sub	sp, #16
 8011600:	af00      	add	r7, sp, #0
 8011602:	6078      	str	r0, [r7, #4]
 8011604:	460b      	mov	r3, r1
 8011606:	70fb      	strb	r3, [r7, #3]
 8011608:	4613      	mov	r3, r2
 801160a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 801160c:	2302      	movs	r3, #2
 801160e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011616:	69db      	ldr	r3, [r3, #28]
 8011618:	60bb      	str	r3, [r7, #8]

  switch (dir)
 801161a:	78bb      	ldrb	r3, [r7, #2]
 801161c:	2b00      	cmp	r3, #0
 801161e:	d002      	beq.n	8011626 <USBH_MSC_BOT_Abort+0x2a>
 8011620:	2b01      	cmp	r3, #1
 8011622:	d009      	beq.n	8011638 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8011624:	e011      	b.n	801164a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8011626:	68bb      	ldr	r3, [r7, #8]
 8011628:	79db      	ldrb	r3, [r3, #7]
 801162a:	4619      	mov	r1, r3
 801162c:	6878      	ldr	r0, [r7, #4]
 801162e:	f001 f9db 	bl	80129e8 <USBH_ClrFeature>
 8011632:	4603      	mov	r3, r0
 8011634:	73fb      	strb	r3, [r7, #15]
      break;
 8011636:	e008      	b.n	801164a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8011638:	68bb      	ldr	r3, [r7, #8]
 801163a:	799b      	ldrb	r3, [r3, #6]
 801163c:	4619      	mov	r1, r3
 801163e:	6878      	ldr	r0, [r7, #4]
 8011640:	f001 f9d2 	bl	80129e8 <USBH_ClrFeature>
 8011644:	4603      	mov	r3, r0
 8011646:	73fb      	strb	r3, [r7, #15]
      break;
 8011648:	bf00      	nop
  }
  return status;
 801164a:	7bfb      	ldrb	r3, [r7, #15]
}
 801164c:	4618      	mov	r0, r3
 801164e:	3710      	adds	r7, #16
 8011650:	46bd      	mov	sp, r7
 8011652:	bd80      	pop	{r7, pc}

08011654 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8011654:	b580      	push	{r7, lr}
 8011656:	b084      	sub	sp, #16
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011662:	69db      	ldr	r3, [r3, #28]
 8011664:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8011666:	2301      	movs	r3, #1
 8011668:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 801166a:	68bb      	ldr	r3, [r7, #8]
 801166c:	791b      	ldrb	r3, [r3, #4]
 801166e:	4619      	mov	r1, r3
 8011670:	6878      	ldr	r0, [r7, #4]
 8011672:	f004 ff19 	bl	80164a8 <USBH_LL_GetLastXferSize>
 8011676:	4603      	mov	r3, r0
 8011678:	2b0d      	cmp	r3, #13
 801167a:	d002      	beq.n	8011682 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 801167c:	2302      	movs	r3, #2
 801167e:	73fb      	strb	r3, [r7, #15]
 8011680:	e024      	b.n	80116cc <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8011682:	68bb      	ldr	r3, [r7, #8]
 8011684:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011686:	4a14      	ldr	r2, [pc, #80]	; (80116d8 <USBH_MSC_DecodeCSW+0x84>)
 8011688:	4293      	cmp	r3, r2
 801168a:	d11d      	bne.n	80116c8 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 801168c:	68bb      	ldr	r3, [r7, #8]
 801168e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8011690:	68bb      	ldr	r3, [r7, #8]
 8011692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011694:	429a      	cmp	r2, r3
 8011696:	d119      	bne.n	80116cc <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8011698:	68bb      	ldr	r3, [r7, #8]
 801169a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d102      	bne.n	80116a8 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 80116a2:	2300      	movs	r3, #0
 80116a4:	73fb      	strb	r3, [r7, #15]
 80116a6:	e011      	b.n	80116cc <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 80116a8:	68bb      	ldr	r3, [r7, #8]
 80116aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80116ae:	2b01      	cmp	r3, #1
 80116b0:	d102      	bne.n	80116b8 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 80116b2:	2301      	movs	r3, #1
 80116b4:	73fb      	strb	r3, [r7, #15]
 80116b6:	e009      	b.n	80116cc <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 80116b8:	68bb      	ldr	r3, [r7, #8]
 80116ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80116be:	2b02      	cmp	r3, #2
 80116c0:	d104      	bne.n	80116cc <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 80116c2:	2302      	movs	r3, #2
 80116c4:	73fb      	strb	r3, [r7, #15]
 80116c6:	e001      	b.n	80116cc <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 80116c8:	2302      	movs	r3, #2
 80116ca:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 80116cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80116ce:	4618      	mov	r0, r3
 80116d0:	3710      	adds	r7, #16
 80116d2:	46bd      	mov	sp, r7
 80116d4:	bd80      	pop	{r7, pc}
 80116d6:	bf00      	nop
 80116d8:	53425355 	.word	0x53425355

080116dc <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 80116dc:	b580      	push	{r7, lr}
 80116de:	b084      	sub	sp, #16
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	6078      	str	r0, [r7, #4]
 80116e4:	460b      	mov	r3, r1
 80116e6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL;
 80116e8:	2302      	movs	r3, #2
 80116ea:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80116f2:	69db      	ldr	r3, [r3, #28]
 80116f4:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 80116f6:	68bb      	ldr	r3, [r7, #8]
 80116f8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80116fc:	2b01      	cmp	r3, #1
 80116fe:	d002      	beq.n	8011706 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8011700:	2b02      	cmp	r3, #2
 8011702:	d021      	beq.n	8011748 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8011704:	e028      	b.n	8011758 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8011706:	68bb      	ldr	r3, [r7, #8]
 8011708:	2200      	movs	r2, #0
 801170a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 801170c:	68bb      	ldr	r3, [r7, #8]
 801170e:	2200      	movs	r2, #0
 8011710:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8011714:	68bb      	ldr	r3, [r7, #8]
 8011716:	220a      	movs	r2, #10
 8011718:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 801171c:	68bb      	ldr	r3, [r7, #8]
 801171e:	3363      	adds	r3, #99	; 0x63
 8011720:	2210      	movs	r2, #16
 8011722:	2100      	movs	r1, #0
 8011724:	4618      	mov	r0, r3
 8011726:	f006 fe0f 	bl	8018348 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 801172a:	68bb      	ldr	r3, [r7, #8]
 801172c:	2200      	movs	r2, #0
 801172e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8011732:	68bb      	ldr	r3, [r7, #8]
 8011734:	2201      	movs	r2, #1
 8011736:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 801173a:	68bb      	ldr	r3, [r7, #8]
 801173c:	2202      	movs	r2, #2
 801173e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8011742:	2301      	movs	r3, #1
 8011744:	73fb      	strb	r3, [r7, #15]
      break;
 8011746:	e007      	b.n	8011758 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8011748:	78fb      	ldrb	r3, [r7, #3]
 801174a:	4619      	mov	r1, r3
 801174c:	6878      	ldr	r0, [r7, #4]
 801174e:	f7ff fd87 	bl	8011260 <USBH_MSC_BOT_Process>
 8011752:	4603      	mov	r3, r0
 8011754:	73fb      	strb	r3, [r7, #15]
      break;
 8011756:	bf00      	nop
  }

  return error;
 8011758:	7bfb      	ldrb	r3, [r7, #15]
}
 801175a:	4618      	mov	r0, r3
 801175c:	3710      	adds	r7, #16
 801175e:	46bd      	mov	sp, r7
 8011760:	bd80      	pop	{r7, pc}

08011762 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8011762:	b580      	push	{r7, lr}
 8011764:	b086      	sub	sp, #24
 8011766:	af00      	add	r7, sp, #0
 8011768:	60f8      	str	r0, [r7, #12]
 801176a:	460b      	mov	r3, r1
 801176c:	607a      	str	r2, [r7, #4]
 801176e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY;
 8011770:	2301      	movs	r3, #1
 8011772:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801177a:	69db      	ldr	r3, [r3, #28]
 801177c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 801177e:	693b      	ldr	r3, [r7, #16]
 8011780:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8011784:	2b01      	cmp	r3, #1
 8011786:	d002      	beq.n	801178e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8011788:	2b02      	cmp	r3, #2
 801178a:	d027      	beq.n	80117dc <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 801178c:	e05f      	b.n	801184e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 801178e:	693b      	ldr	r3, [r7, #16]
 8011790:	2208      	movs	r2, #8
 8011792:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8011794:	693b      	ldr	r3, [r7, #16]
 8011796:	2280      	movs	r2, #128	; 0x80
 8011798:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 801179c:	693b      	ldr	r3, [r7, #16]
 801179e:	220a      	movs	r2, #10
 80117a0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80117a4:	693b      	ldr	r3, [r7, #16]
 80117a6:	3363      	adds	r3, #99	; 0x63
 80117a8:	2210      	movs	r2, #16
 80117aa:	2100      	movs	r1, #0
 80117ac:	4618      	mov	r0, r3
 80117ae:	f006 fdcb 	bl	8018348 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 80117b2:	693b      	ldr	r3, [r7, #16]
 80117b4:	2225      	movs	r2, #37	; 0x25
 80117b6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80117ba:	693b      	ldr	r3, [r7, #16]
 80117bc:	2201      	movs	r2, #1
 80117be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80117c2:	693b      	ldr	r3, [r7, #16]
 80117c4:	2202      	movs	r2, #2
 80117c6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80117ca:	693b      	ldr	r3, [r7, #16]
 80117cc:	f103 0210 	add.w	r2, r3, #16
 80117d0:	693b      	ldr	r3, [r7, #16]
 80117d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80117d6:	2301      	movs	r3, #1
 80117d8:	75fb      	strb	r3, [r7, #23]
      break;
 80117da:	e038      	b.n	801184e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 80117dc:	7afb      	ldrb	r3, [r7, #11]
 80117de:	4619      	mov	r1, r3
 80117e0:	68f8      	ldr	r0, [r7, #12]
 80117e2:	f7ff fd3d 	bl	8011260 <USBH_MSC_BOT_Process>
 80117e6:	4603      	mov	r3, r0
 80117e8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80117ea:	7dfb      	ldrb	r3, [r7, #23]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d12d      	bne.n	801184c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80117f0:	693b      	ldr	r3, [r7, #16]
 80117f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80117f6:	3303      	adds	r3, #3
 80117f8:	781b      	ldrb	r3, [r3, #0]
 80117fa:	461a      	mov	r2, r3
 80117fc:	693b      	ldr	r3, [r7, #16]
 80117fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011802:	3302      	adds	r3, #2
 8011804:	781b      	ldrb	r3, [r3, #0]
 8011806:	021b      	lsls	r3, r3, #8
 8011808:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 801180a:	693b      	ldr	r3, [r7, #16]
 801180c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011810:	3301      	adds	r3, #1
 8011812:	781b      	ldrb	r3, [r3, #0]
 8011814:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8011816:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8011818:	693b      	ldr	r3, [r7, #16]
 801181a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801181e:	781b      	ldrb	r3, [r3, #0]
 8011820:	061b      	lsls	r3, r3, #24
 8011822:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8011828:	693b      	ldr	r3, [r7, #16]
 801182a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801182e:	3307      	adds	r3, #7
 8011830:	781b      	ldrb	r3, [r3, #0]
 8011832:	b29a      	uxth	r2, r3
 8011834:	693b      	ldr	r3, [r7, #16]
 8011836:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801183a:	3306      	adds	r3, #6
 801183c:	781b      	ldrb	r3, [r3, #0]
 801183e:	b29b      	uxth	r3, r3
 8011840:	021b      	lsls	r3, r3, #8
 8011842:	b29b      	uxth	r3, r3
 8011844:	4313      	orrs	r3, r2
 8011846:	b29a      	uxth	r2, r3
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	809a      	strh	r2, [r3, #4]
      break;
 801184c:	bf00      	nop
  }

  return error;
 801184e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011850:	4618      	mov	r0, r3
 8011852:	3718      	adds	r7, #24
 8011854:	46bd      	mov	sp, r7
 8011856:	bd80      	pop	{r7, pc}

08011858 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8011858:	b580      	push	{r7, lr}
 801185a:	b086      	sub	sp, #24
 801185c:	af00      	add	r7, sp, #0
 801185e:	60f8      	str	r0, [r7, #12]
 8011860:	460b      	mov	r3, r1
 8011862:	607a      	str	r2, [r7, #4]
 8011864:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8011866:	2302      	movs	r3, #2
 8011868:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011870:	69db      	ldr	r3, [r3, #28]
 8011872:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8011874:	693b      	ldr	r3, [r7, #16]
 8011876:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 801187a:	2b01      	cmp	r3, #1
 801187c:	d002      	beq.n	8011884 <USBH_MSC_SCSI_Inquiry+0x2c>
 801187e:	2b02      	cmp	r3, #2
 8011880:	d03d      	beq.n	80118fe <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8011882:	e089      	b.n	8011998 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8011884:	693b      	ldr	r3, [r7, #16]
 8011886:	2224      	movs	r2, #36	; 0x24
 8011888:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 801188a:	693b      	ldr	r3, [r7, #16]
 801188c:	2280      	movs	r2, #128	; 0x80
 801188e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8011892:	693b      	ldr	r3, [r7, #16]
 8011894:	220a      	movs	r2, #10
 8011896:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 801189a:	693b      	ldr	r3, [r7, #16]
 801189c:	3363      	adds	r3, #99	; 0x63
 801189e:	220a      	movs	r2, #10
 80118a0:	2100      	movs	r1, #0
 80118a2:	4618      	mov	r0, r3
 80118a4:	f006 fd50 	bl	8018348 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 80118a8:	693b      	ldr	r3, [r7, #16]
 80118aa:	2212      	movs	r2, #18
 80118ac:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80118b0:	7afb      	ldrb	r3, [r7, #11]
 80118b2:	015b      	lsls	r3, r3, #5
 80118b4:	b2da      	uxtb	r2, r3
 80118b6:	693b      	ldr	r3, [r7, #16]
 80118b8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80118bc:	693b      	ldr	r3, [r7, #16]
 80118be:	2200      	movs	r2, #0
 80118c0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80118c4:	693b      	ldr	r3, [r7, #16]
 80118c6:	2200      	movs	r2, #0
 80118c8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 80118cc:	693b      	ldr	r3, [r7, #16]
 80118ce:	2224      	movs	r2, #36	; 0x24
 80118d0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80118d4:	693b      	ldr	r3, [r7, #16]
 80118d6:	2200      	movs	r2, #0
 80118d8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80118dc:	693b      	ldr	r3, [r7, #16]
 80118de:	2201      	movs	r2, #1
 80118e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80118e4:	693b      	ldr	r3, [r7, #16]
 80118e6:	2202      	movs	r2, #2
 80118e8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80118ec:	693b      	ldr	r3, [r7, #16]
 80118ee:	f103 0210 	add.w	r2, r3, #16
 80118f2:	693b      	ldr	r3, [r7, #16]
 80118f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80118f8:	2301      	movs	r3, #1
 80118fa:	75fb      	strb	r3, [r7, #23]
      break;
 80118fc:	e04c      	b.n	8011998 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 80118fe:	7afb      	ldrb	r3, [r7, #11]
 8011900:	4619      	mov	r1, r3
 8011902:	68f8      	ldr	r0, [r7, #12]
 8011904:	f7ff fcac 	bl	8011260 <USBH_MSC_BOT_Process>
 8011908:	4603      	mov	r3, r0
 801190a:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 801190c:	7dfb      	ldrb	r3, [r7, #23]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d141      	bne.n	8011996 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8011912:	2222      	movs	r2, #34	; 0x22
 8011914:	2100      	movs	r1, #0
 8011916:	6878      	ldr	r0, [r7, #4]
 8011918:	f006 fd16 	bl	8018348 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 801191c:	693b      	ldr	r3, [r7, #16]
 801191e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011922:	781b      	ldrb	r3, [r3, #0]
 8011924:	f003 031f 	and.w	r3, r3, #31
 8011928:	b2da      	uxtb	r2, r3
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 801192e:	693b      	ldr	r3, [r7, #16]
 8011930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011934:	781b      	ldrb	r3, [r3, #0]
 8011936:	095b      	lsrs	r3, r3, #5
 8011938:	b2da      	uxtb	r2, r3
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 801193e:	693b      	ldr	r3, [r7, #16]
 8011940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011944:	3301      	adds	r3, #1
 8011946:	781b      	ldrb	r3, [r3, #0]
 8011948:	b25b      	sxtb	r3, r3
 801194a:	2b00      	cmp	r3, #0
 801194c:	da03      	bge.n	8011956 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	2201      	movs	r2, #1
 8011952:	709a      	strb	r2, [r3, #2]
 8011954:	e002      	b.n	801195c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	2200      	movs	r2, #0
 801195a:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	1cd8      	adds	r0, r3, #3
 8011960:	693b      	ldr	r3, [r7, #16]
 8011962:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011966:	3308      	adds	r3, #8
 8011968:	2208      	movs	r2, #8
 801196a:	4619      	mov	r1, r3
 801196c:	f006 fcde 	bl	801832c <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	f103 000c 	add.w	r0, r3, #12
 8011976:	693b      	ldr	r3, [r7, #16]
 8011978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801197c:	3310      	adds	r3, #16
 801197e:	2210      	movs	r2, #16
 8011980:	4619      	mov	r1, r3
 8011982:	f006 fcd3 	bl	801832c <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	331d      	adds	r3, #29
 801198a:	693a      	ldr	r2, [r7, #16]
 801198c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8011990:	3220      	adds	r2, #32
 8011992:	6812      	ldr	r2, [r2, #0]
 8011994:	601a      	str	r2, [r3, #0]
      break;
 8011996:	bf00      	nop
  }

  return error;
 8011998:	7dfb      	ldrb	r3, [r7, #23]
}
 801199a:	4618      	mov	r0, r3
 801199c:	3718      	adds	r7, #24
 801199e:	46bd      	mov	sp, r7
 80119a0:	bd80      	pop	{r7, pc}

080119a2 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 80119a2:	b580      	push	{r7, lr}
 80119a4:	b086      	sub	sp, #24
 80119a6:	af00      	add	r7, sp, #0
 80119a8:	60f8      	str	r0, [r7, #12]
 80119aa:	460b      	mov	r3, r1
 80119ac:	607a      	str	r2, [r7, #4]
 80119ae:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 80119b0:	2302      	movs	r3, #2
 80119b2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80119ba:	69db      	ldr	r3, [r3, #28]
 80119bc:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80119be:	693b      	ldr	r3, [r7, #16]
 80119c0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80119c4:	2b01      	cmp	r3, #1
 80119c6:	d002      	beq.n	80119ce <USBH_MSC_SCSI_RequestSense+0x2c>
 80119c8:	2b02      	cmp	r3, #2
 80119ca:	d03d      	beq.n	8011a48 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 80119cc:	e05d      	b.n	8011a8a <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 80119ce:	693b      	ldr	r3, [r7, #16]
 80119d0:	220e      	movs	r2, #14
 80119d2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80119d4:	693b      	ldr	r3, [r7, #16]
 80119d6:	2280      	movs	r2, #128	; 0x80
 80119d8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80119dc:	693b      	ldr	r3, [r7, #16]
 80119de:	220a      	movs	r2, #10
 80119e0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80119e4:	693b      	ldr	r3, [r7, #16]
 80119e6:	3363      	adds	r3, #99	; 0x63
 80119e8:	2210      	movs	r2, #16
 80119ea:	2100      	movs	r1, #0
 80119ec:	4618      	mov	r0, r3
 80119ee:	f006 fcab 	bl	8018348 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 80119f2:	693b      	ldr	r3, [r7, #16]
 80119f4:	2203      	movs	r2, #3
 80119f6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80119fa:	7afb      	ldrb	r3, [r7, #11]
 80119fc:	015b      	lsls	r3, r3, #5
 80119fe:	b2da      	uxtb	r2, r3
 8011a00:	693b      	ldr	r3, [r7, #16]
 8011a02:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8011a06:	693b      	ldr	r3, [r7, #16]
 8011a08:	2200      	movs	r2, #0
 8011a0a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8011a0e:	693b      	ldr	r3, [r7, #16]
 8011a10:	2200      	movs	r2, #0
 8011a12:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8011a16:	693b      	ldr	r3, [r7, #16]
 8011a18:	220e      	movs	r2, #14
 8011a1a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8011a1e:	693b      	ldr	r3, [r7, #16]
 8011a20:	2200      	movs	r2, #0
 8011a22:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8011a26:	693b      	ldr	r3, [r7, #16]
 8011a28:	2201      	movs	r2, #1
 8011a2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8011a2e:	693b      	ldr	r3, [r7, #16]
 8011a30:	2202      	movs	r2, #2
 8011a32:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8011a36:	693b      	ldr	r3, [r7, #16]
 8011a38:	f103 0210 	add.w	r2, r3, #16
 8011a3c:	693b      	ldr	r3, [r7, #16]
 8011a3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8011a42:	2301      	movs	r3, #1
 8011a44:	75fb      	strb	r3, [r7, #23]
      break;
 8011a46:	e020      	b.n	8011a8a <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8011a48:	7afb      	ldrb	r3, [r7, #11]
 8011a4a:	4619      	mov	r1, r3
 8011a4c:	68f8      	ldr	r0, [r7, #12]
 8011a4e:	f7ff fc07 	bl	8011260 <USBH_MSC_BOT_Process>
 8011a52:	4603      	mov	r3, r0
 8011a54:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8011a56:	7dfb      	ldrb	r3, [r7, #23]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d115      	bne.n	8011a88 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8011a5c:	693b      	ldr	r3, [r7, #16]
 8011a5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011a62:	3302      	adds	r3, #2
 8011a64:	781b      	ldrb	r3, [r3, #0]
 8011a66:	f003 030f 	and.w	r3, r3, #15
 8011a6a:	b2da      	uxtb	r2, r3
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8011a70:	693b      	ldr	r3, [r7, #16]
 8011a72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011a76:	7b1a      	ldrb	r2, [r3, #12]
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8011a7c:	693b      	ldr	r3, [r7, #16]
 8011a7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011a82:	7b5a      	ldrb	r2, [r3, #13]
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	709a      	strb	r2, [r3, #2]
      break;
 8011a88:	bf00      	nop
  }

  return error;
 8011a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	3718      	adds	r7, #24
 8011a90:	46bd      	mov	sp, r7
 8011a92:	bd80      	pop	{r7, pc}

08011a94 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b086      	sub	sp, #24
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	60f8      	str	r0, [r7, #12]
 8011a9c:	607a      	str	r2, [r7, #4]
 8011a9e:	603b      	str	r3, [r7, #0]
 8011aa0:	460b      	mov	r3, r1
 8011aa2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 8011aa4:	2302      	movs	r3, #2
 8011aa6:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011aae:	69db      	ldr	r3, [r3, #28]
 8011ab0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8011ab2:	693b      	ldr	r3, [r7, #16]
 8011ab4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8011ab8:	2b01      	cmp	r3, #1
 8011aba:	d002      	beq.n	8011ac2 <USBH_MSC_SCSI_Write+0x2e>
 8011abc:	2b02      	cmp	r3, #2
 8011abe:	d047      	beq.n	8011b50 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8011ac0:	e04e      	b.n	8011b60 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8011ac2:	693b      	ldr	r3, [r7, #16]
 8011ac4:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8011ac8:	461a      	mov	r2, r3
 8011aca:	6a3b      	ldr	r3, [r7, #32]
 8011acc:	fb03 f202 	mul.w	r2, r3, r2
 8011ad0:	693b      	ldr	r3, [r7, #16]
 8011ad2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8011ad4:	693b      	ldr	r3, [r7, #16]
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8011adc:	693b      	ldr	r3, [r7, #16]
 8011ade:	220a      	movs	r2, #10
 8011ae0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8011ae4:	693b      	ldr	r3, [r7, #16]
 8011ae6:	3363      	adds	r3, #99	; 0x63
 8011ae8:	2210      	movs	r2, #16
 8011aea:	2100      	movs	r1, #0
 8011aec:	4618      	mov	r0, r3
 8011aee:	f006 fc2b 	bl	8018348 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8011af2:	693b      	ldr	r3, [r7, #16]
 8011af4:	222a      	movs	r2, #42	; 0x2a
 8011af6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8011afa:	79fa      	ldrb	r2, [r7, #7]
 8011afc:	693b      	ldr	r3, [r7, #16]
 8011afe:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8011b02:	79ba      	ldrb	r2, [r7, #6]
 8011b04:	693b      	ldr	r3, [r7, #16]
 8011b06:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8011b0a:	797a      	ldrb	r2, [r7, #5]
 8011b0c:	693b      	ldr	r3, [r7, #16]
 8011b0e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8011b12:	1d3b      	adds	r3, r7, #4
 8011b14:	781a      	ldrb	r2, [r3, #0]
 8011b16:	693b      	ldr	r3, [r7, #16]
 8011b18:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]);
 8011b1c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8011b20:	693b      	ldr	r3, [r7, #16]
 8011b22:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]);
 8011b26:	f107 0320 	add.w	r3, r7, #32
 8011b2a:	781a      	ldrb	r2, [r3, #0]
 8011b2c:	693b      	ldr	r3, [r7, #16]
 8011b2e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8011b32:	693b      	ldr	r3, [r7, #16]
 8011b34:	2201      	movs	r2, #1
 8011b36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8011b3a:	693b      	ldr	r3, [r7, #16]
 8011b3c:	2202      	movs	r2, #2
 8011b3e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8011b42:	693b      	ldr	r3, [r7, #16]
 8011b44:	683a      	ldr	r2, [r7, #0]
 8011b46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8011b4a:	2301      	movs	r3, #1
 8011b4c:	75fb      	strb	r3, [r7, #23]
      break;
 8011b4e:	e007      	b.n	8011b60 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8011b50:	7afb      	ldrb	r3, [r7, #11]
 8011b52:	4619      	mov	r1, r3
 8011b54:	68f8      	ldr	r0, [r7, #12]
 8011b56:	f7ff fb83 	bl	8011260 <USBH_MSC_BOT_Process>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	75fb      	strb	r3, [r7, #23]
      break;
 8011b5e:	bf00      	nop
  }

  return error;
 8011b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b62:	4618      	mov	r0, r3
 8011b64:	3718      	adds	r7, #24
 8011b66:	46bd      	mov	sp, r7
 8011b68:	bd80      	pop	{r7, pc}

08011b6a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8011b6a:	b580      	push	{r7, lr}
 8011b6c:	b086      	sub	sp, #24
 8011b6e:	af00      	add	r7, sp, #0
 8011b70:	60f8      	str	r0, [r7, #12]
 8011b72:	607a      	str	r2, [r7, #4]
 8011b74:	603b      	str	r3, [r7, #0]
 8011b76:	460b      	mov	r3, r1
 8011b78:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 8011b7a:	2302      	movs	r3, #2
 8011b7c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011b84:	69db      	ldr	r3, [r3, #28]
 8011b86:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8011b88:	693b      	ldr	r3, [r7, #16]
 8011b8a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8011b8e:	2b01      	cmp	r3, #1
 8011b90:	d002      	beq.n	8011b98 <USBH_MSC_SCSI_Read+0x2e>
 8011b92:	2b02      	cmp	r3, #2
 8011b94:	d047      	beq.n	8011c26 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8011b96:	e04e      	b.n	8011c36 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8011b98:	693b      	ldr	r3, [r7, #16]
 8011b9a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8011b9e:	461a      	mov	r2, r3
 8011ba0:	6a3b      	ldr	r3, [r7, #32]
 8011ba2:	fb03 f202 	mul.w	r2, r3, r2
 8011ba6:	693b      	ldr	r3, [r7, #16]
 8011ba8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8011baa:	693b      	ldr	r3, [r7, #16]
 8011bac:	2280      	movs	r2, #128	; 0x80
 8011bae:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8011bb2:	693b      	ldr	r3, [r7, #16]
 8011bb4:	220a      	movs	r2, #10
 8011bb6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8011bba:	693b      	ldr	r3, [r7, #16]
 8011bbc:	3363      	adds	r3, #99	; 0x63
 8011bbe:	2210      	movs	r2, #16
 8011bc0:	2100      	movs	r1, #0
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	f006 fbc0 	bl	8018348 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8011bc8:	693b      	ldr	r3, [r7, #16]
 8011bca:	2228      	movs	r2, #40	; 0x28
 8011bcc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8011bd0:	79fa      	ldrb	r2, [r7, #7]
 8011bd2:	693b      	ldr	r3, [r7, #16]
 8011bd4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8011bd8:	79ba      	ldrb	r2, [r7, #6]
 8011bda:	693b      	ldr	r3, [r7, #16]
 8011bdc:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8011be0:	797a      	ldrb	r2, [r7, #5]
 8011be2:	693b      	ldr	r3, [r7, #16]
 8011be4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8011be8:	1d3b      	adds	r3, r7, #4
 8011bea:	781a      	ldrb	r2, [r3, #0]
 8011bec:	693b      	ldr	r3, [r7, #16]
 8011bee:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]);
 8011bf2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8011bf6:	693b      	ldr	r3, [r7, #16]
 8011bf8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]);
 8011bfc:	f107 0320 	add.w	r3, r7, #32
 8011c00:	781a      	ldrb	r2, [r3, #0]
 8011c02:	693b      	ldr	r3, [r7, #16]
 8011c04:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8011c08:	693b      	ldr	r3, [r7, #16]
 8011c0a:	2201      	movs	r2, #1
 8011c0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8011c10:	693b      	ldr	r3, [r7, #16]
 8011c12:	2202      	movs	r2, #2
 8011c14:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8011c18:	693b      	ldr	r3, [r7, #16]
 8011c1a:	683a      	ldr	r2, [r7, #0]
 8011c1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8011c20:	2301      	movs	r3, #1
 8011c22:	75fb      	strb	r3, [r7, #23]
      break;
 8011c24:	e007      	b.n	8011c36 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8011c26:	7afb      	ldrb	r3, [r7, #11]
 8011c28:	4619      	mov	r1, r3
 8011c2a:	68f8      	ldr	r0, [r7, #12]
 8011c2c:	f7ff fb18 	bl	8011260 <USBH_MSC_BOT_Process>
 8011c30:	4603      	mov	r3, r0
 8011c32:	75fb      	strb	r3, [r7, #23]
      break;
 8011c34:	bf00      	nop
  }

  return error;
 8011c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c38:	4618      	mov	r0, r3
 8011c3a:	3718      	adds	r7, #24
 8011c3c:	46bd      	mov	sp, r7
 8011c3e:	bd80      	pop	{r7, pc}

08011c40 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b084      	sub	sp, #16
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	60f8      	str	r0, [r7, #12]
 8011c48:	60b9      	str	r1, [r7, #8]
 8011c4a:	4613      	mov	r3, r2
 8011c4c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d101      	bne.n	8011c58 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8011c54:	2302      	movs	r3, #2
 8011c56:	e029      	b.n	8011cac <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	79fa      	ldrb	r2, [r7, #7]
 8011c5c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	2200      	movs	r2, #0
 8011c64:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	2200      	movs	r2, #0
 8011c6c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8011c70:	68f8      	ldr	r0, [r7, #12]
 8011c72:	f000 f81f 	bl	8011cb4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	2200      	movs	r2, #0
 8011c7a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	2200      	movs	r2, #0
 8011c82:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	2200      	movs	r2, #0
 8011c8a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	2200      	movs	r2, #0
 8011c92:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8011c96:	68bb      	ldr	r3, [r7, #8]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d003      	beq.n	8011ca4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	68ba      	ldr	r2, [r7, #8]
 8011ca0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8011ca4:	68f8      	ldr	r0, [r7, #12]
 8011ca6:	f004 fb4b 	bl	8016340 <USBH_LL_Init>

  return USBH_OK;
 8011caa:	2300      	movs	r3, #0
}
 8011cac:	4618      	mov	r0, r3
 8011cae:	3710      	adds	r7, #16
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	bd80      	pop	{r7, pc}

08011cb4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b084      	sub	sp, #16
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	60fb      	str	r3, [r7, #12]
 8011cc4:	e009      	b.n	8011cda <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8011cc6:	687a      	ldr	r2, [r7, #4]
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	33e0      	adds	r3, #224	; 0xe0
 8011ccc:	009b      	lsls	r3, r3, #2
 8011cce:	4413      	add	r3, r2
 8011cd0:	2200      	movs	r2, #0
 8011cd2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	3301      	adds	r3, #1
 8011cd8:	60fb      	str	r3, [r7, #12]
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	2b0f      	cmp	r3, #15
 8011cde:	d9f2      	bls.n	8011cc6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8011ce0:	2300      	movs	r3, #0
 8011ce2:	60fb      	str	r3, [r7, #12]
 8011ce4:	e009      	b.n	8011cfa <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8011ce6:	687a      	ldr	r2, [r7, #4]
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	4413      	add	r3, r2
 8011cec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8011cf0:	2200      	movs	r2, #0
 8011cf2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	3301      	adds	r3, #1
 8011cf8:	60fb      	str	r3, [r7, #12]
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011d00:	d3f1      	bcc.n	8011ce6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	2200      	movs	r2, #0
 8011d06:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	2201      	movs	r2, #1
 8011d12:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	2200      	movs	r2, #0
 8011d18:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	2201      	movs	r2, #1
 8011d20:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	2240      	movs	r2, #64	; 0x40
 8011d26:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	2200      	movs	r2, #0
 8011d32:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	2201      	movs	r2, #1
 8011d3a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	2200      	movs	r2, #0
 8011d42:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	2200      	movs	r2, #0
 8011d4a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	331c      	adds	r3, #28
 8011d52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011d56:	2100      	movs	r1, #0
 8011d58:	4618      	mov	r0, r3
 8011d5a:	f006 faf5 	bl	8018348 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8011d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011d68:	2100      	movs	r1, #0
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	f006 faec 	bl	8018348 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	f203 3326 	addw	r3, r3, #806	; 0x326
 8011d76:	2212      	movs	r2, #18
 8011d78:	2100      	movs	r1, #0
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	f006 fae4 	bl	8018348 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8011d86:	223e      	movs	r2, #62	; 0x3e
 8011d88:	2100      	movs	r1, #0
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	f006 fadc 	bl	8018348 <memset>

  return USBH_OK;
 8011d90:	2300      	movs	r3, #0
}
 8011d92:	4618      	mov	r0, r3
 8011d94:	3710      	adds	r7, #16
 8011d96:	46bd      	mov	sp, r7
 8011d98:	bd80      	pop	{r7, pc}

08011d9a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8011d9a:	b480      	push	{r7}
 8011d9c:	b085      	sub	sp, #20
 8011d9e:	af00      	add	r7, sp, #0
 8011da0:	6078      	str	r0, [r7, #4]
 8011da2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8011da4:	2300      	movs	r3, #0
 8011da6:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8011da8:	683b      	ldr	r3, [r7, #0]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d016      	beq.n	8011ddc <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d10e      	bne.n	8011dd6 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8011dbe:	1c59      	adds	r1, r3, #1
 8011dc0:	687a      	ldr	r2, [r7, #4]
 8011dc2:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8011dc6:	687a      	ldr	r2, [r7, #4]
 8011dc8:	33de      	adds	r3, #222	; 0xde
 8011dca:	6839      	ldr	r1, [r7, #0]
 8011dcc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	73fb      	strb	r3, [r7, #15]
 8011dd4:	e004      	b.n	8011de0 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8011dd6:	2302      	movs	r3, #2
 8011dd8:	73fb      	strb	r3, [r7, #15]
 8011dda:	e001      	b.n	8011de0 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8011ddc:	2302      	movs	r3, #2
 8011dde:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8011de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011de2:	4618      	mov	r0, r3
 8011de4:	3714      	adds	r7, #20
 8011de6:	46bd      	mov	sp, r7
 8011de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dec:	4770      	bx	lr

08011dee <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8011dee:	b480      	push	{r7}
 8011df0:	b085      	sub	sp, #20
 8011df2:	af00      	add	r7, sp, #0
 8011df4:	6078      	str	r0, [r7, #4]
 8011df6:	460b      	mov	r3, r1
 8011df8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8011e04:	78fa      	ldrb	r2, [r7, #3]
 8011e06:	429a      	cmp	r2, r3
 8011e08:	d204      	bcs.n	8011e14 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	78fa      	ldrb	r2, [r7, #3]
 8011e0e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8011e12:	e001      	b.n	8011e18 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8011e14:	2302      	movs	r3, #2
 8011e16:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8011e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	3714      	adds	r7, #20
 8011e1e:	46bd      	mov	sp, r7
 8011e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e24:	4770      	bx	lr

08011e26 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8011e26:	b480      	push	{r7}
 8011e28:	b087      	sub	sp, #28
 8011e2a:	af00      	add	r7, sp, #0
 8011e2c:	6078      	str	r0, [r7, #4]
 8011e2e:	4608      	mov	r0, r1
 8011e30:	4611      	mov	r1, r2
 8011e32:	461a      	mov	r2, r3
 8011e34:	4603      	mov	r3, r0
 8011e36:	70fb      	strb	r3, [r7, #3]
 8011e38:	460b      	mov	r3, r1
 8011e3a:	70bb      	strb	r3, [r7, #2]
 8011e3c:	4613      	mov	r3, r2
 8011e3e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8011e40:	2300      	movs	r3, #0
 8011e42:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8011e44:	2300      	movs	r3, #0
 8011e46:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8011e4e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8011e50:	e025      	b.n	8011e9e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8011e52:	7dfb      	ldrb	r3, [r7, #23]
 8011e54:	221a      	movs	r2, #26
 8011e56:	fb02 f303 	mul.w	r3, r2, r3
 8011e5a:	3308      	adds	r3, #8
 8011e5c:	68fa      	ldr	r2, [r7, #12]
 8011e5e:	4413      	add	r3, r2
 8011e60:	3302      	adds	r3, #2
 8011e62:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8011e64:	693b      	ldr	r3, [r7, #16]
 8011e66:	795b      	ldrb	r3, [r3, #5]
 8011e68:	78fa      	ldrb	r2, [r7, #3]
 8011e6a:	429a      	cmp	r2, r3
 8011e6c:	d002      	beq.n	8011e74 <USBH_FindInterface+0x4e>
 8011e6e:	78fb      	ldrb	r3, [r7, #3]
 8011e70:	2bff      	cmp	r3, #255	; 0xff
 8011e72:	d111      	bne.n	8011e98 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8011e74:	693b      	ldr	r3, [r7, #16]
 8011e76:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8011e78:	78ba      	ldrb	r2, [r7, #2]
 8011e7a:	429a      	cmp	r2, r3
 8011e7c:	d002      	beq.n	8011e84 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8011e7e:	78bb      	ldrb	r3, [r7, #2]
 8011e80:	2bff      	cmp	r3, #255	; 0xff
 8011e82:	d109      	bne.n	8011e98 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8011e84:	693b      	ldr	r3, [r7, #16]
 8011e86:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8011e88:	787a      	ldrb	r2, [r7, #1]
 8011e8a:	429a      	cmp	r2, r3
 8011e8c:	d002      	beq.n	8011e94 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8011e8e:	787b      	ldrb	r3, [r7, #1]
 8011e90:	2bff      	cmp	r3, #255	; 0xff
 8011e92:	d101      	bne.n	8011e98 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8011e94:	7dfb      	ldrb	r3, [r7, #23]
 8011e96:	e006      	b.n	8011ea6 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8011e98:	7dfb      	ldrb	r3, [r7, #23]
 8011e9a:	3301      	adds	r3, #1
 8011e9c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8011e9e:	7dfb      	ldrb	r3, [r7, #23]
 8011ea0:	2b01      	cmp	r3, #1
 8011ea2:	d9d6      	bls.n	8011e52 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8011ea4:	23ff      	movs	r3, #255	; 0xff
}
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	371c      	adds	r7, #28
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb0:	4770      	bx	lr

08011eb2 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8011eb2:	b580      	push	{r7, lr}
 8011eb4:	b082      	sub	sp, #8
 8011eb6:	af00      	add	r7, sp, #0
 8011eb8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8011eba:	6878      	ldr	r0, [r7, #4]
 8011ebc:	f004 fa7c 	bl	80163b8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8011ec0:	2101      	movs	r1, #1
 8011ec2:	6878      	ldr	r0, [r7, #4]
 8011ec4:	f004 fb95 	bl	80165f2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8011ec8:	2300      	movs	r3, #0
}
 8011eca:	4618      	mov	r0, r3
 8011ecc:	3708      	adds	r7, #8
 8011ece:	46bd      	mov	sp, r7
 8011ed0:	bd80      	pop	{r7, pc}
	...

08011ed4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8011ed4:	b580      	push	{r7, lr}
 8011ed6:	b088      	sub	sp, #32
 8011ed8:	af04      	add	r7, sp, #16
 8011eda:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8011edc:	2302      	movs	r3, #2
 8011ede:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8011eea:	b2db      	uxtb	r3, r3
 8011eec:	2b01      	cmp	r3, #1
 8011eee:	d102      	bne.n	8011ef6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	2203      	movs	r2, #3
 8011ef4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	781b      	ldrb	r3, [r3, #0]
 8011efa:	b2db      	uxtb	r3, r3
 8011efc:	2b0b      	cmp	r3, #11
 8011efe:	f200 81be 	bhi.w	801227e <USBH_Process+0x3aa>
 8011f02:	a201      	add	r2, pc, #4	; (adr r2, 8011f08 <USBH_Process+0x34>)
 8011f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f08:	08011f39 	.word	0x08011f39
 8011f0c:	08011f6b 	.word	0x08011f6b
 8011f10:	08011fd3 	.word	0x08011fd3
 8011f14:	08012219 	.word	0x08012219
 8011f18:	0801227f 	.word	0x0801227f
 8011f1c:	08012077 	.word	0x08012077
 8011f20:	080121bf 	.word	0x080121bf
 8011f24:	080120ad 	.word	0x080120ad
 8011f28:	080120cd 	.word	0x080120cd
 8011f2c:	080120ed 	.word	0x080120ed
 8011f30:	08012131 	.word	0x08012131
 8011f34:	08012201 	.word	0x08012201
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8011f3e:	b2db      	uxtb	r3, r3
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	f000 819e 	beq.w	8012282 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	2201      	movs	r2, #1
 8011f4a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8011f4c:	20c8      	movs	r0, #200	; 0xc8
 8011f4e:	f004 fbc7 	bl	80166e0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8011f52:	6878      	ldr	r0, [r7, #4]
 8011f54:	f004 fa8d 	bl	8016472 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	2200      	movs	r2, #0
 8011f5c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	2200      	movs	r2, #0
 8011f64:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8011f68:	e18b      	b.n	8012282 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8011f70:	2b01      	cmp	r3, #1
 8011f72:	d107      	bne.n	8011f84 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	2200      	movs	r2, #0
 8011f78:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	2202      	movs	r2, #2
 8011f80:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8011f82:	e18d      	b.n	80122a0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8011f8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011f8e:	d914      	bls.n	8011fba <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8011f96:	3301      	adds	r3, #1
 8011f98:	b2da      	uxtb	r2, r3
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8011fa6:	2b03      	cmp	r3, #3
 8011fa8:	d903      	bls.n	8011fb2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	220d      	movs	r2, #13
 8011fae:	701a      	strb	r2, [r3, #0]
      break;
 8011fb0:	e176      	b.n	80122a0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	701a      	strb	r2, [r3, #0]
      break;
 8011fb8:	e172      	b.n	80122a0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8011fc0:	f103 020a 	add.w	r2, r3, #10
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8011fca:	200a      	movs	r0, #10
 8011fcc:	f004 fb88 	bl	80166e0 <USBH_Delay>
      break;
 8011fd0:	e166      	b.n	80122a0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d005      	beq.n	8011fe8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011fe2:	2104      	movs	r1, #4
 8011fe4:	6878      	ldr	r0, [r7, #4]
 8011fe6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8011fe8:	2064      	movs	r0, #100	; 0x64
 8011fea:	f004 fb79 	bl	80166e0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8011fee:	6878      	ldr	r0, [r7, #4]
 8011ff0:	f004 fa18 	bl	8016424 <USBH_LL_GetSpeed>
 8011ff4:	4603      	mov	r3, r0
 8011ff6:	461a      	mov	r2, r3
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	2205      	movs	r2, #5
 8012002:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8012004:	2100      	movs	r1, #0
 8012006:	6878      	ldr	r0, [r7, #4]
 8012008:	f001 fa9f 	bl	801354a <USBH_AllocPipe>
 801200c:	4603      	mov	r3, r0
 801200e:	461a      	mov	r2, r3
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8012014:	2180      	movs	r1, #128	; 0x80
 8012016:	6878      	ldr	r0, [r7, #4]
 8012018:	f001 fa97 	bl	801354a <USBH_AllocPipe>
 801201c:	4603      	mov	r3, r0
 801201e:	461a      	mov	r2, r3
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	7919      	ldrb	r1, [r3, #4]
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8012034:	687a      	ldr	r2, [r7, #4]
 8012036:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8012038:	b292      	uxth	r2, r2
 801203a:	9202      	str	r2, [sp, #8]
 801203c:	2200      	movs	r2, #0
 801203e:	9201      	str	r2, [sp, #4]
 8012040:	9300      	str	r3, [sp, #0]
 8012042:	4603      	mov	r3, r0
 8012044:	2280      	movs	r2, #128	; 0x80
 8012046:	6878      	ldr	r0, [r7, #4]
 8012048:	f001 fa50 	bl	80134ec <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	7959      	ldrb	r1, [r3, #5]
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 801205c:	687a      	ldr	r2, [r7, #4]
 801205e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8012060:	b292      	uxth	r2, r2
 8012062:	9202      	str	r2, [sp, #8]
 8012064:	2200      	movs	r2, #0
 8012066:	9201      	str	r2, [sp, #4]
 8012068:	9300      	str	r3, [sp, #0]
 801206a:	4603      	mov	r3, r0
 801206c:	2200      	movs	r2, #0
 801206e:	6878      	ldr	r0, [r7, #4]
 8012070:	f001 fa3c 	bl	80134ec <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8012074:	e114      	b.n	80122a0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8012076:	6878      	ldr	r0, [r7, #4]
 8012078:	f000 f918 	bl	80122ac <USBH_HandleEnum>
 801207c:	4603      	mov	r3, r0
 801207e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8012080:	7bbb      	ldrb	r3, [r7, #14]
 8012082:	b2db      	uxtb	r3, r3
 8012084:	2b00      	cmp	r3, #0
 8012086:	f040 80fe 	bne.w	8012286 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	2200      	movs	r2, #0
 801208e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8012098:	2b01      	cmp	r3, #1
 801209a:	d103      	bne.n	80120a4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	2208      	movs	r2, #8
 80120a0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80120a2:	e0f0      	b.n	8012286 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	2207      	movs	r2, #7
 80120a8:	701a      	strb	r2, [r3, #0]
      break;
 80120aa:	e0ec      	b.n	8012286 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	f000 80e9 	beq.w	801228a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80120be:	2101      	movs	r1, #1
 80120c0:	6878      	ldr	r0, [r7, #4]
 80120c2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	2208      	movs	r2, #8
 80120c8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80120ca:	e0de      	b.n	801228a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80120d2:	b29b      	uxth	r3, r3
 80120d4:	4619      	mov	r1, r3
 80120d6:	6878      	ldr	r0, [r7, #4]
 80120d8:	f000 fc3f 	bl	801295a <USBH_SetCfg>
 80120dc:	4603      	mov	r3, r0
 80120de:	2b00      	cmp	r3, #0
 80120e0:	f040 80d5 	bne.w	801228e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	2209      	movs	r2, #9
 80120e8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80120ea:	e0d0      	b.n	801228e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80120f2:	f003 0320 	and.w	r3, r3, #32
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d016      	beq.n	8012128 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80120fa:	2101      	movs	r1, #1
 80120fc:	6878      	ldr	r0, [r7, #4]
 80120fe:	f000 fc4f 	bl	80129a0 <USBH_SetFeature>
 8012102:	4603      	mov	r3, r0
 8012104:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8012106:	7bbb      	ldrb	r3, [r7, #14]
 8012108:	b2db      	uxtb	r3, r3
 801210a:	2b00      	cmp	r3, #0
 801210c:	d103      	bne.n	8012116 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	220a      	movs	r2, #10
 8012112:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8012114:	e0bd      	b.n	8012292 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8012116:	7bbb      	ldrb	r3, [r7, #14]
 8012118:	b2db      	uxtb	r3, r3
 801211a:	2b03      	cmp	r3, #3
 801211c:	f040 80b9 	bne.w	8012292 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	220a      	movs	r2, #10
 8012124:	701a      	strb	r2, [r3, #0]
      break;
 8012126:	e0b4      	b.n	8012292 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	220a      	movs	r2, #10
 801212c:	701a      	strb	r2, [r3, #0]
      break;
 801212e:	e0b0      	b.n	8012292 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8012136:	2b00      	cmp	r3, #0
 8012138:	f000 80ad 	beq.w	8012296 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	2200      	movs	r2, #0
 8012140:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8012144:	2300      	movs	r3, #0
 8012146:	73fb      	strb	r3, [r7, #15]
 8012148:	e016      	b.n	8012178 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 801214a:	7bfa      	ldrb	r2, [r7, #15]
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	32de      	adds	r2, #222	; 0xde
 8012150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012154:	791a      	ldrb	r2, [r3, #4]
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 801215c:	429a      	cmp	r2, r3
 801215e:	d108      	bne.n	8012172 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8012160:	7bfa      	ldrb	r2, [r7, #15]
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	32de      	adds	r2, #222	; 0xde
 8012166:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8012170:	e005      	b.n	801217e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8012172:	7bfb      	ldrb	r3, [r7, #15]
 8012174:	3301      	adds	r3, #1
 8012176:	73fb      	strb	r3, [r7, #15]
 8012178:	7bfb      	ldrb	r3, [r7, #15]
 801217a:	2b00      	cmp	r3, #0
 801217c:	d0e5      	beq.n	801214a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012184:	2b00      	cmp	r3, #0
 8012186:	d016      	beq.n	80121b6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801218e:	689b      	ldr	r3, [r3, #8]
 8012190:	6878      	ldr	r0, [r7, #4]
 8012192:	4798      	blx	r3
 8012194:	4603      	mov	r3, r0
 8012196:	2b00      	cmp	r3, #0
 8012198:	d109      	bne.n	80121ae <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	2206      	movs	r2, #6
 801219e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80121a6:	2103      	movs	r1, #3
 80121a8:	6878      	ldr	r0, [r7, #4]
 80121aa:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80121ac:	e073      	b.n	8012296 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	220d      	movs	r2, #13
 80121b2:	701a      	strb	r2, [r3, #0]
      break;
 80121b4:	e06f      	b.n	8012296 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	220d      	movs	r2, #13
 80121ba:	701a      	strb	r2, [r3, #0]
      break;
 80121bc:	e06b      	b.n	8012296 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d017      	beq.n	80121f8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80121ce:	691b      	ldr	r3, [r3, #16]
 80121d0:	6878      	ldr	r0, [r7, #4]
 80121d2:	4798      	blx	r3
 80121d4:	4603      	mov	r3, r0
 80121d6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80121d8:	7bbb      	ldrb	r3, [r7, #14]
 80121da:	b2db      	uxtb	r3, r3
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d103      	bne.n	80121e8 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	220b      	movs	r2, #11
 80121e4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80121e6:	e058      	b.n	801229a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80121e8:	7bbb      	ldrb	r3, [r7, #14]
 80121ea:	b2db      	uxtb	r3, r3
 80121ec:	2b02      	cmp	r3, #2
 80121ee:	d154      	bne.n	801229a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	220d      	movs	r2, #13
 80121f4:	701a      	strb	r2, [r3, #0]
      break;
 80121f6:	e050      	b.n	801229a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	220d      	movs	r2, #13
 80121fc:	701a      	strb	r2, [r3, #0]
      break;
 80121fe:	e04c      	b.n	801229a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012206:	2b00      	cmp	r3, #0
 8012208:	d049      	beq.n	801229e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012210:	695b      	ldr	r3, [r3, #20]
 8012212:	6878      	ldr	r0, [r7, #4]
 8012214:	4798      	blx	r3
      }
      break;
 8012216:	e042      	b.n	801229e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	2200      	movs	r2, #0
 801221c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8012220:	6878      	ldr	r0, [r7, #4]
 8012222:	f7ff fd47 	bl	8011cb4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801222c:	2b00      	cmp	r3, #0
 801222e:	d009      	beq.n	8012244 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012236:	68db      	ldr	r3, [r3, #12]
 8012238:	6878      	ldr	r0, [r7, #4]
 801223a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	2200      	movs	r2, #0
 8012240:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801224a:	2b00      	cmp	r3, #0
 801224c:	d005      	beq.n	801225a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8012254:	2105      	movs	r1, #5
 8012256:	6878      	ldr	r0, [r7, #4]
 8012258:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8012260:	b2db      	uxtb	r3, r3
 8012262:	2b01      	cmp	r3, #1
 8012264:	d107      	bne.n	8012276 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	2200      	movs	r2, #0
 801226a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 801226e:	6878      	ldr	r0, [r7, #4]
 8012270:	f7ff fe1f 	bl	8011eb2 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8012274:	e014      	b.n	80122a0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8012276:	6878      	ldr	r0, [r7, #4]
 8012278:	f004 f89e 	bl	80163b8 <USBH_LL_Start>
      break;
 801227c:	e010      	b.n	80122a0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 801227e:	bf00      	nop
 8012280:	e00e      	b.n	80122a0 <USBH_Process+0x3cc>
      break;
 8012282:	bf00      	nop
 8012284:	e00c      	b.n	80122a0 <USBH_Process+0x3cc>
      break;
 8012286:	bf00      	nop
 8012288:	e00a      	b.n	80122a0 <USBH_Process+0x3cc>
    break;
 801228a:	bf00      	nop
 801228c:	e008      	b.n	80122a0 <USBH_Process+0x3cc>
      break;
 801228e:	bf00      	nop
 8012290:	e006      	b.n	80122a0 <USBH_Process+0x3cc>
      break;
 8012292:	bf00      	nop
 8012294:	e004      	b.n	80122a0 <USBH_Process+0x3cc>
      break;
 8012296:	bf00      	nop
 8012298:	e002      	b.n	80122a0 <USBH_Process+0x3cc>
      break;
 801229a:	bf00      	nop
 801229c:	e000      	b.n	80122a0 <USBH_Process+0x3cc>
      break;
 801229e:	bf00      	nop
  }
  return USBH_OK;
 80122a0:	2300      	movs	r3, #0
}
 80122a2:	4618      	mov	r0, r3
 80122a4:	3710      	adds	r7, #16
 80122a6:	46bd      	mov	sp, r7
 80122a8:	bd80      	pop	{r7, pc}
 80122aa:	bf00      	nop

080122ac <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80122ac:	b580      	push	{r7, lr}
 80122ae:	b088      	sub	sp, #32
 80122b0:	af04      	add	r7, sp, #16
 80122b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80122b4:	2301      	movs	r3, #1
 80122b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80122b8:	2301      	movs	r3, #1
 80122ba:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	785b      	ldrb	r3, [r3, #1]
 80122c0:	2b07      	cmp	r3, #7
 80122c2:	f200 81c1 	bhi.w	8012648 <USBH_HandleEnum+0x39c>
 80122c6:	a201      	add	r2, pc, #4	; (adr r2, 80122cc <USBH_HandleEnum+0x20>)
 80122c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122cc:	080122ed 	.word	0x080122ed
 80122d0:	080123ab 	.word	0x080123ab
 80122d4:	08012415 	.word	0x08012415
 80122d8:	080124a3 	.word	0x080124a3
 80122dc:	0801250d 	.word	0x0801250d
 80122e0:	0801257d 	.word	0x0801257d
 80122e4:	080125c3 	.word	0x080125c3
 80122e8:	08012609 	.word	0x08012609
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80122ec:	2108      	movs	r1, #8
 80122ee:	6878      	ldr	r0, [r7, #4]
 80122f0:	f000 fa50 	bl	8012794 <USBH_Get_DevDesc>
 80122f4:	4603      	mov	r3, r0
 80122f6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80122f8:	7bbb      	ldrb	r3, [r7, #14]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d130      	bne.n	8012360 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	2201      	movs	r2, #1
 801230c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	7919      	ldrb	r1, [r3, #4]
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 801231e:	687a      	ldr	r2, [r7, #4]
 8012320:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8012322:	b292      	uxth	r2, r2
 8012324:	9202      	str	r2, [sp, #8]
 8012326:	2200      	movs	r2, #0
 8012328:	9201      	str	r2, [sp, #4]
 801232a:	9300      	str	r3, [sp, #0]
 801232c:	4603      	mov	r3, r0
 801232e:	2280      	movs	r2, #128	; 0x80
 8012330:	6878      	ldr	r0, [r7, #4]
 8012332:	f001 f8db 	bl	80134ec <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	7959      	ldrb	r1, [r3, #5]
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8012346:	687a      	ldr	r2, [r7, #4]
 8012348:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801234a:	b292      	uxth	r2, r2
 801234c:	9202      	str	r2, [sp, #8]
 801234e:	2200      	movs	r2, #0
 8012350:	9201      	str	r2, [sp, #4]
 8012352:	9300      	str	r3, [sp, #0]
 8012354:	4603      	mov	r3, r0
 8012356:	2200      	movs	r2, #0
 8012358:	6878      	ldr	r0, [r7, #4]
 801235a:	f001 f8c7 	bl	80134ec <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 801235e:	e175      	b.n	801264c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012360:	7bbb      	ldrb	r3, [r7, #14]
 8012362:	2b03      	cmp	r3, #3
 8012364:	f040 8172 	bne.w	801264c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801236e:	3301      	adds	r3, #1
 8012370:	b2da      	uxtb	r2, r3
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801237e:	2b03      	cmp	r3, #3
 8012380:	d903      	bls.n	801238a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	220d      	movs	r2, #13
 8012386:	701a      	strb	r2, [r3, #0]
      break;
 8012388:	e160      	b.n	801264c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	795b      	ldrb	r3, [r3, #5]
 801238e:	4619      	mov	r1, r3
 8012390:	6878      	ldr	r0, [r7, #4]
 8012392:	f001 f8fb 	bl	801358c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	791b      	ldrb	r3, [r3, #4]
 801239a:	4619      	mov	r1, r3
 801239c:	6878      	ldr	r0, [r7, #4]
 801239e:	f001 f8f5 	bl	801358c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	2200      	movs	r2, #0
 80123a6:	701a      	strb	r2, [r3, #0]
      break;
 80123a8:	e150      	b.n	801264c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80123aa:	2112      	movs	r1, #18
 80123ac:	6878      	ldr	r0, [r7, #4]
 80123ae:	f000 f9f1 	bl	8012794 <USBH_Get_DevDesc>
 80123b2:	4603      	mov	r3, r0
 80123b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80123b6:	7bbb      	ldrb	r3, [r7, #14]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d103      	bne.n	80123c4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	2202      	movs	r2, #2
 80123c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80123c2:	e145      	b.n	8012650 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80123c4:	7bbb      	ldrb	r3, [r7, #14]
 80123c6:	2b03      	cmp	r3, #3
 80123c8:	f040 8142 	bne.w	8012650 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80123d2:	3301      	adds	r3, #1
 80123d4:	b2da      	uxtb	r2, r3
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80123e2:	2b03      	cmp	r3, #3
 80123e4:	d903      	bls.n	80123ee <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	220d      	movs	r2, #13
 80123ea:	701a      	strb	r2, [r3, #0]
      break;
 80123ec:	e130      	b.n	8012650 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	795b      	ldrb	r3, [r3, #5]
 80123f2:	4619      	mov	r1, r3
 80123f4:	6878      	ldr	r0, [r7, #4]
 80123f6:	f001 f8c9 	bl	801358c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	791b      	ldrb	r3, [r3, #4]
 80123fe:	4619      	mov	r1, r3
 8012400:	6878      	ldr	r0, [r7, #4]
 8012402:	f001 f8c3 	bl	801358c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	2200      	movs	r2, #0
 801240a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	2200      	movs	r2, #0
 8012410:	701a      	strb	r2, [r3, #0]
      break;
 8012412:	e11d      	b.n	8012650 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8012414:	2101      	movs	r1, #1
 8012416:	6878      	ldr	r0, [r7, #4]
 8012418:	f000 fa7b 	bl	8012912 <USBH_SetAddress>
 801241c:	4603      	mov	r3, r0
 801241e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8012420:	7bbb      	ldrb	r3, [r7, #14]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d132      	bne.n	801248c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8012426:	2002      	movs	r0, #2
 8012428:	f004 f95a 	bl	80166e0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	2201      	movs	r2, #1
 8012430:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	2203      	movs	r2, #3
 8012438:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	7919      	ldrb	r1, [r3, #4]
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 801244a:	687a      	ldr	r2, [r7, #4]
 801244c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 801244e:	b292      	uxth	r2, r2
 8012450:	9202      	str	r2, [sp, #8]
 8012452:	2200      	movs	r2, #0
 8012454:	9201      	str	r2, [sp, #4]
 8012456:	9300      	str	r3, [sp, #0]
 8012458:	4603      	mov	r3, r0
 801245a:	2280      	movs	r2, #128	; 0x80
 801245c:	6878      	ldr	r0, [r7, #4]
 801245e:	f001 f845 	bl	80134ec <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	7959      	ldrb	r1, [r3, #5]
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8012472:	687a      	ldr	r2, [r7, #4]
 8012474:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8012476:	b292      	uxth	r2, r2
 8012478:	9202      	str	r2, [sp, #8]
 801247a:	2200      	movs	r2, #0
 801247c:	9201      	str	r2, [sp, #4]
 801247e:	9300      	str	r3, [sp, #0]
 8012480:	4603      	mov	r3, r0
 8012482:	2200      	movs	r2, #0
 8012484:	6878      	ldr	r0, [r7, #4]
 8012486:	f001 f831 	bl	80134ec <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 801248a:	e0e3      	b.n	8012654 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801248c:	7bbb      	ldrb	r3, [r7, #14]
 801248e:	2b03      	cmp	r3, #3
 8012490:	f040 80e0 	bne.w	8012654 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	220d      	movs	r2, #13
 8012498:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	2200      	movs	r2, #0
 801249e:	705a      	strb	r2, [r3, #1]
      break;
 80124a0:	e0d8      	b.n	8012654 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80124a2:	2109      	movs	r1, #9
 80124a4:	6878      	ldr	r0, [r7, #4]
 80124a6:	f000 f9a1 	bl	80127ec <USBH_Get_CfgDesc>
 80124aa:	4603      	mov	r3, r0
 80124ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80124ae:	7bbb      	ldrb	r3, [r7, #14]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d103      	bne.n	80124bc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	2204      	movs	r2, #4
 80124b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80124ba:	e0cd      	b.n	8012658 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80124bc:	7bbb      	ldrb	r3, [r7, #14]
 80124be:	2b03      	cmp	r3, #3
 80124c0:	f040 80ca 	bne.w	8012658 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80124ca:	3301      	adds	r3, #1
 80124cc:	b2da      	uxtb	r2, r3
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80124da:	2b03      	cmp	r3, #3
 80124dc:	d903      	bls.n	80124e6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	220d      	movs	r2, #13
 80124e2:	701a      	strb	r2, [r3, #0]
      break;
 80124e4:	e0b8      	b.n	8012658 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	795b      	ldrb	r3, [r3, #5]
 80124ea:	4619      	mov	r1, r3
 80124ec:	6878      	ldr	r0, [r7, #4]
 80124ee:	f001 f84d 	bl	801358c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	791b      	ldrb	r3, [r3, #4]
 80124f6:	4619      	mov	r1, r3
 80124f8:	6878      	ldr	r0, [r7, #4]
 80124fa:	f001 f847 	bl	801358c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	2200      	movs	r2, #0
 8012502:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	2200      	movs	r2, #0
 8012508:	701a      	strb	r2, [r3, #0]
      break;
 801250a:	e0a5      	b.n	8012658 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8012512:	4619      	mov	r1, r3
 8012514:	6878      	ldr	r0, [r7, #4]
 8012516:	f000 f969 	bl	80127ec <USBH_Get_CfgDesc>
 801251a:	4603      	mov	r3, r0
 801251c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801251e:	7bbb      	ldrb	r3, [r7, #14]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d103      	bne.n	801252c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	2205      	movs	r2, #5
 8012528:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801252a:	e097      	b.n	801265c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801252c:	7bbb      	ldrb	r3, [r7, #14]
 801252e:	2b03      	cmp	r3, #3
 8012530:	f040 8094 	bne.w	801265c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801253a:	3301      	adds	r3, #1
 801253c:	b2da      	uxtb	r2, r3
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801254a:	2b03      	cmp	r3, #3
 801254c:	d903      	bls.n	8012556 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	220d      	movs	r2, #13
 8012552:	701a      	strb	r2, [r3, #0]
      break;
 8012554:	e082      	b.n	801265c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	795b      	ldrb	r3, [r3, #5]
 801255a:	4619      	mov	r1, r3
 801255c:	6878      	ldr	r0, [r7, #4]
 801255e:	f001 f815 	bl	801358c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	791b      	ldrb	r3, [r3, #4]
 8012566:	4619      	mov	r1, r3
 8012568:	6878      	ldr	r0, [r7, #4]
 801256a:	f001 f80f 	bl	801358c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	2200      	movs	r2, #0
 8012572:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	2200      	movs	r2, #0
 8012578:	701a      	strb	r2, [r3, #0]
      break;
 801257a:	e06f      	b.n	801265c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8012582:	2b00      	cmp	r3, #0
 8012584:	d019      	beq.n	80125ba <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8012592:	23ff      	movs	r3, #255	; 0xff
 8012594:	6878      	ldr	r0, [r7, #4]
 8012596:	f000 f953 	bl	8012840 <USBH_Get_StringDesc>
 801259a:	4603      	mov	r3, r0
 801259c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801259e:	7bbb      	ldrb	r3, [r7, #14]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d103      	bne.n	80125ac <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	2206      	movs	r2, #6
 80125a8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80125aa:	e059      	b.n	8012660 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80125ac:	7bbb      	ldrb	r3, [r7, #14]
 80125ae:	2b03      	cmp	r3, #3
 80125b0:	d156      	bne.n	8012660 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	2206      	movs	r2, #6
 80125b6:	705a      	strb	r2, [r3, #1]
      break;
 80125b8:	e052      	b.n	8012660 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	2206      	movs	r2, #6
 80125be:	705a      	strb	r2, [r3, #1]
      break;
 80125c0:	e04e      	b.n	8012660 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d019      	beq.n	8012600 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80125d8:	23ff      	movs	r3, #255	; 0xff
 80125da:	6878      	ldr	r0, [r7, #4]
 80125dc:	f000 f930 	bl	8012840 <USBH_Get_StringDesc>
 80125e0:	4603      	mov	r3, r0
 80125e2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80125e4:	7bbb      	ldrb	r3, [r7, #14]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d103      	bne.n	80125f2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	2207      	movs	r2, #7
 80125ee:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80125f0:	e038      	b.n	8012664 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80125f2:	7bbb      	ldrb	r3, [r7, #14]
 80125f4:	2b03      	cmp	r3, #3
 80125f6:	d135      	bne.n	8012664 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	2207      	movs	r2, #7
 80125fc:	705a      	strb	r2, [r3, #1]
      break;
 80125fe:	e031      	b.n	8012664 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	2207      	movs	r2, #7
 8012604:	705a      	strb	r2, [r3, #1]
      break;
 8012606:	e02d      	b.n	8012664 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 801260e:	2b00      	cmp	r3, #0
 8012610:	d017      	beq.n	8012642 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 801261e:	23ff      	movs	r3, #255	; 0xff
 8012620:	6878      	ldr	r0, [r7, #4]
 8012622:	f000 f90d 	bl	8012840 <USBH_Get_StringDesc>
 8012626:	4603      	mov	r3, r0
 8012628:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801262a:	7bbb      	ldrb	r3, [r7, #14]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d102      	bne.n	8012636 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8012630:	2300      	movs	r3, #0
 8012632:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8012634:	e018      	b.n	8012668 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012636:	7bbb      	ldrb	r3, [r7, #14]
 8012638:	2b03      	cmp	r3, #3
 801263a:	d115      	bne.n	8012668 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 801263c:	2300      	movs	r3, #0
 801263e:	73fb      	strb	r3, [r7, #15]
      break;
 8012640:	e012      	b.n	8012668 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8012642:	2300      	movs	r3, #0
 8012644:	73fb      	strb	r3, [r7, #15]
      break;
 8012646:	e00f      	b.n	8012668 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8012648:	bf00      	nop
 801264a:	e00e      	b.n	801266a <USBH_HandleEnum+0x3be>
      break;
 801264c:	bf00      	nop
 801264e:	e00c      	b.n	801266a <USBH_HandleEnum+0x3be>
      break;
 8012650:	bf00      	nop
 8012652:	e00a      	b.n	801266a <USBH_HandleEnum+0x3be>
      break;
 8012654:	bf00      	nop
 8012656:	e008      	b.n	801266a <USBH_HandleEnum+0x3be>
      break;
 8012658:	bf00      	nop
 801265a:	e006      	b.n	801266a <USBH_HandleEnum+0x3be>
      break;
 801265c:	bf00      	nop
 801265e:	e004      	b.n	801266a <USBH_HandleEnum+0x3be>
      break;
 8012660:	bf00      	nop
 8012662:	e002      	b.n	801266a <USBH_HandleEnum+0x3be>
      break;
 8012664:	bf00      	nop
 8012666:	e000      	b.n	801266a <USBH_HandleEnum+0x3be>
      break;
 8012668:	bf00      	nop
  }
  return Status;
 801266a:	7bfb      	ldrb	r3, [r7, #15]
}
 801266c:	4618      	mov	r0, r3
 801266e:	3710      	adds	r7, #16
 8012670:	46bd      	mov	sp, r7
 8012672:	bd80      	pop	{r7, pc}

08012674 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8012674:	b480      	push	{r7}
 8012676:	b083      	sub	sp, #12
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
 801267c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	683a      	ldr	r2, [r7, #0]
 8012682:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8012686:	bf00      	nop
 8012688:	370c      	adds	r7, #12
 801268a:	46bd      	mov	sp, r7
 801268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012690:	4770      	bx	lr

08012692 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8012692:	b580      	push	{r7, lr}
 8012694:	b082      	sub	sp, #8
 8012696:	af00      	add	r7, sp, #0
 8012698:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80126a0:	1c5a      	adds	r2, r3, #1
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80126a8:	6878      	ldr	r0, [r7, #4]
 80126aa:	f000 f804 	bl	80126b6 <USBH_HandleSof>
}
 80126ae:	bf00      	nop
 80126b0:	3708      	adds	r7, #8
 80126b2:	46bd      	mov	sp, r7
 80126b4:	bd80      	pop	{r7, pc}

080126b6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80126b6:	b580      	push	{r7, lr}
 80126b8:	b082      	sub	sp, #8
 80126ba:	af00      	add	r7, sp, #0
 80126bc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	781b      	ldrb	r3, [r3, #0]
 80126c2:	b2db      	uxtb	r3, r3
 80126c4:	2b0b      	cmp	r3, #11
 80126c6:	d10a      	bne.n	80126de <USBH_HandleSof+0x28>
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d005      	beq.n	80126de <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80126d8:	699b      	ldr	r3, [r3, #24]
 80126da:	6878      	ldr	r0, [r7, #4]
 80126dc:	4798      	blx	r3
  }
}
 80126de:	bf00      	nop
 80126e0:	3708      	adds	r7, #8
 80126e2:	46bd      	mov	sp, r7
 80126e4:	bd80      	pop	{r7, pc}

080126e6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80126e6:	b480      	push	{r7}
 80126e8:	b083      	sub	sp, #12
 80126ea:	af00      	add	r7, sp, #0
 80126ec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	2201      	movs	r2, #1
 80126f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80126f6:	bf00      	nop
}
 80126f8:	370c      	adds	r7, #12
 80126fa:	46bd      	mov	sp, r7
 80126fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012700:	4770      	bx	lr

08012702 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8012702:	b480      	push	{r7}
 8012704:	b083      	sub	sp, #12
 8012706:	af00      	add	r7, sp, #0
 8012708:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	2200      	movs	r2, #0
 801270e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8012712:	bf00      	nop
}
 8012714:	370c      	adds	r7, #12
 8012716:	46bd      	mov	sp, r7
 8012718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801271c:	4770      	bx	lr

0801271e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 801271e:	b480      	push	{r7}
 8012720:	b083      	sub	sp, #12
 8012722:	af00      	add	r7, sp, #0
 8012724:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	2201      	movs	r2, #1
 801272a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	2200      	movs	r2, #0
 8012732:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	2200      	movs	r2, #0
 801273a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 801273e:	2300      	movs	r3, #0
}
 8012740:	4618      	mov	r0, r3
 8012742:	370c      	adds	r7, #12
 8012744:	46bd      	mov	sp, r7
 8012746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801274a:	4770      	bx	lr

0801274c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 801274c:	b580      	push	{r7, lr}
 801274e:	b082      	sub	sp, #8
 8012750:	af00      	add	r7, sp, #0
 8012752:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	2201      	movs	r2, #1
 8012758:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	2200      	movs	r2, #0
 8012760:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	2200      	movs	r2, #0
 8012768:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 801276c:	6878      	ldr	r0, [r7, #4]
 801276e:	f003 fe3e 	bl	80163ee <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	791b      	ldrb	r3, [r3, #4]
 8012776:	4619      	mov	r1, r3
 8012778:	6878      	ldr	r0, [r7, #4]
 801277a:	f000 ff07 	bl	801358c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	795b      	ldrb	r3, [r3, #5]
 8012782:	4619      	mov	r1, r3
 8012784:	6878      	ldr	r0, [r7, #4]
 8012786:	f000 ff01 	bl	801358c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 801278a:	2300      	movs	r3, #0
}
 801278c:	4618      	mov	r0, r3
 801278e:	3708      	adds	r7, #8
 8012790:	46bd      	mov	sp, r7
 8012792:	bd80      	pop	{r7, pc}

08012794 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8012794:	b580      	push	{r7, lr}
 8012796:	b086      	sub	sp, #24
 8012798:	af02      	add	r7, sp, #8
 801279a:	6078      	str	r0, [r7, #4]
 801279c:	460b      	mov	r3, r1
 801279e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80127a0:	887b      	ldrh	r3, [r7, #2]
 80127a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80127a6:	d901      	bls.n	80127ac <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80127a8:	2303      	movs	r3, #3
 80127aa:	e01b      	b.n	80127e4 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80127b2:	887b      	ldrh	r3, [r7, #2]
 80127b4:	9300      	str	r3, [sp, #0]
 80127b6:	4613      	mov	r3, r2
 80127b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80127bc:	2100      	movs	r1, #0
 80127be:	6878      	ldr	r0, [r7, #4]
 80127c0:	f000 f872 	bl	80128a8 <USBH_GetDescriptor>
 80127c4:	4603      	mov	r3, r0
 80127c6:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80127c8:	7bfb      	ldrb	r3, [r7, #15]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d109      	bne.n	80127e2 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80127d4:	887a      	ldrh	r2, [r7, #2]
 80127d6:	4619      	mov	r1, r3
 80127d8:	6878      	ldr	r0, [r7, #4]
 80127da:	f000 f929 	bl	8012a30 <USBH_ParseDevDesc>
 80127de:	4603      	mov	r3, r0
 80127e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80127e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80127e4:	4618      	mov	r0, r3
 80127e6:	3710      	adds	r7, #16
 80127e8:	46bd      	mov	sp, r7
 80127ea:	bd80      	pop	{r7, pc}

080127ec <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80127ec:	b580      	push	{r7, lr}
 80127ee:	b086      	sub	sp, #24
 80127f0:	af02      	add	r7, sp, #8
 80127f2:	6078      	str	r0, [r7, #4]
 80127f4:	460b      	mov	r3, r1
 80127f6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	331c      	adds	r3, #28
 80127fc:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80127fe:	887b      	ldrh	r3, [r7, #2]
 8012800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012804:	d901      	bls.n	801280a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8012806:	2303      	movs	r3, #3
 8012808:	e016      	b.n	8012838 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 801280a:	887b      	ldrh	r3, [r7, #2]
 801280c:	9300      	str	r3, [sp, #0]
 801280e:	68bb      	ldr	r3, [r7, #8]
 8012810:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012814:	2100      	movs	r1, #0
 8012816:	6878      	ldr	r0, [r7, #4]
 8012818:	f000 f846 	bl	80128a8 <USBH_GetDescriptor>
 801281c:	4603      	mov	r3, r0
 801281e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8012820:	7bfb      	ldrb	r3, [r7, #15]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d107      	bne.n	8012836 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8012826:	887b      	ldrh	r3, [r7, #2]
 8012828:	461a      	mov	r2, r3
 801282a:	68b9      	ldr	r1, [r7, #8]
 801282c:	6878      	ldr	r0, [r7, #4]
 801282e:	f000 f9b1 	bl	8012b94 <USBH_ParseCfgDesc>
 8012832:	4603      	mov	r3, r0
 8012834:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8012836:	7bfb      	ldrb	r3, [r7, #15]
}
 8012838:	4618      	mov	r0, r3
 801283a:	3710      	adds	r7, #16
 801283c:	46bd      	mov	sp, r7
 801283e:	bd80      	pop	{r7, pc}

08012840 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b088      	sub	sp, #32
 8012844:	af02      	add	r7, sp, #8
 8012846:	60f8      	str	r0, [r7, #12]
 8012848:	607a      	str	r2, [r7, #4]
 801284a:	461a      	mov	r2, r3
 801284c:	460b      	mov	r3, r1
 801284e:	72fb      	strb	r3, [r7, #11]
 8012850:	4613      	mov	r3, r2
 8012852:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8012854:	893b      	ldrh	r3, [r7, #8]
 8012856:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801285a:	d802      	bhi.n	8012862 <USBH_Get_StringDesc+0x22>
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d101      	bne.n	8012866 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8012862:	2303      	movs	r3, #3
 8012864:	e01c      	b.n	80128a0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8012866:	7afb      	ldrb	r3, [r7, #11]
 8012868:	b29b      	uxth	r3, r3
 801286a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 801286e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8012876:	893b      	ldrh	r3, [r7, #8]
 8012878:	9300      	str	r3, [sp, #0]
 801287a:	460b      	mov	r3, r1
 801287c:	2100      	movs	r1, #0
 801287e:	68f8      	ldr	r0, [r7, #12]
 8012880:	f000 f812 	bl	80128a8 <USBH_GetDescriptor>
 8012884:	4603      	mov	r3, r0
 8012886:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8012888:	7dfb      	ldrb	r3, [r7, #23]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d107      	bne.n	801289e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8012894:	893a      	ldrh	r2, [r7, #8]
 8012896:	6879      	ldr	r1, [r7, #4]
 8012898:	4618      	mov	r0, r3
 801289a:	f000 fb88 	bl	8012fae <USBH_ParseStringDesc>
  }

  return status;
 801289e:	7dfb      	ldrb	r3, [r7, #23]
}
 80128a0:	4618      	mov	r0, r3
 80128a2:	3718      	adds	r7, #24
 80128a4:	46bd      	mov	sp, r7
 80128a6:	bd80      	pop	{r7, pc}

080128a8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80128a8:	b580      	push	{r7, lr}
 80128aa:	b084      	sub	sp, #16
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	60f8      	str	r0, [r7, #12]
 80128b0:	607b      	str	r3, [r7, #4]
 80128b2:	460b      	mov	r3, r1
 80128b4:	72fb      	strb	r3, [r7, #11]
 80128b6:	4613      	mov	r3, r2
 80128b8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	789b      	ldrb	r3, [r3, #2]
 80128be:	2b01      	cmp	r3, #1
 80128c0:	d11c      	bne.n	80128fc <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80128c2:	7afb      	ldrb	r3, [r7, #11]
 80128c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80128c8:	b2da      	uxtb	r2, r3
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	2206      	movs	r2, #6
 80128d2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	893a      	ldrh	r2, [r7, #8]
 80128d8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80128da:	893b      	ldrh	r3, [r7, #8]
 80128dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80128e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80128e4:	d104      	bne.n	80128f0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	f240 4209 	movw	r2, #1033	; 0x409
 80128ec:	829a      	strh	r2, [r3, #20]
 80128ee:	e002      	b.n	80128f6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	2200      	movs	r2, #0
 80128f4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	8b3a      	ldrh	r2, [r7, #24]
 80128fa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80128fc:	8b3b      	ldrh	r3, [r7, #24]
 80128fe:	461a      	mov	r2, r3
 8012900:	6879      	ldr	r1, [r7, #4]
 8012902:	68f8      	ldr	r0, [r7, #12]
 8012904:	f000 fba1 	bl	801304a <USBH_CtlReq>
 8012908:	4603      	mov	r3, r0
}
 801290a:	4618      	mov	r0, r3
 801290c:	3710      	adds	r7, #16
 801290e:	46bd      	mov	sp, r7
 8012910:	bd80      	pop	{r7, pc}

08012912 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8012912:	b580      	push	{r7, lr}
 8012914:	b082      	sub	sp, #8
 8012916:	af00      	add	r7, sp, #0
 8012918:	6078      	str	r0, [r7, #4]
 801291a:	460b      	mov	r3, r1
 801291c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	789b      	ldrb	r3, [r3, #2]
 8012922:	2b01      	cmp	r3, #1
 8012924:	d10f      	bne.n	8012946 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	2200      	movs	r2, #0
 801292a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	2205      	movs	r2, #5
 8012930:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8012932:	78fb      	ldrb	r3, [r7, #3]
 8012934:	b29a      	uxth	r2, r3
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	2200      	movs	r2, #0
 801293e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	2200      	movs	r2, #0
 8012944:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8012946:	2200      	movs	r2, #0
 8012948:	2100      	movs	r1, #0
 801294a:	6878      	ldr	r0, [r7, #4]
 801294c:	f000 fb7d 	bl	801304a <USBH_CtlReq>
 8012950:	4603      	mov	r3, r0
}
 8012952:	4618      	mov	r0, r3
 8012954:	3708      	adds	r7, #8
 8012956:	46bd      	mov	sp, r7
 8012958:	bd80      	pop	{r7, pc}

0801295a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 801295a:	b580      	push	{r7, lr}
 801295c:	b082      	sub	sp, #8
 801295e:	af00      	add	r7, sp, #0
 8012960:	6078      	str	r0, [r7, #4]
 8012962:	460b      	mov	r3, r1
 8012964:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	789b      	ldrb	r3, [r3, #2]
 801296a:	2b01      	cmp	r3, #1
 801296c:	d10e      	bne.n	801298c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	2200      	movs	r2, #0
 8012972:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	2209      	movs	r2, #9
 8012978:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	887a      	ldrh	r2, [r7, #2]
 801297e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	2200      	movs	r2, #0
 8012984:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	2200      	movs	r2, #0
 801298a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 801298c:	2200      	movs	r2, #0
 801298e:	2100      	movs	r1, #0
 8012990:	6878      	ldr	r0, [r7, #4]
 8012992:	f000 fb5a 	bl	801304a <USBH_CtlReq>
 8012996:	4603      	mov	r3, r0
}
 8012998:	4618      	mov	r0, r3
 801299a:	3708      	adds	r7, #8
 801299c:	46bd      	mov	sp, r7
 801299e:	bd80      	pop	{r7, pc}

080129a0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80129a0:	b580      	push	{r7, lr}
 80129a2:	b082      	sub	sp, #8
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	6078      	str	r0, [r7, #4]
 80129a8:	460b      	mov	r3, r1
 80129aa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	789b      	ldrb	r3, [r3, #2]
 80129b0:	2b01      	cmp	r3, #1
 80129b2:	d10f      	bne.n	80129d4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	2200      	movs	r2, #0
 80129b8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	2203      	movs	r2, #3
 80129be:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80129c0:	78fb      	ldrb	r3, [r7, #3]
 80129c2:	b29a      	uxth	r2, r3
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	2200      	movs	r2, #0
 80129cc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	2200      	movs	r2, #0
 80129d2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80129d4:	2200      	movs	r2, #0
 80129d6:	2100      	movs	r1, #0
 80129d8:	6878      	ldr	r0, [r7, #4]
 80129da:	f000 fb36 	bl	801304a <USBH_CtlReq>
 80129de:	4603      	mov	r3, r0
}
 80129e0:	4618      	mov	r0, r3
 80129e2:	3708      	adds	r7, #8
 80129e4:	46bd      	mov	sp, r7
 80129e6:	bd80      	pop	{r7, pc}

080129e8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b082      	sub	sp, #8
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	6078      	str	r0, [r7, #4]
 80129f0:	460b      	mov	r3, r1
 80129f2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	789b      	ldrb	r3, [r3, #2]
 80129f8:	2b01      	cmp	r3, #1
 80129fa:	d10f      	bne.n	8012a1c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	2202      	movs	r2, #2
 8012a00:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	2201      	movs	r2, #1
 8012a06:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	2200      	movs	r2, #0
 8012a0c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8012a0e:	78fb      	ldrb	r3, [r7, #3]
 8012a10:	b29a      	uxth	r2, r3
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	2200      	movs	r2, #0
 8012a1a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8012a1c:	2200      	movs	r2, #0
 8012a1e:	2100      	movs	r1, #0
 8012a20:	6878      	ldr	r0, [r7, #4]
 8012a22:	f000 fb12 	bl	801304a <USBH_CtlReq>
 8012a26:	4603      	mov	r3, r0
}
 8012a28:	4618      	mov	r0, r3
 8012a2a:	3708      	adds	r7, #8
 8012a2c:	46bd      	mov	sp, r7
 8012a2e:	bd80      	pop	{r7, pc}

08012a30 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8012a30:	b480      	push	{r7}
 8012a32:	b087      	sub	sp, #28
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	60f8      	str	r0, [r7, #12]
 8012a38:	60b9      	str	r1, [r7, #8]
 8012a3a:	4613      	mov	r3, r2
 8012a3c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	f203 3326 	addw	r3, r3, #806	; 0x326
 8012a44:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8012a46:	2300      	movs	r3, #0
 8012a48:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8012a4a:	68bb      	ldr	r3, [r7, #8]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d101      	bne.n	8012a54 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8012a50:	2302      	movs	r3, #2
 8012a52:	e097      	b.n	8012b84 <USBH_ParseDevDesc+0x154>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8012a54:	68bb      	ldr	r3, [r7, #8]
 8012a56:	781a      	ldrb	r2, [r3, #0]
 8012a58:	693b      	ldr	r3, [r7, #16]
 8012a5a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8012a5c:	68bb      	ldr	r3, [r7, #8]
 8012a5e:	785a      	ldrb	r2, [r3, #1]
 8012a60:	693b      	ldr	r3, [r7, #16]
 8012a62:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8012a64:	68bb      	ldr	r3, [r7, #8]
 8012a66:	3302      	adds	r3, #2
 8012a68:	781b      	ldrb	r3, [r3, #0]
 8012a6a:	b29a      	uxth	r2, r3
 8012a6c:	68bb      	ldr	r3, [r7, #8]
 8012a6e:	3303      	adds	r3, #3
 8012a70:	781b      	ldrb	r3, [r3, #0]
 8012a72:	b29b      	uxth	r3, r3
 8012a74:	021b      	lsls	r3, r3, #8
 8012a76:	b29b      	uxth	r3, r3
 8012a78:	4313      	orrs	r3, r2
 8012a7a:	b29a      	uxth	r2, r3
 8012a7c:	693b      	ldr	r3, [r7, #16]
 8012a7e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8012a80:	68bb      	ldr	r3, [r7, #8]
 8012a82:	791a      	ldrb	r2, [r3, #4]
 8012a84:	693b      	ldr	r3, [r7, #16]
 8012a86:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8012a88:	68bb      	ldr	r3, [r7, #8]
 8012a8a:	795a      	ldrb	r2, [r3, #5]
 8012a8c:	693b      	ldr	r3, [r7, #16]
 8012a8e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8012a90:	68bb      	ldr	r3, [r7, #8]
 8012a92:	799a      	ldrb	r2, [r3, #6]
 8012a94:	693b      	ldr	r3, [r7, #16]
 8012a96:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8012a98:	68bb      	ldr	r3, [r7, #8]
 8012a9a:	79da      	ldrb	r2, [r3, #7]
 8012a9c:	693b      	ldr	r3, [r7, #16]
 8012a9e:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d004      	beq.n	8012ab4 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8012ab0:	2b01      	cmp	r3, #1
 8012ab2:	d11a      	bne.n	8012aea <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8012ab4:	693b      	ldr	r3, [r7, #16]
 8012ab6:	79db      	ldrb	r3, [r3, #7]
 8012ab8:	2b20      	cmp	r3, #32
 8012aba:	dc0e      	bgt.n	8012ada <USBH_ParseDevDesc+0xaa>
 8012abc:	2b08      	cmp	r3, #8
 8012abe:	db0e      	blt.n	8012ade <USBH_ParseDevDesc+0xae>
 8012ac0:	3b08      	subs	r3, #8
 8012ac2:	2201      	movs	r2, #1
 8012ac4:	409a      	lsls	r2, r3
 8012ac6:	4b32      	ldr	r3, [pc, #200]	; (8012b90 <USBH_ParseDevDesc+0x160>)
 8012ac8:	4013      	ands	r3, r2
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	bf14      	ite	ne
 8012ace:	2301      	movne	r3, #1
 8012ad0:	2300      	moveq	r3, #0
 8012ad2:	b2db      	uxtb	r3, r3
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d106      	bne.n	8012ae6 <USBH_ParseDevDesc+0xb6>
 8012ad8:	e001      	b.n	8012ade <USBH_ParseDevDesc+0xae>
 8012ada:	2b40      	cmp	r3, #64	; 0x40
 8012adc:	d003      	beq.n	8012ae6 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8012ade:	693b      	ldr	r3, [r7, #16]
 8012ae0:	2208      	movs	r2, #8
 8012ae2:	71da      	strb	r2, [r3, #7]
        break;
 8012ae4:	e000      	b.n	8012ae8 <USBH_ParseDevDesc+0xb8>
        break;
 8012ae6:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8012ae8:	e00e      	b.n	8012b08 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8012af0:	2b02      	cmp	r3, #2
 8012af2:	d107      	bne.n	8012b04 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8012af4:	693b      	ldr	r3, [r7, #16]
 8012af6:	79db      	ldrb	r3, [r3, #7]
 8012af8:	2b08      	cmp	r3, #8
 8012afa:	d005      	beq.n	8012b08 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8012afc:	693b      	ldr	r3, [r7, #16]
 8012afe:	2208      	movs	r2, #8
 8012b00:	71da      	strb	r2, [r3, #7]
 8012b02:	e001      	b.n	8012b08 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8012b04:	2303      	movs	r3, #3
 8012b06:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8012b08:	88fb      	ldrh	r3, [r7, #6]
 8012b0a:	2b08      	cmp	r3, #8
 8012b0c:	d939      	bls.n	8012b82 <USBH_ParseDevDesc+0x152>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8012b0e:	68bb      	ldr	r3, [r7, #8]
 8012b10:	3308      	adds	r3, #8
 8012b12:	781b      	ldrb	r3, [r3, #0]
 8012b14:	b29a      	uxth	r2, r3
 8012b16:	68bb      	ldr	r3, [r7, #8]
 8012b18:	3309      	adds	r3, #9
 8012b1a:	781b      	ldrb	r3, [r3, #0]
 8012b1c:	b29b      	uxth	r3, r3
 8012b1e:	021b      	lsls	r3, r3, #8
 8012b20:	b29b      	uxth	r3, r3
 8012b22:	4313      	orrs	r3, r2
 8012b24:	b29a      	uxth	r2, r3
 8012b26:	693b      	ldr	r3, [r7, #16]
 8012b28:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8012b2a:	68bb      	ldr	r3, [r7, #8]
 8012b2c:	330a      	adds	r3, #10
 8012b2e:	781b      	ldrb	r3, [r3, #0]
 8012b30:	b29a      	uxth	r2, r3
 8012b32:	68bb      	ldr	r3, [r7, #8]
 8012b34:	330b      	adds	r3, #11
 8012b36:	781b      	ldrb	r3, [r3, #0]
 8012b38:	b29b      	uxth	r3, r3
 8012b3a:	021b      	lsls	r3, r3, #8
 8012b3c:	b29b      	uxth	r3, r3
 8012b3e:	4313      	orrs	r3, r2
 8012b40:	b29a      	uxth	r2, r3
 8012b42:	693b      	ldr	r3, [r7, #16]
 8012b44:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8012b46:	68bb      	ldr	r3, [r7, #8]
 8012b48:	330c      	adds	r3, #12
 8012b4a:	781b      	ldrb	r3, [r3, #0]
 8012b4c:	b29a      	uxth	r2, r3
 8012b4e:	68bb      	ldr	r3, [r7, #8]
 8012b50:	330d      	adds	r3, #13
 8012b52:	781b      	ldrb	r3, [r3, #0]
 8012b54:	b29b      	uxth	r3, r3
 8012b56:	021b      	lsls	r3, r3, #8
 8012b58:	b29b      	uxth	r3, r3
 8012b5a:	4313      	orrs	r3, r2
 8012b5c:	b29a      	uxth	r2, r3
 8012b5e:	693b      	ldr	r3, [r7, #16]
 8012b60:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8012b62:	68bb      	ldr	r3, [r7, #8]
 8012b64:	7b9a      	ldrb	r2, [r3, #14]
 8012b66:	693b      	ldr	r3, [r7, #16]
 8012b68:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8012b6a:	68bb      	ldr	r3, [r7, #8]
 8012b6c:	7bda      	ldrb	r2, [r3, #15]
 8012b6e:	693b      	ldr	r3, [r7, #16]
 8012b70:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8012b72:	68bb      	ldr	r3, [r7, #8]
 8012b74:	7c1a      	ldrb	r2, [r3, #16]
 8012b76:	693b      	ldr	r3, [r7, #16]
 8012b78:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8012b7a:	68bb      	ldr	r3, [r7, #8]
 8012b7c:	7c5a      	ldrb	r2, [r3, #17]
 8012b7e:	693b      	ldr	r3, [r7, #16]
 8012b80:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8012b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b84:	4618      	mov	r0, r3
 8012b86:	371c      	adds	r7, #28
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b8e:	4770      	bx	lr
 8012b90:	01000101 	.word	0x01000101

08012b94 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8012b94:	b580      	push	{r7, lr}
 8012b96:	b08c      	sub	sp, #48	; 0x30
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	60f8      	str	r0, [r7, #12]
 8012b9c:	60b9      	str	r1, [r7, #8]
 8012b9e:	4613      	mov	r3, r2
 8012ba0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8012ba8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8012baa:	2300      	movs	r3, #0
 8012bac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8012bb6:	2300      	movs	r3, #0
 8012bb8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 8012bbc:	68bb      	ldr	r3, [r7, #8]
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d101      	bne.n	8012bc6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8012bc2:	2302      	movs	r3, #2
 8012bc4:	e0d7      	b.n	8012d76 <USBH_ParseCfgDesc+0x1e2>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8012bc6:	68bb      	ldr	r3, [r7, #8]
 8012bc8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8012bca:	68bb      	ldr	r3, [r7, #8]
 8012bcc:	781a      	ldrb	r2, [r3, #0]
 8012bce:	6a3b      	ldr	r3, [r7, #32]
 8012bd0:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8012bd2:	68bb      	ldr	r3, [r7, #8]
 8012bd4:	785a      	ldrb	r2, [r3, #1]
 8012bd6:	6a3b      	ldr	r3, [r7, #32]
 8012bd8:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8012bda:	68bb      	ldr	r3, [r7, #8]
 8012bdc:	3302      	adds	r3, #2
 8012bde:	781b      	ldrb	r3, [r3, #0]
 8012be0:	b29a      	uxth	r2, r3
 8012be2:	68bb      	ldr	r3, [r7, #8]
 8012be4:	3303      	adds	r3, #3
 8012be6:	781b      	ldrb	r3, [r3, #0]
 8012be8:	b29b      	uxth	r3, r3
 8012bea:	021b      	lsls	r3, r3, #8
 8012bec:	b29b      	uxth	r3, r3
 8012bee:	4313      	orrs	r3, r2
 8012bf0:	b29b      	uxth	r3, r3
 8012bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012bf6:	bf28      	it	cs
 8012bf8:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8012bfc:	b29a      	uxth	r2, r3
 8012bfe:	6a3b      	ldr	r3, [r7, #32]
 8012c00:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8012c02:	68bb      	ldr	r3, [r7, #8]
 8012c04:	791a      	ldrb	r2, [r3, #4]
 8012c06:	6a3b      	ldr	r3, [r7, #32]
 8012c08:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8012c0a:	68bb      	ldr	r3, [r7, #8]
 8012c0c:	795a      	ldrb	r2, [r3, #5]
 8012c0e:	6a3b      	ldr	r3, [r7, #32]
 8012c10:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8012c12:	68bb      	ldr	r3, [r7, #8]
 8012c14:	799a      	ldrb	r2, [r3, #6]
 8012c16:	6a3b      	ldr	r3, [r7, #32]
 8012c18:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8012c1a:	68bb      	ldr	r3, [r7, #8]
 8012c1c:	79da      	ldrb	r2, [r3, #7]
 8012c1e:	6a3b      	ldr	r3, [r7, #32]
 8012c20:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8012c22:	68bb      	ldr	r3, [r7, #8]
 8012c24:	7a1a      	ldrb	r2, [r3, #8]
 8012c26:	6a3b      	ldr	r3, [r7, #32]
 8012c28:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8012c2a:	6a3b      	ldr	r3, [r7, #32]
 8012c2c:	781b      	ldrb	r3, [r3, #0]
 8012c2e:	2b09      	cmp	r3, #9
 8012c30:	d002      	beq.n	8012c38 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8012c32:	6a3b      	ldr	r3, [r7, #32]
 8012c34:	2209      	movs	r2, #9
 8012c36:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8012c38:	88fb      	ldrh	r3, [r7, #6]
 8012c3a:	2b09      	cmp	r3, #9
 8012c3c:	f240 8099 	bls.w	8012d72 <USBH_ParseCfgDesc+0x1de>
  {
    ptr = USB_LEN_CFG_DESC;
 8012c40:	2309      	movs	r3, #9
 8012c42:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8012c44:	2300      	movs	r3, #0
 8012c46:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8012c48:	e07d      	b.n	8012d46 <USBH_ParseCfgDesc+0x1b2>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8012c4a:	f107 0316 	add.w	r3, r7, #22
 8012c4e:	4619      	mov	r1, r3
 8012c50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c52:	f000 f9df 	bl	8013014 <USBH_GetNextDesc>
 8012c56:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8012c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c5a:	785b      	ldrb	r3, [r3, #1]
 8012c5c:	2b04      	cmp	r3, #4
 8012c5e:	d172      	bne.n	8012d46 <USBH_ParseCfgDesc+0x1b2>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8012c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c62:	781b      	ldrb	r3, [r3, #0]
 8012c64:	2b09      	cmp	r3, #9
 8012c66:	d002      	beq.n	8012c6e <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8012c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c6a:	2209      	movs	r2, #9
 8012c6c:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8012c6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012c72:	221a      	movs	r2, #26
 8012c74:	fb02 f303 	mul.w	r3, r2, r3
 8012c78:	3308      	adds	r3, #8
 8012c7a:	6a3a      	ldr	r2, [r7, #32]
 8012c7c:	4413      	add	r3, r2
 8012c7e:	3302      	adds	r3, #2
 8012c80:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8012c82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012c84:	69f8      	ldr	r0, [r7, #28]
 8012c86:	f000 f87a 	bl	8012d7e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8012c8a:	2300      	movs	r3, #0
 8012c8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8012c90:	2300      	movs	r3, #0
 8012c92:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8012c94:	e03f      	b.n	8012d16 <USBH_ParseCfgDesc+0x182>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8012c96:	f107 0316 	add.w	r3, r7, #22
 8012c9a:	4619      	mov	r1, r3
 8012c9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c9e:	f000 f9b9 	bl	8013014 <USBH_GetNextDesc>
 8012ca2:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8012ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ca6:	785b      	ldrb	r3, [r3, #1]
 8012ca8:	2b05      	cmp	r3, #5
 8012caa:	d134      	bne.n	8012d16 <USBH_ParseCfgDesc+0x182>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8012cac:	69fb      	ldr	r3, [r7, #28]
 8012cae:	795b      	ldrb	r3, [r3, #5]
 8012cb0:	2b01      	cmp	r3, #1
 8012cb2:	d10f      	bne.n	8012cd4 <USBH_ParseCfgDesc+0x140>
 8012cb4:	69fb      	ldr	r3, [r7, #28]
 8012cb6:	799b      	ldrb	r3, [r3, #6]
 8012cb8:	2b02      	cmp	r3, #2
 8012cba:	d10b      	bne.n	8012cd4 <USBH_ParseCfgDesc+0x140>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8012cbc:	69fb      	ldr	r3, [r7, #28]
 8012cbe:	79db      	ldrb	r3, [r3, #7]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d10b      	bne.n	8012cdc <USBH_ParseCfgDesc+0x148>
 8012cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cc6:	781b      	ldrb	r3, [r3, #0]
 8012cc8:	2b09      	cmp	r3, #9
 8012cca:	d007      	beq.n	8012cdc <USBH_ParseCfgDesc+0x148>
              {
                pdesc->bLength = 0x09U;
 8012ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cce:	2209      	movs	r2, #9
 8012cd0:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8012cd2:	e003      	b.n	8012cdc <USBH_ParseCfgDesc+0x148>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8012cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cd6:	2207      	movs	r2, #7
 8012cd8:	701a      	strb	r2, [r3, #0]
 8012cda:	e000      	b.n	8012cde <USBH_ParseCfgDesc+0x14a>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8012cdc:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8012cde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012ce2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8012ce6:	3201      	adds	r2, #1
 8012ce8:	00d2      	lsls	r2, r2, #3
 8012cea:	211a      	movs	r1, #26
 8012cec:	fb01 f303 	mul.w	r3, r1, r3
 8012cf0:	4413      	add	r3, r2
 8012cf2:	3308      	adds	r3, #8
 8012cf4:	6a3a      	ldr	r2, [r7, #32]
 8012cf6:	4413      	add	r3, r2
 8012cf8:	3304      	adds	r3, #4
 8012cfa:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8012cfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012cfe:	69b9      	ldr	r1, [r7, #24]
 8012d00:	68f8      	ldr	r0, [r7, #12]
 8012d02:	f000 f86b 	bl	8012ddc <USBH_ParseEPDesc>
 8012d06:	4603      	mov	r3, r0
 8012d08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8012d0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012d10:	3301      	adds	r3, #1
 8012d12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8012d16:	69fb      	ldr	r3, [r7, #28]
 8012d18:	791b      	ldrb	r3, [r3, #4]
 8012d1a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8012d1e:	429a      	cmp	r2, r3
 8012d20:	d204      	bcs.n	8012d2c <USBH_ParseCfgDesc+0x198>
 8012d22:	6a3b      	ldr	r3, [r7, #32]
 8012d24:	885a      	ldrh	r2, [r3, #2]
 8012d26:	8afb      	ldrh	r3, [r7, #22]
 8012d28:	429a      	cmp	r2, r3
 8012d2a:	d8b4      	bhi.n	8012c96 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8012d2c:	69fb      	ldr	r3, [r7, #28]
 8012d2e:	791b      	ldrb	r3, [r3, #4]
 8012d30:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8012d34:	429a      	cmp	r2, r3
 8012d36:	d201      	bcs.n	8012d3c <USBH_ParseCfgDesc+0x1a8>
        {
          return USBH_NOT_SUPPORTED;
 8012d38:	2303      	movs	r3, #3
 8012d3a:	e01c      	b.n	8012d76 <USBH_ParseCfgDesc+0x1e2>
        }

        if_ix++;
 8012d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d40:	3301      	adds	r3, #1
 8012d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8012d46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d4a:	2b01      	cmp	r3, #1
 8012d4c:	d805      	bhi.n	8012d5a <USBH_ParseCfgDesc+0x1c6>
 8012d4e:	6a3b      	ldr	r3, [r7, #32]
 8012d50:	885a      	ldrh	r2, [r3, #2]
 8012d52:	8afb      	ldrh	r3, [r7, #22]
 8012d54:	429a      	cmp	r2, r3
 8012d56:	f63f af78 	bhi.w	8012c4a <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8012d5a:	6a3b      	ldr	r3, [r7, #32]
 8012d5c:	791b      	ldrb	r3, [r3, #4]
 8012d5e:	2b02      	cmp	r3, #2
 8012d60:	bf28      	it	cs
 8012d62:	2302      	movcs	r3, #2
 8012d64:	b2db      	uxtb	r3, r3
 8012d66:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8012d6a:	429a      	cmp	r2, r3
 8012d6c:	d201      	bcs.n	8012d72 <USBH_ParseCfgDesc+0x1de>
    {
      return USBH_NOT_SUPPORTED;
 8012d6e:	2303      	movs	r3, #3
 8012d70:	e001      	b.n	8012d76 <USBH_ParseCfgDesc+0x1e2>
    }
  }

  return status;
 8012d72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012d76:	4618      	mov	r0, r3
 8012d78:	3730      	adds	r7, #48	; 0x30
 8012d7a:	46bd      	mov	sp, r7
 8012d7c:	bd80      	pop	{r7, pc}

08012d7e <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8012d7e:	b480      	push	{r7}
 8012d80:	b083      	sub	sp, #12
 8012d82:	af00      	add	r7, sp, #0
 8012d84:	6078      	str	r0, [r7, #4]
 8012d86:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8012d88:	683b      	ldr	r3, [r7, #0]
 8012d8a:	781a      	ldrb	r2, [r3, #0]
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8012d90:	683b      	ldr	r3, [r7, #0]
 8012d92:	785a      	ldrb	r2, [r3, #1]
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8012d98:	683b      	ldr	r3, [r7, #0]
 8012d9a:	789a      	ldrb	r2, [r3, #2]
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8012da0:	683b      	ldr	r3, [r7, #0]
 8012da2:	78da      	ldrb	r2, [r3, #3]
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 8012da8:	683b      	ldr	r3, [r7, #0]
 8012daa:	791a      	ldrb	r2, [r3, #4]
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8012db0:	683b      	ldr	r3, [r7, #0]
 8012db2:	795a      	ldrb	r2, [r3, #5]
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8012db8:	683b      	ldr	r3, [r7, #0]
 8012dba:	799a      	ldrb	r2, [r3, #6]
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8012dc0:	683b      	ldr	r3, [r7, #0]
 8012dc2:	79da      	ldrb	r2, [r3, #7]
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8012dc8:	683b      	ldr	r3, [r7, #0]
 8012dca:	7a1a      	ldrb	r2, [r3, #8]
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	721a      	strb	r2, [r3, #8]
}
 8012dd0:	bf00      	nop
 8012dd2:	370c      	adds	r7, #12
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dda:	4770      	bx	lr

08012ddc <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8012ddc:	b480      	push	{r7}
 8012dde:	b087      	sub	sp, #28
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	60f8      	str	r0, [r7, #12]
 8012de4:	60b9      	str	r1, [r7, #8]
 8012de6:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8012de8:	2300      	movs	r3, #0
 8012dea:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	781a      	ldrb	r2, [r3, #0]
 8012df0:	68bb      	ldr	r3, [r7, #8]
 8012df2:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	785a      	ldrb	r2, [r3, #1]
 8012df8:	68bb      	ldr	r3, [r7, #8]
 8012dfa:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	789a      	ldrb	r2, [r3, #2]
 8012e00:	68bb      	ldr	r3, [r7, #8]
 8012e02:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	78da      	ldrb	r2, [r3, #3]
 8012e08:	68bb      	ldr	r3, [r7, #8]
 8012e0a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	3304      	adds	r3, #4
 8012e10:	781b      	ldrb	r3, [r3, #0]
 8012e12:	b29a      	uxth	r2, r3
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	3305      	adds	r3, #5
 8012e18:	781b      	ldrb	r3, [r3, #0]
 8012e1a:	b29b      	uxth	r3, r3
 8012e1c:	021b      	lsls	r3, r3, #8
 8012e1e:	b29b      	uxth	r3, r3
 8012e20:	4313      	orrs	r3, r2
 8012e22:	b29a      	uxth	r2, r3
 8012e24:	68bb      	ldr	r3, [r7, #8]
 8012e26:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	799a      	ldrb	r2, [r3, #6]
 8012e2c:	68bb      	ldr	r3, [r7, #8]
 8012e2e:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8012e30:	68bb      	ldr	r3, [r7, #8]
 8012e32:	889b      	ldrh	r3, [r3, #4]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d009      	beq.n	8012e4c <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8012e38:	68bb      	ldr	r3, [r7, #8]
 8012e3a:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8012e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012e40:	d804      	bhi.n	8012e4c <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8012e42:	68bb      	ldr	r3, [r7, #8]
 8012e44:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8012e46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012e4a:	d901      	bls.n	8012e50 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 8012e4c:	2303      	movs	r3, #3
 8012e4e:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d136      	bne.n	8012ec8 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8012e5a:	68bb      	ldr	r3, [r7, #8]
 8012e5c:	78db      	ldrb	r3, [r3, #3]
 8012e5e:	f003 0303 	and.w	r3, r3, #3
 8012e62:	2b02      	cmp	r3, #2
 8012e64:	d108      	bne.n	8012e78 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8012e66:	68bb      	ldr	r3, [r7, #8]
 8012e68:	889b      	ldrh	r3, [r3, #4]
 8012e6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012e6e:	f240 8097 	bls.w	8012fa0 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8012e72:	2303      	movs	r3, #3
 8012e74:	75fb      	strb	r3, [r7, #23]
 8012e76:	e093      	b.n	8012fa0 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8012e78:	68bb      	ldr	r3, [r7, #8]
 8012e7a:	78db      	ldrb	r3, [r3, #3]
 8012e7c:	f003 0303 	and.w	r3, r3, #3
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d107      	bne.n	8012e94 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8012e84:	68bb      	ldr	r3, [r7, #8]
 8012e86:	889b      	ldrh	r3, [r3, #4]
 8012e88:	2b40      	cmp	r3, #64	; 0x40
 8012e8a:	f240 8089 	bls.w	8012fa0 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8012e8e:	2303      	movs	r3, #3
 8012e90:	75fb      	strb	r3, [r7, #23]
 8012e92:	e085      	b.n	8012fa0 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8012e94:	68bb      	ldr	r3, [r7, #8]
 8012e96:	78db      	ldrb	r3, [r3, #3]
 8012e98:	f003 0303 	and.w	r3, r3, #3
 8012e9c:	2b01      	cmp	r3, #1
 8012e9e:	d005      	beq.n	8012eac <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8012ea0:	68bb      	ldr	r3, [r7, #8]
 8012ea2:	78db      	ldrb	r3, [r3, #3]
 8012ea4:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8012ea8:	2b03      	cmp	r3, #3
 8012eaa:	d10a      	bne.n	8012ec2 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8012eac:	68bb      	ldr	r3, [r7, #8]
 8012eae:	799b      	ldrb	r3, [r3, #6]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d003      	beq.n	8012ebc <USBH_ParseEPDesc+0xe0>
 8012eb4:	68bb      	ldr	r3, [r7, #8]
 8012eb6:	799b      	ldrb	r3, [r3, #6]
 8012eb8:	2b10      	cmp	r3, #16
 8012eba:	d970      	bls.n	8012f9e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8012ebc:	2303      	movs	r3, #3
 8012ebe:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8012ec0:	e06d      	b.n	8012f9e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8012ec2:	2303      	movs	r3, #3
 8012ec4:	75fb      	strb	r3, [r7, #23]
 8012ec6:	e06b      	b.n	8012fa0 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8012ece:	2b01      	cmp	r3, #1
 8012ed0:	d13c      	bne.n	8012f4c <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8012ed2:	68bb      	ldr	r3, [r7, #8]
 8012ed4:	78db      	ldrb	r3, [r3, #3]
 8012ed6:	f003 0303 	and.w	r3, r3, #3
 8012eda:	2b02      	cmp	r3, #2
 8012edc:	d005      	beq.n	8012eea <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8012ede:	68bb      	ldr	r3, [r7, #8]
 8012ee0:	78db      	ldrb	r3, [r3, #3]
 8012ee2:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d106      	bne.n	8012ef8 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8012eea:	68bb      	ldr	r3, [r7, #8]
 8012eec:	889b      	ldrh	r3, [r3, #4]
 8012eee:	2b40      	cmp	r3, #64	; 0x40
 8012ef0:	d956      	bls.n	8012fa0 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8012ef2:	2303      	movs	r3, #3
 8012ef4:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8012ef6:	e053      	b.n	8012fa0 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8012ef8:	68bb      	ldr	r3, [r7, #8]
 8012efa:	78db      	ldrb	r3, [r3, #3]
 8012efc:	f003 0303 	and.w	r3, r3, #3
 8012f00:	2b01      	cmp	r3, #1
 8012f02:	d10e      	bne.n	8012f22 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8012f04:	68bb      	ldr	r3, [r7, #8]
 8012f06:	799b      	ldrb	r3, [r3, #6]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d007      	beq.n	8012f1c <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 8012f0c:	68bb      	ldr	r3, [r7, #8]
 8012f0e:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8012f10:	2b10      	cmp	r3, #16
 8012f12:	d803      	bhi.n	8012f1c <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 8012f14:	68bb      	ldr	r3, [r7, #8]
 8012f16:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8012f18:	2b40      	cmp	r3, #64	; 0x40
 8012f1a:	d941      	bls.n	8012fa0 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8012f1c:	2303      	movs	r3, #3
 8012f1e:	75fb      	strb	r3, [r7, #23]
 8012f20:	e03e      	b.n	8012fa0 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8012f22:	68bb      	ldr	r3, [r7, #8]
 8012f24:	78db      	ldrb	r3, [r3, #3]
 8012f26:	f003 0303 	and.w	r3, r3, #3
 8012f2a:	2b03      	cmp	r3, #3
 8012f2c:	d10b      	bne.n	8012f46 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8012f2e:	68bb      	ldr	r3, [r7, #8]
 8012f30:	799b      	ldrb	r3, [r3, #6]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d004      	beq.n	8012f40 <USBH_ParseEPDesc+0x164>
 8012f36:	68bb      	ldr	r3, [r7, #8]
 8012f38:	889b      	ldrh	r3, [r3, #4]
 8012f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012f3e:	d32f      	bcc.n	8012fa0 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8012f40:	2303      	movs	r3, #3
 8012f42:	75fb      	strb	r3, [r7, #23]
 8012f44:	e02c      	b.n	8012fa0 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8012f46:	2303      	movs	r3, #3
 8012f48:	75fb      	strb	r3, [r7, #23]
 8012f4a:	e029      	b.n	8012fa0 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8012f52:	2b02      	cmp	r3, #2
 8012f54:	d120      	bne.n	8012f98 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8012f56:	68bb      	ldr	r3, [r7, #8]
 8012f58:	78db      	ldrb	r3, [r3, #3]
 8012f5a:	f003 0303 	and.w	r3, r3, #3
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d106      	bne.n	8012f70 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8012f62:	68bb      	ldr	r3, [r7, #8]
 8012f64:	889b      	ldrh	r3, [r3, #4]
 8012f66:	2b08      	cmp	r3, #8
 8012f68:	d01a      	beq.n	8012fa0 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8012f6a:	2303      	movs	r3, #3
 8012f6c:	75fb      	strb	r3, [r7, #23]
 8012f6e:	e017      	b.n	8012fa0 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8012f70:	68bb      	ldr	r3, [r7, #8]
 8012f72:	78db      	ldrb	r3, [r3, #3]
 8012f74:	f003 0303 	and.w	r3, r3, #3
 8012f78:	2b03      	cmp	r3, #3
 8012f7a:	d10a      	bne.n	8012f92 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8012f7c:	68bb      	ldr	r3, [r7, #8]
 8012f7e:	799b      	ldrb	r3, [r3, #6]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d003      	beq.n	8012f8c <USBH_ParseEPDesc+0x1b0>
 8012f84:	68bb      	ldr	r3, [r7, #8]
 8012f86:	889b      	ldrh	r3, [r3, #4]
 8012f88:	2b08      	cmp	r3, #8
 8012f8a:	d909      	bls.n	8012fa0 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8012f8c:	2303      	movs	r3, #3
 8012f8e:	75fb      	strb	r3, [r7, #23]
 8012f90:	e006      	b.n	8012fa0 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8012f92:	2303      	movs	r3, #3
 8012f94:	75fb      	strb	r3, [r7, #23]
 8012f96:	e003      	b.n	8012fa0 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8012f98:	2303      	movs	r3, #3
 8012f9a:	75fb      	strb	r3, [r7, #23]
 8012f9c:	e000      	b.n	8012fa0 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8012f9e:	bf00      	nop
  }

  return status;
 8012fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	371c      	adds	r7, #28
 8012fa6:	46bd      	mov	sp, r7
 8012fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fac:	4770      	bx	lr

08012fae <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8012fae:	b480      	push	{r7}
 8012fb0:	b087      	sub	sp, #28
 8012fb2:	af00      	add	r7, sp, #0
 8012fb4:	60f8      	str	r0, [r7, #12]
 8012fb6:	60b9      	str	r1, [r7, #8]
 8012fb8:	4613      	mov	r3, r2
 8012fba:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	3301      	adds	r3, #1
 8012fc0:	781b      	ldrb	r3, [r3, #0]
 8012fc2:	2b03      	cmp	r3, #3
 8012fc4:	d120      	bne.n	8013008 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	781b      	ldrb	r3, [r3, #0]
 8012fca:	1e9a      	subs	r2, r3, #2
 8012fcc:	88fb      	ldrh	r3, [r7, #6]
 8012fce:	4293      	cmp	r3, r2
 8012fd0:	bf28      	it	cs
 8012fd2:	4613      	movcs	r3, r2
 8012fd4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	3302      	adds	r3, #2
 8012fda:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8012fdc:	2300      	movs	r3, #0
 8012fde:	82fb      	strh	r3, [r7, #22]
 8012fe0:	e00b      	b.n	8012ffa <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8012fe2:	8afb      	ldrh	r3, [r7, #22]
 8012fe4:	68fa      	ldr	r2, [r7, #12]
 8012fe6:	4413      	add	r3, r2
 8012fe8:	781a      	ldrb	r2, [r3, #0]
 8012fea:	68bb      	ldr	r3, [r7, #8]
 8012fec:	701a      	strb	r2, [r3, #0]
      pdest++;
 8012fee:	68bb      	ldr	r3, [r7, #8]
 8012ff0:	3301      	adds	r3, #1
 8012ff2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8012ff4:	8afb      	ldrh	r3, [r7, #22]
 8012ff6:	3302      	adds	r3, #2
 8012ff8:	82fb      	strh	r3, [r7, #22]
 8012ffa:	8afa      	ldrh	r2, [r7, #22]
 8012ffc:	8abb      	ldrh	r3, [r7, #20]
 8012ffe:	429a      	cmp	r2, r3
 8013000:	d3ef      	bcc.n	8012fe2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8013002:	68bb      	ldr	r3, [r7, #8]
 8013004:	2200      	movs	r2, #0
 8013006:	701a      	strb	r2, [r3, #0]
  }
}
 8013008:	bf00      	nop
 801300a:	371c      	adds	r7, #28
 801300c:	46bd      	mov	sp, r7
 801300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013012:	4770      	bx	lr

08013014 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8013014:	b480      	push	{r7}
 8013016:	b085      	sub	sp, #20
 8013018:	af00      	add	r7, sp, #0
 801301a:	6078      	str	r0, [r7, #4]
 801301c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 801301e:	683b      	ldr	r3, [r7, #0]
 8013020:	881a      	ldrh	r2, [r3, #0]
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	781b      	ldrb	r3, [r3, #0]
 8013026:	b29b      	uxth	r3, r3
 8013028:	4413      	add	r3, r2
 801302a:	b29a      	uxth	r2, r3
 801302c:	683b      	ldr	r3, [r7, #0]
 801302e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	781b      	ldrb	r3, [r3, #0]
 8013034:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	4413      	add	r3, r2
 801303a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801303c:	68fb      	ldr	r3, [r7, #12]
}
 801303e:	4618      	mov	r0, r3
 8013040:	3714      	adds	r7, #20
 8013042:	46bd      	mov	sp, r7
 8013044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013048:	4770      	bx	lr

0801304a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 801304a:	b580      	push	{r7, lr}
 801304c:	b086      	sub	sp, #24
 801304e:	af00      	add	r7, sp, #0
 8013050:	60f8      	str	r0, [r7, #12]
 8013052:	60b9      	str	r1, [r7, #8]
 8013054:	4613      	mov	r3, r2
 8013056:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8013058:	2301      	movs	r3, #1
 801305a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	789b      	ldrb	r3, [r3, #2]
 8013060:	2b01      	cmp	r3, #1
 8013062:	d002      	beq.n	801306a <USBH_CtlReq+0x20>
 8013064:	2b02      	cmp	r3, #2
 8013066:	d00f      	beq.n	8013088 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8013068:	e027      	b.n	80130ba <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	68ba      	ldr	r2, [r7, #8]
 801306e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	88fa      	ldrh	r2, [r7, #6]
 8013074:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	2201      	movs	r2, #1
 801307a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	2202      	movs	r2, #2
 8013080:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8013082:	2301      	movs	r3, #1
 8013084:	75fb      	strb	r3, [r7, #23]
      break;
 8013086:	e018      	b.n	80130ba <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8013088:	68f8      	ldr	r0, [r7, #12]
 801308a:	f000 f81b 	bl	80130c4 <USBH_HandleControl>
 801308e:	4603      	mov	r3, r0
 8013090:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8013092:	7dfb      	ldrb	r3, [r7, #23]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d002      	beq.n	801309e <USBH_CtlReq+0x54>
 8013098:	7dfb      	ldrb	r3, [r7, #23]
 801309a:	2b03      	cmp	r3, #3
 801309c:	d106      	bne.n	80130ac <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	2201      	movs	r2, #1
 80130a2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	2200      	movs	r2, #0
 80130a8:	761a      	strb	r2, [r3, #24]
      break;
 80130aa:	e005      	b.n	80130b8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80130ac:	7dfb      	ldrb	r3, [r7, #23]
 80130ae:	2b02      	cmp	r3, #2
 80130b0:	d102      	bne.n	80130b8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	2201      	movs	r2, #1
 80130b6:	709a      	strb	r2, [r3, #2]
      break;
 80130b8:	bf00      	nop
  }
  return status;
 80130ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80130bc:	4618      	mov	r0, r3
 80130be:	3718      	adds	r7, #24
 80130c0:	46bd      	mov	sp, r7
 80130c2:	bd80      	pop	{r7, pc}

080130c4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80130c4:	b580      	push	{r7, lr}
 80130c6:	b086      	sub	sp, #24
 80130c8:	af02      	add	r7, sp, #8
 80130ca:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80130cc:	2301      	movs	r3, #1
 80130ce:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80130d0:	2300      	movs	r3, #0
 80130d2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	7e1b      	ldrb	r3, [r3, #24]
 80130d8:	3b01      	subs	r3, #1
 80130da:	2b0a      	cmp	r3, #10
 80130dc:	f200 8156 	bhi.w	801338c <USBH_HandleControl+0x2c8>
 80130e0:	a201      	add	r2, pc, #4	; (adr r2, 80130e8 <USBH_HandleControl+0x24>)
 80130e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130e6:	bf00      	nop
 80130e8:	08013115 	.word	0x08013115
 80130ec:	0801312f 	.word	0x0801312f
 80130f0:	08013199 	.word	0x08013199
 80130f4:	080131bf 	.word	0x080131bf
 80130f8:	080131f7 	.word	0x080131f7
 80130fc:	08013221 	.word	0x08013221
 8013100:	08013273 	.word	0x08013273
 8013104:	08013295 	.word	0x08013295
 8013108:	080132d1 	.word	0x080132d1
 801310c:	080132f7 	.word	0x080132f7
 8013110:	08013335 	.word	0x08013335
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	f103 0110 	add.w	r1, r3, #16
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	795b      	ldrb	r3, [r3, #5]
 801311e:	461a      	mov	r2, r3
 8013120:	6878      	ldr	r0, [r7, #4]
 8013122:	f000 f943 	bl	80133ac <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	2202      	movs	r2, #2
 801312a:	761a      	strb	r2, [r3, #24]
      break;
 801312c:	e139      	b.n	80133a2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	795b      	ldrb	r3, [r3, #5]
 8013132:	4619      	mov	r1, r3
 8013134:	6878      	ldr	r0, [r7, #4]
 8013136:	f003 fa49 	bl	80165cc <USBH_LL_GetURBState>
 801313a:	4603      	mov	r3, r0
 801313c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 801313e:	7bbb      	ldrb	r3, [r7, #14]
 8013140:	2b01      	cmp	r3, #1
 8013142:	d11e      	bne.n	8013182 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	7c1b      	ldrb	r3, [r3, #16]
 8013148:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801314c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	8adb      	ldrh	r3, [r3, #22]
 8013152:	2b00      	cmp	r3, #0
 8013154:	d00a      	beq.n	801316c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8013156:	7b7b      	ldrb	r3, [r7, #13]
 8013158:	2b80      	cmp	r3, #128	; 0x80
 801315a:	d103      	bne.n	8013164 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	2203      	movs	r2, #3
 8013160:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8013162:	e115      	b.n	8013390 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	2205      	movs	r2, #5
 8013168:	761a      	strb	r2, [r3, #24]
      break;
 801316a:	e111      	b.n	8013390 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 801316c:	7b7b      	ldrb	r3, [r7, #13]
 801316e:	2b80      	cmp	r3, #128	; 0x80
 8013170:	d103      	bne.n	801317a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	2209      	movs	r2, #9
 8013176:	761a      	strb	r2, [r3, #24]
      break;
 8013178:	e10a      	b.n	8013390 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	2207      	movs	r2, #7
 801317e:	761a      	strb	r2, [r3, #24]
      break;
 8013180:	e106      	b.n	8013390 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8013182:	7bbb      	ldrb	r3, [r7, #14]
 8013184:	2b04      	cmp	r3, #4
 8013186:	d003      	beq.n	8013190 <USBH_HandleControl+0xcc>
 8013188:	7bbb      	ldrb	r3, [r7, #14]
 801318a:	2b02      	cmp	r3, #2
 801318c:	f040 8100 	bne.w	8013390 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	220b      	movs	r2, #11
 8013194:	761a      	strb	r2, [r3, #24]
      break;
 8013196:	e0fb      	b.n	8013390 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801319e:	b29a      	uxth	r2, r3
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	6899      	ldr	r1, [r3, #8]
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	899a      	ldrh	r2, [r3, #12]
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	791b      	ldrb	r3, [r3, #4]
 80131b0:	6878      	ldr	r0, [r7, #4]
 80131b2:	f000 f93a 	bl	801342a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	2204      	movs	r2, #4
 80131ba:	761a      	strb	r2, [r3, #24]
      break;
 80131bc:	e0f1      	b.n	80133a2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	791b      	ldrb	r3, [r3, #4]
 80131c2:	4619      	mov	r1, r3
 80131c4:	6878      	ldr	r0, [r7, #4]
 80131c6:	f003 fa01 	bl	80165cc <USBH_LL_GetURBState>
 80131ca:	4603      	mov	r3, r0
 80131cc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80131ce:	7bbb      	ldrb	r3, [r7, #14]
 80131d0:	2b01      	cmp	r3, #1
 80131d2:	d102      	bne.n	80131da <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	2209      	movs	r2, #9
 80131d8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80131da:	7bbb      	ldrb	r3, [r7, #14]
 80131dc:	2b05      	cmp	r3, #5
 80131de:	d102      	bne.n	80131e6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80131e0:	2303      	movs	r3, #3
 80131e2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80131e4:	e0d6      	b.n	8013394 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80131e6:	7bbb      	ldrb	r3, [r7, #14]
 80131e8:	2b04      	cmp	r3, #4
 80131ea:	f040 80d3 	bne.w	8013394 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	220b      	movs	r2, #11
 80131f2:	761a      	strb	r2, [r3, #24]
      break;
 80131f4:	e0ce      	b.n	8013394 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	6899      	ldr	r1, [r3, #8]
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	899a      	ldrh	r2, [r3, #12]
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	795b      	ldrb	r3, [r3, #5]
 8013202:	2001      	movs	r0, #1
 8013204:	9000      	str	r0, [sp, #0]
 8013206:	6878      	ldr	r0, [r7, #4]
 8013208:	f000 f8ea 	bl	80133e0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8013212:	b29a      	uxth	r2, r3
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	2206      	movs	r2, #6
 801321c:	761a      	strb	r2, [r3, #24]
      break;
 801321e:	e0c0      	b.n	80133a2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	795b      	ldrb	r3, [r3, #5]
 8013224:	4619      	mov	r1, r3
 8013226:	6878      	ldr	r0, [r7, #4]
 8013228:	f003 f9d0 	bl	80165cc <USBH_LL_GetURBState>
 801322c:	4603      	mov	r3, r0
 801322e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8013230:	7bbb      	ldrb	r3, [r7, #14]
 8013232:	2b01      	cmp	r3, #1
 8013234:	d103      	bne.n	801323e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	2207      	movs	r2, #7
 801323a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 801323c:	e0ac      	b.n	8013398 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 801323e:	7bbb      	ldrb	r3, [r7, #14]
 8013240:	2b05      	cmp	r3, #5
 8013242:	d105      	bne.n	8013250 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	220c      	movs	r2, #12
 8013248:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 801324a:	2303      	movs	r3, #3
 801324c:	73fb      	strb	r3, [r7, #15]
      break;
 801324e:	e0a3      	b.n	8013398 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8013250:	7bbb      	ldrb	r3, [r7, #14]
 8013252:	2b02      	cmp	r3, #2
 8013254:	d103      	bne.n	801325e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	2205      	movs	r2, #5
 801325a:	761a      	strb	r2, [r3, #24]
      break;
 801325c:	e09c      	b.n	8013398 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 801325e:	7bbb      	ldrb	r3, [r7, #14]
 8013260:	2b04      	cmp	r3, #4
 8013262:	f040 8099 	bne.w	8013398 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	220b      	movs	r2, #11
 801326a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 801326c:	2302      	movs	r3, #2
 801326e:	73fb      	strb	r3, [r7, #15]
      break;
 8013270:	e092      	b.n	8013398 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	791b      	ldrb	r3, [r3, #4]
 8013276:	2200      	movs	r2, #0
 8013278:	2100      	movs	r1, #0
 801327a:	6878      	ldr	r0, [r7, #4]
 801327c:	f000 f8d5 	bl	801342a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8013286:	b29a      	uxth	r2, r3
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	2208      	movs	r2, #8
 8013290:	761a      	strb	r2, [r3, #24]

      break;
 8013292:	e086      	b.n	80133a2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	791b      	ldrb	r3, [r3, #4]
 8013298:	4619      	mov	r1, r3
 801329a:	6878      	ldr	r0, [r7, #4]
 801329c:	f003 f996 	bl	80165cc <USBH_LL_GetURBState>
 80132a0:	4603      	mov	r3, r0
 80132a2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80132a4:	7bbb      	ldrb	r3, [r7, #14]
 80132a6:	2b01      	cmp	r3, #1
 80132a8:	d105      	bne.n	80132b6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	220d      	movs	r2, #13
 80132ae:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80132b0:	2300      	movs	r3, #0
 80132b2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80132b4:	e072      	b.n	801339c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80132b6:	7bbb      	ldrb	r3, [r7, #14]
 80132b8:	2b04      	cmp	r3, #4
 80132ba:	d103      	bne.n	80132c4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	220b      	movs	r2, #11
 80132c0:	761a      	strb	r2, [r3, #24]
      break;
 80132c2:	e06b      	b.n	801339c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80132c4:	7bbb      	ldrb	r3, [r7, #14]
 80132c6:	2b05      	cmp	r3, #5
 80132c8:	d168      	bne.n	801339c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80132ca:	2303      	movs	r3, #3
 80132cc:	73fb      	strb	r3, [r7, #15]
      break;
 80132ce:	e065      	b.n	801339c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	795b      	ldrb	r3, [r3, #5]
 80132d4:	2201      	movs	r2, #1
 80132d6:	9200      	str	r2, [sp, #0]
 80132d8:	2200      	movs	r2, #0
 80132da:	2100      	movs	r1, #0
 80132dc:	6878      	ldr	r0, [r7, #4]
 80132de:	f000 f87f 	bl	80133e0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80132e8:	b29a      	uxth	r2, r3
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	220a      	movs	r2, #10
 80132f2:	761a      	strb	r2, [r3, #24]
      break;
 80132f4:	e055      	b.n	80133a2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	795b      	ldrb	r3, [r3, #5]
 80132fa:	4619      	mov	r1, r3
 80132fc:	6878      	ldr	r0, [r7, #4]
 80132fe:	f003 f965 	bl	80165cc <USBH_LL_GetURBState>
 8013302:	4603      	mov	r3, r0
 8013304:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8013306:	7bbb      	ldrb	r3, [r7, #14]
 8013308:	2b01      	cmp	r3, #1
 801330a:	d105      	bne.n	8013318 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 801330c:	2300      	movs	r3, #0
 801330e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	220d      	movs	r2, #13
 8013314:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8013316:	e043      	b.n	80133a0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8013318:	7bbb      	ldrb	r3, [r7, #14]
 801331a:	2b02      	cmp	r3, #2
 801331c:	d103      	bne.n	8013326 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	2209      	movs	r2, #9
 8013322:	761a      	strb	r2, [r3, #24]
      break;
 8013324:	e03c      	b.n	80133a0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8013326:	7bbb      	ldrb	r3, [r7, #14]
 8013328:	2b04      	cmp	r3, #4
 801332a:	d139      	bne.n	80133a0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	220b      	movs	r2, #11
 8013330:	761a      	strb	r2, [r3, #24]
      break;
 8013332:	e035      	b.n	80133a0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	7e5b      	ldrb	r3, [r3, #25]
 8013338:	3301      	adds	r3, #1
 801333a:	b2da      	uxtb	r2, r3
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	765a      	strb	r2, [r3, #25]
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	7e5b      	ldrb	r3, [r3, #25]
 8013344:	2b02      	cmp	r3, #2
 8013346:	d806      	bhi.n	8013356 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	2201      	movs	r2, #1
 801334c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	2201      	movs	r2, #1
 8013352:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8013354:	e025      	b.n	80133a2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801335c:	2106      	movs	r1, #6
 801335e:	6878      	ldr	r0, [r7, #4]
 8013360:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	2200      	movs	r2, #0
 8013366:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	795b      	ldrb	r3, [r3, #5]
 801336c:	4619      	mov	r1, r3
 801336e:	6878      	ldr	r0, [r7, #4]
 8013370:	f000 f90c 	bl	801358c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	791b      	ldrb	r3, [r3, #4]
 8013378:	4619      	mov	r1, r3
 801337a:	6878      	ldr	r0, [r7, #4]
 801337c:	f000 f906 	bl	801358c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	2200      	movs	r2, #0
 8013384:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8013386:	2302      	movs	r3, #2
 8013388:	73fb      	strb	r3, [r7, #15]
      break;
 801338a:	e00a      	b.n	80133a2 <USBH_HandleControl+0x2de>

    default:
      break;
 801338c:	bf00      	nop
 801338e:	e008      	b.n	80133a2 <USBH_HandleControl+0x2de>
      break;
 8013390:	bf00      	nop
 8013392:	e006      	b.n	80133a2 <USBH_HandleControl+0x2de>
      break;
 8013394:	bf00      	nop
 8013396:	e004      	b.n	80133a2 <USBH_HandleControl+0x2de>
      break;
 8013398:	bf00      	nop
 801339a:	e002      	b.n	80133a2 <USBH_HandleControl+0x2de>
      break;
 801339c:	bf00      	nop
 801339e:	e000      	b.n	80133a2 <USBH_HandleControl+0x2de>
      break;
 80133a0:	bf00      	nop
  }

  return status;
 80133a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80133a4:	4618      	mov	r0, r3
 80133a6:	3710      	adds	r7, #16
 80133a8:	46bd      	mov	sp, r7
 80133aa:	bd80      	pop	{r7, pc}

080133ac <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80133ac:	b580      	push	{r7, lr}
 80133ae:	b088      	sub	sp, #32
 80133b0:	af04      	add	r7, sp, #16
 80133b2:	60f8      	str	r0, [r7, #12]
 80133b4:	60b9      	str	r1, [r7, #8]
 80133b6:	4613      	mov	r3, r2
 80133b8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80133ba:	79f9      	ldrb	r1, [r7, #7]
 80133bc:	2300      	movs	r3, #0
 80133be:	9303      	str	r3, [sp, #12]
 80133c0:	2308      	movs	r3, #8
 80133c2:	9302      	str	r3, [sp, #8]
 80133c4:	68bb      	ldr	r3, [r7, #8]
 80133c6:	9301      	str	r3, [sp, #4]
 80133c8:	2300      	movs	r3, #0
 80133ca:	9300      	str	r3, [sp, #0]
 80133cc:	2300      	movs	r3, #0
 80133ce:	2200      	movs	r2, #0
 80133d0:	68f8      	ldr	r0, [r7, #12]
 80133d2:	f003 f8ca 	bl	801656a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80133d6:	2300      	movs	r3, #0
}
 80133d8:	4618      	mov	r0, r3
 80133da:	3710      	adds	r7, #16
 80133dc:	46bd      	mov	sp, r7
 80133de:	bd80      	pop	{r7, pc}

080133e0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80133e0:	b580      	push	{r7, lr}
 80133e2:	b088      	sub	sp, #32
 80133e4:	af04      	add	r7, sp, #16
 80133e6:	60f8      	str	r0, [r7, #12]
 80133e8:	60b9      	str	r1, [r7, #8]
 80133ea:	4611      	mov	r1, r2
 80133ec:	461a      	mov	r2, r3
 80133ee:	460b      	mov	r3, r1
 80133f0:	80fb      	strh	r3, [r7, #6]
 80133f2:	4613      	mov	r3, r2
 80133f4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d001      	beq.n	8013404 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8013400:	2300      	movs	r3, #0
 8013402:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8013404:	7979      	ldrb	r1, [r7, #5]
 8013406:	7e3b      	ldrb	r3, [r7, #24]
 8013408:	9303      	str	r3, [sp, #12]
 801340a:	88fb      	ldrh	r3, [r7, #6]
 801340c:	9302      	str	r3, [sp, #8]
 801340e:	68bb      	ldr	r3, [r7, #8]
 8013410:	9301      	str	r3, [sp, #4]
 8013412:	2301      	movs	r3, #1
 8013414:	9300      	str	r3, [sp, #0]
 8013416:	2300      	movs	r3, #0
 8013418:	2200      	movs	r2, #0
 801341a:	68f8      	ldr	r0, [r7, #12]
 801341c:	f003 f8a5 	bl	801656a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8013420:	2300      	movs	r3, #0
}
 8013422:	4618      	mov	r0, r3
 8013424:	3710      	adds	r7, #16
 8013426:	46bd      	mov	sp, r7
 8013428:	bd80      	pop	{r7, pc}

0801342a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 801342a:	b580      	push	{r7, lr}
 801342c:	b088      	sub	sp, #32
 801342e:	af04      	add	r7, sp, #16
 8013430:	60f8      	str	r0, [r7, #12]
 8013432:	60b9      	str	r1, [r7, #8]
 8013434:	4611      	mov	r1, r2
 8013436:	461a      	mov	r2, r3
 8013438:	460b      	mov	r3, r1
 801343a:	80fb      	strh	r3, [r7, #6]
 801343c:	4613      	mov	r3, r2
 801343e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8013440:	7979      	ldrb	r1, [r7, #5]
 8013442:	2300      	movs	r3, #0
 8013444:	9303      	str	r3, [sp, #12]
 8013446:	88fb      	ldrh	r3, [r7, #6]
 8013448:	9302      	str	r3, [sp, #8]
 801344a:	68bb      	ldr	r3, [r7, #8]
 801344c:	9301      	str	r3, [sp, #4]
 801344e:	2301      	movs	r3, #1
 8013450:	9300      	str	r3, [sp, #0]
 8013452:	2300      	movs	r3, #0
 8013454:	2201      	movs	r2, #1
 8013456:	68f8      	ldr	r0, [r7, #12]
 8013458:	f003 f887 	bl	801656a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 801345c:	2300      	movs	r3, #0

}
 801345e:	4618      	mov	r0, r3
 8013460:	3710      	adds	r7, #16
 8013462:	46bd      	mov	sp, r7
 8013464:	bd80      	pop	{r7, pc}

08013466 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8013466:	b580      	push	{r7, lr}
 8013468:	b088      	sub	sp, #32
 801346a:	af04      	add	r7, sp, #16
 801346c:	60f8      	str	r0, [r7, #12]
 801346e:	60b9      	str	r1, [r7, #8]
 8013470:	4611      	mov	r1, r2
 8013472:	461a      	mov	r2, r3
 8013474:	460b      	mov	r3, r1
 8013476:	80fb      	strh	r3, [r7, #6]
 8013478:	4613      	mov	r3, r2
 801347a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8013482:	2b00      	cmp	r3, #0
 8013484:	d001      	beq.n	801348a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8013486:	2300      	movs	r3, #0
 8013488:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801348a:	7979      	ldrb	r1, [r7, #5]
 801348c:	7e3b      	ldrb	r3, [r7, #24]
 801348e:	9303      	str	r3, [sp, #12]
 8013490:	88fb      	ldrh	r3, [r7, #6]
 8013492:	9302      	str	r3, [sp, #8]
 8013494:	68bb      	ldr	r3, [r7, #8]
 8013496:	9301      	str	r3, [sp, #4]
 8013498:	2301      	movs	r3, #1
 801349a:	9300      	str	r3, [sp, #0]
 801349c:	2302      	movs	r3, #2
 801349e:	2200      	movs	r2, #0
 80134a0:	68f8      	ldr	r0, [r7, #12]
 80134a2:	f003 f862 	bl	801656a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80134a6:	2300      	movs	r3, #0
}
 80134a8:	4618      	mov	r0, r3
 80134aa:	3710      	adds	r7, #16
 80134ac:	46bd      	mov	sp, r7
 80134ae:	bd80      	pop	{r7, pc}

080134b0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80134b0:	b580      	push	{r7, lr}
 80134b2:	b088      	sub	sp, #32
 80134b4:	af04      	add	r7, sp, #16
 80134b6:	60f8      	str	r0, [r7, #12]
 80134b8:	60b9      	str	r1, [r7, #8]
 80134ba:	4611      	mov	r1, r2
 80134bc:	461a      	mov	r2, r3
 80134be:	460b      	mov	r3, r1
 80134c0:	80fb      	strh	r3, [r7, #6]
 80134c2:	4613      	mov	r3, r2
 80134c4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80134c6:	7979      	ldrb	r1, [r7, #5]
 80134c8:	2300      	movs	r3, #0
 80134ca:	9303      	str	r3, [sp, #12]
 80134cc:	88fb      	ldrh	r3, [r7, #6]
 80134ce:	9302      	str	r3, [sp, #8]
 80134d0:	68bb      	ldr	r3, [r7, #8]
 80134d2:	9301      	str	r3, [sp, #4]
 80134d4:	2301      	movs	r3, #1
 80134d6:	9300      	str	r3, [sp, #0]
 80134d8:	2302      	movs	r3, #2
 80134da:	2201      	movs	r2, #1
 80134dc:	68f8      	ldr	r0, [r7, #12]
 80134de:	f003 f844 	bl	801656a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80134e2:	2300      	movs	r3, #0
}
 80134e4:	4618      	mov	r0, r3
 80134e6:	3710      	adds	r7, #16
 80134e8:	46bd      	mov	sp, r7
 80134ea:	bd80      	pop	{r7, pc}

080134ec <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80134ec:	b580      	push	{r7, lr}
 80134ee:	b086      	sub	sp, #24
 80134f0:	af04      	add	r7, sp, #16
 80134f2:	6078      	str	r0, [r7, #4]
 80134f4:	4608      	mov	r0, r1
 80134f6:	4611      	mov	r1, r2
 80134f8:	461a      	mov	r2, r3
 80134fa:	4603      	mov	r3, r0
 80134fc:	70fb      	strb	r3, [r7, #3]
 80134fe:	460b      	mov	r3, r1
 8013500:	70bb      	strb	r3, [r7, #2]
 8013502:	4613      	mov	r3, r2
 8013504:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8013506:	7878      	ldrb	r0, [r7, #1]
 8013508:	78ba      	ldrb	r2, [r7, #2]
 801350a:	78f9      	ldrb	r1, [r7, #3]
 801350c:	8b3b      	ldrh	r3, [r7, #24]
 801350e:	9302      	str	r3, [sp, #8]
 8013510:	7d3b      	ldrb	r3, [r7, #20]
 8013512:	9301      	str	r3, [sp, #4]
 8013514:	7c3b      	ldrb	r3, [r7, #16]
 8013516:	9300      	str	r3, [sp, #0]
 8013518:	4603      	mov	r3, r0
 801351a:	6878      	ldr	r0, [r7, #4]
 801351c:	f002 ffd7 	bl	80164ce <USBH_LL_OpenPipe>

  return USBH_OK;
 8013520:	2300      	movs	r3, #0
}
 8013522:	4618      	mov	r0, r3
 8013524:	3708      	adds	r7, #8
 8013526:	46bd      	mov	sp, r7
 8013528:	bd80      	pop	{r7, pc}

0801352a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 801352a:	b580      	push	{r7, lr}
 801352c:	b082      	sub	sp, #8
 801352e:	af00      	add	r7, sp, #0
 8013530:	6078      	str	r0, [r7, #4]
 8013532:	460b      	mov	r3, r1
 8013534:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8013536:	78fb      	ldrb	r3, [r7, #3]
 8013538:	4619      	mov	r1, r3
 801353a:	6878      	ldr	r0, [r7, #4]
 801353c:	f002 fff6 	bl	801652c <USBH_LL_ClosePipe>

  return USBH_OK;
 8013540:	2300      	movs	r3, #0
}
 8013542:	4618      	mov	r0, r3
 8013544:	3708      	adds	r7, #8
 8013546:	46bd      	mov	sp, r7
 8013548:	bd80      	pop	{r7, pc}

0801354a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 801354a:	b580      	push	{r7, lr}
 801354c:	b084      	sub	sp, #16
 801354e:	af00      	add	r7, sp, #0
 8013550:	6078      	str	r0, [r7, #4]
 8013552:	460b      	mov	r3, r1
 8013554:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8013556:	6878      	ldr	r0, [r7, #4]
 8013558:	f000 f836 	bl	80135c8 <USBH_GetFreePipe>
 801355c:	4603      	mov	r3, r0
 801355e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8013560:	89fb      	ldrh	r3, [r7, #14]
 8013562:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013566:	4293      	cmp	r3, r2
 8013568:	d00a      	beq.n	8013580 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 801356a:	78fa      	ldrb	r2, [r7, #3]
 801356c:	89fb      	ldrh	r3, [r7, #14]
 801356e:	f003 030f 	and.w	r3, r3, #15
 8013572:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8013576:	6879      	ldr	r1, [r7, #4]
 8013578:	33e0      	adds	r3, #224	; 0xe0
 801357a:	009b      	lsls	r3, r3, #2
 801357c:	440b      	add	r3, r1
 801357e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8013580:	89fb      	ldrh	r3, [r7, #14]
 8013582:	b2db      	uxtb	r3, r3
}
 8013584:	4618      	mov	r0, r3
 8013586:	3710      	adds	r7, #16
 8013588:	46bd      	mov	sp, r7
 801358a:	bd80      	pop	{r7, pc}

0801358c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 801358c:	b480      	push	{r7}
 801358e:	b083      	sub	sp, #12
 8013590:	af00      	add	r7, sp, #0
 8013592:	6078      	str	r0, [r7, #4]
 8013594:	460b      	mov	r3, r1
 8013596:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8013598:	78fb      	ldrb	r3, [r7, #3]
 801359a:	2b0f      	cmp	r3, #15
 801359c:	d80d      	bhi.n	80135ba <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 801359e:	78fb      	ldrb	r3, [r7, #3]
 80135a0:	687a      	ldr	r2, [r7, #4]
 80135a2:	33e0      	adds	r3, #224	; 0xe0
 80135a4:	009b      	lsls	r3, r3, #2
 80135a6:	4413      	add	r3, r2
 80135a8:	685a      	ldr	r2, [r3, #4]
 80135aa:	78fb      	ldrb	r3, [r7, #3]
 80135ac:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80135b0:	6879      	ldr	r1, [r7, #4]
 80135b2:	33e0      	adds	r3, #224	; 0xe0
 80135b4:	009b      	lsls	r3, r3, #2
 80135b6:	440b      	add	r3, r1
 80135b8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80135ba:	2300      	movs	r3, #0
}
 80135bc:	4618      	mov	r0, r3
 80135be:	370c      	adds	r7, #12
 80135c0:	46bd      	mov	sp, r7
 80135c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135c6:	4770      	bx	lr

080135c8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80135c8:	b480      	push	{r7}
 80135ca:	b085      	sub	sp, #20
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80135d0:	2300      	movs	r3, #0
 80135d2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80135d4:	2300      	movs	r3, #0
 80135d6:	73fb      	strb	r3, [r7, #15]
 80135d8:	e00f      	b.n	80135fa <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80135da:	7bfb      	ldrb	r3, [r7, #15]
 80135dc:	687a      	ldr	r2, [r7, #4]
 80135de:	33e0      	adds	r3, #224	; 0xe0
 80135e0:	009b      	lsls	r3, r3, #2
 80135e2:	4413      	add	r3, r2
 80135e4:	685b      	ldr	r3, [r3, #4]
 80135e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d102      	bne.n	80135f4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80135ee:	7bfb      	ldrb	r3, [r7, #15]
 80135f0:	b29b      	uxth	r3, r3
 80135f2:	e007      	b.n	8013604 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80135f4:	7bfb      	ldrb	r3, [r7, #15]
 80135f6:	3301      	adds	r3, #1
 80135f8:	73fb      	strb	r3, [r7, #15]
 80135fa:	7bfb      	ldrb	r3, [r7, #15]
 80135fc:	2b0f      	cmp	r3, #15
 80135fe:	d9ec      	bls.n	80135da <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8013600:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8013604:	4618      	mov	r0, r3
 8013606:	3714      	adds	r7, #20
 8013608:	46bd      	mov	sp, r7
 801360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801360e:	4770      	bx	lr

08013610 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8013610:	b580      	push	{r7, lr}
 8013612:	b084      	sub	sp, #16
 8013614:	af00      	add	r7, sp, #0
 8013616:	4603      	mov	r3, r0
 8013618:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801361a:	79fb      	ldrb	r3, [r7, #7]
 801361c:	4a08      	ldr	r2, [pc, #32]	; (8013640 <disk_status+0x30>)
 801361e:	009b      	lsls	r3, r3, #2
 8013620:	4413      	add	r3, r2
 8013622:	685b      	ldr	r3, [r3, #4]
 8013624:	685b      	ldr	r3, [r3, #4]
 8013626:	79fa      	ldrb	r2, [r7, #7]
 8013628:	4905      	ldr	r1, [pc, #20]	; (8013640 <disk_status+0x30>)
 801362a:	440a      	add	r2, r1
 801362c:	7a12      	ldrb	r2, [r2, #8]
 801362e:	4610      	mov	r0, r2
 8013630:	4798      	blx	r3
 8013632:	4603      	mov	r3, r0
 8013634:	73fb      	strb	r3, [r7, #15]
  return stat;
 8013636:	7bfb      	ldrb	r3, [r7, #15]
}
 8013638:	4618      	mov	r0, r3
 801363a:	3710      	adds	r7, #16
 801363c:	46bd      	mov	sp, r7
 801363e:	bd80      	pop	{r7, pc}
 8013640:	240308a0 	.word	0x240308a0

08013644 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8013644:	b580      	push	{r7, lr}
 8013646:	b084      	sub	sp, #16
 8013648:	af00      	add	r7, sp, #0
 801364a:	4603      	mov	r3, r0
 801364c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801364e:	2300      	movs	r3, #0
 8013650:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8013652:	79fb      	ldrb	r3, [r7, #7]
 8013654:	4a0d      	ldr	r2, [pc, #52]	; (801368c <disk_initialize+0x48>)
 8013656:	5cd3      	ldrb	r3, [r2, r3]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d111      	bne.n	8013680 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 801365c:	79fb      	ldrb	r3, [r7, #7]
 801365e:	4a0b      	ldr	r2, [pc, #44]	; (801368c <disk_initialize+0x48>)
 8013660:	2101      	movs	r1, #1
 8013662:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8013664:	79fb      	ldrb	r3, [r7, #7]
 8013666:	4a09      	ldr	r2, [pc, #36]	; (801368c <disk_initialize+0x48>)
 8013668:	009b      	lsls	r3, r3, #2
 801366a:	4413      	add	r3, r2
 801366c:	685b      	ldr	r3, [r3, #4]
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	79fa      	ldrb	r2, [r7, #7]
 8013672:	4906      	ldr	r1, [pc, #24]	; (801368c <disk_initialize+0x48>)
 8013674:	440a      	add	r2, r1
 8013676:	7a12      	ldrb	r2, [r2, #8]
 8013678:	4610      	mov	r0, r2
 801367a:	4798      	blx	r3
 801367c:	4603      	mov	r3, r0
 801367e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8013680:	7bfb      	ldrb	r3, [r7, #15]
}
 8013682:	4618      	mov	r0, r3
 8013684:	3710      	adds	r7, #16
 8013686:	46bd      	mov	sp, r7
 8013688:	bd80      	pop	{r7, pc}
 801368a:	bf00      	nop
 801368c:	240308a0 	.word	0x240308a0

08013690 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8013690:	b590      	push	{r4, r7, lr}
 8013692:	b087      	sub	sp, #28
 8013694:	af00      	add	r7, sp, #0
 8013696:	60b9      	str	r1, [r7, #8]
 8013698:	607a      	str	r2, [r7, #4]
 801369a:	603b      	str	r3, [r7, #0]
 801369c:	4603      	mov	r3, r0
 801369e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80136a0:	7bfb      	ldrb	r3, [r7, #15]
 80136a2:	4a0a      	ldr	r2, [pc, #40]	; (80136cc <disk_read+0x3c>)
 80136a4:	009b      	lsls	r3, r3, #2
 80136a6:	4413      	add	r3, r2
 80136a8:	685b      	ldr	r3, [r3, #4]
 80136aa:	689c      	ldr	r4, [r3, #8]
 80136ac:	7bfb      	ldrb	r3, [r7, #15]
 80136ae:	4a07      	ldr	r2, [pc, #28]	; (80136cc <disk_read+0x3c>)
 80136b0:	4413      	add	r3, r2
 80136b2:	7a18      	ldrb	r0, [r3, #8]
 80136b4:	683b      	ldr	r3, [r7, #0]
 80136b6:	687a      	ldr	r2, [r7, #4]
 80136b8:	68b9      	ldr	r1, [r7, #8]
 80136ba:	47a0      	blx	r4
 80136bc:	4603      	mov	r3, r0
 80136be:	75fb      	strb	r3, [r7, #23]
  return res;
 80136c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80136c2:	4618      	mov	r0, r3
 80136c4:	371c      	adds	r7, #28
 80136c6:	46bd      	mov	sp, r7
 80136c8:	bd90      	pop	{r4, r7, pc}
 80136ca:	bf00      	nop
 80136cc:	240308a0 	.word	0x240308a0

080136d0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80136d0:	b590      	push	{r4, r7, lr}
 80136d2:	b087      	sub	sp, #28
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	60b9      	str	r1, [r7, #8]
 80136d8:	607a      	str	r2, [r7, #4]
 80136da:	603b      	str	r3, [r7, #0]
 80136dc:	4603      	mov	r3, r0
 80136de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80136e0:	7bfb      	ldrb	r3, [r7, #15]
 80136e2:	4a0a      	ldr	r2, [pc, #40]	; (801370c <disk_write+0x3c>)
 80136e4:	009b      	lsls	r3, r3, #2
 80136e6:	4413      	add	r3, r2
 80136e8:	685b      	ldr	r3, [r3, #4]
 80136ea:	68dc      	ldr	r4, [r3, #12]
 80136ec:	7bfb      	ldrb	r3, [r7, #15]
 80136ee:	4a07      	ldr	r2, [pc, #28]	; (801370c <disk_write+0x3c>)
 80136f0:	4413      	add	r3, r2
 80136f2:	7a18      	ldrb	r0, [r3, #8]
 80136f4:	683b      	ldr	r3, [r7, #0]
 80136f6:	687a      	ldr	r2, [r7, #4]
 80136f8:	68b9      	ldr	r1, [r7, #8]
 80136fa:	47a0      	blx	r4
 80136fc:	4603      	mov	r3, r0
 80136fe:	75fb      	strb	r3, [r7, #23]
  return res;
 8013700:	7dfb      	ldrb	r3, [r7, #23]
}
 8013702:	4618      	mov	r0, r3
 8013704:	371c      	adds	r7, #28
 8013706:	46bd      	mov	sp, r7
 8013708:	bd90      	pop	{r4, r7, pc}
 801370a:	bf00      	nop
 801370c:	240308a0 	.word	0x240308a0

08013710 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8013710:	b580      	push	{r7, lr}
 8013712:	b084      	sub	sp, #16
 8013714:	af00      	add	r7, sp, #0
 8013716:	4603      	mov	r3, r0
 8013718:	603a      	str	r2, [r7, #0]
 801371a:	71fb      	strb	r3, [r7, #7]
 801371c:	460b      	mov	r3, r1
 801371e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8013720:	79fb      	ldrb	r3, [r7, #7]
 8013722:	4a09      	ldr	r2, [pc, #36]	; (8013748 <disk_ioctl+0x38>)
 8013724:	009b      	lsls	r3, r3, #2
 8013726:	4413      	add	r3, r2
 8013728:	685b      	ldr	r3, [r3, #4]
 801372a:	691b      	ldr	r3, [r3, #16]
 801372c:	79fa      	ldrb	r2, [r7, #7]
 801372e:	4906      	ldr	r1, [pc, #24]	; (8013748 <disk_ioctl+0x38>)
 8013730:	440a      	add	r2, r1
 8013732:	7a10      	ldrb	r0, [r2, #8]
 8013734:	79b9      	ldrb	r1, [r7, #6]
 8013736:	683a      	ldr	r2, [r7, #0]
 8013738:	4798      	blx	r3
 801373a:	4603      	mov	r3, r0
 801373c:	73fb      	strb	r3, [r7, #15]
  return res;
 801373e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013740:	4618      	mov	r0, r3
 8013742:	3710      	adds	r7, #16
 8013744:	46bd      	mov	sp, r7
 8013746:	bd80      	pop	{r7, pc}
 8013748:	240308a0 	.word	0x240308a0

0801374c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801374c:	b480      	push	{r7}
 801374e:	b085      	sub	sp, #20
 8013750:	af00      	add	r7, sp, #0
 8013752:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	3301      	adds	r3, #1
 8013758:	781b      	ldrb	r3, [r3, #0]
 801375a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801375c:	89fb      	ldrh	r3, [r7, #14]
 801375e:	021b      	lsls	r3, r3, #8
 8013760:	b21a      	sxth	r2, r3
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	781b      	ldrb	r3, [r3, #0]
 8013766:	b21b      	sxth	r3, r3
 8013768:	4313      	orrs	r3, r2
 801376a:	b21b      	sxth	r3, r3
 801376c:	81fb      	strh	r3, [r7, #14]
	return rv;
 801376e:	89fb      	ldrh	r3, [r7, #14]
}
 8013770:	4618      	mov	r0, r3
 8013772:	3714      	adds	r7, #20
 8013774:	46bd      	mov	sp, r7
 8013776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801377a:	4770      	bx	lr

0801377c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801377c:	b480      	push	{r7}
 801377e:	b085      	sub	sp, #20
 8013780:	af00      	add	r7, sp, #0
 8013782:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	3303      	adds	r3, #3
 8013788:	781b      	ldrb	r3, [r3, #0]
 801378a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	021b      	lsls	r3, r3, #8
 8013790:	687a      	ldr	r2, [r7, #4]
 8013792:	3202      	adds	r2, #2
 8013794:	7812      	ldrb	r2, [r2, #0]
 8013796:	4313      	orrs	r3, r2
 8013798:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	021b      	lsls	r3, r3, #8
 801379e:	687a      	ldr	r2, [r7, #4]
 80137a0:	3201      	adds	r2, #1
 80137a2:	7812      	ldrb	r2, [r2, #0]
 80137a4:	4313      	orrs	r3, r2
 80137a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	021b      	lsls	r3, r3, #8
 80137ac:	687a      	ldr	r2, [r7, #4]
 80137ae:	7812      	ldrb	r2, [r2, #0]
 80137b0:	4313      	orrs	r3, r2
 80137b2:	60fb      	str	r3, [r7, #12]
	return rv;
 80137b4:	68fb      	ldr	r3, [r7, #12]
}
 80137b6:	4618      	mov	r0, r3
 80137b8:	3714      	adds	r7, #20
 80137ba:	46bd      	mov	sp, r7
 80137bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c0:	4770      	bx	lr

080137c2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80137c2:	b480      	push	{r7}
 80137c4:	b083      	sub	sp, #12
 80137c6:	af00      	add	r7, sp, #0
 80137c8:	6078      	str	r0, [r7, #4]
 80137ca:	460b      	mov	r3, r1
 80137cc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	1c5a      	adds	r2, r3, #1
 80137d2:	607a      	str	r2, [r7, #4]
 80137d4:	887a      	ldrh	r2, [r7, #2]
 80137d6:	b2d2      	uxtb	r2, r2
 80137d8:	701a      	strb	r2, [r3, #0]
 80137da:	887b      	ldrh	r3, [r7, #2]
 80137dc:	0a1b      	lsrs	r3, r3, #8
 80137de:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	1c5a      	adds	r2, r3, #1
 80137e4:	607a      	str	r2, [r7, #4]
 80137e6:	887a      	ldrh	r2, [r7, #2]
 80137e8:	b2d2      	uxtb	r2, r2
 80137ea:	701a      	strb	r2, [r3, #0]
}
 80137ec:	bf00      	nop
 80137ee:	370c      	adds	r7, #12
 80137f0:	46bd      	mov	sp, r7
 80137f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f6:	4770      	bx	lr

080137f8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80137f8:	b480      	push	{r7}
 80137fa:	b083      	sub	sp, #12
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	6078      	str	r0, [r7, #4]
 8013800:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	1c5a      	adds	r2, r3, #1
 8013806:	607a      	str	r2, [r7, #4]
 8013808:	683a      	ldr	r2, [r7, #0]
 801380a:	b2d2      	uxtb	r2, r2
 801380c:	701a      	strb	r2, [r3, #0]
 801380e:	683b      	ldr	r3, [r7, #0]
 8013810:	0a1b      	lsrs	r3, r3, #8
 8013812:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	1c5a      	adds	r2, r3, #1
 8013818:	607a      	str	r2, [r7, #4]
 801381a:	683a      	ldr	r2, [r7, #0]
 801381c:	b2d2      	uxtb	r2, r2
 801381e:	701a      	strb	r2, [r3, #0]
 8013820:	683b      	ldr	r3, [r7, #0]
 8013822:	0a1b      	lsrs	r3, r3, #8
 8013824:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	1c5a      	adds	r2, r3, #1
 801382a:	607a      	str	r2, [r7, #4]
 801382c:	683a      	ldr	r2, [r7, #0]
 801382e:	b2d2      	uxtb	r2, r2
 8013830:	701a      	strb	r2, [r3, #0]
 8013832:	683b      	ldr	r3, [r7, #0]
 8013834:	0a1b      	lsrs	r3, r3, #8
 8013836:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	1c5a      	adds	r2, r3, #1
 801383c:	607a      	str	r2, [r7, #4]
 801383e:	683a      	ldr	r2, [r7, #0]
 8013840:	b2d2      	uxtb	r2, r2
 8013842:	701a      	strb	r2, [r3, #0]
}
 8013844:	bf00      	nop
 8013846:	370c      	adds	r7, #12
 8013848:	46bd      	mov	sp, r7
 801384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801384e:	4770      	bx	lr

08013850 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8013850:	b480      	push	{r7}
 8013852:	b087      	sub	sp, #28
 8013854:	af00      	add	r7, sp, #0
 8013856:	60f8      	str	r0, [r7, #12]
 8013858:	60b9      	str	r1, [r7, #8]
 801385a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8013860:	68bb      	ldr	r3, [r7, #8]
 8013862:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	2b00      	cmp	r3, #0
 8013868:	d00d      	beq.n	8013886 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801386a:	693a      	ldr	r2, [r7, #16]
 801386c:	1c53      	adds	r3, r2, #1
 801386e:	613b      	str	r3, [r7, #16]
 8013870:	697b      	ldr	r3, [r7, #20]
 8013872:	1c59      	adds	r1, r3, #1
 8013874:	6179      	str	r1, [r7, #20]
 8013876:	7812      	ldrb	r2, [r2, #0]
 8013878:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	3b01      	subs	r3, #1
 801387e:	607b      	str	r3, [r7, #4]
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d1f1      	bne.n	801386a <mem_cpy+0x1a>
	}
}
 8013886:	bf00      	nop
 8013888:	371c      	adds	r7, #28
 801388a:	46bd      	mov	sp, r7
 801388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013890:	4770      	bx	lr

08013892 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8013892:	b480      	push	{r7}
 8013894:	b087      	sub	sp, #28
 8013896:	af00      	add	r7, sp, #0
 8013898:	60f8      	str	r0, [r7, #12]
 801389a:	60b9      	str	r1, [r7, #8]
 801389c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80138a2:	697b      	ldr	r3, [r7, #20]
 80138a4:	1c5a      	adds	r2, r3, #1
 80138a6:	617a      	str	r2, [r7, #20]
 80138a8:	68ba      	ldr	r2, [r7, #8]
 80138aa:	b2d2      	uxtb	r2, r2
 80138ac:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	3b01      	subs	r3, #1
 80138b2:	607b      	str	r3, [r7, #4]
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d1f3      	bne.n	80138a2 <mem_set+0x10>
}
 80138ba:	bf00      	nop
 80138bc:	bf00      	nop
 80138be:	371c      	adds	r7, #28
 80138c0:	46bd      	mov	sp, r7
 80138c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c6:	4770      	bx	lr

080138c8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80138c8:	b480      	push	{r7}
 80138ca:	b089      	sub	sp, #36	; 0x24
 80138cc:	af00      	add	r7, sp, #0
 80138ce:	60f8      	str	r0, [r7, #12]
 80138d0:	60b9      	str	r1, [r7, #8]
 80138d2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	61fb      	str	r3, [r7, #28]
 80138d8:	68bb      	ldr	r3, [r7, #8]
 80138da:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80138dc:	2300      	movs	r3, #0
 80138de:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80138e0:	69fb      	ldr	r3, [r7, #28]
 80138e2:	1c5a      	adds	r2, r3, #1
 80138e4:	61fa      	str	r2, [r7, #28]
 80138e6:	781b      	ldrb	r3, [r3, #0]
 80138e8:	4619      	mov	r1, r3
 80138ea:	69bb      	ldr	r3, [r7, #24]
 80138ec:	1c5a      	adds	r2, r3, #1
 80138ee:	61ba      	str	r2, [r7, #24]
 80138f0:	781b      	ldrb	r3, [r3, #0]
 80138f2:	1acb      	subs	r3, r1, r3
 80138f4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	3b01      	subs	r3, #1
 80138fa:	607b      	str	r3, [r7, #4]
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d002      	beq.n	8013908 <mem_cmp+0x40>
 8013902:	697b      	ldr	r3, [r7, #20]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d0eb      	beq.n	80138e0 <mem_cmp+0x18>

	return r;
 8013908:	697b      	ldr	r3, [r7, #20]
}
 801390a:	4618      	mov	r0, r3
 801390c:	3724      	adds	r7, #36	; 0x24
 801390e:	46bd      	mov	sp, r7
 8013910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013914:	4770      	bx	lr

08013916 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8013916:	b480      	push	{r7}
 8013918:	b083      	sub	sp, #12
 801391a:	af00      	add	r7, sp, #0
 801391c:	6078      	str	r0, [r7, #4]
 801391e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8013920:	e002      	b.n	8013928 <chk_chr+0x12>
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	3301      	adds	r3, #1
 8013926:	607b      	str	r3, [r7, #4]
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	781b      	ldrb	r3, [r3, #0]
 801392c:	2b00      	cmp	r3, #0
 801392e:	d005      	beq.n	801393c <chk_chr+0x26>
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	781b      	ldrb	r3, [r3, #0]
 8013934:	461a      	mov	r2, r3
 8013936:	683b      	ldr	r3, [r7, #0]
 8013938:	4293      	cmp	r3, r2
 801393a:	d1f2      	bne.n	8013922 <chk_chr+0xc>
	return *str;
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	781b      	ldrb	r3, [r3, #0]
}
 8013940:	4618      	mov	r0, r3
 8013942:	370c      	adds	r7, #12
 8013944:	46bd      	mov	sp, r7
 8013946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801394a:	4770      	bx	lr

0801394c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801394c:	b480      	push	{r7}
 801394e:	b085      	sub	sp, #20
 8013950:	af00      	add	r7, sp, #0
 8013952:	6078      	str	r0, [r7, #4]
 8013954:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8013956:	2300      	movs	r3, #0
 8013958:	60bb      	str	r3, [r7, #8]
 801395a:	68bb      	ldr	r3, [r7, #8]
 801395c:	60fb      	str	r3, [r7, #12]
 801395e:	e029      	b.n	80139b4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8013960:	4a27      	ldr	r2, [pc, #156]	; (8013a00 <chk_lock+0xb4>)
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	011b      	lsls	r3, r3, #4
 8013966:	4413      	add	r3, r2
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	2b00      	cmp	r3, #0
 801396c:	d01d      	beq.n	80139aa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801396e:	4a24      	ldr	r2, [pc, #144]	; (8013a00 <chk_lock+0xb4>)
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	011b      	lsls	r3, r3, #4
 8013974:	4413      	add	r3, r2
 8013976:	681a      	ldr	r2, [r3, #0]
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	429a      	cmp	r2, r3
 801397e:	d116      	bne.n	80139ae <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8013980:	4a1f      	ldr	r2, [pc, #124]	; (8013a00 <chk_lock+0xb4>)
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	011b      	lsls	r3, r3, #4
 8013986:	4413      	add	r3, r2
 8013988:	3304      	adds	r3, #4
 801398a:	681a      	ldr	r2, [r3, #0]
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013990:	429a      	cmp	r2, r3
 8013992:	d10c      	bne.n	80139ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8013994:	4a1a      	ldr	r2, [pc, #104]	; (8013a00 <chk_lock+0xb4>)
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	011b      	lsls	r3, r3, #4
 801399a:	4413      	add	r3, r2
 801399c:	3308      	adds	r3, #8
 801399e:	681a      	ldr	r2, [r3, #0]
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80139a4:	429a      	cmp	r2, r3
 80139a6:	d102      	bne.n	80139ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80139a8:	e007      	b.n	80139ba <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80139aa:	2301      	movs	r3, #1
 80139ac:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	3301      	adds	r3, #1
 80139b2:	60fb      	str	r3, [r7, #12]
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	2b01      	cmp	r3, #1
 80139b8:	d9d2      	bls.n	8013960 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	2b02      	cmp	r3, #2
 80139be:	d109      	bne.n	80139d4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80139c0:	68bb      	ldr	r3, [r7, #8]
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d102      	bne.n	80139cc <chk_lock+0x80>
 80139c6:	683b      	ldr	r3, [r7, #0]
 80139c8:	2b02      	cmp	r3, #2
 80139ca:	d101      	bne.n	80139d0 <chk_lock+0x84>
 80139cc:	2300      	movs	r3, #0
 80139ce:	e010      	b.n	80139f2 <chk_lock+0xa6>
 80139d0:	2312      	movs	r3, #18
 80139d2:	e00e      	b.n	80139f2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80139d4:	683b      	ldr	r3, [r7, #0]
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d108      	bne.n	80139ec <chk_lock+0xa0>
 80139da:	4a09      	ldr	r2, [pc, #36]	; (8013a00 <chk_lock+0xb4>)
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	011b      	lsls	r3, r3, #4
 80139e0:	4413      	add	r3, r2
 80139e2:	330c      	adds	r3, #12
 80139e4:	881b      	ldrh	r3, [r3, #0]
 80139e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80139ea:	d101      	bne.n	80139f0 <chk_lock+0xa4>
 80139ec:	2310      	movs	r3, #16
 80139ee:	e000      	b.n	80139f2 <chk_lock+0xa6>
 80139f0:	2300      	movs	r3, #0
}
 80139f2:	4618      	mov	r0, r3
 80139f4:	3714      	adds	r7, #20
 80139f6:	46bd      	mov	sp, r7
 80139f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139fc:	4770      	bx	lr
 80139fe:	bf00      	nop
 8013a00:	24030880 	.word	0x24030880

08013a04 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8013a04:	b480      	push	{r7}
 8013a06:	b083      	sub	sp, #12
 8013a08:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	607b      	str	r3, [r7, #4]
 8013a0e:	e002      	b.n	8013a16 <enq_lock+0x12>
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	3301      	adds	r3, #1
 8013a14:	607b      	str	r3, [r7, #4]
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	2b01      	cmp	r3, #1
 8013a1a:	d806      	bhi.n	8013a2a <enq_lock+0x26>
 8013a1c:	4a09      	ldr	r2, [pc, #36]	; (8013a44 <enq_lock+0x40>)
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	011b      	lsls	r3, r3, #4
 8013a22:	4413      	add	r3, r2
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d1f2      	bne.n	8013a10 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	2b02      	cmp	r3, #2
 8013a2e:	bf14      	ite	ne
 8013a30:	2301      	movne	r3, #1
 8013a32:	2300      	moveq	r3, #0
 8013a34:	b2db      	uxtb	r3, r3
}
 8013a36:	4618      	mov	r0, r3
 8013a38:	370c      	adds	r7, #12
 8013a3a:	46bd      	mov	sp, r7
 8013a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a40:	4770      	bx	lr
 8013a42:	bf00      	nop
 8013a44:	24030880 	.word	0x24030880

08013a48 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8013a48:	b480      	push	{r7}
 8013a4a:	b085      	sub	sp, #20
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	6078      	str	r0, [r7, #4]
 8013a50:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8013a52:	2300      	movs	r3, #0
 8013a54:	60fb      	str	r3, [r7, #12]
 8013a56:	e01f      	b.n	8013a98 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8013a58:	4a41      	ldr	r2, [pc, #260]	; (8013b60 <inc_lock+0x118>)
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	011b      	lsls	r3, r3, #4
 8013a5e:	4413      	add	r3, r2
 8013a60:	681a      	ldr	r2, [r3, #0]
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	429a      	cmp	r2, r3
 8013a68:	d113      	bne.n	8013a92 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8013a6a:	4a3d      	ldr	r2, [pc, #244]	; (8013b60 <inc_lock+0x118>)
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	011b      	lsls	r3, r3, #4
 8013a70:	4413      	add	r3, r2
 8013a72:	3304      	adds	r3, #4
 8013a74:	681a      	ldr	r2, [r3, #0]
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8013a7a:	429a      	cmp	r2, r3
 8013a7c:	d109      	bne.n	8013a92 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8013a7e:	4a38      	ldr	r2, [pc, #224]	; (8013b60 <inc_lock+0x118>)
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	011b      	lsls	r3, r3, #4
 8013a84:	4413      	add	r3, r2
 8013a86:	3308      	adds	r3, #8
 8013a88:	681a      	ldr	r2, [r3, #0]
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8013a8e:	429a      	cmp	r2, r3
 8013a90:	d006      	beq.n	8013aa0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	3301      	adds	r3, #1
 8013a96:	60fb      	str	r3, [r7, #12]
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	2b01      	cmp	r3, #1
 8013a9c:	d9dc      	bls.n	8013a58 <inc_lock+0x10>
 8013a9e:	e000      	b.n	8013aa2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8013aa0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	2b02      	cmp	r3, #2
 8013aa6:	d132      	bne.n	8013b0e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8013aa8:	2300      	movs	r3, #0
 8013aaa:	60fb      	str	r3, [r7, #12]
 8013aac:	e002      	b.n	8013ab4 <inc_lock+0x6c>
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	3301      	adds	r3, #1
 8013ab2:	60fb      	str	r3, [r7, #12]
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	2b01      	cmp	r3, #1
 8013ab8:	d806      	bhi.n	8013ac8 <inc_lock+0x80>
 8013aba:	4a29      	ldr	r2, [pc, #164]	; (8013b60 <inc_lock+0x118>)
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	011b      	lsls	r3, r3, #4
 8013ac0:	4413      	add	r3, r2
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d1f2      	bne.n	8013aae <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	2b02      	cmp	r3, #2
 8013acc:	d101      	bne.n	8013ad2 <inc_lock+0x8a>
 8013ace:	2300      	movs	r3, #0
 8013ad0:	e040      	b.n	8013b54 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	681a      	ldr	r2, [r3, #0]
 8013ad6:	4922      	ldr	r1, [pc, #136]	; (8013b60 <inc_lock+0x118>)
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	011b      	lsls	r3, r3, #4
 8013adc:	440b      	add	r3, r1
 8013ade:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	689a      	ldr	r2, [r3, #8]
 8013ae4:	491e      	ldr	r1, [pc, #120]	; (8013b60 <inc_lock+0x118>)
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	011b      	lsls	r3, r3, #4
 8013aea:	440b      	add	r3, r1
 8013aec:	3304      	adds	r3, #4
 8013aee:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	695a      	ldr	r2, [r3, #20]
 8013af4:	491a      	ldr	r1, [pc, #104]	; (8013b60 <inc_lock+0x118>)
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	011b      	lsls	r3, r3, #4
 8013afa:	440b      	add	r3, r1
 8013afc:	3308      	adds	r3, #8
 8013afe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8013b00:	4a17      	ldr	r2, [pc, #92]	; (8013b60 <inc_lock+0x118>)
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	011b      	lsls	r3, r3, #4
 8013b06:	4413      	add	r3, r2
 8013b08:	330c      	adds	r3, #12
 8013b0a:	2200      	movs	r2, #0
 8013b0c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8013b0e:	683b      	ldr	r3, [r7, #0]
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d009      	beq.n	8013b28 <inc_lock+0xe0>
 8013b14:	4a12      	ldr	r2, [pc, #72]	; (8013b60 <inc_lock+0x118>)
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	011b      	lsls	r3, r3, #4
 8013b1a:	4413      	add	r3, r2
 8013b1c:	330c      	adds	r3, #12
 8013b1e:	881b      	ldrh	r3, [r3, #0]
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d001      	beq.n	8013b28 <inc_lock+0xe0>
 8013b24:	2300      	movs	r3, #0
 8013b26:	e015      	b.n	8013b54 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8013b28:	683b      	ldr	r3, [r7, #0]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d108      	bne.n	8013b40 <inc_lock+0xf8>
 8013b2e:	4a0c      	ldr	r2, [pc, #48]	; (8013b60 <inc_lock+0x118>)
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	011b      	lsls	r3, r3, #4
 8013b34:	4413      	add	r3, r2
 8013b36:	330c      	adds	r3, #12
 8013b38:	881b      	ldrh	r3, [r3, #0]
 8013b3a:	3301      	adds	r3, #1
 8013b3c:	b29a      	uxth	r2, r3
 8013b3e:	e001      	b.n	8013b44 <inc_lock+0xfc>
 8013b40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013b44:	4906      	ldr	r1, [pc, #24]	; (8013b60 <inc_lock+0x118>)
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	011b      	lsls	r3, r3, #4
 8013b4a:	440b      	add	r3, r1
 8013b4c:	330c      	adds	r3, #12
 8013b4e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	3301      	adds	r3, #1
}
 8013b54:	4618      	mov	r0, r3
 8013b56:	3714      	adds	r7, #20
 8013b58:	46bd      	mov	sp, r7
 8013b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b5e:	4770      	bx	lr
 8013b60:	24030880 	.word	0x24030880

08013b64 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8013b64:	b480      	push	{r7}
 8013b66:	b085      	sub	sp, #20
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	3b01      	subs	r3, #1
 8013b70:	607b      	str	r3, [r7, #4]
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	2b01      	cmp	r3, #1
 8013b76:	d825      	bhi.n	8013bc4 <dec_lock+0x60>
		n = Files[i].ctr;
 8013b78:	4a17      	ldr	r2, [pc, #92]	; (8013bd8 <dec_lock+0x74>)
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	011b      	lsls	r3, r3, #4
 8013b7e:	4413      	add	r3, r2
 8013b80:	330c      	adds	r3, #12
 8013b82:	881b      	ldrh	r3, [r3, #0]
 8013b84:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8013b86:	89fb      	ldrh	r3, [r7, #14]
 8013b88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013b8c:	d101      	bne.n	8013b92 <dec_lock+0x2e>
 8013b8e:	2300      	movs	r3, #0
 8013b90:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8013b92:	89fb      	ldrh	r3, [r7, #14]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d002      	beq.n	8013b9e <dec_lock+0x3a>
 8013b98:	89fb      	ldrh	r3, [r7, #14]
 8013b9a:	3b01      	subs	r3, #1
 8013b9c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8013b9e:	4a0e      	ldr	r2, [pc, #56]	; (8013bd8 <dec_lock+0x74>)
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	011b      	lsls	r3, r3, #4
 8013ba4:	4413      	add	r3, r2
 8013ba6:	330c      	adds	r3, #12
 8013ba8:	89fa      	ldrh	r2, [r7, #14]
 8013baa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8013bac:	89fb      	ldrh	r3, [r7, #14]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d105      	bne.n	8013bbe <dec_lock+0x5a>
 8013bb2:	4a09      	ldr	r2, [pc, #36]	; (8013bd8 <dec_lock+0x74>)
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	011b      	lsls	r3, r3, #4
 8013bb8:	4413      	add	r3, r2
 8013bba:	2200      	movs	r2, #0
 8013bbc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	737b      	strb	r3, [r7, #13]
 8013bc2:	e001      	b.n	8013bc8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8013bc4:	2302      	movs	r3, #2
 8013bc6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8013bc8:	7b7b      	ldrb	r3, [r7, #13]
}
 8013bca:	4618      	mov	r0, r3
 8013bcc:	3714      	adds	r7, #20
 8013bce:	46bd      	mov	sp, r7
 8013bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd4:	4770      	bx	lr
 8013bd6:	bf00      	nop
 8013bd8:	24030880 	.word	0x24030880

08013bdc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8013bdc:	b480      	push	{r7}
 8013bde:	b085      	sub	sp, #20
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8013be4:	2300      	movs	r3, #0
 8013be6:	60fb      	str	r3, [r7, #12]
 8013be8:	e010      	b.n	8013c0c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8013bea:	4a0d      	ldr	r2, [pc, #52]	; (8013c20 <clear_lock+0x44>)
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	011b      	lsls	r3, r3, #4
 8013bf0:	4413      	add	r3, r2
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	687a      	ldr	r2, [r7, #4]
 8013bf6:	429a      	cmp	r2, r3
 8013bf8:	d105      	bne.n	8013c06 <clear_lock+0x2a>
 8013bfa:	4a09      	ldr	r2, [pc, #36]	; (8013c20 <clear_lock+0x44>)
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	011b      	lsls	r3, r3, #4
 8013c00:	4413      	add	r3, r2
 8013c02:	2200      	movs	r2, #0
 8013c04:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	3301      	adds	r3, #1
 8013c0a:	60fb      	str	r3, [r7, #12]
 8013c0c:	68fb      	ldr	r3, [r7, #12]
 8013c0e:	2b01      	cmp	r3, #1
 8013c10:	d9eb      	bls.n	8013bea <clear_lock+0xe>
	}
}
 8013c12:	bf00      	nop
 8013c14:	bf00      	nop
 8013c16:	3714      	adds	r7, #20
 8013c18:	46bd      	mov	sp, r7
 8013c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c1e:	4770      	bx	lr
 8013c20:	24030880 	.word	0x24030880

08013c24 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8013c24:	b580      	push	{r7, lr}
 8013c26:	b086      	sub	sp, #24
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8013c2c:	2300      	movs	r3, #0
 8013c2e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	78db      	ldrb	r3, [r3, #3]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d034      	beq.n	8013ca2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c3c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	7858      	ldrb	r0, [r3, #1]
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013c48:	2301      	movs	r3, #1
 8013c4a:	697a      	ldr	r2, [r7, #20]
 8013c4c:	f7ff fd40 	bl	80136d0 <disk_write>
 8013c50:	4603      	mov	r3, r0
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d002      	beq.n	8013c5c <sync_window+0x38>
			res = FR_DISK_ERR;
 8013c56:	2301      	movs	r3, #1
 8013c58:	73fb      	strb	r3, [r7, #15]
 8013c5a:	e022      	b.n	8013ca2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	2200      	movs	r2, #0
 8013c60:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	6a1b      	ldr	r3, [r3, #32]
 8013c66:	697a      	ldr	r2, [r7, #20]
 8013c68:	1ad2      	subs	r2, r2, r3
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	699b      	ldr	r3, [r3, #24]
 8013c6e:	429a      	cmp	r2, r3
 8013c70:	d217      	bcs.n	8013ca2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	789b      	ldrb	r3, [r3, #2]
 8013c76:	613b      	str	r3, [r7, #16]
 8013c78:	e010      	b.n	8013c9c <sync_window+0x78>
					wsect += fs->fsize;
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	699b      	ldr	r3, [r3, #24]
 8013c7e:	697a      	ldr	r2, [r7, #20]
 8013c80:	4413      	add	r3, r2
 8013c82:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	7858      	ldrb	r0, [r3, #1]
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013c8e:	2301      	movs	r3, #1
 8013c90:	697a      	ldr	r2, [r7, #20]
 8013c92:	f7ff fd1d 	bl	80136d0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013c96:	693b      	ldr	r3, [r7, #16]
 8013c98:	3b01      	subs	r3, #1
 8013c9a:	613b      	str	r3, [r7, #16]
 8013c9c:	693b      	ldr	r3, [r7, #16]
 8013c9e:	2b01      	cmp	r3, #1
 8013ca0:	d8eb      	bhi.n	8013c7a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8013ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	3718      	adds	r7, #24
 8013ca8:	46bd      	mov	sp, r7
 8013caa:	bd80      	pop	{r7, pc}

08013cac <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b084      	sub	sp, #16
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	6078      	str	r0, [r7, #4]
 8013cb4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8013cb6:	2300      	movs	r3, #0
 8013cb8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cbe:	683a      	ldr	r2, [r7, #0]
 8013cc0:	429a      	cmp	r2, r3
 8013cc2:	d01b      	beq.n	8013cfc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8013cc4:	6878      	ldr	r0, [r7, #4]
 8013cc6:	f7ff ffad 	bl	8013c24 <sync_window>
 8013cca:	4603      	mov	r3, r0
 8013ccc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8013cce:	7bfb      	ldrb	r3, [r7, #15]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d113      	bne.n	8013cfc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	7858      	ldrb	r0, [r3, #1]
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013cde:	2301      	movs	r3, #1
 8013ce0:	683a      	ldr	r2, [r7, #0]
 8013ce2:	f7ff fcd5 	bl	8013690 <disk_read>
 8013ce6:	4603      	mov	r3, r0
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d004      	beq.n	8013cf6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8013cec:	f04f 33ff 	mov.w	r3, #4294967295
 8013cf0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8013cf2:	2301      	movs	r3, #1
 8013cf4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	683a      	ldr	r2, [r7, #0]
 8013cfa:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8013cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8013cfe:	4618      	mov	r0, r3
 8013d00:	3710      	adds	r7, #16
 8013d02:	46bd      	mov	sp, r7
 8013d04:	bd80      	pop	{r7, pc}
	...

08013d08 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8013d08:	b580      	push	{r7, lr}
 8013d0a:	b084      	sub	sp, #16
 8013d0c:	af00      	add	r7, sp, #0
 8013d0e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8013d10:	6878      	ldr	r0, [r7, #4]
 8013d12:	f7ff ff87 	bl	8013c24 <sync_window>
 8013d16:	4603      	mov	r3, r0
 8013d18:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8013d1a:	7bfb      	ldrb	r3, [r7, #15]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d158      	bne.n	8013dd2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	781b      	ldrb	r3, [r3, #0]
 8013d24:	2b03      	cmp	r3, #3
 8013d26:	d148      	bne.n	8013dba <sync_fs+0xb2>
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	791b      	ldrb	r3, [r3, #4]
 8013d2c:	2b01      	cmp	r3, #1
 8013d2e:	d144      	bne.n	8013dba <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	3330      	adds	r3, #48	; 0x30
 8013d34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013d38:	2100      	movs	r1, #0
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	f7ff fda9 	bl	8013892 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	3330      	adds	r3, #48	; 0x30
 8013d44:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013d48:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	f7ff fd38 	bl	80137c2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	3330      	adds	r3, #48	; 0x30
 8013d56:	4921      	ldr	r1, [pc, #132]	; (8013ddc <sync_fs+0xd4>)
 8013d58:	4618      	mov	r0, r3
 8013d5a:	f7ff fd4d 	bl	80137f8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	3330      	adds	r3, #48	; 0x30
 8013d62:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013d66:	491e      	ldr	r1, [pc, #120]	; (8013de0 <sync_fs+0xd8>)
 8013d68:	4618      	mov	r0, r3
 8013d6a:	f7ff fd45 	bl	80137f8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	3330      	adds	r3, #48	; 0x30
 8013d72:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	691b      	ldr	r3, [r3, #16]
 8013d7a:	4619      	mov	r1, r3
 8013d7c:	4610      	mov	r0, r2
 8013d7e:	f7ff fd3b 	bl	80137f8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	3330      	adds	r3, #48	; 0x30
 8013d86:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	68db      	ldr	r3, [r3, #12]
 8013d8e:	4619      	mov	r1, r3
 8013d90:	4610      	mov	r0, r2
 8013d92:	f7ff fd31 	bl	80137f8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	69db      	ldr	r3, [r3, #28]
 8013d9a:	1c5a      	adds	r2, r3, #1
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	7858      	ldrb	r0, [r3, #1]
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dae:	2301      	movs	r3, #1
 8013db0:	f7ff fc8e 	bl	80136d0 <disk_write>
			fs->fsi_flag = 0;
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	2200      	movs	r2, #0
 8013db8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	785b      	ldrb	r3, [r3, #1]
 8013dbe:	2200      	movs	r2, #0
 8013dc0:	2100      	movs	r1, #0
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	f7ff fca4 	bl	8013710 <disk_ioctl>
 8013dc8:	4603      	mov	r3, r0
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d001      	beq.n	8013dd2 <sync_fs+0xca>
 8013dce:	2301      	movs	r3, #1
 8013dd0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8013dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	3710      	adds	r7, #16
 8013dd8:	46bd      	mov	sp, r7
 8013dda:	bd80      	pop	{r7, pc}
 8013ddc:	41615252 	.word	0x41615252
 8013de0:	61417272 	.word	0x61417272

08013de4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8013de4:	b480      	push	{r7}
 8013de6:	b083      	sub	sp, #12
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	6078      	str	r0, [r7, #4]
 8013dec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8013dee:	683b      	ldr	r3, [r7, #0]
 8013df0:	3b02      	subs	r3, #2
 8013df2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	695b      	ldr	r3, [r3, #20]
 8013df8:	3b02      	subs	r3, #2
 8013dfa:	683a      	ldr	r2, [r7, #0]
 8013dfc:	429a      	cmp	r2, r3
 8013dfe:	d301      	bcc.n	8013e04 <clust2sect+0x20>
 8013e00:	2300      	movs	r3, #0
 8013e02:	e008      	b.n	8013e16 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	895b      	ldrh	r3, [r3, #10]
 8013e08:	461a      	mov	r2, r3
 8013e0a:	683b      	ldr	r3, [r7, #0]
 8013e0c:	fb03 f202 	mul.w	r2, r3, r2
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e14:	4413      	add	r3, r2
}
 8013e16:	4618      	mov	r0, r3
 8013e18:	370c      	adds	r7, #12
 8013e1a:	46bd      	mov	sp, r7
 8013e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e20:	4770      	bx	lr

08013e22 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8013e22:	b580      	push	{r7, lr}
 8013e24:	b086      	sub	sp, #24
 8013e26:	af00      	add	r7, sp, #0
 8013e28:	6078      	str	r0, [r7, #4]
 8013e2a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8013e32:	683b      	ldr	r3, [r7, #0]
 8013e34:	2b01      	cmp	r3, #1
 8013e36:	d904      	bls.n	8013e42 <get_fat+0x20>
 8013e38:	693b      	ldr	r3, [r7, #16]
 8013e3a:	695b      	ldr	r3, [r3, #20]
 8013e3c:	683a      	ldr	r2, [r7, #0]
 8013e3e:	429a      	cmp	r2, r3
 8013e40:	d302      	bcc.n	8013e48 <get_fat+0x26>
		val = 1;	/* Internal error */
 8013e42:	2301      	movs	r3, #1
 8013e44:	617b      	str	r3, [r7, #20]
 8013e46:	e08f      	b.n	8013f68 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8013e48:	f04f 33ff 	mov.w	r3, #4294967295
 8013e4c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8013e4e:	693b      	ldr	r3, [r7, #16]
 8013e50:	781b      	ldrb	r3, [r3, #0]
 8013e52:	2b03      	cmp	r3, #3
 8013e54:	d062      	beq.n	8013f1c <get_fat+0xfa>
 8013e56:	2b03      	cmp	r3, #3
 8013e58:	dc7c      	bgt.n	8013f54 <get_fat+0x132>
 8013e5a:	2b01      	cmp	r3, #1
 8013e5c:	d002      	beq.n	8013e64 <get_fat+0x42>
 8013e5e:	2b02      	cmp	r3, #2
 8013e60:	d042      	beq.n	8013ee8 <get_fat+0xc6>
 8013e62:	e077      	b.n	8013f54 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8013e64:	683b      	ldr	r3, [r7, #0]
 8013e66:	60fb      	str	r3, [r7, #12]
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	085b      	lsrs	r3, r3, #1
 8013e6c:	68fa      	ldr	r2, [r7, #12]
 8013e6e:	4413      	add	r3, r2
 8013e70:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013e72:	693b      	ldr	r3, [r7, #16]
 8013e74:	6a1a      	ldr	r2, [r3, #32]
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	0a5b      	lsrs	r3, r3, #9
 8013e7a:	4413      	add	r3, r2
 8013e7c:	4619      	mov	r1, r3
 8013e7e:	6938      	ldr	r0, [r7, #16]
 8013e80:	f7ff ff14 	bl	8013cac <move_window>
 8013e84:	4603      	mov	r3, r0
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d167      	bne.n	8013f5a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	1c5a      	adds	r2, r3, #1
 8013e8e:	60fa      	str	r2, [r7, #12]
 8013e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e94:	693a      	ldr	r2, [r7, #16]
 8013e96:	4413      	add	r3, r2
 8013e98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013e9c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013e9e:	693b      	ldr	r3, [r7, #16]
 8013ea0:	6a1a      	ldr	r2, [r3, #32]
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	0a5b      	lsrs	r3, r3, #9
 8013ea6:	4413      	add	r3, r2
 8013ea8:	4619      	mov	r1, r3
 8013eaa:	6938      	ldr	r0, [r7, #16]
 8013eac:	f7ff fefe 	bl	8013cac <move_window>
 8013eb0:	4603      	mov	r3, r0
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d153      	bne.n	8013f5e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ebc:	693a      	ldr	r2, [r7, #16]
 8013ebe:	4413      	add	r3, r2
 8013ec0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013ec4:	021b      	lsls	r3, r3, #8
 8013ec6:	461a      	mov	r2, r3
 8013ec8:	68bb      	ldr	r3, [r7, #8]
 8013eca:	4313      	orrs	r3, r2
 8013ecc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8013ece:	683b      	ldr	r3, [r7, #0]
 8013ed0:	f003 0301 	and.w	r3, r3, #1
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d002      	beq.n	8013ede <get_fat+0xbc>
 8013ed8:	68bb      	ldr	r3, [r7, #8]
 8013eda:	091b      	lsrs	r3, r3, #4
 8013edc:	e002      	b.n	8013ee4 <get_fat+0xc2>
 8013ede:	68bb      	ldr	r3, [r7, #8]
 8013ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013ee4:	617b      	str	r3, [r7, #20]
			break;
 8013ee6:	e03f      	b.n	8013f68 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013ee8:	693b      	ldr	r3, [r7, #16]
 8013eea:	6a1a      	ldr	r2, [r3, #32]
 8013eec:	683b      	ldr	r3, [r7, #0]
 8013eee:	0a1b      	lsrs	r3, r3, #8
 8013ef0:	4413      	add	r3, r2
 8013ef2:	4619      	mov	r1, r3
 8013ef4:	6938      	ldr	r0, [r7, #16]
 8013ef6:	f7ff fed9 	bl	8013cac <move_window>
 8013efa:	4603      	mov	r3, r0
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d130      	bne.n	8013f62 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8013f00:	693b      	ldr	r3, [r7, #16]
 8013f02:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013f06:	683b      	ldr	r3, [r7, #0]
 8013f08:	005b      	lsls	r3, r3, #1
 8013f0a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8013f0e:	4413      	add	r3, r2
 8013f10:	4618      	mov	r0, r3
 8013f12:	f7ff fc1b 	bl	801374c <ld_word>
 8013f16:	4603      	mov	r3, r0
 8013f18:	617b      	str	r3, [r7, #20]
			break;
 8013f1a:	e025      	b.n	8013f68 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013f1c:	693b      	ldr	r3, [r7, #16]
 8013f1e:	6a1a      	ldr	r2, [r3, #32]
 8013f20:	683b      	ldr	r3, [r7, #0]
 8013f22:	09db      	lsrs	r3, r3, #7
 8013f24:	4413      	add	r3, r2
 8013f26:	4619      	mov	r1, r3
 8013f28:	6938      	ldr	r0, [r7, #16]
 8013f2a:	f7ff febf 	bl	8013cac <move_window>
 8013f2e:	4603      	mov	r3, r0
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d118      	bne.n	8013f66 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8013f34:	693b      	ldr	r3, [r7, #16]
 8013f36:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013f3a:	683b      	ldr	r3, [r7, #0]
 8013f3c:	009b      	lsls	r3, r3, #2
 8013f3e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013f42:	4413      	add	r3, r2
 8013f44:	4618      	mov	r0, r3
 8013f46:	f7ff fc19 	bl	801377c <ld_dword>
 8013f4a:	4603      	mov	r3, r0
 8013f4c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8013f50:	617b      	str	r3, [r7, #20]
			break;
 8013f52:	e009      	b.n	8013f68 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8013f54:	2301      	movs	r3, #1
 8013f56:	617b      	str	r3, [r7, #20]
 8013f58:	e006      	b.n	8013f68 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013f5a:	bf00      	nop
 8013f5c:	e004      	b.n	8013f68 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013f5e:	bf00      	nop
 8013f60:	e002      	b.n	8013f68 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013f62:	bf00      	nop
 8013f64:	e000      	b.n	8013f68 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013f66:	bf00      	nop
		}
	}

	return val;
 8013f68:	697b      	ldr	r3, [r7, #20]
}
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	3718      	adds	r7, #24
 8013f6e:	46bd      	mov	sp, r7
 8013f70:	bd80      	pop	{r7, pc}

08013f72 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8013f72:	b590      	push	{r4, r7, lr}
 8013f74:	b089      	sub	sp, #36	; 0x24
 8013f76:	af00      	add	r7, sp, #0
 8013f78:	60f8      	str	r0, [r7, #12]
 8013f7a:	60b9      	str	r1, [r7, #8]
 8013f7c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8013f7e:	2302      	movs	r3, #2
 8013f80:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8013f82:	68bb      	ldr	r3, [r7, #8]
 8013f84:	2b01      	cmp	r3, #1
 8013f86:	f240 80d2 	bls.w	801412e <put_fat+0x1bc>
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	695b      	ldr	r3, [r3, #20]
 8013f8e:	68ba      	ldr	r2, [r7, #8]
 8013f90:	429a      	cmp	r2, r3
 8013f92:	f080 80cc 	bcs.w	801412e <put_fat+0x1bc>
		switch (fs->fs_type) {
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	781b      	ldrb	r3, [r3, #0]
 8013f9a:	2b03      	cmp	r3, #3
 8013f9c:	f000 8096 	beq.w	80140cc <put_fat+0x15a>
 8013fa0:	2b03      	cmp	r3, #3
 8013fa2:	f300 80cd 	bgt.w	8014140 <put_fat+0x1ce>
 8013fa6:	2b01      	cmp	r3, #1
 8013fa8:	d002      	beq.n	8013fb0 <put_fat+0x3e>
 8013faa:	2b02      	cmp	r3, #2
 8013fac:	d06e      	beq.n	801408c <put_fat+0x11a>
 8013fae:	e0c7      	b.n	8014140 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8013fb0:	68bb      	ldr	r3, [r7, #8]
 8013fb2:	61bb      	str	r3, [r7, #24]
 8013fb4:	69bb      	ldr	r3, [r7, #24]
 8013fb6:	085b      	lsrs	r3, r3, #1
 8013fb8:	69ba      	ldr	r2, [r7, #24]
 8013fba:	4413      	add	r3, r2
 8013fbc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	6a1a      	ldr	r2, [r3, #32]
 8013fc2:	69bb      	ldr	r3, [r7, #24]
 8013fc4:	0a5b      	lsrs	r3, r3, #9
 8013fc6:	4413      	add	r3, r2
 8013fc8:	4619      	mov	r1, r3
 8013fca:	68f8      	ldr	r0, [r7, #12]
 8013fcc:	f7ff fe6e 	bl	8013cac <move_window>
 8013fd0:	4603      	mov	r3, r0
 8013fd2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013fd4:	7ffb      	ldrb	r3, [r7, #31]
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	f040 80ab 	bne.w	8014132 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013fe2:	69bb      	ldr	r3, [r7, #24]
 8013fe4:	1c59      	adds	r1, r3, #1
 8013fe6:	61b9      	str	r1, [r7, #24]
 8013fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013fec:	4413      	add	r3, r2
 8013fee:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013ff0:	68bb      	ldr	r3, [r7, #8]
 8013ff2:	f003 0301 	and.w	r3, r3, #1
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d00d      	beq.n	8014016 <put_fat+0xa4>
 8013ffa:	697b      	ldr	r3, [r7, #20]
 8013ffc:	781b      	ldrb	r3, [r3, #0]
 8013ffe:	b25b      	sxtb	r3, r3
 8014000:	f003 030f 	and.w	r3, r3, #15
 8014004:	b25a      	sxtb	r2, r3
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	b2db      	uxtb	r3, r3
 801400a:	011b      	lsls	r3, r3, #4
 801400c:	b25b      	sxtb	r3, r3
 801400e:	4313      	orrs	r3, r2
 8014010:	b25b      	sxtb	r3, r3
 8014012:	b2db      	uxtb	r3, r3
 8014014:	e001      	b.n	801401a <put_fat+0xa8>
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	b2db      	uxtb	r3, r3
 801401a:	697a      	ldr	r2, [r7, #20]
 801401c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	2201      	movs	r2, #1
 8014022:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	6a1a      	ldr	r2, [r3, #32]
 8014028:	69bb      	ldr	r3, [r7, #24]
 801402a:	0a5b      	lsrs	r3, r3, #9
 801402c:	4413      	add	r3, r2
 801402e:	4619      	mov	r1, r3
 8014030:	68f8      	ldr	r0, [r7, #12]
 8014032:	f7ff fe3b 	bl	8013cac <move_window>
 8014036:	4603      	mov	r3, r0
 8014038:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801403a:	7ffb      	ldrb	r3, [r7, #31]
 801403c:	2b00      	cmp	r3, #0
 801403e:	d17a      	bne.n	8014136 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014046:	69bb      	ldr	r3, [r7, #24]
 8014048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801404c:	4413      	add	r3, r2
 801404e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8014050:	68bb      	ldr	r3, [r7, #8]
 8014052:	f003 0301 	and.w	r3, r3, #1
 8014056:	2b00      	cmp	r3, #0
 8014058:	d003      	beq.n	8014062 <put_fat+0xf0>
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	091b      	lsrs	r3, r3, #4
 801405e:	b2db      	uxtb	r3, r3
 8014060:	e00e      	b.n	8014080 <put_fat+0x10e>
 8014062:	697b      	ldr	r3, [r7, #20]
 8014064:	781b      	ldrb	r3, [r3, #0]
 8014066:	b25b      	sxtb	r3, r3
 8014068:	f023 030f 	bic.w	r3, r3, #15
 801406c:	b25a      	sxtb	r2, r3
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	0a1b      	lsrs	r3, r3, #8
 8014072:	b25b      	sxtb	r3, r3
 8014074:	f003 030f 	and.w	r3, r3, #15
 8014078:	b25b      	sxtb	r3, r3
 801407a:	4313      	orrs	r3, r2
 801407c:	b25b      	sxtb	r3, r3
 801407e:	b2db      	uxtb	r3, r3
 8014080:	697a      	ldr	r2, [r7, #20]
 8014082:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	2201      	movs	r2, #1
 8014088:	70da      	strb	r2, [r3, #3]
			break;
 801408a:	e059      	b.n	8014140 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	6a1a      	ldr	r2, [r3, #32]
 8014090:	68bb      	ldr	r3, [r7, #8]
 8014092:	0a1b      	lsrs	r3, r3, #8
 8014094:	4413      	add	r3, r2
 8014096:	4619      	mov	r1, r3
 8014098:	68f8      	ldr	r0, [r7, #12]
 801409a:	f7ff fe07 	bl	8013cac <move_window>
 801409e:	4603      	mov	r3, r0
 80140a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80140a2:	7ffb      	ldrb	r3, [r7, #31]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d148      	bne.n	801413a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80140ae:	68bb      	ldr	r3, [r7, #8]
 80140b0:	005b      	lsls	r3, r3, #1
 80140b2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80140b6:	4413      	add	r3, r2
 80140b8:	687a      	ldr	r2, [r7, #4]
 80140ba:	b292      	uxth	r2, r2
 80140bc:	4611      	mov	r1, r2
 80140be:	4618      	mov	r0, r3
 80140c0:	f7ff fb7f 	bl	80137c2 <st_word>
			fs->wflag = 1;
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	2201      	movs	r2, #1
 80140c8:	70da      	strb	r2, [r3, #3]
			break;
 80140ca:	e039      	b.n	8014140 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	6a1a      	ldr	r2, [r3, #32]
 80140d0:	68bb      	ldr	r3, [r7, #8]
 80140d2:	09db      	lsrs	r3, r3, #7
 80140d4:	4413      	add	r3, r2
 80140d6:	4619      	mov	r1, r3
 80140d8:	68f8      	ldr	r0, [r7, #12]
 80140da:	f7ff fde7 	bl	8013cac <move_window>
 80140de:	4603      	mov	r3, r0
 80140e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80140e2:	7ffb      	ldrb	r3, [r7, #31]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d12a      	bne.n	801413e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80140f4:	68bb      	ldr	r3, [r7, #8]
 80140f6:	009b      	lsls	r3, r3, #2
 80140f8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80140fc:	4413      	add	r3, r2
 80140fe:	4618      	mov	r0, r3
 8014100:	f7ff fb3c 	bl	801377c <ld_dword>
 8014104:	4603      	mov	r3, r0
 8014106:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801410a:	4323      	orrs	r3, r4
 801410c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014114:	68bb      	ldr	r3, [r7, #8]
 8014116:	009b      	lsls	r3, r3, #2
 8014118:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801411c:	4413      	add	r3, r2
 801411e:	6879      	ldr	r1, [r7, #4]
 8014120:	4618      	mov	r0, r3
 8014122:	f7ff fb69 	bl	80137f8 <st_dword>
			fs->wflag = 1;
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	2201      	movs	r2, #1
 801412a:	70da      	strb	r2, [r3, #3]
			break;
 801412c:	e008      	b.n	8014140 <put_fat+0x1ce>
		}
	}
 801412e:	bf00      	nop
 8014130:	e006      	b.n	8014140 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8014132:	bf00      	nop
 8014134:	e004      	b.n	8014140 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8014136:	bf00      	nop
 8014138:	e002      	b.n	8014140 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801413a:	bf00      	nop
 801413c:	e000      	b.n	8014140 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801413e:	bf00      	nop
	return res;
 8014140:	7ffb      	ldrb	r3, [r7, #31]
}
 8014142:	4618      	mov	r0, r3
 8014144:	3724      	adds	r7, #36	; 0x24
 8014146:	46bd      	mov	sp, r7
 8014148:	bd90      	pop	{r4, r7, pc}

0801414a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801414a:	b580      	push	{r7, lr}
 801414c:	b088      	sub	sp, #32
 801414e:	af00      	add	r7, sp, #0
 8014150:	60f8      	str	r0, [r7, #12]
 8014152:	60b9      	str	r1, [r7, #8]
 8014154:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8014156:	2300      	movs	r3, #0
 8014158:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8014160:	68bb      	ldr	r3, [r7, #8]
 8014162:	2b01      	cmp	r3, #1
 8014164:	d904      	bls.n	8014170 <remove_chain+0x26>
 8014166:	69bb      	ldr	r3, [r7, #24]
 8014168:	695b      	ldr	r3, [r3, #20]
 801416a:	68ba      	ldr	r2, [r7, #8]
 801416c:	429a      	cmp	r2, r3
 801416e:	d301      	bcc.n	8014174 <remove_chain+0x2a>
 8014170:	2302      	movs	r3, #2
 8014172:	e04b      	b.n	801420c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d00c      	beq.n	8014194 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801417a:	f04f 32ff 	mov.w	r2, #4294967295
 801417e:	6879      	ldr	r1, [r7, #4]
 8014180:	69b8      	ldr	r0, [r7, #24]
 8014182:	f7ff fef6 	bl	8013f72 <put_fat>
 8014186:	4603      	mov	r3, r0
 8014188:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801418a:	7ffb      	ldrb	r3, [r7, #31]
 801418c:	2b00      	cmp	r3, #0
 801418e:	d001      	beq.n	8014194 <remove_chain+0x4a>
 8014190:	7ffb      	ldrb	r3, [r7, #31]
 8014192:	e03b      	b.n	801420c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8014194:	68b9      	ldr	r1, [r7, #8]
 8014196:	68f8      	ldr	r0, [r7, #12]
 8014198:	f7ff fe43 	bl	8013e22 <get_fat>
 801419c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801419e:	697b      	ldr	r3, [r7, #20]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d031      	beq.n	8014208 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80141a4:	697b      	ldr	r3, [r7, #20]
 80141a6:	2b01      	cmp	r3, #1
 80141a8:	d101      	bne.n	80141ae <remove_chain+0x64>
 80141aa:	2302      	movs	r3, #2
 80141ac:	e02e      	b.n	801420c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80141ae:	697b      	ldr	r3, [r7, #20]
 80141b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141b4:	d101      	bne.n	80141ba <remove_chain+0x70>
 80141b6:	2301      	movs	r3, #1
 80141b8:	e028      	b.n	801420c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80141ba:	2200      	movs	r2, #0
 80141bc:	68b9      	ldr	r1, [r7, #8]
 80141be:	69b8      	ldr	r0, [r7, #24]
 80141c0:	f7ff fed7 	bl	8013f72 <put_fat>
 80141c4:	4603      	mov	r3, r0
 80141c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80141c8:	7ffb      	ldrb	r3, [r7, #31]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d001      	beq.n	80141d2 <remove_chain+0x88>
 80141ce:	7ffb      	ldrb	r3, [r7, #31]
 80141d0:	e01c      	b.n	801420c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80141d2:	69bb      	ldr	r3, [r7, #24]
 80141d4:	691a      	ldr	r2, [r3, #16]
 80141d6:	69bb      	ldr	r3, [r7, #24]
 80141d8:	695b      	ldr	r3, [r3, #20]
 80141da:	3b02      	subs	r3, #2
 80141dc:	429a      	cmp	r2, r3
 80141de:	d20b      	bcs.n	80141f8 <remove_chain+0xae>
			fs->free_clst++;
 80141e0:	69bb      	ldr	r3, [r7, #24]
 80141e2:	691b      	ldr	r3, [r3, #16]
 80141e4:	1c5a      	adds	r2, r3, #1
 80141e6:	69bb      	ldr	r3, [r7, #24]
 80141e8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80141ea:	69bb      	ldr	r3, [r7, #24]
 80141ec:	791b      	ldrb	r3, [r3, #4]
 80141ee:	f043 0301 	orr.w	r3, r3, #1
 80141f2:	b2da      	uxtb	r2, r3
 80141f4:	69bb      	ldr	r3, [r7, #24]
 80141f6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80141f8:	697b      	ldr	r3, [r7, #20]
 80141fa:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80141fc:	69bb      	ldr	r3, [r7, #24]
 80141fe:	695b      	ldr	r3, [r3, #20]
 8014200:	68ba      	ldr	r2, [r7, #8]
 8014202:	429a      	cmp	r2, r3
 8014204:	d3c6      	bcc.n	8014194 <remove_chain+0x4a>
 8014206:	e000      	b.n	801420a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8014208:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801420a:	2300      	movs	r3, #0
}
 801420c:	4618      	mov	r0, r3
 801420e:	3720      	adds	r7, #32
 8014210:	46bd      	mov	sp, r7
 8014212:	bd80      	pop	{r7, pc}

08014214 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8014214:	b580      	push	{r7, lr}
 8014216:	b088      	sub	sp, #32
 8014218:	af00      	add	r7, sp, #0
 801421a:	6078      	str	r0, [r7, #4]
 801421c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8014224:	683b      	ldr	r3, [r7, #0]
 8014226:	2b00      	cmp	r3, #0
 8014228:	d10d      	bne.n	8014246 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801422a:	693b      	ldr	r3, [r7, #16]
 801422c:	68db      	ldr	r3, [r3, #12]
 801422e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8014230:	69bb      	ldr	r3, [r7, #24]
 8014232:	2b00      	cmp	r3, #0
 8014234:	d004      	beq.n	8014240 <create_chain+0x2c>
 8014236:	693b      	ldr	r3, [r7, #16]
 8014238:	695b      	ldr	r3, [r3, #20]
 801423a:	69ba      	ldr	r2, [r7, #24]
 801423c:	429a      	cmp	r2, r3
 801423e:	d31b      	bcc.n	8014278 <create_chain+0x64>
 8014240:	2301      	movs	r3, #1
 8014242:	61bb      	str	r3, [r7, #24]
 8014244:	e018      	b.n	8014278 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8014246:	6839      	ldr	r1, [r7, #0]
 8014248:	6878      	ldr	r0, [r7, #4]
 801424a:	f7ff fdea 	bl	8013e22 <get_fat>
 801424e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	2b01      	cmp	r3, #1
 8014254:	d801      	bhi.n	801425a <create_chain+0x46>
 8014256:	2301      	movs	r3, #1
 8014258:	e070      	b.n	801433c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014260:	d101      	bne.n	8014266 <create_chain+0x52>
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	e06a      	b.n	801433c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8014266:	693b      	ldr	r3, [r7, #16]
 8014268:	695b      	ldr	r3, [r3, #20]
 801426a:	68fa      	ldr	r2, [r7, #12]
 801426c:	429a      	cmp	r2, r3
 801426e:	d201      	bcs.n	8014274 <create_chain+0x60>
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	e063      	b.n	801433c <create_chain+0x128>
		scl = clst;
 8014274:	683b      	ldr	r3, [r7, #0]
 8014276:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8014278:	69bb      	ldr	r3, [r7, #24]
 801427a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801427c:	69fb      	ldr	r3, [r7, #28]
 801427e:	3301      	adds	r3, #1
 8014280:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8014282:	693b      	ldr	r3, [r7, #16]
 8014284:	695b      	ldr	r3, [r3, #20]
 8014286:	69fa      	ldr	r2, [r7, #28]
 8014288:	429a      	cmp	r2, r3
 801428a:	d307      	bcc.n	801429c <create_chain+0x88>
				ncl = 2;
 801428c:	2302      	movs	r3, #2
 801428e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8014290:	69fa      	ldr	r2, [r7, #28]
 8014292:	69bb      	ldr	r3, [r7, #24]
 8014294:	429a      	cmp	r2, r3
 8014296:	d901      	bls.n	801429c <create_chain+0x88>
 8014298:	2300      	movs	r3, #0
 801429a:	e04f      	b.n	801433c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801429c:	69f9      	ldr	r1, [r7, #28]
 801429e:	6878      	ldr	r0, [r7, #4]
 80142a0:	f7ff fdbf 	bl	8013e22 <get_fat>
 80142a4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d00e      	beq.n	80142ca <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	2b01      	cmp	r3, #1
 80142b0:	d003      	beq.n	80142ba <create_chain+0xa6>
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142b8:	d101      	bne.n	80142be <create_chain+0xaa>
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	e03e      	b.n	801433c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80142be:	69fa      	ldr	r2, [r7, #28]
 80142c0:	69bb      	ldr	r3, [r7, #24]
 80142c2:	429a      	cmp	r2, r3
 80142c4:	d1da      	bne.n	801427c <create_chain+0x68>
 80142c6:	2300      	movs	r3, #0
 80142c8:	e038      	b.n	801433c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80142ca:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80142cc:	f04f 32ff 	mov.w	r2, #4294967295
 80142d0:	69f9      	ldr	r1, [r7, #28]
 80142d2:	6938      	ldr	r0, [r7, #16]
 80142d4:	f7ff fe4d 	bl	8013f72 <put_fat>
 80142d8:	4603      	mov	r3, r0
 80142da:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80142dc:	7dfb      	ldrb	r3, [r7, #23]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d109      	bne.n	80142f6 <create_chain+0xe2>
 80142e2:	683b      	ldr	r3, [r7, #0]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d006      	beq.n	80142f6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80142e8:	69fa      	ldr	r2, [r7, #28]
 80142ea:	6839      	ldr	r1, [r7, #0]
 80142ec:	6938      	ldr	r0, [r7, #16]
 80142ee:	f7ff fe40 	bl	8013f72 <put_fat>
 80142f2:	4603      	mov	r3, r0
 80142f4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80142f6:	7dfb      	ldrb	r3, [r7, #23]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d116      	bne.n	801432a <create_chain+0x116>
		fs->last_clst = ncl;
 80142fc:	693b      	ldr	r3, [r7, #16]
 80142fe:	69fa      	ldr	r2, [r7, #28]
 8014300:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8014302:	693b      	ldr	r3, [r7, #16]
 8014304:	691a      	ldr	r2, [r3, #16]
 8014306:	693b      	ldr	r3, [r7, #16]
 8014308:	695b      	ldr	r3, [r3, #20]
 801430a:	3b02      	subs	r3, #2
 801430c:	429a      	cmp	r2, r3
 801430e:	d804      	bhi.n	801431a <create_chain+0x106>
 8014310:	693b      	ldr	r3, [r7, #16]
 8014312:	691b      	ldr	r3, [r3, #16]
 8014314:	1e5a      	subs	r2, r3, #1
 8014316:	693b      	ldr	r3, [r7, #16]
 8014318:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 801431a:	693b      	ldr	r3, [r7, #16]
 801431c:	791b      	ldrb	r3, [r3, #4]
 801431e:	f043 0301 	orr.w	r3, r3, #1
 8014322:	b2da      	uxtb	r2, r3
 8014324:	693b      	ldr	r3, [r7, #16]
 8014326:	711a      	strb	r2, [r3, #4]
 8014328:	e007      	b.n	801433a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801432a:	7dfb      	ldrb	r3, [r7, #23]
 801432c:	2b01      	cmp	r3, #1
 801432e:	d102      	bne.n	8014336 <create_chain+0x122>
 8014330:	f04f 33ff 	mov.w	r3, #4294967295
 8014334:	e000      	b.n	8014338 <create_chain+0x124>
 8014336:	2301      	movs	r3, #1
 8014338:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801433a:	69fb      	ldr	r3, [r7, #28]
}
 801433c:	4618      	mov	r0, r3
 801433e:	3720      	adds	r7, #32
 8014340:	46bd      	mov	sp, r7
 8014342:	bd80      	pop	{r7, pc}

08014344 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8014344:	b480      	push	{r7}
 8014346:	b087      	sub	sp, #28
 8014348:	af00      	add	r7, sp, #0
 801434a:	6078      	str	r0, [r7, #4]
 801434c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014358:	3304      	adds	r3, #4
 801435a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801435c:	683b      	ldr	r3, [r7, #0]
 801435e:	0a5b      	lsrs	r3, r3, #9
 8014360:	68fa      	ldr	r2, [r7, #12]
 8014362:	8952      	ldrh	r2, [r2, #10]
 8014364:	fbb3 f3f2 	udiv	r3, r3, r2
 8014368:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801436a:	693b      	ldr	r3, [r7, #16]
 801436c:	1d1a      	adds	r2, r3, #4
 801436e:	613a      	str	r2, [r7, #16]
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8014374:	68bb      	ldr	r3, [r7, #8]
 8014376:	2b00      	cmp	r3, #0
 8014378:	d101      	bne.n	801437e <clmt_clust+0x3a>
 801437a:	2300      	movs	r3, #0
 801437c:	e010      	b.n	80143a0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801437e:	697a      	ldr	r2, [r7, #20]
 8014380:	68bb      	ldr	r3, [r7, #8]
 8014382:	429a      	cmp	r2, r3
 8014384:	d307      	bcc.n	8014396 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8014386:	697a      	ldr	r2, [r7, #20]
 8014388:	68bb      	ldr	r3, [r7, #8]
 801438a:	1ad3      	subs	r3, r2, r3
 801438c:	617b      	str	r3, [r7, #20]
 801438e:	693b      	ldr	r3, [r7, #16]
 8014390:	3304      	adds	r3, #4
 8014392:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8014394:	e7e9      	b.n	801436a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8014396:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8014398:	693b      	ldr	r3, [r7, #16]
 801439a:	681a      	ldr	r2, [r3, #0]
 801439c:	697b      	ldr	r3, [r7, #20]
 801439e:	4413      	add	r3, r2
}
 80143a0:	4618      	mov	r0, r3
 80143a2:	371c      	adds	r7, #28
 80143a4:	46bd      	mov	sp, r7
 80143a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143aa:	4770      	bx	lr

080143ac <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80143ac:	b580      	push	{r7, lr}
 80143ae:	b086      	sub	sp, #24
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	6078      	str	r0, [r7, #4]
 80143b4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80143bc:	683b      	ldr	r3, [r7, #0]
 80143be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80143c2:	d204      	bcs.n	80143ce <dir_sdi+0x22>
 80143c4:	683b      	ldr	r3, [r7, #0]
 80143c6:	f003 031f 	and.w	r3, r3, #31
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d001      	beq.n	80143d2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80143ce:	2302      	movs	r3, #2
 80143d0:	e063      	b.n	801449a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	683a      	ldr	r2, [r7, #0]
 80143d6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	689b      	ldr	r3, [r3, #8]
 80143dc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80143de:	697b      	ldr	r3, [r7, #20]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d106      	bne.n	80143f2 <dir_sdi+0x46>
 80143e4:	693b      	ldr	r3, [r7, #16]
 80143e6:	781b      	ldrb	r3, [r3, #0]
 80143e8:	2b02      	cmp	r3, #2
 80143ea:	d902      	bls.n	80143f2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80143ec:	693b      	ldr	r3, [r7, #16]
 80143ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143f0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80143f2:	697b      	ldr	r3, [r7, #20]
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d10c      	bne.n	8014412 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80143f8:	683b      	ldr	r3, [r7, #0]
 80143fa:	095b      	lsrs	r3, r3, #5
 80143fc:	693a      	ldr	r2, [r7, #16]
 80143fe:	8912      	ldrh	r2, [r2, #8]
 8014400:	4293      	cmp	r3, r2
 8014402:	d301      	bcc.n	8014408 <dir_sdi+0x5c>
 8014404:	2302      	movs	r3, #2
 8014406:	e048      	b.n	801449a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8014408:	693b      	ldr	r3, [r7, #16]
 801440a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	61da      	str	r2, [r3, #28]
 8014410:	e029      	b.n	8014466 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8014412:	693b      	ldr	r3, [r7, #16]
 8014414:	895b      	ldrh	r3, [r3, #10]
 8014416:	025b      	lsls	r3, r3, #9
 8014418:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801441a:	e019      	b.n	8014450 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	6979      	ldr	r1, [r7, #20]
 8014420:	4618      	mov	r0, r3
 8014422:	f7ff fcfe 	bl	8013e22 <get_fat>
 8014426:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014428:	697b      	ldr	r3, [r7, #20]
 801442a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801442e:	d101      	bne.n	8014434 <dir_sdi+0x88>
 8014430:	2301      	movs	r3, #1
 8014432:	e032      	b.n	801449a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8014434:	697b      	ldr	r3, [r7, #20]
 8014436:	2b01      	cmp	r3, #1
 8014438:	d904      	bls.n	8014444 <dir_sdi+0x98>
 801443a:	693b      	ldr	r3, [r7, #16]
 801443c:	695b      	ldr	r3, [r3, #20]
 801443e:	697a      	ldr	r2, [r7, #20]
 8014440:	429a      	cmp	r2, r3
 8014442:	d301      	bcc.n	8014448 <dir_sdi+0x9c>
 8014444:	2302      	movs	r3, #2
 8014446:	e028      	b.n	801449a <dir_sdi+0xee>
			ofs -= csz;
 8014448:	683a      	ldr	r2, [r7, #0]
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	1ad3      	subs	r3, r2, r3
 801444e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8014450:	683a      	ldr	r2, [r7, #0]
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	429a      	cmp	r2, r3
 8014456:	d2e1      	bcs.n	801441c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8014458:	6979      	ldr	r1, [r7, #20]
 801445a:	6938      	ldr	r0, [r7, #16]
 801445c:	f7ff fcc2 	bl	8013de4 <clust2sect>
 8014460:	4602      	mov	r2, r0
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	697a      	ldr	r2, [r7, #20]
 801446a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	69db      	ldr	r3, [r3, #28]
 8014470:	2b00      	cmp	r3, #0
 8014472:	d101      	bne.n	8014478 <dir_sdi+0xcc>
 8014474:	2302      	movs	r3, #2
 8014476:	e010      	b.n	801449a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	69da      	ldr	r2, [r3, #28]
 801447c:	683b      	ldr	r3, [r7, #0]
 801447e:	0a5b      	lsrs	r3, r3, #9
 8014480:	441a      	add	r2, r3
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8014486:	693b      	ldr	r3, [r7, #16]
 8014488:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801448c:	683b      	ldr	r3, [r7, #0]
 801448e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014492:	441a      	add	r2, r3
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8014498:	2300      	movs	r3, #0
}
 801449a:	4618      	mov	r0, r3
 801449c:	3718      	adds	r7, #24
 801449e:	46bd      	mov	sp, r7
 80144a0:	bd80      	pop	{r7, pc}

080144a2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80144a2:	b580      	push	{r7, lr}
 80144a4:	b086      	sub	sp, #24
 80144a6:	af00      	add	r7, sp, #0
 80144a8:	6078      	str	r0, [r7, #4]
 80144aa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	695b      	ldr	r3, [r3, #20]
 80144b6:	3320      	adds	r3, #32
 80144b8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	69db      	ldr	r3, [r3, #28]
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d003      	beq.n	80144ca <dir_next+0x28>
 80144c2:	68bb      	ldr	r3, [r7, #8]
 80144c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80144c8:	d301      	bcc.n	80144ce <dir_next+0x2c>
 80144ca:	2304      	movs	r3, #4
 80144cc:	e0aa      	b.n	8014624 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80144ce:	68bb      	ldr	r3, [r7, #8]
 80144d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	f040 8098 	bne.w	801460a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	69db      	ldr	r3, [r3, #28]
 80144de:	1c5a      	adds	r2, r3, #1
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	699b      	ldr	r3, [r3, #24]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d10b      	bne.n	8014504 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80144ec:	68bb      	ldr	r3, [r7, #8]
 80144ee:	095b      	lsrs	r3, r3, #5
 80144f0:	68fa      	ldr	r2, [r7, #12]
 80144f2:	8912      	ldrh	r2, [r2, #8]
 80144f4:	4293      	cmp	r3, r2
 80144f6:	f0c0 8088 	bcc.w	801460a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	2200      	movs	r2, #0
 80144fe:	61da      	str	r2, [r3, #28]
 8014500:	2304      	movs	r3, #4
 8014502:	e08f      	b.n	8014624 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8014504:	68bb      	ldr	r3, [r7, #8]
 8014506:	0a5b      	lsrs	r3, r3, #9
 8014508:	68fa      	ldr	r2, [r7, #12]
 801450a:	8952      	ldrh	r2, [r2, #10]
 801450c:	3a01      	subs	r2, #1
 801450e:	4013      	ands	r3, r2
 8014510:	2b00      	cmp	r3, #0
 8014512:	d17a      	bne.n	801460a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8014514:	687a      	ldr	r2, [r7, #4]
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	699b      	ldr	r3, [r3, #24]
 801451a:	4619      	mov	r1, r3
 801451c:	4610      	mov	r0, r2
 801451e:	f7ff fc80 	bl	8013e22 <get_fat>
 8014522:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8014524:	697b      	ldr	r3, [r7, #20]
 8014526:	2b01      	cmp	r3, #1
 8014528:	d801      	bhi.n	801452e <dir_next+0x8c>
 801452a:	2302      	movs	r3, #2
 801452c:	e07a      	b.n	8014624 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801452e:	697b      	ldr	r3, [r7, #20]
 8014530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014534:	d101      	bne.n	801453a <dir_next+0x98>
 8014536:	2301      	movs	r3, #1
 8014538:	e074      	b.n	8014624 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	695b      	ldr	r3, [r3, #20]
 801453e:	697a      	ldr	r2, [r7, #20]
 8014540:	429a      	cmp	r2, r3
 8014542:	d358      	bcc.n	80145f6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8014544:	683b      	ldr	r3, [r7, #0]
 8014546:	2b00      	cmp	r3, #0
 8014548:	d104      	bne.n	8014554 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	2200      	movs	r2, #0
 801454e:	61da      	str	r2, [r3, #28]
 8014550:	2304      	movs	r3, #4
 8014552:	e067      	b.n	8014624 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8014554:	687a      	ldr	r2, [r7, #4]
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	699b      	ldr	r3, [r3, #24]
 801455a:	4619      	mov	r1, r3
 801455c:	4610      	mov	r0, r2
 801455e:	f7ff fe59 	bl	8014214 <create_chain>
 8014562:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8014564:	697b      	ldr	r3, [r7, #20]
 8014566:	2b00      	cmp	r3, #0
 8014568:	d101      	bne.n	801456e <dir_next+0xcc>
 801456a:	2307      	movs	r3, #7
 801456c:	e05a      	b.n	8014624 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801456e:	697b      	ldr	r3, [r7, #20]
 8014570:	2b01      	cmp	r3, #1
 8014572:	d101      	bne.n	8014578 <dir_next+0xd6>
 8014574:	2302      	movs	r3, #2
 8014576:	e055      	b.n	8014624 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014578:	697b      	ldr	r3, [r7, #20]
 801457a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801457e:	d101      	bne.n	8014584 <dir_next+0xe2>
 8014580:	2301      	movs	r3, #1
 8014582:	e04f      	b.n	8014624 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8014584:	68f8      	ldr	r0, [r7, #12]
 8014586:	f7ff fb4d 	bl	8013c24 <sync_window>
 801458a:	4603      	mov	r3, r0
 801458c:	2b00      	cmp	r3, #0
 801458e:	d001      	beq.n	8014594 <dir_next+0xf2>
 8014590:	2301      	movs	r3, #1
 8014592:	e047      	b.n	8014624 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	3330      	adds	r3, #48	; 0x30
 8014598:	f44f 7200 	mov.w	r2, #512	; 0x200
 801459c:	2100      	movs	r1, #0
 801459e:	4618      	mov	r0, r3
 80145a0:	f7ff f977 	bl	8013892 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80145a4:	2300      	movs	r3, #0
 80145a6:	613b      	str	r3, [r7, #16]
 80145a8:	6979      	ldr	r1, [r7, #20]
 80145aa:	68f8      	ldr	r0, [r7, #12]
 80145ac:	f7ff fc1a 	bl	8013de4 <clust2sect>
 80145b0:	4602      	mov	r2, r0
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80145b6:	e012      	b.n	80145de <dir_next+0x13c>
						fs->wflag = 1;
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	2201      	movs	r2, #1
 80145bc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80145be:	68f8      	ldr	r0, [r7, #12]
 80145c0:	f7ff fb30 	bl	8013c24 <sync_window>
 80145c4:	4603      	mov	r3, r0
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d001      	beq.n	80145ce <dir_next+0x12c>
 80145ca:	2301      	movs	r3, #1
 80145cc:	e02a      	b.n	8014624 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80145ce:	693b      	ldr	r3, [r7, #16]
 80145d0:	3301      	adds	r3, #1
 80145d2:	613b      	str	r3, [r7, #16]
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145d8:	1c5a      	adds	r2, r3, #1
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	895b      	ldrh	r3, [r3, #10]
 80145e2:	461a      	mov	r2, r3
 80145e4:	693b      	ldr	r3, [r7, #16]
 80145e6:	4293      	cmp	r3, r2
 80145e8:	d3e6      	bcc.n	80145b8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145ee:	693b      	ldr	r3, [r7, #16]
 80145f0:	1ad2      	subs	r2, r2, r3
 80145f2:	68fb      	ldr	r3, [r7, #12]
 80145f4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	697a      	ldr	r2, [r7, #20]
 80145fa:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80145fc:	6979      	ldr	r1, [r7, #20]
 80145fe:	68f8      	ldr	r0, [r7, #12]
 8014600:	f7ff fbf0 	bl	8013de4 <clust2sect>
 8014604:	4602      	mov	r2, r0
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	68ba      	ldr	r2, [r7, #8]
 801460e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014616:	68bb      	ldr	r3, [r7, #8]
 8014618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801461c:	441a      	add	r2, r3
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8014622:	2300      	movs	r3, #0
}
 8014624:	4618      	mov	r0, r3
 8014626:	3718      	adds	r7, #24
 8014628:	46bd      	mov	sp, r7
 801462a:	bd80      	pop	{r7, pc}

0801462c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801462c:	b580      	push	{r7, lr}
 801462e:	b086      	sub	sp, #24
 8014630:	af00      	add	r7, sp, #0
 8014632:	6078      	str	r0, [r7, #4]
 8014634:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	681b      	ldr	r3, [r3, #0]
 801463a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801463c:	2100      	movs	r1, #0
 801463e:	6878      	ldr	r0, [r7, #4]
 8014640:	f7ff feb4 	bl	80143ac <dir_sdi>
 8014644:	4603      	mov	r3, r0
 8014646:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014648:	7dfb      	ldrb	r3, [r7, #23]
 801464a:	2b00      	cmp	r3, #0
 801464c:	d12b      	bne.n	80146a6 <dir_alloc+0x7a>
		n = 0;
 801464e:	2300      	movs	r3, #0
 8014650:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	69db      	ldr	r3, [r3, #28]
 8014656:	4619      	mov	r1, r3
 8014658:	68f8      	ldr	r0, [r7, #12]
 801465a:	f7ff fb27 	bl	8013cac <move_window>
 801465e:	4603      	mov	r3, r0
 8014660:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8014662:	7dfb      	ldrb	r3, [r7, #23]
 8014664:	2b00      	cmp	r3, #0
 8014666:	d11d      	bne.n	80146a4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	6a1b      	ldr	r3, [r3, #32]
 801466c:	781b      	ldrb	r3, [r3, #0]
 801466e:	2be5      	cmp	r3, #229	; 0xe5
 8014670:	d004      	beq.n	801467c <dir_alloc+0x50>
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	6a1b      	ldr	r3, [r3, #32]
 8014676:	781b      	ldrb	r3, [r3, #0]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d107      	bne.n	801468c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801467c:	693b      	ldr	r3, [r7, #16]
 801467e:	3301      	adds	r3, #1
 8014680:	613b      	str	r3, [r7, #16]
 8014682:	693a      	ldr	r2, [r7, #16]
 8014684:	683b      	ldr	r3, [r7, #0]
 8014686:	429a      	cmp	r2, r3
 8014688:	d102      	bne.n	8014690 <dir_alloc+0x64>
 801468a:	e00c      	b.n	80146a6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801468c:	2300      	movs	r3, #0
 801468e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8014690:	2101      	movs	r1, #1
 8014692:	6878      	ldr	r0, [r7, #4]
 8014694:	f7ff ff05 	bl	80144a2 <dir_next>
 8014698:	4603      	mov	r3, r0
 801469a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801469c:	7dfb      	ldrb	r3, [r7, #23]
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d0d7      	beq.n	8014652 <dir_alloc+0x26>
 80146a2:	e000      	b.n	80146a6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80146a4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80146a6:	7dfb      	ldrb	r3, [r7, #23]
 80146a8:	2b04      	cmp	r3, #4
 80146aa:	d101      	bne.n	80146b0 <dir_alloc+0x84>
 80146ac:	2307      	movs	r3, #7
 80146ae:	75fb      	strb	r3, [r7, #23]
	return res;
 80146b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80146b2:	4618      	mov	r0, r3
 80146b4:	3718      	adds	r7, #24
 80146b6:	46bd      	mov	sp, r7
 80146b8:	bd80      	pop	{r7, pc}

080146ba <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80146ba:	b580      	push	{r7, lr}
 80146bc:	b084      	sub	sp, #16
 80146be:	af00      	add	r7, sp, #0
 80146c0:	6078      	str	r0, [r7, #4]
 80146c2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80146c4:	683b      	ldr	r3, [r7, #0]
 80146c6:	331a      	adds	r3, #26
 80146c8:	4618      	mov	r0, r3
 80146ca:	f7ff f83f 	bl	801374c <ld_word>
 80146ce:	4603      	mov	r3, r0
 80146d0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	781b      	ldrb	r3, [r3, #0]
 80146d6:	2b03      	cmp	r3, #3
 80146d8:	d109      	bne.n	80146ee <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80146da:	683b      	ldr	r3, [r7, #0]
 80146dc:	3314      	adds	r3, #20
 80146de:	4618      	mov	r0, r3
 80146e0:	f7ff f834 	bl	801374c <ld_word>
 80146e4:	4603      	mov	r3, r0
 80146e6:	041b      	lsls	r3, r3, #16
 80146e8:	68fa      	ldr	r2, [r7, #12]
 80146ea:	4313      	orrs	r3, r2
 80146ec:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80146ee:	68fb      	ldr	r3, [r7, #12]
}
 80146f0:	4618      	mov	r0, r3
 80146f2:	3710      	adds	r7, #16
 80146f4:	46bd      	mov	sp, r7
 80146f6:	bd80      	pop	{r7, pc}

080146f8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80146f8:	b580      	push	{r7, lr}
 80146fa:	b084      	sub	sp, #16
 80146fc:	af00      	add	r7, sp, #0
 80146fe:	60f8      	str	r0, [r7, #12]
 8014700:	60b9      	str	r1, [r7, #8]
 8014702:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8014704:	68bb      	ldr	r3, [r7, #8]
 8014706:	331a      	adds	r3, #26
 8014708:	687a      	ldr	r2, [r7, #4]
 801470a:	b292      	uxth	r2, r2
 801470c:	4611      	mov	r1, r2
 801470e:	4618      	mov	r0, r3
 8014710:	f7ff f857 	bl	80137c2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	781b      	ldrb	r3, [r3, #0]
 8014718:	2b03      	cmp	r3, #3
 801471a:	d109      	bne.n	8014730 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801471c:	68bb      	ldr	r3, [r7, #8]
 801471e:	f103 0214 	add.w	r2, r3, #20
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	0c1b      	lsrs	r3, r3, #16
 8014726:	b29b      	uxth	r3, r3
 8014728:	4619      	mov	r1, r3
 801472a:	4610      	mov	r0, r2
 801472c:	f7ff f849 	bl	80137c2 <st_word>
	}
}
 8014730:	bf00      	nop
 8014732:	3710      	adds	r7, #16
 8014734:	46bd      	mov	sp, r7
 8014736:	bd80      	pop	{r7, pc}

08014738 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8014738:	b580      	push	{r7, lr}
 801473a:	b086      	sub	sp, #24
 801473c:	af00      	add	r7, sp, #0
 801473e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8014746:	2100      	movs	r1, #0
 8014748:	6878      	ldr	r0, [r7, #4]
 801474a:	f7ff fe2f 	bl	80143ac <dir_sdi>
 801474e:	4603      	mov	r3, r0
 8014750:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8014752:	7dfb      	ldrb	r3, [r7, #23]
 8014754:	2b00      	cmp	r3, #0
 8014756:	d001      	beq.n	801475c <dir_find+0x24>
 8014758:	7dfb      	ldrb	r3, [r7, #23]
 801475a:	e03e      	b.n	80147da <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	69db      	ldr	r3, [r3, #28]
 8014760:	4619      	mov	r1, r3
 8014762:	6938      	ldr	r0, [r7, #16]
 8014764:	f7ff faa2 	bl	8013cac <move_window>
 8014768:	4603      	mov	r3, r0
 801476a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801476c:	7dfb      	ldrb	r3, [r7, #23]
 801476e:	2b00      	cmp	r3, #0
 8014770:	d12f      	bne.n	80147d2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	6a1b      	ldr	r3, [r3, #32]
 8014776:	781b      	ldrb	r3, [r3, #0]
 8014778:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801477a:	7bfb      	ldrb	r3, [r7, #15]
 801477c:	2b00      	cmp	r3, #0
 801477e:	d102      	bne.n	8014786 <dir_find+0x4e>
 8014780:	2304      	movs	r3, #4
 8014782:	75fb      	strb	r3, [r7, #23]
 8014784:	e028      	b.n	80147d8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	6a1b      	ldr	r3, [r3, #32]
 801478a:	330b      	adds	r3, #11
 801478c:	781b      	ldrb	r3, [r3, #0]
 801478e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014792:	b2da      	uxtb	r2, r3
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	6a1b      	ldr	r3, [r3, #32]
 801479c:	330b      	adds	r3, #11
 801479e:	781b      	ldrb	r3, [r3, #0]
 80147a0:	f003 0308 	and.w	r3, r3, #8
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d10a      	bne.n	80147be <dir_find+0x86>
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	6a18      	ldr	r0, [r3, #32]
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	3324      	adds	r3, #36	; 0x24
 80147b0:	220b      	movs	r2, #11
 80147b2:	4619      	mov	r1, r3
 80147b4:	f7ff f888 	bl	80138c8 <mem_cmp>
 80147b8:	4603      	mov	r3, r0
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d00b      	beq.n	80147d6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80147be:	2100      	movs	r1, #0
 80147c0:	6878      	ldr	r0, [r7, #4]
 80147c2:	f7ff fe6e 	bl	80144a2 <dir_next>
 80147c6:	4603      	mov	r3, r0
 80147c8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80147ca:	7dfb      	ldrb	r3, [r7, #23]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d0c5      	beq.n	801475c <dir_find+0x24>
 80147d0:	e002      	b.n	80147d8 <dir_find+0xa0>
		if (res != FR_OK) break;
 80147d2:	bf00      	nop
 80147d4:	e000      	b.n	80147d8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80147d6:	bf00      	nop

	return res;
 80147d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80147da:	4618      	mov	r0, r3
 80147dc:	3718      	adds	r7, #24
 80147de:	46bd      	mov	sp, r7
 80147e0:	bd80      	pop	{r7, pc}

080147e2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80147e2:	b580      	push	{r7, lr}
 80147e4:	b084      	sub	sp, #16
 80147e6:	af00      	add	r7, sp, #0
 80147e8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80147f0:	2101      	movs	r1, #1
 80147f2:	6878      	ldr	r0, [r7, #4]
 80147f4:	f7ff ff1a 	bl	801462c <dir_alloc>
 80147f8:	4603      	mov	r3, r0
 80147fa:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80147fc:	7bfb      	ldrb	r3, [r7, #15]
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d11c      	bne.n	801483c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	69db      	ldr	r3, [r3, #28]
 8014806:	4619      	mov	r1, r3
 8014808:	68b8      	ldr	r0, [r7, #8]
 801480a:	f7ff fa4f 	bl	8013cac <move_window>
 801480e:	4603      	mov	r3, r0
 8014810:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014812:	7bfb      	ldrb	r3, [r7, #15]
 8014814:	2b00      	cmp	r3, #0
 8014816:	d111      	bne.n	801483c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	6a1b      	ldr	r3, [r3, #32]
 801481c:	2220      	movs	r2, #32
 801481e:	2100      	movs	r1, #0
 8014820:	4618      	mov	r0, r3
 8014822:	f7ff f836 	bl	8013892 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	6a18      	ldr	r0, [r3, #32]
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	3324      	adds	r3, #36	; 0x24
 801482e:	220b      	movs	r2, #11
 8014830:	4619      	mov	r1, r3
 8014832:	f7ff f80d 	bl	8013850 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8014836:	68bb      	ldr	r3, [r7, #8]
 8014838:	2201      	movs	r2, #1
 801483a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801483c:	7bfb      	ldrb	r3, [r7, #15]
}
 801483e:	4618      	mov	r0, r3
 8014840:	3710      	adds	r7, #16
 8014842:	46bd      	mov	sp, r7
 8014844:	bd80      	pop	{r7, pc}
	...

08014848 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8014848:	b580      	push	{r7, lr}
 801484a:	b088      	sub	sp, #32
 801484c:	af00      	add	r7, sp, #0
 801484e:	6078      	str	r0, [r7, #4]
 8014850:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8014852:	683b      	ldr	r3, [r7, #0]
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	60fb      	str	r3, [r7, #12]
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	3324      	adds	r3, #36	; 0x24
 801485c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801485e:	220b      	movs	r2, #11
 8014860:	2120      	movs	r1, #32
 8014862:	68b8      	ldr	r0, [r7, #8]
 8014864:	f7ff f815 	bl	8013892 <mem_set>
	si = i = 0; ni = 8;
 8014868:	2300      	movs	r3, #0
 801486a:	613b      	str	r3, [r7, #16]
 801486c:	693b      	ldr	r3, [r7, #16]
 801486e:	61fb      	str	r3, [r7, #28]
 8014870:	2308      	movs	r3, #8
 8014872:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8014874:	69fb      	ldr	r3, [r7, #28]
 8014876:	1c5a      	adds	r2, r3, #1
 8014878:	61fa      	str	r2, [r7, #28]
 801487a:	68fa      	ldr	r2, [r7, #12]
 801487c:	4413      	add	r3, r2
 801487e:	781b      	ldrb	r3, [r3, #0]
 8014880:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8014882:	7efb      	ldrb	r3, [r7, #27]
 8014884:	2b20      	cmp	r3, #32
 8014886:	d94e      	bls.n	8014926 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8014888:	7efb      	ldrb	r3, [r7, #27]
 801488a:	2b2f      	cmp	r3, #47	; 0x2f
 801488c:	d006      	beq.n	801489c <create_name+0x54>
 801488e:	7efb      	ldrb	r3, [r7, #27]
 8014890:	2b5c      	cmp	r3, #92	; 0x5c
 8014892:	d110      	bne.n	80148b6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8014894:	e002      	b.n	801489c <create_name+0x54>
 8014896:	69fb      	ldr	r3, [r7, #28]
 8014898:	3301      	adds	r3, #1
 801489a:	61fb      	str	r3, [r7, #28]
 801489c:	68fa      	ldr	r2, [r7, #12]
 801489e:	69fb      	ldr	r3, [r7, #28]
 80148a0:	4413      	add	r3, r2
 80148a2:	781b      	ldrb	r3, [r3, #0]
 80148a4:	2b2f      	cmp	r3, #47	; 0x2f
 80148a6:	d0f6      	beq.n	8014896 <create_name+0x4e>
 80148a8:	68fa      	ldr	r2, [r7, #12]
 80148aa:	69fb      	ldr	r3, [r7, #28]
 80148ac:	4413      	add	r3, r2
 80148ae:	781b      	ldrb	r3, [r3, #0]
 80148b0:	2b5c      	cmp	r3, #92	; 0x5c
 80148b2:	d0f0      	beq.n	8014896 <create_name+0x4e>
			break;
 80148b4:	e038      	b.n	8014928 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80148b6:	7efb      	ldrb	r3, [r7, #27]
 80148b8:	2b2e      	cmp	r3, #46	; 0x2e
 80148ba:	d003      	beq.n	80148c4 <create_name+0x7c>
 80148bc:	693a      	ldr	r2, [r7, #16]
 80148be:	697b      	ldr	r3, [r7, #20]
 80148c0:	429a      	cmp	r2, r3
 80148c2:	d30c      	bcc.n	80148de <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80148c4:	697b      	ldr	r3, [r7, #20]
 80148c6:	2b0b      	cmp	r3, #11
 80148c8:	d002      	beq.n	80148d0 <create_name+0x88>
 80148ca:	7efb      	ldrb	r3, [r7, #27]
 80148cc:	2b2e      	cmp	r3, #46	; 0x2e
 80148ce:	d001      	beq.n	80148d4 <create_name+0x8c>
 80148d0:	2306      	movs	r3, #6
 80148d2:	e044      	b.n	801495e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80148d4:	2308      	movs	r3, #8
 80148d6:	613b      	str	r3, [r7, #16]
 80148d8:	230b      	movs	r3, #11
 80148da:	617b      	str	r3, [r7, #20]
			continue;
 80148dc:	e022      	b.n	8014924 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80148de:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	da04      	bge.n	80148f0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80148e6:	7efb      	ldrb	r3, [r7, #27]
 80148e8:	3b80      	subs	r3, #128	; 0x80
 80148ea:	4a1f      	ldr	r2, [pc, #124]	; (8014968 <create_name+0x120>)
 80148ec:	5cd3      	ldrb	r3, [r2, r3]
 80148ee:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80148f0:	7efb      	ldrb	r3, [r7, #27]
 80148f2:	4619      	mov	r1, r3
 80148f4:	481d      	ldr	r0, [pc, #116]	; (801496c <create_name+0x124>)
 80148f6:	f7ff f80e 	bl	8013916 <chk_chr>
 80148fa:	4603      	mov	r3, r0
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d001      	beq.n	8014904 <create_name+0xbc>
 8014900:	2306      	movs	r3, #6
 8014902:	e02c      	b.n	801495e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8014904:	7efb      	ldrb	r3, [r7, #27]
 8014906:	2b60      	cmp	r3, #96	; 0x60
 8014908:	d905      	bls.n	8014916 <create_name+0xce>
 801490a:	7efb      	ldrb	r3, [r7, #27]
 801490c:	2b7a      	cmp	r3, #122	; 0x7a
 801490e:	d802      	bhi.n	8014916 <create_name+0xce>
 8014910:	7efb      	ldrb	r3, [r7, #27]
 8014912:	3b20      	subs	r3, #32
 8014914:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8014916:	693b      	ldr	r3, [r7, #16]
 8014918:	1c5a      	adds	r2, r3, #1
 801491a:	613a      	str	r2, [r7, #16]
 801491c:	68ba      	ldr	r2, [r7, #8]
 801491e:	4413      	add	r3, r2
 8014920:	7efa      	ldrb	r2, [r7, #27]
 8014922:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8014924:	e7a6      	b.n	8014874 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8014926:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8014928:	68fa      	ldr	r2, [r7, #12]
 801492a:	69fb      	ldr	r3, [r7, #28]
 801492c:	441a      	add	r2, r3
 801492e:	683b      	ldr	r3, [r7, #0]
 8014930:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8014932:	693b      	ldr	r3, [r7, #16]
 8014934:	2b00      	cmp	r3, #0
 8014936:	d101      	bne.n	801493c <create_name+0xf4>
 8014938:	2306      	movs	r3, #6
 801493a:	e010      	b.n	801495e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801493c:	68bb      	ldr	r3, [r7, #8]
 801493e:	781b      	ldrb	r3, [r3, #0]
 8014940:	2be5      	cmp	r3, #229	; 0xe5
 8014942:	d102      	bne.n	801494a <create_name+0x102>
 8014944:	68bb      	ldr	r3, [r7, #8]
 8014946:	2205      	movs	r2, #5
 8014948:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801494a:	7efb      	ldrb	r3, [r7, #27]
 801494c:	2b20      	cmp	r3, #32
 801494e:	d801      	bhi.n	8014954 <create_name+0x10c>
 8014950:	2204      	movs	r2, #4
 8014952:	e000      	b.n	8014956 <create_name+0x10e>
 8014954:	2200      	movs	r2, #0
 8014956:	68bb      	ldr	r3, [r7, #8]
 8014958:	330b      	adds	r3, #11
 801495a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801495c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801495e:	4618      	mov	r0, r3
 8014960:	3720      	adds	r7, #32
 8014962:	46bd      	mov	sp, r7
 8014964:	bd80      	pop	{r7, pc}
 8014966:	bf00      	nop
 8014968:	0801c4bc 	.word	0x0801c4bc
 801496c:	0801c398 	.word	0x0801c398

08014970 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8014970:	b580      	push	{r7, lr}
 8014972:	b086      	sub	sp, #24
 8014974:	af00      	add	r7, sp, #0
 8014976:	6078      	str	r0, [r7, #4]
 8014978:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801497e:	693b      	ldr	r3, [r7, #16]
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8014984:	e002      	b.n	801498c <follow_path+0x1c>
 8014986:	683b      	ldr	r3, [r7, #0]
 8014988:	3301      	adds	r3, #1
 801498a:	603b      	str	r3, [r7, #0]
 801498c:	683b      	ldr	r3, [r7, #0]
 801498e:	781b      	ldrb	r3, [r3, #0]
 8014990:	2b2f      	cmp	r3, #47	; 0x2f
 8014992:	d0f8      	beq.n	8014986 <follow_path+0x16>
 8014994:	683b      	ldr	r3, [r7, #0]
 8014996:	781b      	ldrb	r3, [r3, #0]
 8014998:	2b5c      	cmp	r3, #92	; 0x5c
 801499a:	d0f4      	beq.n	8014986 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801499c:	693b      	ldr	r3, [r7, #16]
 801499e:	2200      	movs	r2, #0
 80149a0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80149a2:	683b      	ldr	r3, [r7, #0]
 80149a4:	781b      	ldrb	r3, [r3, #0]
 80149a6:	2b1f      	cmp	r3, #31
 80149a8:	d80a      	bhi.n	80149c0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	2280      	movs	r2, #128	; 0x80
 80149ae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80149b2:	2100      	movs	r1, #0
 80149b4:	6878      	ldr	r0, [r7, #4]
 80149b6:	f7ff fcf9 	bl	80143ac <dir_sdi>
 80149ba:	4603      	mov	r3, r0
 80149bc:	75fb      	strb	r3, [r7, #23]
 80149be:	e043      	b.n	8014a48 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80149c0:	463b      	mov	r3, r7
 80149c2:	4619      	mov	r1, r3
 80149c4:	6878      	ldr	r0, [r7, #4]
 80149c6:	f7ff ff3f 	bl	8014848 <create_name>
 80149ca:	4603      	mov	r3, r0
 80149cc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80149ce:	7dfb      	ldrb	r3, [r7, #23]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d134      	bne.n	8014a3e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80149d4:	6878      	ldr	r0, [r7, #4]
 80149d6:	f7ff feaf 	bl	8014738 <dir_find>
 80149da:	4603      	mov	r3, r0
 80149dc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80149e4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80149e6:	7dfb      	ldrb	r3, [r7, #23]
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d00a      	beq.n	8014a02 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80149ec:	7dfb      	ldrb	r3, [r7, #23]
 80149ee:	2b04      	cmp	r3, #4
 80149f0:	d127      	bne.n	8014a42 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80149f2:	7afb      	ldrb	r3, [r7, #11]
 80149f4:	f003 0304 	and.w	r3, r3, #4
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d122      	bne.n	8014a42 <follow_path+0xd2>
 80149fc:	2305      	movs	r3, #5
 80149fe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8014a00:	e01f      	b.n	8014a42 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014a02:	7afb      	ldrb	r3, [r7, #11]
 8014a04:	f003 0304 	and.w	r3, r3, #4
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d11c      	bne.n	8014a46 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8014a0c:	693b      	ldr	r3, [r7, #16]
 8014a0e:	799b      	ldrb	r3, [r3, #6]
 8014a10:	f003 0310 	and.w	r3, r3, #16
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d102      	bne.n	8014a1e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8014a18:	2305      	movs	r3, #5
 8014a1a:	75fb      	strb	r3, [r7, #23]
 8014a1c:	e014      	b.n	8014a48 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	695b      	ldr	r3, [r3, #20]
 8014a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014a2c:	4413      	add	r3, r2
 8014a2e:	4619      	mov	r1, r3
 8014a30:	68f8      	ldr	r0, [r7, #12]
 8014a32:	f7ff fe42 	bl	80146ba <ld_clust>
 8014a36:	4602      	mov	r2, r0
 8014a38:	693b      	ldr	r3, [r7, #16]
 8014a3a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014a3c:	e7c0      	b.n	80149c0 <follow_path+0x50>
			if (res != FR_OK) break;
 8014a3e:	bf00      	nop
 8014a40:	e002      	b.n	8014a48 <follow_path+0xd8>
				break;
 8014a42:	bf00      	nop
 8014a44:	e000      	b.n	8014a48 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014a46:	bf00      	nop
			}
		}
	}

	return res;
 8014a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a4a:	4618      	mov	r0, r3
 8014a4c:	3718      	adds	r7, #24
 8014a4e:	46bd      	mov	sp, r7
 8014a50:	bd80      	pop	{r7, pc}

08014a52 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8014a52:	b480      	push	{r7}
 8014a54:	b087      	sub	sp, #28
 8014a56:	af00      	add	r7, sp, #0
 8014a58:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8014a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8014a5e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d031      	beq.n	8014acc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	617b      	str	r3, [r7, #20]
 8014a6e:	e002      	b.n	8014a76 <get_ldnumber+0x24>
 8014a70:	697b      	ldr	r3, [r7, #20]
 8014a72:	3301      	adds	r3, #1
 8014a74:	617b      	str	r3, [r7, #20]
 8014a76:	697b      	ldr	r3, [r7, #20]
 8014a78:	781b      	ldrb	r3, [r3, #0]
 8014a7a:	2b20      	cmp	r3, #32
 8014a7c:	d903      	bls.n	8014a86 <get_ldnumber+0x34>
 8014a7e:	697b      	ldr	r3, [r7, #20]
 8014a80:	781b      	ldrb	r3, [r3, #0]
 8014a82:	2b3a      	cmp	r3, #58	; 0x3a
 8014a84:	d1f4      	bne.n	8014a70 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8014a86:	697b      	ldr	r3, [r7, #20]
 8014a88:	781b      	ldrb	r3, [r3, #0]
 8014a8a:	2b3a      	cmp	r3, #58	; 0x3a
 8014a8c:	d11c      	bne.n	8014ac8 <get_ldnumber+0x76>
			tp = *path;
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	1c5a      	adds	r2, r3, #1
 8014a98:	60fa      	str	r2, [r7, #12]
 8014a9a:	781b      	ldrb	r3, [r3, #0]
 8014a9c:	3b30      	subs	r3, #48	; 0x30
 8014a9e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8014aa0:	68bb      	ldr	r3, [r7, #8]
 8014aa2:	2b09      	cmp	r3, #9
 8014aa4:	d80e      	bhi.n	8014ac4 <get_ldnumber+0x72>
 8014aa6:	68fa      	ldr	r2, [r7, #12]
 8014aa8:	697b      	ldr	r3, [r7, #20]
 8014aaa:	429a      	cmp	r2, r3
 8014aac:	d10a      	bne.n	8014ac4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8014aae:	68bb      	ldr	r3, [r7, #8]
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d107      	bne.n	8014ac4 <get_ldnumber+0x72>
					vol = (int)i;
 8014ab4:	68bb      	ldr	r3, [r7, #8]
 8014ab6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8014ab8:	697b      	ldr	r3, [r7, #20]
 8014aba:	3301      	adds	r3, #1
 8014abc:	617b      	str	r3, [r7, #20]
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	697a      	ldr	r2, [r7, #20]
 8014ac2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8014ac4:	693b      	ldr	r3, [r7, #16]
 8014ac6:	e002      	b.n	8014ace <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8014ac8:	2300      	movs	r3, #0
 8014aca:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8014acc:	693b      	ldr	r3, [r7, #16]
}
 8014ace:	4618      	mov	r0, r3
 8014ad0:	371c      	adds	r7, #28
 8014ad2:	46bd      	mov	sp, r7
 8014ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ad8:	4770      	bx	lr
	...

08014adc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8014adc:	b580      	push	{r7, lr}
 8014ade:	b082      	sub	sp, #8
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	6078      	str	r0, [r7, #4]
 8014ae4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	2200      	movs	r2, #0
 8014aea:	70da      	strb	r2, [r3, #3]
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	f04f 32ff 	mov.w	r2, #4294967295
 8014af2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8014af4:	6839      	ldr	r1, [r7, #0]
 8014af6:	6878      	ldr	r0, [r7, #4]
 8014af8:	f7ff f8d8 	bl	8013cac <move_window>
 8014afc:	4603      	mov	r3, r0
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d001      	beq.n	8014b06 <check_fs+0x2a>
 8014b02:	2304      	movs	r3, #4
 8014b04:	e038      	b.n	8014b78 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	3330      	adds	r3, #48	; 0x30
 8014b0a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014b0e:	4618      	mov	r0, r3
 8014b10:	f7fe fe1c 	bl	801374c <ld_word>
 8014b14:	4603      	mov	r3, r0
 8014b16:	461a      	mov	r2, r3
 8014b18:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014b1c:	429a      	cmp	r2, r3
 8014b1e:	d001      	beq.n	8014b24 <check_fs+0x48>
 8014b20:	2303      	movs	r3, #3
 8014b22:	e029      	b.n	8014b78 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014b2a:	2be9      	cmp	r3, #233	; 0xe9
 8014b2c:	d009      	beq.n	8014b42 <check_fs+0x66>
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014b34:	2beb      	cmp	r3, #235	; 0xeb
 8014b36:	d11e      	bne.n	8014b76 <check_fs+0x9a>
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8014b3e:	2b90      	cmp	r3, #144	; 0x90
 8014b40:	d119      	bne.n	8014b76 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	3330      	adds	r3, #48	; 0x30
 8014b46:	3336      	adds	r3, #54	; 0x36
 8014b48:	4618      	mov	r0, r3
 8014b4a:	f7fe fe17 	bl	801377c <ld_dword>
 8014b4e:	4603      	mov	r3, r0
 8014b50:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8014b54:	4a0a      	ldr	r2, [pc, #40]	; (8014b80 <check_fs+0xa4>)
 8014b56:	4293      	cmp	r3, r2
 8014b58:	d101      	bne.n	8014b5e <check_fs+0x82>
 8014b5a:	2300      	movs	r3, #0
 8014b5c:	e00c      	b.n	8014b78 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	3330      	adds	r3, #48	; 0x30
 8014b62:	3352      	adds	r3, #82	; 0x52
 8014b64:	4618      	mov	r0, r3
 8014b66:	f7fe fe09 	bl	801377c <ld_dword>
 8014b6a:	4603      	mov	r3, r0
 8014b6c:	4a05      	ldr	r2, [pc, #20]	; (8014b84 <check_fs+0xa8>)
 8014b6e:	4293      	cmp	r3, r2
 8014b70:	d101      	bne.n	8014b76 <check_fs+0x9a>
 8014b72:	2300      	movs	r3, #0
 8014b74:	e000      	b.n	8014b78 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8014b76:	2302      	movs	r3, #2
}
 8014b78:	4618      	mov	r0, r3
 8014b7a:	3708      	adds	r7, #8
 8014b7c:	46bd      	mov	sp, r7
 8014b7e:	bd80      	pop	{r7, pc}
 8014b80:	00544146 	.word	0x00544146
 8014b84:	33544146 	.word	0x33544146

08014b88 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8014b88:	b580      	push	{r7, lr}
 8014b8a:	b096      	sub	sp, #88	; 0x58
 8014b8c:	af00      	add	r7, sp, #0
 8014b8e:	60f8      	str	r0, [r7, #12]
 8014b90:	60b9      	str	r1, [r7, #8]
 8014b92:	4613      	mov	r3, r2
 8014b94:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8014b96:	68bb      	ldr	r3, [r7, #8]
 8014b98:	2200      	movs	r2, #0
 8014b9a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8014b9c:	68f8      	ldr	r0, [r7, #12]
 8014b9e:	f7ff ff58 	bl	8014a52 <get_ldnumber>
 8014ba2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8014ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	da01      	bge.n	8014bae <find_volume+0x26>
 8014baa:	230b      	movs	r3, #11
 8014bac:	e22d      	b.n	801500a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8014bae:	4aa1      	ldr	r2, [pc, #644]	; (8014e34 <find_volume+0x2ac>)
 8014bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014bb6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8014bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d101      	bne.n	8014bc2 <find_volume+0x3a>
 8014bbe:	230c      	movs	r3, #12
 8014bc0:	e223      	b.n	801500a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8014bc2:	68bb      	ldr	r3, [r7, #8]
 8014bc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014bc6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8014bc8:	79fb      	ldrb	r3, [r7, #7]
 8014bca:	f023 0301 	bic.w	r3, r3, #1
 8014bce:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8014bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bd2:	781b      	ldrb	r3, [r3, #0]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d01a      	beq.n	8014c0e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8014bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bda:	785b      	ldrb	r3, [r3, #1]
 8014bdc:	4618      	mov	r0, r3
 8014bde:	f7fe fd17 	bl	8013610 <disk_status>
 8014be2:	4603      	mov	r3, r0
 8014be4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8014be8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014bec:	f003 0301 	and.w	r3, r3, #1
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d10c      	bne.n	8014c0e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8014bf4:	79fb      	ldrb	r3, [r7, #7]
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d007      	beq.n	8014c0a <find_volume+0x82>
 8014bfa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014bfe:	f003 0304 	and.w	r3, r3, #4
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d001      	beq.n	8014c0a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8014c06:	230a      	movs	r3, #10
 8014c08:	e1ff      	b.n	801500a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8014c0a:	2300      	movs	r3, #0
 8014c0c:	e1fd      	b.n	801500a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8014c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c10:	2200      	movs	r2, #0
 8014c12:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8014c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c16:	b2da      	uxtb	r2, r3
 8014c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c1a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8014c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c1e:	785b      	ldrb	r3, [r3, #1]
 8014c20:	4618      	mov	r0, r3
 8014c22:	f7fe fd0f 	bl	8013644 <disk_initialize>
 8014c26:	4603      	mov	r3, r0
 8014c28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8014c2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014c30:	f003 0301 	and.w	r3, r3, #1
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d001      	beq.n	8014c3c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8014c38:	2303      	movs	r3, #3
 8014c3a:	e1e6      	b.n	801500a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8014c3c:	79fb      	ldrb	r3, [r7, #7]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d007      	beq.n	8014c52 <find_volume+0xca>
 8014c42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014c46:	f003 0304 	and.w	r3, r3, #4
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d001      	beq.n	8014c52 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8014c4e:	230a      	movs	r3, #10
 8014c50:	e1db      	b.n	801500a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8014c52:	2300      	movs	r3, #0
 8014c54:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8014c56:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014c58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014c5a:	f7ff ff3f 	bl	8014adc <check_fs>
 8014c5e:	4603      	mov	r3, r0
 8014c60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8014c64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014c68:	2b02      	cmp	r3, #2
 8014c6a:	d149      	bne.n	8014d00 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014c6c:	2300      	movs	r3, #0
 8014c6e:	643b      	str	r3, [r7, #64]	; 0x40
 8014c70:	e01e      	b.n	8014cb0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8014c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c74:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014c7a:	011b      	lsls	r3, r3, #4
 8014c7c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8014c80:	4413      	add	r3, r2
 8014c82:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8014c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c86:	3304      	adds	r3, #4
 8014c88:	781b      	ldrb	r3, [r3, #0]
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d006      	beq.n	8014c9c <find_volume+0x114>
 8014c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c90:	3308      	adds	r3, #8
 8014c92:	4618      	mov	r0, r3
 8014c94:	f7fe fd72 	bl	801377c <ld_dword>
 8014c98:	4602      	mov	r2, r0
 8014c9a:	e000      	b.n	8014c9e <find_volume+0x116>
 8014c9c:	2200      	movs	r2, #0
 8014c9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014ca0:	009b      	lsls	r3, r3, #2
 8014ca2:	3358      	adds	r3, #88	; 0x58
 8014ca4:	443b      	add	r3, r7
 8014ca6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014caa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014cac:	3301      	adds	r3, #1
 8014cae:	643b      	str	r3, [r7, #64]	; 0x40
 8014cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014cb2:	2b03      	cmp	r3, #3
 8014cb4:	d9dd      	bls.n	8014c72 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8014cb6:	2300      	movs	r3, #0
 8014cb8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8014cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d002      	beq.n	8014cc6 <find_volume+0x13e>
 8014cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014cc2:	3b01      	subs	r3, #1
 8014cc4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8014cc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014cc8:	009b      	lsls	r3, r3, #2
 8014cca:	3358      	adds	r3, #88	; 0x58
 8014ccc:	443b      	add	r3, r7
 8014cce:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8014cd2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8014cd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d005      	beq.n	8014ce6 <find_volume+0x15e>
 8014cda:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014cdc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014cde:	f7ff fefd 	bl	8014adc <check_fs>
 8014ce2:	4603      	mov	r3, r0
 8014ce4:	e000      	b.n	8014ce8 <find_volume+0x160>
 8014ce6:	2303      	movs	r3, #3
 8014ce8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8014cec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014cf0:	2b01      	cmp	r3, #1
 8014cf2:	d905      	bls.n	8014d00 <find_volume+0x178>
 8014cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014cf6:	3301      	adds	r3, #1
 8014cf8:	643b      	str	r3, [r7, #64]	; 0x40
 8014cfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014cfc:	2b03      	cmp	r3, #3
 8014cfe:	d9e2      	bls.n	8014cc6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8014d00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014d04:	2b04      	cmp	r3, #4
 8014d06:	d101      	bne.n	8014d0c <find_volume+0x184>
 8014d08:	2301      	movs	r3, #1
 8014d0a:	e17e      	b.n	801500a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8014d0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014d10:	2b01      	cmp	r3, #1
 8014d12:	d901      	bls.n	8014d18 <find_volume+0x190>
 8014d14:	230d      	movs	r3, #13
 8014d16:	e178      	b.n	801500a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8014d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d1a:	3330      	adds	r3, #48	; 0x30
 8014d1c:	330b      	adds	r3, #11
 8014d1e:	4618      	mov	r0, r3
 8014d20:	f7fe fd14 	bl	801374c <ld_word>
 8014d24:	4603      	mov	r3, r0
 8014d26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014d2a:	d001      	beq.n	8014d30 <find_volume+0x1a8>
 8014d2c:	230d      	movs	r3, #13
 8014d2e:	e16c      	b.n	801500a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8014d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d32:	3330      	adds	r3, #48	; 0x30
 8014d34:	3316      	adds	r3, #22
 8014d36:	4618      	mov	r0, r3
 8014d38:	f7fe fd08 	bl	801374c <ld_word>
 8014d3c:	4603      	mov	r3, r0
 8014d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8014d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d106      	bne.n	8014d54 <find_volume+0x1cc>
 8014d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d48:	3330      	adds	r3, #48	; 0x30
 8014d4a:	3324      	adds	r3, #36	; 0x24
 8014d4c:	4618      	mov	r0, r3
 8014d4e:	f7fe fd15 	bl	801377c <ld_dword>
 8014d52:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8014d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014d58:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8014d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d5c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8014d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d62:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8014d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d66:	789b      	ldrb	r3, [r3, #2]
 8014d68:	2b01      	cmp	r3, #1
 8014d6a:	d005      	beq.n	8014d78 <find_volume+0x1f0>
 8014d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d6e:	789b      	ldrb	r3, [r3, #2]
 8014d70:	2b02      	cmp	r3, #2
 8014d72:	d001      	beq.n	8014d78 <find_volume+0x1f0>
 8014d74:	230d      	movs	r3, #13
 8014d76:	e148      	b.n	801500a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8014d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d7a:	789b      	ldrb	r3, [r3, #2]
 8014d7c:	461a      	mov	r2, r3
 8014d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014d80:	fb02 f303 	mul.w	r3, r2, r3
 8014d84:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8014d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014d8c:	b29a      	uxth	r2, r3
 8014d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d90:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8014d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d94:	895b      	ldrh	r3, [r3, #10]
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d008      	beq.n	8014dac <find_volume+0x224>
 8014d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d9c:	895b      	ldrh	r3, [r3, #10]
 8014d9e:	461a      	mov	r2, r3
 8014da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014da2:	895b      	ldrh	r3, [r3, #10]
 8014da4:	3b01      	subs	r3, #1
 8014da6:	4013      	ands	r3, r2
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d001      	beq.n	8014db0 <find_volume+0x228>
 8014dac:	230d      	movs	r3, #13
 8014dae:	e12c      	b.n	801500a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8014db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014db2:	3330      	adds	r3, #48	; 0x30
 8014db4:	3311      	adds	r3, #17
 8014db6:	4618      	mov	r0, r3
 8014db8:	f7fe fcc8 	bl	801374c <ld_word>
 8014dbc:	4603      	mov	r3, r0
 8014dbe:	461a      	mov	r2, r3
 8014dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dc2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8014dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dc6:	891b      	ldrh	r3, [r3, #8]
 8014dc8:	f003 030f 	and.w	r3, r3, #15
 8014dcc:	b29b      	uxth	r3, r3
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d001      	beq.n	8014dd6 <find_volume+0x24e>
 8014dd2:	230d      	movs	r3, #13
 8014dd4:	e119      	b.n	801500a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8014dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dd8:	3330      	adds	r3, #48	; 0x30
 8014dda:	3313      	adds	r3, #19
 8014ddc:	4618      	mov	r0, r3
 8014dde:	f7fe fcb5 	bl	801374c <ld_word>
 8014de2:	4603      	mov	r3, r0
 8014de4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8014de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d106      	bne.n	8014dfa <find_volume+0x272>
 8014dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dee:	3330      	adds	r3, #48	; 0x30
 8014df0:	3320      	adds	r3, #32
 8014df2:	4618      	mov	r0, r3
 8014df4:	f7fe fcc2 	bl	801377c <ld_dword>
 8014df8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8014dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dfc:	3330      	adds	r3, #48	; 0x30
 8014dfe:	330e      	adds	r3, #14
 8014e00:	4618      	mov	r0, r3
 8014e02:	f7fe fca3 	bl	801374c <ld_word>
 8014e06:	4603      	mov	r3, r0
 8014e08:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8014e0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d101      	bne.n	8014e14 <find_volume+0x28c>
 8014e10:	230d      	movs	r3, #13
 8014e12:	e0fa      	b.n	801500a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8014e14:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e18:	4413      	add	r3, r2
 8014e1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014e1c:	8912      	ldrh	r2, [r2, #8]
 8014e1e:	0912      	lsrs	r2, r2, #4
 8014e20:	b292      	uxth	r2, r2
 8014e22:	4413      	add	r3, r2
 8014e24:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8014e26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e2a:	429a      	cmp	r2, r3
 8014e2c:	d204      	bcs.n	8014e38 <find_volume+0x2b0>
 8014e2e:	230d      	movs	r3, #13
 8014e30:	e0eb      	b.n	801500a <find_volume+0x482>
 8014e32:	bf00      	nop
 8014e34:	24030878 	.word	0x24030878
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8014e38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e3c:	1ad3      	subs	r3, r2, r3
 8014e3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014e40:	8952      	ldrh	r2, [r2, #10]
 8014e42:	fbb3 f3f2 	udiv	r3, r3, r2
 8014e46:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8014e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d101      	bne.n	8014e52 <find_volume+0x2ca>
 8014e4e:	230d      	movs	r3, #13
 8014e50:	e0db      	b.n	801500a <find_volume+0x482>
		fmt = FS_FAT32;
 8014e52:	2303      	movs	r3, #3
 8014e54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8014e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e5a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8014e5e:	4293      	cmp	r3, r2
 8014e60:	d802      	bhi.n	8014e68 <find_volume+0x2e0>
 8014e62:	2302      	movs	r3, #2
 8014e64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8014e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e6a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8014e6e:	4293      	cmp	r3, r2
 8014e70:	d802      	bhi.n	8014e78 <find_volume+0x2f0>
 8014e72:	2301      	movs	r3, #1
 8014e74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8014e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e7a:	1c9a      	adds	r2, r3, #2
 8014e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e7e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8014e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014e84:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8014e86:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014e88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e8a:	441a      	add	r2, r3
 8014e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e8e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8014e90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e94:	441a      	add	r2, r3
 8014e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e98:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8014e9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014e9e:	2b03      	cmp	r3, #3
 8014ea0:	d11e      	bne.n	8014ee0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8014ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ea4:	3330      	adds	r3, #48	; 0x30
 8014ea6:	332a      	adds	r3, #42	; 0x2a
 8014ea8:	4618      	mov	r0, r3
 8014eaa:	f7fe fc4f 	bl	801374c <ld_word>
 8014eae:	4603      	mov	r3, r0
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d001      	beq.n	8014eb8 <find_volume+0x330>
 8014eb4:	230d      	movs	r3, #13
 8014eb6:	e0a8      	b.n	801500a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8014eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014eba:	891b      	ldrh	r3, [r3, #8]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d001      	beq.n	8014ec4 <find_volume+0x33c>
 8014ec0:	230d      	movs	r3, #13
 8014ec2:	e0a2      	b.n	801500a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8014ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ec6:	3330      	adds	r3, #48	; 0x30
 8014ec8:	332c      	adds	r3, #44	; 0x2c
 8014eca:	4618      	mov	r0, r3
 8014ecc:	f7fe fc56 	bl	801377c <ld_dword>
 8014ed0:	4602      	mov	r2, r0
 8014ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ed4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8014ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ed8:	695b      	ldr	r3, [r3, #20]
 8014eda:	009b      	lsls	r3, r3, #2
 8014edc:	647b      	str	r3, [r7, #68]	; 0x44
 8014ede:	e01f      	b.n	8014f20 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8014ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ee2:	891b      	ldrh	r3, [r3, #8]
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d101      	bne.n	8014eec <find_volume+0x364>
 8014ee8:	230d      	movs	r3, #13
 8014eea:	e08e      	b.n	801500a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8014eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014eee:	6a1a      	ldr	r2, [r3, #32]
 8014ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ef2:	441a      	add	r2, r3
 8014ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ef6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8014ef8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014efc:	2b02      	cmp	r3, #2
 8014efe:	d103      	bne.n	8014f08 <find_volume+0x380>
 8014f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f02:	695b      	ldr	r3, [r3, #20]
 8014f04:	005b      	lsls	r3, r3, #1
 8014f06:	e00a      	b.n	8014f1e <find_volume+0x396>
 8014f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f0a:	695a      	ldr	r2, [r3, #20]
 8014f0c:	4613      	mov	r3, r2
 8014f0e:	005b      	lsls	r3, r3, #1
 8014f10:	4413      	add	r3, r2
 8014f12:	085a      	lsrs	r2, r3, #1
 8014f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f16:	695b      	ldr	r3, [r3, #20]
 8014f18:	f003 0301 	and.w	r3, r3, #1
 8014f1c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8014f1e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8014f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f22:	699a      	ldr	r2, [r3, #24]
 8014f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014f26:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8014f2a:	0a5b      	lsrs	r3, r3, #9
 8014f2c:	429a      	cmp	r2, r3
 8014f2e:	d201      	bcs.n	8014f34 <find_volume+0x3ac>
 8014f30:	230d      	movs	r3, #13
 8014f32:	e06a      	b.n	801500a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8014f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f36:	f04f 32ff 	mov.w	r2, #4294967295
 8014f3a:	611a      	str	r2, [r3, #16]
 8014f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f3e:	691a      	ldr	r2, [r3, #16]
 8014f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f42:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8014f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f46:	2280      	movs	r2, #128	; 0x80
 8014f48:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8014f4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014f4e:	2b03      	cmp	r3, #3
 8014f50:	d149      	bne.n	8014fe6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8014f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f54:	3330      	adds	r3, #48	; 0x30
 8014f56:	3330      	adds	r3, #48	; 0x30
 8014f58:	4618      	mov	r0, r3
 8014f5a:	f7fe fbf7 	bl	801374c <ld_word>
 8014f5e:	4603      	mov	r3, r0
 8014f60:	2b01      	cmp	r3, #1
 8014f62:	d140      	bne.n	8014fe6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8014f64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f66:	3301      	adds	r3, #1
 8014f68:	4619      	mov	r1, r3
 8014f6a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014f6c:	f7fe fe9e 	bl	8013cac <move_window>
 8014f70:	4603      	mov	r3, r0
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d137      	bne.n	8014fe6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8014f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f78:	2200      	movs	r2, #0
 8014f7a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8014f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f7e:	3330      	adds	r3, #48	; 0x30
 8014f80:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014f84:	4618      	mov	r0, r3
 8014f86:	f7fe fbe1 	bl	801374c <ld_word>
 8014f8a:	4603      	mov	r3, r0
 8014f8c:	461a      	mov	r2, r3
 8014f8e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014f92:	429a      	cmp	r2, r3
 8014f94:	d127      	bne.n	8014fe6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8014f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f98:	3330      	adds	r3, #48	; 0x30
 8014f9a:	4618      	mov	r0, r3
 8014f9c:	f7fe fbee 	bl	801377c <ld_dword>
 8014fa0:	4603      	mov	r3, r0
 8014fa2:	4a1c      	ldr	r2, [pc, #112]	; (8015014 <find_volume+0x48c>)
 8014fa4:	4293      	cmp	r3, r2
 8014fa6:	d11e      	bne.n	8014fe6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8014fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014faa:	3330      	adds	r3, #48	; 0x30
 8014fac:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	f7fe fbe3 	bl	801377c <ld_dword>
 8014fb6:	4603      	mov	r3, r0
 8014fb8:	4a17      	ldr	r2, [pc, #92]	; (8015018 <find_volume+0x490>)
 8014fba:	4293      	cmp	r3, r2
 8014fbc:	d113      	bne.n	8014fe6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8014fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fc0:	3330      	adds	r3, #48	; 0x30
 8014fc2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	f7fe fbd8 	bl	801377c <ld_dword>
 8014fcc:	4602      	mov	r2, r0
 8014fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fd0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8014fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fd4:	3330      	adds	r3, #48	; 0x30
 8014fd6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8014fda:	4618      	mov	r0, r3
 8014fdc:	f7fe fbce 	bl	801377c <ld_dword>
 8014fe0:	4602      	mov	r2, r0
 8014fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fe4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8014fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fe8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8014fec:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8014fee:	4b0b      	ldr	r3, [pc, #44]	; (801501c <find_volume+0x494>)
 8014ff0:	881b      	ldrh	r3, [r3, #0]
 8014ff2:	3301      	adds	r3, #1
 8014ff4:	b29a      	uxth	r2, r3
 8014ff6:	4b09      	ldr	r3, [pc, #36]	; (801501c <find_volume+0x494>)
 8014ff8:	801a      	strh	r2, [r3, #0]
 8014ffa:	4b08      	ldr	r3, [pc, #32]	; (801501c <find_volume+0x494>)
 8014ffc:	881a      	ldrh	r2, [r3, #0]
 8014ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015000:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8015002:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015004:	f7fe fdea 	bl	8013bdc <clear_lock>
#endif
	return FR_OK;
 8015008:	2300      	movs	r3, #0
}
 801500a:	4618      	mov	r0, r3
 801500c:	3758      	adds	r7, #88	; 0x58
 801500e:	46bd      	mov	sp, r7
 8015010:	bd80      	pop	{r7, pc}
 8015012:	bf00      	nop
 8015014:	41615252 	.word	0x41615252
 8015018:	61417272 	.word	0x61417272
 801501c:	2403087c 	.word	0x2403087c

08015020 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8015020:	b580      	push	{r7, lr}
 8015022:	b084      	sub	sp, #16
 8015024:	af00      	add	r7, sp, #0
 8015026:	6078      	str	r0, [r7, #4]
 8015028:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801502a:	2309      	movs	r3, #9
 801502c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	2b00      	cmp	r3, #0
 8015032:	d01c      	beq.n	801506e <validate+0x4e>
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	2b00      	cmp	r3, #0
 801503a:	d018      	beq.n	801506e <validate+0x4e>
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	781b      	ldrb	r3, [r3, #0]
 8015042:	2b00      	cmp	r3, #0
 8015044:	d013      	beq.n	801506e <validate+0x4e>
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	889a      	ldrh	r2, [r3, #4]
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	681b      	ldr	r3, [r3, #0]
 801504e:	88db      	ldrh	r3, [r3, #6]
 8015050:	429a      	cmp	r2, r3
 8015052:	d10c      	bne.n	801506e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	681b      	ldr	r3, [r3, #0]
 8015058:	785b      	ldrb	r3, [r3, #1]
 801505a:	4618      	mov	r0, r3
 801505c:	f7fe fad8 	bl	8013610 <disk_status>
 8015060:	4603      	mov	r3, r0
 8015062:	f003 0301 	and.w	r3, r3, #1
 8015066:	2b00      	cmp	r3, #0
 8015068:	d101      	bne.n	801506e <validate+0x4e>
			res = FR_OK;
 801506a:	2300      	movs	r3, #0
 801506c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801506e:	7bfb      	ldrb	r3, [r7, #15]
 8015070:	2b00      	cmp	r3, #0
 8015072:	d102      	bne.n	801507a <validate+0x5a>
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	e000      	b.n	801507c <validate+0x5c>
 801507a:	2300      	movs	r3, #0
 801507c:	683a      	ldr	r2, [r7, #0]
 801507e:	6013      	str	r3, [r2, #0]
	return res;
 8015080:	7bfb      	ldrb	r3, [r7, #15]
}
 8015082:	4618      	mov	r0, r3
 8015084:	3710      	adds	r7, #16
 8015086:	46bd      	mov	sp, r7
 8015088:	bd80      	pop	{r7, pc}
	...

0801508c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801508c:	b580      	push	{r7, lr}
 801508e:	b088      	sub	sp, #32
 8015090:	af00      	add	r7, sp, #0
 8015092:	60f8      	str	r0, [r7, #12]
 8015094:	60b9      	str	r1, [r7, #8]
 8015096:	4613      	mov	r3, r2
 8015098:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801509a:	68bb      	ldr	r3, [r7, #8]
 801509c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801509e:	f107 0310 	add.w	r3, r7, #16
 80150a2:	4618      	mov	r0, r3
 80150a4:	f7ff fcd5 	bl	8014a52 <get_ldnumber>
 80150a8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80150aa:	69fb      	ldr	r3, [r7, #28]
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	da01      	bge.n	80150b4 <f_mount+0x28>
 80150b0:	230b      	movs	r3, #11
 80150b2:	e02b      	b.n	801510c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80150b4:	4a17      	ldr	r2, [pc, #92]	; (8015114 <f_mount+0x88>)
 80150b6:	69fb      	ldr	r3, [r7, #28]
 80150b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80150bc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80150be:	69bb      	ldr	r3, [r7, #24]
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d005      	beq.n	80150d0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80150c4:	69b8      	ldr	r0, [r7, #24]
 80150c6:	f7fe fd89 	bl	8013bdc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80150ca:	69bb      	ldr	r3, [r7, #24]
 80150cc:	2200      	movs	r2, #0
 80150ce:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d002      	beq.n	80150dc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	2200      	movs	r2, #0
 80150da:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80150dc:	68fa      	ldr	r2, [r7, #12]
 80150de:	490d      	ldr	r1, [pc, #52]	; (8015114 <f_mount+0x88>)
 80150e0:	69fb      	ldr	r3, [r7, #28]
 80150e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d002      	beq.n	80150f2 <f_mount+0x66>
 80150ec:	79fb      	ldrb	r3, [r7, #7]
 80150ee:	2b01      	cmp	r3, #1
 80150f0:	d001      	beq.n	80150f6 <f_mount+0x6a>
 80150f2:	2300      	movs	r3, #0
 80150f4:	e00a      	b.n	801510c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80150f6:	f107 010c 	add.w	r1, r7, #12
 80150fa:	f107 0308 	add.w	r3, r7, #8
 80150fe:	2200      	movs	r2, #0
 8015100:	4618      	mov	r0, r3
 8015102:	f7ff fd41 	bl	8014b88 <find_volume>
 8015106:	4603      	mov	r3, r0
 8015108:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801510a:	7dfb      	ldrb	r3, [r7, #23]
}
 801510c:	4618      	mov	r0, r3
 801510e:	3720      	adds	r7, #32
 8015110:	46bd      	mov	sp, r7
 8015112:	bd80      	pop	{r7, pc}
 8015114:	24030878 	.word	0x24030878

08015118 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8015118:	b580      	push	{r7, lr}
 801511a:	b098      	sub	sp, #96	; 0x60
 801511c:	af00      	add	r7, sp, #0
 801511e:	60f8      	str	r0, [r7, #12]
 8015120:	60b9      	str	r1, [r7, #8]
 8015122:	4613      	mov	r3, r2
 8015124:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	2b00      	cmp	r3, #0
 801512a:	d101      	bne.n	8015130 <f_open+0x18>
 801512c:	2309      	movs	r3, #9
 801512e:	e1ad      	b.n	801548c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8015130:	79fb      	ldrb	r3, [r7, #7]
 8015132:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015136:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8015138:	79fa      	ldrb	r2, [r7, #7]
 801513a:	f107 0110 	add.w	r1, r7, #16
 801513e:	f107 0308 	add.w	r3, r7, #8
 8015142:	4618      	mov	r0, r3
 8015144:	f7ff fd20 	bl	8014b88 <find_volume>
 8015148:	4603      	mov	r3, r0
 801514a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801514e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015152:	2b00      	cmp	r3, #0
 8015154:	f040 8191 	bne.w	801547a <f_open+0x362>
		dj.obj.fs = fs;
 8015158:	693b      	ldr	r3, [r7, #16]
 801515a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801515c:	68ba      	ldr	r2, [r7, #8]
 801515e:	f107 0314 	add.w	r3, r7, #20
 8015162:	4611      	mov	r1, r2
 8015164:	4618      	mov	r0, r3
 8015166:	f7ff fc03 	bl	8014970 <follow_path>
 801516a:	4603      	mov	r3, r0
 801516c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8015170:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015174:	2b00      	cmp	r3, #0
 8015176:	d11a      	bne.n	80151ae <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8015178:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801517c:	b25b      	sxtb	r3, r3
 801517e:	2b00      	cmp	r3, #0
 8015180:	da03      	bge.n	801518a <f_open+0x72>
				res = FR_INVALID_NAME;
 8015182:	2306      	movs	r3, #6
 8015184:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8015188:	e011      	b.n	80151ae <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801518a:	79fb      	ldrb	r3, [r7, #7]
 801518c:	f023 0301 	bic.w	r3, r3, #1
 8015190:	2b00      	cmp	r3, #0
 8015192:	bf14      	ite	ne
 8015194:	2301      	movne	r3, #1
 8015196:	2300      	moveq	r3, #0
 8015198:	b2db      	uxtb	r3, r3
 801519a:	461a      	mov	r2, r3
 801519c:	f107 0314 	add.w	r3, r7, #20
 80151a0:	4611      	mov	r1, r2
 80151a2:	4618      	mov	r0, r3
 80151a4:	f7fe fbd2 	bl	801394c <chk_lock>
 80151a8:	4603      	mov	r3, r0
 80151aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80151ae:	79fb      	ldrb	r3, [r7, #7]
 80151b0:	f003 031c 	and.w	r3, r3, #28
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d07f      	beq.n	80152b8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80151b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d017      	beq.n	80151f0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80151c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80151c4:	2b04      	cmp	r3, #4
 80151c6:	d10e      	bne.n	80151e6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80151c8:	f7fe fc1c 	bl	8013a04 <enq_lock>
 80151cc:	4603      	mov	r3, r0
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d006      	beq.n	80151e0 <f_open+0xc8>
 80151d2:	f107 0314 	add.w	r3, r7, #20
 80151d6:	4618      	mov	r0, r3
 80151d8:	f7ff fb03 	bl	80147e2 <dir_register>
 80151dc:	4603      	mov	r3, r0
 80151de:	e000      	b.n	80151e2 <f_open+0xca>
 80151e0:	2312      	movs	r3, #18
 80151e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80151e6:	79fb      	ldrb	r3, [r7, #7]
 80151e8:	f043 0308 	orr.w	r3, r3, #8
 80151ec:	71fb      	strb	r3, [r7, #7]
 80151ee:	e010      	b.n	8015212 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80151f0:	7ebb      	ldrb	r3, [r7, #26]
 80151f2:	f003 0311 	and.w	r3, r3, #17
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d003      	beq.n	8015202 <f_open+0xea>
					res = FR_DENIED;
 80151fa:	2307      	movs	r3, #7
 80151fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8015200:	e007      	b.n	8015212 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8015202:	79fb      	ldrb	r3, [r7, #7]
 8015204:	f003 0304 	and.w	r3, r3, #4
 8015208:	2b00      	cmp	r3, #0
 801520a:	d002      	beq.n	8015212 <f_open+0xfa>
 801520c:	2308      	movs	r3, #8
 801520e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8015212:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015216:	2b00      	cmp	r3, #0
 8015218:	d168      	bne.n	80152ec <f_open+0x1d4>
 801521a:	79fb      	ldrb	r3, [r7, #7]
 801521c:	f003 0308 	and.w	r3, r3, #8
 8015220:	2b00      	cmp	r3, #0
 8015222:	d063      	beq.n	80152ec <f_open+0x1d4>
				dw = GET_FATTIME();
 8015224:	f7fb f850 	bl	80102c8 <get_fattime>
 8015228:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801522a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801522c:	330e      	adds	r3, #14
 801522e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015230:	4618      	mov	r0, r3
 8015232:	f7fe fae1 	bl	80137f8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8015236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015238:	3316      	adds	r3, #22
 801523a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801523c:	4618      	mov	r0, r3
 801523e:	f7fe fadb 	bl	80137f8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8015242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015244:	330b      	adds	r3, #11
 8015246:	2220      	movs	r2, #32
 8015248:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801524a:	693b      	ldr	r3, [r7, #16]
 801524c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801524e:	4611      	mov	r1, r2
 8015250:	4618      	mov	r0, r3
 8015252:	f7ff fa32 	bl	80146ba <ld_clust>
 8015256:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8015258:	693b      	ldr	r3, [r7, #16]
 801525a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801525c:	2200      	movs	r2, #0
 801525e:	4618      	mov	r0, r3
 8015260:	f7ff fa4a 	bl	80146f8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8015264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015266:	331c      	adds	r3, #28
 8015268:	2100      	movs	r1, #0
 801526a:	4618      	mov	r0, r3
 801526c:	f7fe fac4 	bl	80137f8 <st_dword>
					fs->wflag = 1;
 8015270:	693b      	ldr	r3, [r7, #16]
 8015272:	2201      	movs	r2, #1
 8015274:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8015276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015278:	2b00      	cmp	r3, #0
 801527a:	d037      	beq.n	80152ec <f_open+0x1d4>
						dw = fs->winsect;
 801527c:	693b      	ldr	r3, [r7, #16]
 801527e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015280:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8015282:	f107 0314 	add.w	r3, r7, #20
 8015286:	2200      	movs	r2, #0
 8015288:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801528a:	4618      	mov	r0, r3
 801528c:	f7fe ff5d 	bl	801414a <remove_chain>
 8015290:	4603      	mov	r3, r0
 8015292:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8015296:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801529a:	2b00      	cmp	r3, #0
 801529c:	d126      	bne.n	80152ec <f_open+0x1d4>
							res = move_window(fs, dw);
 801529e:	693b      	ldr	r3, [r7, #16]
 80152a0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80152a2:	4618      	mov	r0, r3
 80152a4:	f7fe fd02 	bl	8013cac <move_window>
 80152a8:	4603      	mov	r3, r0
 80152aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80152ae:	693b      	ldr	r3, [r7, #16]
 80152b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80152b2:	3a01      	subs	r2, #1
 80152b4:	60da      	str	r2, [r3, #12]
 80152b6:	e019      	b.n	80152ec <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80152b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d115      	bne.n	80152ec <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80152c0:	7ebb      	ldrb	r3, [r7, #26]
 80152c2:	f003 0310 	and.w	r3, r3, #16
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d003      	beq.n	80152d2 <f_open+0x1ba>
					res = FR_NO_FILE;
 80152ca:	2304      	movs	r3, #4
 80152cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80152d0:	e00c      	b.n	80152ec <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80152d2:	79fb      	ldrb	r3, [r7, #7]
 80152d4:	f003 0302 	and.w	r3, r3, #2
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d007      	beq.n	80152ec <f_open+0x1d4>
 80152dc:	7ebb      	ldrb	r3, [r7, #26]
 80152de:	f003 0301 	and.w	r3, r3, #1
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d002      	beq.n	80152ec <f_open+0x1d4>
						res = FR_DENIED;
 80152e6:	2307      	movs	r3, #7
 80152e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80152ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d128      	bne.n	8015346 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80152f4:	79fb      	ldrb	r3, [r7, #7]
 80152f6:	f003 0308 	and.w	r3, r3, #8
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d003      	beq.n	8015306 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80152fe:	79fb      	ldrb	r3, [r7, #7]
 8015300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015304:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8015306:	693b      	ldr	r3, [r7, #16]
 8015308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801530a:	68fb      	ldr	r3, [r7, #12]
 801530c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801530e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8015314:	79fb      	ldrb	r3, [r7, #7]
 8015316:	f023 0301 	bic.w	r3, r3, #1
 801531a:	2b00      	cmp	r3, #0
 801531c:	bf14      	ite	ne
 801531e:	2301      	movne	r3, #1
 8015320:	2300      	moveq	r3, #0
 8015322:	b2db      	uxtb	r3, r3
 8015324:	461a      	mov	r2, r3
 8015326:	f107 0314 	add.w	r3, r7, #20
 801532a:	4611      	mov	r1, r2
 801532c:	4618      	mov	r0, r3
 801532e:	f7fe fb8b 	bl	8013a48 <inc_lock>
 8015332:	4602      	mov	r2, r0
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	691b      	ldr	r3, [r3, #16]
 801533c:	2b00      	cmp	r3, #0
 801533e:	d102      	bne.n	8015346 <f_open+0x22e>
 8015340:	2302      	movs	r3, #2
 8015342:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8015346:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801534a:	2b00      	cmp	r3, #0
 801534c:	f040 8095 	bne.w	801547a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8015350:	693b      	ldr	r3, [r7, #16]
 8015352:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015354:	4611      	mov	r1, r2
 8015356:	4618      	mov	r0, r3
 8015358:	f7ff f9af 	bl	80146ba <ld_clust>
 801535c:	4602      	mov	r2, r0
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8015362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015364:	331c      	adds	r3, #28
 8015366:	4618      	mov	r0, r3
 8015368:	f7fe fa08 	bl	801377c <ld_dword>
 801536c:	4602      	mov	r2, r0
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8015372:	68fb      	ldr	r3, [r7, #12]
 8015374:	2200      	movs	r2, #0
 8015376:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8015378:	693a      	ldr	r2, [r7, #16]
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801537e:	693b      	ldr	r3, [r7, #16]
 8015380:	88da      	ldrh	r2, [r3, #6]
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	79fa      	ldrb	r2, [r7, #7]
 801538a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	2200      	movs	r2, #0
 8015390:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8015392:	68fb      	ldr	r3, [r7, #12]
 8015394:	2200      	movs	r2, #0
 8015396:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	2200      	movs	r2, #0
 801539c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	3330      	adds	r3, #48	; 0x30
 80153a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80153a6:	2100      	movs	r1, #0
 80153a8:	4618      	mov	r0, r3
 80153aa:	f7fe fa72 	bl	8013892 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80153ae:	79fb      	ldrb	r3, [r7, #7]
 80153b0:	f003 0320 	and.w	r3, r3, #32
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d060      	beq.n	801547a <f_open+0x362>
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	68db      	ldr	r3, [r3, #12]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d05c      	beq.n	801547a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	68da      	ldr	r2, [r3, #12]
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80153c8:	693b      	ldr	r3, [r7, #16]
 80153ca:	895b      	ldrh	r3, [r3, #10]
 80153cc:	025b      	lsls	r3, r3, #9
 80153ce:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	689b      	ldr	r3, [r3, #8]
 80153d4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	68db      	ldr	r3, [r3, #12]
 80153da:	657b      	str	r3, [r7, #84]	; 0x54
 80153dc:	e016      	b.n	801540c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80153e2:	4618      	mov	r0, r3
 80153e4:	f7fe fd1d 	bl	8013e22 <get_fat>
 80153e8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80153ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80153ec:	2b01      	cmp	r3, #1
 80153ee:	d802      	bhi.n	80153f6 <f_open+0x2de>
 80153f0:	2302      	movs	r3, #2
 80153f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80153f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80153f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153fc:	d102      	bne.n	8015404 <f_open+0x2ec>
 80153fe:	2301      	movs	r3, #1
 8015400:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8015404:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015408:	1ad3      	subs	r3, r2, r3
 801540a:	657b      	str	r3, [r7, #84]	; 0x54
 801540c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015410:	2b00      	cmp	r3, #0
 8015412:	d103      	bne.n	801541c <f_open+0x304>
 8015414:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015418:	429a      	cmp	r2, r3
 801541a:	d8e0      	bhi.n	80153de <f_open+0x2c6>
				}
				fp->clust = clst;
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015420:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8015422:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015426:	2b00      	cmp	r3, #0
 8015428:	d127      	bne.n	801547a <f_open+0x362>
 801542a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801542c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015430:	2b00      	cmp	r3, #0
 8015432:	d022      	beq.n	801547a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8015434:	693b      	ldr	r3, [r7, #16]
 8015436:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015438:	4618      	mov	r0, r3
 801543a:	f7fe fcd3 	bl	8013de4 <clust2sect>
 801543e:	6478      	str	r0, [r7, #68]	; 0x44
 8015440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015442:	2b00      	cmp	r3, #0
 8015444:	d103      	bne.n	801544e <f_open+0x336>
						res = FR_INT_ERR;
 8015446:	2302      	movs	r3, #2
 8015448:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801544c:	e015      	b.n	801547a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801544e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015450:	0a5a      	lsrs	r2, r3, #9
 8015452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015454:	441a      	add	r2, r3
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801545a:	693b      	ldr	r3, [r7, #16]
 801545c:	7858      	ldrb	r0, [r3, #1]
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	6a1a      	ldr	r2, [r3, #32]
 8015468:	2301      	movs	r3, #1
 801546a:	f7fe f911 	bl	8013690 <disk_read>
 801546e:	4603      	mov	r3, r0
 8015470:	2b00      	cmp	r3, #0
 8015472:	d002      	beq.n	801547a <f_open+0x362>
 8015474:	2301      	movs	r3, #1
 8015476:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801547a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801547e:	2b00      	cmp	r3, #0
 8015480:	d002      	beq.n	8015488 <f_open+0x370>
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	2200      	movs	r2, #0
 8015486:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8015488:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 801548c:	4618      	mov	r0, r3
 801548e:	3760      	adds	r7, #96	; 0x60
 8015490:	46bd      	mov	sp, r7
 8015492:	bd80      	pop	{r7, pc}

08015494 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8015494:	b580      	push	{r7, lr}
 8015496:	b08e      	sub	sp, #56	; 0x38
 8015498:	af00      	add	r7, sp, #0
 801549a:	60f8      	str	r0, [r7, #12]
 801549c:	60b9      	str	r1, [r7, #8]
 801549e:	607a      	str	r2, [r7, #4]
 80154a0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80154a2:	68bb      	ldr	r3, [r7, #8]
 80154a4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80154a6:	683b      	ldr	r3, [r7, #0]
 80154a8:	2200      	movs	r2, #0
 80154aa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	f107 0214 	add.w	r2, r7, #20
 80154b2:	4611      	mov	r1, r2
 80154b4:	4618      	mov	r0, r3
 80154b6:	f7ff fdb3 	bl	8015020 <validate>
 80154ba:	4603      	mov	r3, r0
 80154bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80154c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d107      	bne.n	80154d8 <f_read+0x44>
 80154c8:	68fb      	ldr	r3, [r7, #12]
 80154ca:	7d5b      	ldrb	r3, [r3, #21]
 80154cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80154d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d002      	beq.n	80154de <f_read+0x4a>
 80154d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80154dc:	e115      	b.n	801570a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80154de:	68fb      	ldr	r3, [r7, #12]
 80154e0:	7d1b      	ldrb	r3, [r3, #20]
 80154e2:	f003 0301 	and.w	r3, r3, #1
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d101      	bne.n	80154ee <f_read+0x5a>
 80154ea:	2307      	movs	r3, #7
 80154ec:	e10d      	b.n	801570a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80154ee:	68fb      	ldr	r3, [r7, #12]
 80154f0:	68da      	ldr	r2, [r3, #12]
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	699b      	ldr	r3, [r3, #24]
 80154f6:	1ad3      	subs	r3, r2, r3
 80154f8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80154fa:	687a      	ldr	r2, [r7, #4]
 80154fc:	6a3b      	ldr	r3, [r7, #32]
 80154fe:	429a      	cmp	r2, r3
 8015500:	f240 80fe 	bls.w	8015700 <f_read+0x26c>
 8015504:	6a3b      	ldr	r3, [r7, #32]
 8015506:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8015508:	e0fa      	b.n	8015700 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	699b      	ldr	r3, [r3, #24]
 801550e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015512:	2b00      	cmp	r3, #0
 8015514:	f040 80c6 	bne.w	80156a4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	699b      	ldr	r3, [r3, #24]
 801551c:	0a5b      	lsrs	r3, r3, #9
 801551e:	697a      	ldr	r2, [r7, #20]
 8015520:	8952      	ldrh	r2, [r2, #10]
 8015522:	3a01      	subs	r2, #1
 8015524:	4013      	ands	r3, r2
 8015526:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8015528:	69fb      	ldr	r3, [r7, #28]
 801552a:	2b00      	cmp	r3, #0
 801552c:	d12f      	bne.n	801558e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801552e:	68fb      	ldr	r3, [r7, #12]
 8015530:	699b      	ldr	r3, [r3, #24]
 8015532:	2b00      	cmp	r3, #0
 8015534:	d103      	bne.n	801553e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8015536:	68fb      	ldr	r3, [r7, #12]
 8015538:	689b      	ldr	r3, [r3, #8]
 801553a:	633b      	str	r3, [r7, #48]	; 0x30
 801553c:	e013      	b.n	8015566 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801553e:	68fb      	ldr	r3, [r7, #12]
 8015540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015542:	2b00      	cmp	r3, #0
 8015544:	d007      	beq.n	8015556 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8015546:	68fb      	ldr	r3, [r7, #12]
 8015548:	699b      	ldr	r3, [r3, #24]
 801554a:	4619      	mov	r1, r3
 801554c:	68f8      	ldr	r0, [r7, #12]
 801554e:	f7fe fef9 	bl	8014344 <clmt_clust>
 8015552:	6338      	str	r0, [r7, #48]	; 0x30
 8015554:	e007      	b.n	8015566 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8015556:	68fa      	ldr	r2, [r7, #12]
 8015558:	68fb      	ldr	r3, [r7, #12]
 801555a:	69db      	ldr	r3, [r3, #28]
 801555c:	4619      	mov	r1, r3
 801555e:	4610      	mov	r0, r2
 8015560:	f7fe fc5f 	bl	8013e22 <get_fat>
 8015564:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8015566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015568:	2b01      	cmp	r3, #1
 801556a:	d804      	bhi.n	8015576 <f_read+0xe2>
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	2202      	movs	r2, #2
 8015570:	755a      	strb	r2, [r3, #21]
 8015572:	2302      	movs	r3, #2
 8015574:	e0c9      	b.n	801570a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015578:	f1b3 3fff 	cmp.w	r3, #4294967295
 801557c:	d104      	bne.n	8015588 <f_read+0xf4>
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	2201      	movs	r2, #1
 8015582:	755a      	strb	r2, [r3, #21]
 8015584:	2301      	movs	r3, #1
 8015586:	e0c0      	b.n	801570a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8015588:	68fb      	ldr	r3, [r7, #12]
 801558a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801558c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801558e:	697a      	ldr	r2, [r7, #20]
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	69db      	ldr	r3, [r3, #28]
 8015594:	4619      	mov	r1, r3
 8015596:	4610      	mov	r0, r2
 8015598:	f7fe fc24 	bl	8013de4 <clust2sect>
 801559c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801559e:	69bb      	ldr	r3, [r7, #24]
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d104      	bne.n	80155ae <f_read+0x11a>
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	2202      	movs	r2, #2
 80155a8:	755a      	strb	r2, [r3, #21]
 80155aa:	2302      	movs	r3, #2
 80155ac:	e0ad      	b.n	801570a <f_read+0x276>
			sect += csect;
 80155ae:	69ba      	ldr	r2, [r7, #24]
 80155b0:	69fb      	ldr	r3, [r7, #28]
 80155b2:	4413      	add	r3, r2
 80155b4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	0a5b      	lsrs	r3, r3, #9
 80155ba:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80155bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d039      	beq.n	8015636 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80155c2:	69fa      	ldr	r2, [r7, #28]
 80155c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155c6:	4413      	add	r3, r2
 80155c8:	697a      	ldr	r2, [r7, #20]
 80155ca:	8952      	ldrh	r2, [r2, #10]
 80155cc:	4293      	cmp	r3, r2
 80155ce:	d905      	bls.n	80155dc <f_read+0x148>
					cc = fs->csize - csect;
 80155d0:	697b      	ldr	r3, [r7, #20]
 80155d2:	895b      	ldrh	r3, [r3, #10]
 80155d4:	461a      	mov	r2, r3
 80155d6:	69fb      	ldr	r3, [r7, #28]
 80155d8:	1ad3      	subs	r3, r2, r3
 80155da:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80155dc:	697b      	ldr	r3, [r7, #20]
 80155de:	7858      	ldrb	r0, [r3, #1]
 80155e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155e2:	69ba      	ldr	r2, [r7, #24]
 80155e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80155e6:	f7fe f853 	bl	8013690 <disk_read>
 80155ea:	4603      	mov	r3, r0
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d004      	beq.n	80155fa <f_read+0x166>
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	2201      	movs	r2, #1
 80155f4:	755a      	strb	r2, [r3, #21]
 80155f6:	2301      	movs	r3, #1
 80155f8:	e087      	b.n	801570a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80155fa:	68fb      	ldr	r3, [r7, #12]
 80155fc:	7d1b      	ldrb	r3, [r3, #20]
 80155fe:	b25b      	sxtb	r3, r3
 8015600:	2b00      	cmp	r3, #0
 8015602:	da14      	bge.n	801562e <f_read+0x19a>
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	6a1a      	ldr	r2, [r3, #32]
 8015608:	69bb      	ldr	r3, [r7, #24]
 801560a:	1ad3      	subs	r3, r2, r3
 801560c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801560e:	429a      	cmp	r2, r3
 8015610:	d90d      	bls.n	801562e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	6a1a      	ldr	r2, [r3, #32]
 8015616:	69bb      	ldr	r3, [r7, #24]
 8015618:	1ad3      	subs	r3, r2, r3
 801561a:	025b      	lsls	r3, r3, #9
 801561c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801561e:	18d0      	adds	r0, r2, r3
 8015620:	68fb      	ldr	r3, [r7, #12]
 8015622:	3330      	adds	r3, #48	; 0x30
 8015624:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015628:	4619      	mov	r1, r3
 801562a:	f7fe f911 	bl	8013850 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801562e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015630:	025b      	lsls	r3, r3, #9
 8015632:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8015634:	e050      	b.n	80156d8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	6a1b      	ldr	r3, [r3, #32]
 801563a:	69ba      	ldr	r2, [r7, #24]
 801563c:	429a      	cmp	r2, r3
 801563e:	d02e      	beq.n	801569e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	7d1b      	ldrb	r3, [r3, #20]
 8015644:	b25b      	sxtb	r3, r3
 8015646:	2b00      	cmp	r3, #0
 8015648:	da18      	bge.n	801567c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801564a:	697b      	ldr	r3, [r7, #20]
 801564c:	7858      	ldrb	r0, [r3, #1]
 801564e:	68fb      	ldr	r3, [r7, #12]
 8015650:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	6a1a      	ldr	r2, [r3, #32]
 8015658:	2301      	movs	r3, #1
 801565a:	f7fe f839 	bl	80136d0 <disk_write>
 801565e:	4603      	mov	r3, r0
 8015660:	2b00      	cmp	r3, #0
 8015662:	d004      	beq.n	801566e <f_read+0x1da>
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	2201      	movs	r2, #1
 8015668:	755a      	strb	r2, [r3, #21]
 801566a:	2301      	movs	r3, #1
 801566c:	e04d      	b.n	801570a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	7d1b      	ldrb	r3, [r3, #20]
 8015672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015676:	b2da      	uxtb	r2, r3
 8015678:	68fb      	ldr	r3, [r7, #12]
 801567a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801567c:	697b      	ldr	r3, [r7, #20]
 801567e:	7858      	ldrb	r0, [r3, #1]
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015686:	2301      	movs	r3, #1
 8015688:	69ba      	ldr	r2, [r7, #24]
 801568a:	f7fe f801 	bl	8013690 <disk_read>
 801568e:	4603      	mov	r3, r0
 8015690:	2b00      	cmp	r3, #0
 8015692:	d004      	beq.n	801569e <f_read+0x20a>
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	2201      	movs	r2, #1
 8015698:	755a      	strb	r2, [r3, #21]
 801569a:	2301      	movs	r3, #1
 801569c:	e035      	b.n	801570a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801569e:	68fb      	ldr	r3, [r7, #12]
 80156a0:	69ba      	ldr	r2, [r7, #24]
 80156a2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80156a4:	68fb      	ldr	r3, [r7, #12]
 80156a6:	699b      	ldr	r3, [r3, #24]
 80156a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80156ac:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80156b0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80156b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	429a      	cmp	r2, r3
 80156b8:	d901      	bls.n	80156be <f_read+0x22a>
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	699b      	ldr	r3, [r3, #24]
 80156c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80156cc:	4413      	add	r3, r2
 80156ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80156d0:	4619      	mov	r1, r3
 80156d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80156d4:	f7fe f8bc 	bl	8013850 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80156d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80156da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156dc:	4413      	add	r3, r2
 80156de:	627b      	str	r3, [r7, #36]	; 0x24
 80156e0:	68fb      	ldr	r3, [r7, #12]
 80156e2:	699a      	ldr	r2, [r3, #24]
 80156e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156e6:	441a      	add	r2, r3
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	619a      	str	r2, [r3, #24]
 80156ec:	683b      	ldr	r3, [r7, #0]
 80156ee:	681a      	ldr	r2, [r3, #0]
 80156f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156f2:	441a      	add	r2, r3
 80156f4:	683b      	ldr	r3, [r7, #0]
 80156f6:	601a      	str	r2, [r3, #0]
 80156f8:	687a      	ldr	r2, [r7, #4]
 80156fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156fc:	1ad3      	subs	r3, r2, r3
 80156fe:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	2b00      	cmp	r3, #0
 8015704:	f47f af01 	bne.w	801550a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8015708:	2300      	movs	r3, #0
}
 801570a:	4618      	mov	r0, r3
 801570c:	3738      	adds	r7, #56	; 0x38
 801570e:	46bd      	mov	sp, r7
 8015710:	bd80      	pop	{r7, pc}

08015712 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8015712:	b580      	push	{r7, lr}
 8015714:	b086      	sub	sp, #24
 8015716:	af00      	add	r7, sp, #0
 8015718:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	f107 0208 	add.w	r2, r7, #8
 8015720:	4611      	mov	r1, r2
 8015722:	4618      	mov	r0, r3
 8015724:	f7ff fc7c 	bl	8015020 <validate>
 8015728:	4603      	mov	r3, r0
 801572a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801572c:	7dfb      	ldrb	r3, [r7, #23]
 801572e:	2b00      	cmp	r3, #0
 8015730:	d168      	bne.n	8015804 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	7d1b      	ldrb	r3, [r3, #20]
 8015736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801573a:	2b00      	cmp	r3, #0
 801573c:	d062      	beq.n	8015804 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	7d1b      	ldrb	r3, [r3, #20]
 8015742:	b25b      	sxtb	r3, r3
 8015744:	2b00      	cmp	r3, #0
 8015746:	da15      	bge.n	8015774 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8015748:	68bb      	ldr	r3, [r7, #8]
 801574a:	7858      	ldrb	r0, [r3, #1]
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	6a1a      	ldr	r2, [r3, #32]
 8015756:	2301      	movs	r3, #1
 8015758:	f7fd ffba 	bl	80136d0 <disk_write>
 801575c:	4603      	mov	r3, r0
 801575e:	2b00      	cmp	r3, #0
 8015760:	d001      	beq.n	8015766 <f_sync+0x54>
 8015762:	2301      	movs	r3, #1
 8015764:	e04f      	b.n	8015806 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	7d1b      	ldrb	r3, [r3, #20]
 801576a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801576e:	b2da      	uxtb	r2, r3
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8015774:	f7fa fda8 	bl	80102c8 <get_fattime>
 8015778:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801577a:	68ba      	ldr	r2, [r7, #8]
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015780:	4619      	mov	r1, r3
 8015782:	4610      	mov	r0, r2
 8015784:	f7fe fa92 	bl	8013cac <move_window>
 8015788:	4603      	mov	r3, r0
 801578a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801578c:	7dfb      	ldrb	r3, [r7, #23]
 801578e:	2b00      	cmp	r3, #0
 8015790:	d138      	bne.n	8015804 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015796:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	330b      	adds	r3, #11
 801579c:	781a      	ldrb	r2, [r3, #0]
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	330b      	adds	r3, #11
 80157a2:	f042 0220 	orr.w	r2, r2, #32
 80157a6:	b2d2      	uxtb	r2, r2
 80157a8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	6818      	ldr	r0, [r3, #0]
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	689b      	ldr	r3, [r3, #8]
 80157b2:	461a      	mov	r2, r3
 80157b4:	68f9      	ldr	r1, [r7, #12]
 80157b6:	f7fe ff9f 	bl	80146f8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	f103 021c 	add.w	r2, r3, #28
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	68db      	ldr	r3, [r3, #12]
 80157c4:	4619      	mov	r1, r3
 80157c6:	4610      	mov	r0, r2
 80157c8:	f7fe f816 	bl	80137f8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	3316      	adds	r3, #22
 80157d0:	6939      	ldr	r1, [r7, #16]
 80157d2:	4618      	mov	r0, r3
 80157d4:	f7fe f810 	bl	80137f8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80157d8:	68fb      	ldr	r3, [r7, #12]
 80157da:	3312      	adds	r3, #18
 80157dc:	2100      	movs	r1, #0
 80157de:	4618      	mov	r0, r3
 80157e0:	f7fd ffef 	bl	80137c2 <st_word>
					fs->wflag = 1;
 80157e4:	68bb      	ldr	r3, [r7, #8]
 80157e6:	2201      	movs	r2, #1
 80157e8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80157ea:	68bb      	ldr	r3, [r7, #8]
 80157ec:	4618      	mov	r0, r3
 80157ee:	f7fe fa8b 	bl	8013d08 <sync_fs>
 80157f2:	4603      	mov	r3, r0
 80157f4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	7d1b      	ldrb	r3, [r3, #20]
 80157fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80157fe:	b2da      	uxtb	r2, r3
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8015804:	7dfb      	ldrb	r3, [r7, #23]
}
 8015806:	4618      	mov	r0, r3
 8015808:	3718      	adds	r7, #24
 801580a:	46bd      	mov	sp, r7
 801580c:	bd80      	pop	{r7, pc}

0801580e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801580e:	b580      	push	{r7, lr}
 8015810:	b084      	sub	sp, #16
 8015812:	af00      	add	r7, sp, #0
 8015814:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8015816:	6878      	ldr	r0, [r7, #4]
 8015818:	f7ff ff7b 	bl	8015712 <f_sync>
 801581c:	4603      	mov	r3, r0
 801581e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8015820:	7bfb      	ldrb	r3, [r7, #15]
 8015822:	2b00      	cmp	r3, #0
 8015824:	d118      	bne.n	8015858 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	f107 0208 	add.w	r2, r7, #8
 801582c:	4611      	mov	r1, r2
 801582e:	4618      	mov	r0, r3
 8015830:	f7ff fbf6 	bl	8015020 <validate>
 8015834:	4603      	mov	r3, r0
 8015836:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8015838:	7bfb      	ldrb	r3, [r7, #15]
 801583a:	2b00      	cmp	r3, #0
 801583c:	d10c      	bne.n	8015858 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	691b      	ldr	r3, [r3, #16]
 8015842:	4618      	mov	r0, r3
 8015844:	f7fe f98e 	bl	8013b64 <dec_lock>
 8015848:	4603      	mov	r3, r0
 801584a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801584c:	7bfb      	ldrb	r3, [r7, #15]
 801584e:	2b00      	cmp	r3, #0
 8015850:	d102      	bne.n	8015858 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	2200      	movs	r2, #0
 8015856:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8015858:	7bfb      	ldrb	r3, [r7, #15]
}
 801585a:	4618      	mov	r0, r3
 801585c:	3710      	adds	r7, #16
 801585e:	46bd      	mov	sp, r7
 8015860:	bd80      	pop	{r7, pc}

08015862 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8015862:	b580      	push	{r7, lr}
 8015864:	b088      	sub	sp, #32
 8015866:	af00      	add	r7, sp, #0
 8015868:	60f8      	str	r0, [r7, #12]
 801586a:	60b9      	str	r1, [r7, #8]
 801586c:	607a      	str	r2, [r7, #4]
	int n = 0;
 801586e:	2300      	movs	r3, #0
 8015870:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8015876:	e01b      	b.n	80158b0 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8015878:	f107 0310 	add.w	r3, r7, #16
 801587c:	f107 0114 	add.w	r1, r7, #20
 8015880:	2201      	movs	r2, #1
 8015882:	6878      	ldr	r0, [r7, #4]
 8015884:	f7ff fe06 	bl	8015494 <f_read>
		if (rc != 1) break;
 8015888:	693b      	ldr	r3, [r7, #16]
 801588a:	2b01      	cmp	r3, #1
 801588c:	d116      	bne.n	80158bc <f_gets+0x5a>
		c = s[0];
 801588e:	7d3b      	ldrb	r3, [r7, #20]
 8015890:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8015892:	7dfb      	ldrb	r3, [r7, #23]
 8015894:	2b0d      	cmp	r3, #13
 8015896:	d100      	bne.n	801589a <f_gets+0x38>
 8015898:	e00a      	b.n	80158b0 <f_gets+0x4e>
		*p++ = c;
 801589a:	69bb      	ldr	r3, [r7, #24]
 801589c:	1c5a      	adds	r2, r3, #1
 801589e:	61ba      	str	r2, [r7, #24]
 80158a0:	7dfa      	ldrb	r2, [r7, #23]
 80158a2:	701a      	strb	r2, [r3, #0]
		n++;
 80158a4:	69fb      	ldr	r3, [r7, #28]
 80158a6:	3301      	adds	r3, #1
 80158a8:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80158aa:	7dfb      	ldrb	r3, [r7, #23]
 80158ac:	2b0a      	cmp	r3, #10
 80158ae:	d007      	beq.n	80158c0 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80158b0:	68bb      	ldr	r3, [r7, #8]
 80158b2:	3b01      	subs	r3, #1
 80158b4:	69fa      	ldr	r2, [r7, #28]
 80158b6:	429a      	cmp	r2, r3
 80158b8:	dbde      	blt.n	8015878 <f_gets+0x16>
 80158ba:	e002      	b.n	80158c2 <f_gets+0x60>
		if (rc != 1) break;
 80158bc:	bf00      	nop
 80158be:	e000      	b.n	80158c2 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 80158c0:	bf00      	nop
	}
	*p = 0;
 80158c2:	69bb      	ldr	r3, [r7, #24]
 80158c4:	2200      	movs	r2, #0
 80158c6:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80158c8:	69fb      	ldr	r3, [r7, #28]
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d001      	beq.n	80158d2 <f_gets+0x70>
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	e000      	b.n	80158d4 <f_gets+0x72>
 80158d2:	2300      	movs	r3, #0
}
 80158d4:	4618      	mov	r0, r3
 80158d6:	3720      	adds	r7, #32
 80158d8:	46bd      	mov	sp, r7
 80158da:	bd80      	pop	{r7, pc}

080158dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80158dc:	b480      	push	{r7}
 80158de:	b087      	sub	sp, #28
 80158e0:	af00      	add	r7, sp, #0
 80158e2:	60f8      	str	r0, [r7, #12]
 80158e4:	60b9      	str	r1, [r7, #8]
 80158e6:	4613      	mov	r3, r2
 80158e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80158ea:	2301      	movs	r3, #1
 80158ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80158ee:	2300      	movs	r3, #0
 80158f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80158f2:	4b1f      	ldr	r3, [pc, #124]	; (8015970 <FATFS_LinkDriverEx+0x94>)
 80158f4:	7a5b      	ldrb	r3, [r3, #9]
 80158f6:	b2db      	uxtb	r3, r3
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d131      	bne.n	8015960 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80158fc:	4b1c      	ldr	r3, [pc, #112]	; (8015970 <FATFS_LinkDriverEx+0x94>)
 80158fe:	7a5b      	ldrb	r3, [r3, #9]
 8015900:	b2db      	uxtb	r3, r3
 8015902:	461a      	mov	r2, r3
 8015904:	4b1a      	ldr	r3, [pc, #104]	; (8015970 <FATFS_LinkDriverEx+0x94>)
 8015906:	2100      	movs	r1, #0
 8015908:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801590a:	4b19      	ldr	r3, [pc, #100]	; (8015970 <FATFS_LinkDriverEx+0x94>)
 801590c:	7a5b      	ldrb	r3, [r3, #9]
 801590e:	b2db      	uxtb	r3, r3
 8015910:	4a17      	ldr	r2, [pc, #92]	; (8015970 <FATFS_LinkDriverEx+0x94>)
 8015912:	009b      	lsls	r3, r3, #2
 8015914:	4413      	add	r3, r2
 8015916:	68fa      	ldr	r2, [r7, #12]
 8015918:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801591a:	4b15      	ldr	r3, [pc, #84]	; (8015970 <FATFS_LinkDriverEx+0x94>)
 801591c:	7a5b      	ldrb	r3, [r3, #9]
 801591e:	b2db      	uxtb	r3, r3
 8015920:	461a      	mov	r2, r3
 8015922:	4b13      	ldr	r3, [pc, #76]	; (8015970 <FATFS_LinkDriverEx+0x94>)
 8015924:	4413      	add	r3, r2
 8015926:	79fa      	ldrb	r2, [r7, #7]
 8015928:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801592a:	4b11      	ldr	r3, [pc, #68]	; (8015970 <FATFS_LinkDriverEx+0x94>)
 801592c:	7a5b      	ldrb	r3, [r3, #9]
 801592e:	b2db      	uxtb	r3, r3
 8015930:	1c5a      	adds	r2, r3, #1
 8015932:	b2d1      	uxtb	r1, r2
 8015934:	4a0e      	ldr	r2, [pc, #56]	; (8015970 <FATFS_LinkDriverEx+0x94>)
 8015936:	7251      	strb	r1, [r2, #9]
 8015938:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801593a:	7dbb      	ldrb	r3, [r7, #22]
 801593c:	3330      	adds	r3, #48	; 0x30
 801593e:	b2da      	uxtb	r2, r3
 8015940:	68bb      	ldr	r3, [r7, #8]
 8015942:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015944:	68bb      	ldr	r3, [r7, #8]
 8015946:	3301      	adds	r3, #1
 8015948:	223a      	movs	r2, #58	; 0x3a
 801594a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801594c:	68bb      	ldr	r3, [r7, #8]
 801594e:	3302      	adds	r3, #2
 8015950:	222f      	movs	r2, #47	; 0x2f
 8015952:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015954:	68bb      	ldr	r3, [r7, #8]
 8015956:	3303      	adds	r3, #3
 8015958:	2200      	movs	r2, #0
 801595a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801595c:	2300      	movs	r3, #0
 801595e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015960:	7dfb      	ldrb	r3, [r7, #23]
}
 8015962:	4618      	mov	r0, r3
 8015964:	371c      	adds	r7, #28
 8015966:	46bd      	mov	sp, r7
 8015968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801596c:	4770      	bx	lr
 801596e:	bf00      	nop
 8015970:	240308a0 	.word	0x240308a0

08015974 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015974:	b580      	push	{r7, lr}
 8015976:	b082      	sub	sp, #8
 8015978:	af00      	add	r7, sp, #0
 801597a:	6078      	str	r0, [r7, #4]
 801597c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801597e:	2200      	movs	r2, #0
 8015980:	6839      	ldr	r1, [r7, #0]
 8015982:	6878      	ldr	r0, [r7, #4]
 8015984:	f7ff ffaa 	bl	80158dc <FATFS_LinkDriverEx>
 8015988:	4603      	mov	r3, r0
}
 801598a:	4618      	mov	r0, r3
 801598c:	3708      	adds	r7, #8
 801598e:	46bd      	mov	sp, r7
 8015990:	bd80      	pop	{r7, pc}
	...

08015994 <loadSVMParams>:
}




void loadSVMParams(char filename[], svm_model* model){
 8015994:	b590      	push	{r4, r7, lr}
 8015996:	f2ad 6d94 	subw	sp, sp, #1684	; 0x694
 801599a:	af00      	add	r7, sp, #0
 801599c:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 80159a0:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 80159a4:	6018      	str	r0, [r3, #0]
 80159a6:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 80159aa:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 80159ae:	6019      	str	r1, [r3, #0]

	FIL fp;
	char line[1024];
	char *token;

	if (Appli_state == APPLICATION_READY) {
 80159b0:	4bc2      	ldr	r3, [pc, #776]	; (8015cbc <loadSVMParams+0x328>)
 80159b2:	781b      	ldrb	r3, [r3, #0]
 80159b4:	2b02      	cmp	r3, #2
 80159b6:	f040 8383 	bne.w	80160c0 <loadSVMParams+0x72c>

		if(f_mount(&USBH_fatfs, USBHPath, 0) != FR_OK){
 80159ba:	2200      	movs	r2, #0
 80159bc:	49c0      	ldr	r1, [pc, #768]	; (8015cc0 <loadSVMParams+0x32c>)
 80159be:	48c1      	ldr	r0, [pc, #772]	; (8015cc4 <loadSVMParams+0x330>)
 80159c0:	f7ff fb64 	bl	801508c <f_mount>
 80159c4:	4603      	mov	r3, r0
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d001      	beq.n	80159ce <loadSVMParams+0x3a>
				 Error_Handler();
 80159ca:	f7ec fd57 	bl	800247c <Error_Handler>
		 }

		if (f_open(&fp, filename, FA_READ) != FR_OK ) {
 80159ce:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 80159d2:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 80159d6:	f207 400c 	addw	r0, r7, #1036	; 0x40c
 80159da:	2201      	movs	r2, #1
 80159dc:	6819      	ldr	r1, [r3, #0]
 80159de:	f7ff fb9b 	bl	8015118 <f_open>
 80159e2:	4603      	mov	r3, r0
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	f000 834f 	beq.w	8016088 <loadSVMParams+0x6f4>
			Error_Handler();
 80159ea:	f7ec fd47 	bl	800247c <Error_Handler>
		}


	    /* Read every line and display it */
	    while (f_gets(line, sizeof(line), &fp)) {
 80159ee:	e34b      	b.n	8016088 <loadSVMParams+0x6f4>

	    	token = strtok(line, " ");
 80159f0:	f107 030c 	add.w	r3, r7, #12
 80159f4:	49b4      	ldr	r1, [pc, #720]	; (8015cc8 <loadSVMParams+0x334>)
 80159f6:	4618      	mov	r0, r3
 80159f8:	f003 ffd4 	bl	80199a4 <strtok>
 80159fc:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c

	    	if(strcmp(token, "svm_type") == 0){
 8015a00:	49b2      	ldr	r1, [pc, #712]	; (8015ccc <loadSVMParams+0x338>)
 8015a02:	f8d7 068c 	ldr.w	r0, [r7, #1676]	; 0x68c
 8015a06:	f7ea fc6b 	bl	80002e0 <strcmp>
 8015a0a:	4603      	mov	r3, r0
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	f000 833b 	beq.w	8016088 <loadSVMParams+0x6f4>
	    		// do nothing
	    	}

	    	else if(strcmp(token, "kernel_type") == 0){
 8015a12:	49af      	ldr	r1, [pc, #700]	; (8015cd0 <loadSVMParams+0x33c>)
 8015a14:	f8d7 068c 	ldr.w	r0, [r7, #1676]	; 0x68c
 8015a18:	f7ea fc62 	bl	80002e0 <strcmp>
 8015a1c:	4603      	mov	r3, r0
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	f000 8332 	beq.w	8016088 <loadSVMParams+0x6f4>
	    		// do nothing
	    	}

	    	else if(strcmp(token, "gamma") == 0){
 8015a24:	49ab      	ldr	r1, [pc, #684]	; (8015cd4 <loadSVMParams+0x340>)
 8015a26:	f8d7 068c 	ldr.w	r0, [r7, #1676]	; 0x68c
 8015a2a:	f7ea fc59 	bl	80002e0 <strcmp>
 8015a2e:	4603      	mov	r3, r0
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d116      	bne.n	8015a62 <loadSVMParams+0xce>
	    		token = strtok(NULL, " ");
 8015a34:	49a4      	ldr	r1, [pc, #656]	; (8015cc8 <loadSVMParams+0x334>)
 8015a36:	2000      	movs	r0, #0
 8015a38:	f003 ffb4 	bl	80199a4 <strtok>
 8015a3c:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
	    		model->gamma = strtod(token, NULL);
 8015a40:	2100      	movs	r1, #0
 8015a42:	f8d7 068c 	ldr.w	r0, [r7, #1676]	; 0x68c
 8015a46:	f003 ffa1 	bl	801998c <strtod>
 8015a4a:	eeb0 7b40 	vmov.f64	d7, d0
 8015a4e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8015a52:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8015a56:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 8015a5a:	681b      	ldr	r3, [r3, #0]
 8015a5c:	edc3 7a00 	vstr	s15, [r3]
 8015a60:	e312      	b.n	8016088 <loadSVMParams+0x6f4>
	    	}

	    	else if(strcmp(token, "n_class") == 0){
 8015a62:	499d      	ldr	r1, [pc, #628]	; (8015cd8 <loadSVMParams+0x344>)
 8015a64:	f8d7 068c 	ldr.w	r0, [r7, #1676]	; 0x68c
 8015a68:	f7ea fc3a 	bl	80002e0 <strcmp>
 8015a6c:	4603      	mov	r3, r0
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d111      	bne.n	8015a96 <loadSVMParams+0x102>
	    		token = strtok(NULL, " ");
 8015a72:	4995      	ldr	r1, [pc, #596]	; (8015cc8 <loadSVMParams+0x334>)
 8015a74:	2000      	movs	r0, #0
 8015a76:	f003 ff95 	bl	80199a4 <strtok>
 8015a7a:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
	    		model->n_class = atoi(token);
 8015a7e:	f8d7 068c 	ldr.w	r0, [r7, #1676]	; 0x68c
 8015a82:	f002 fc01 	bl	8018288 <atoi>
 8015a86:	4602      	mov	r2, r0
 8015a88:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8015a8c:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 8015a90:	681b      	ldr	r3, [r3, #0]
 8015a92:	605a      	str	r2, [r3, #4]
 8015a94:	e2f8      	b.n	8016088 <loadSVMParams+0x6f4>
	    	}

	    	else if(strcmp(token, "total_n_sv") == 0){
 8015a96:	4991      	ldr	r1, [pc, #580]	; (8015cdc <loadSVMParams+0x348>)
 8015a98:	f8d7 068c 	ldr.w	r0, [r7, #1676]	; 0x68c
 8015a9c:	f7ea fc20 	bl	80002e0 <strcmp>
 8015aa0:	4603      	mov	r3, r0
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d111      	bne.n	8015aca <loadSVMParams+0x136>
	    		token = strtok(NULL, " ");
 8015aa6:	4988      	ldr	r1, [pc, #544]	; (8015cc8 <loadSVMParams+0x334>)
 8015aa8:	2000      	movs	r0, #0
 8015aaa:	f003 ff7b 	bl	80199a4 <strtok>
 8015aae:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
	    		model->total_n_sv = atoi(token);
 8015ab2:	f8d7 068c 	ldr.w	r0, [r7, #1676]	; 0x68c
 8015ab6:	f002 fbe7 	bl	8018288 <atoi>
 8015aba:	4602      	mov	r2, r0
 8015abc:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8015ac0:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 8015ac4:	681b      	ldr	r3, [r3, #0]
 8015ac6:	609a      	str	r2, [r3, #8]
 8015ac8:	e2de      	b.n	8016088 <loadSVMParams+0x6f4>
	    	}

	    	else if(strcmp(token, "intercept") == 0){
 8015aca:	4985      	ldr	r1, [pc, #532]	; (8015ce0 <loadSVMParams+0x34c>)
 8015acc:	f8d7 068c 	ldr.w	r0, [r7, #1676]	; 0x68c
 8015ad0:	f7ea fc06 	bl	80002e0 <strcmp>
 8015ad4:	4603      	mov	r3, r0
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d14d      	bne.n	8015b76 <loadSVMParams+0x1e2>
				int n = model->n_class * (model->n_class - 1)/2;
 8015ada:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8015ade:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 8015ae2:	681b      	ldr	r3, [r3, #0]
 8015ae4:	685b      	ldr	r3, [r3, #4]
 8015ae6:	f507 62d2 	add.w	r2, r7, #1680	; 0x690
 8015aea:	f5a2 62d2 	sub.w	r2, r2, #1680	; 0x690
 8015aee:	6812      	ldr	r2, [r2, #0]
 8015af0:	6852      	ldr	r2, [r2, #4]
 8015af2:	3a01      	subs	r2, #1
 8015af4:	fb02 f303 	mul.w	r3, r2, r3
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	da00      	bge.n	8015afe <loadSVMParams+0x16a>
 8015afc:	3301      	adds	r3, #1
 8015afe:	105b      	asrs	r3, r3, #1
 8015b00:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
				model->intercept = (float *)malloc(sizeof(float)*n);
 8015b04:	f8d7 363c 	ldr.w	r3, [r7, #1596]	; 0x63c
 8015b08:	009b      	lsls	r3, r3, #2
 8015b0a:	4618      	mov	r0, r3
 8015b0c:	f002 fbfe 	bl	801830c <malloc>
 8015b10:	4603      	mov	r3, r0
 8015b12:	461a      	mov	r2, r3
 8015b14:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8015b18:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	60da      	str	r2, [r3, #12]
				for(int i=0; i<n; i++){
 8015b20:	2300      	movs	r3, #0
 8015b22:	f8c7 3688 	str.w	r3, [r7, #1672]	; 0x688
 8015b26:	e01f      	b.n	8015b68 <loadSVMParams+0x1d4>
		    		token = strtok(NULL, " ");
 8015b28:	4967      	ldr	r1, [pc, #412]	; (8015cc8 <loadSVMParams+0x334>)
 8015b2a:	2000      	movs	r0, #0
 8015b2c:	f003 ff3a 	bl	80199a4 <strtok>
 8015b30:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
					model->intercept[i] = strtod(token, NULL);
 8015b34:	2100      	movs	r1, #0
 8015b36:	f8d7 068c 	ldr.w	r0, [r7, #1676]	; 0x68c
 8015b3a:	f003 ff27 	bl	801998c <strtod>
 8015b3e:	eeb0 7b40 	vmov.f64	d7, d0
 8015b42:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8015b46:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	68da      	ldr	r2, [r3, #12]
 8015b4e:	f8d7 3688 	ldr.w	r3, [r7, #1672]	; 0x688
 8015b52:	009b      	lsls	r3, r3, #2
 8015b54:	4413      	add	r3, r2
 8015b56:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8015b5a:	edc3 7a00 	vstr	s15, [r3]
				for(int i=0; i<n; i++){
 8015b5e:	f8d7 3688 	ldr.w	r3, [r7, #1672]	; 0x688
 8015b62:	3301      	adds	r3, #1
 8015b64:	f8c7 3688 	str.w	r3, [r7, #1672]	; 0x688
 8015b68:	f8d7 2688 	ldr.w	r2, [r7, #1672]	; 0x688
 8015b6c:	f8d7 363c 	ldr.w	r3, [r7, #1596]	; 0x63c
 8015b70:	429a      	cmp	r2, r3
 8015b72:	dbd9      	blt.n	8015b28 <loadSVMParams+0x194>
 8015b74:	e288      	b.n	8016088 <loadSVMParams+0x6f4>
				}
	    	}

	    	else if(strcmp(token, "label") == 0){
 8015b76:	495b      	ldr	r1, [pc, #364]	; (8015ce4 <loadSVMParams+0x350>)
 8015b78:	f8d7 068c 	ldr.w	r0, [r7, #1676]	; 0x68c
 8015b7c:	f7ea fbb0 	bl	80002e0 <strcmp>
 8015b80:	4603      	mov	r3, r0
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d13b      	bne.n	8015bfe <loadSVMParams+0x26a>
	    		int n = model->n_class;
 8015b86:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8015b8a:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	685b      	ldr	r3, [r3, #4]
 8015b92:	f8c7 3640 	str.w	r3, [r7, #1600]	; 0x640
				model->label = (int *)malloc(sizeof(int)*n);
 8015b96:	f8d7 3640 	ldr.w	r3, [r7, #1600]	; 0x640
 8015b9a:	009b      	lsls	r3, r3, #2
 8015b9c:	4618      	mov	r0, r3
 8015b9e:	f002 fbb5 	bl	801830c <malloc>
 8015ba2:	4603      	mov	r3, r0
 8015ba4:	461a      	mov	r2, r3
 8015ba6:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8015baa:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 8015bae:	681b      	ldr	r3, [r3, #0]
 8015bb0:	611a      	str	r2, [r3, #16]
				for(int i=0; i<n; i++){
 8015bb2:	2300      	movs	r3, #0
 8015bb4:	f8c7 3684 	str.w	r3, [r7, #1668]	; 0x684
 8015bb8:	e01a      	b.n	8015bf0 <loadSVMParams+0x25c>
		    		token = strtok(NULL, " ");
 8015bba:	4943      	ldr	r1, [pc, #268]	; (8015cc8 <loadSVMParams+0x334>)
 8015bbc:	2000      	movs	r0, #0
 8015bbe:	f003 fef1 	bl	80199a4 <strtok>
 8015bc2:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
					model->label[i] = atoi(token);
 8015bc6:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8015bca:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	691a      	ldr	r2, [r3, #16]
 8015bd2:	f8d7 3684 	ldr.w	r3, [r7, #1668]	; 0x684
 8015bd6:	009b      	lsls	r3, r3, #2
 8015bd8:	18d4      	adds	r4, r2, r3
 8015bda:	f8d7 068c 	ldr.w	r0, [r7, #1676]	; 0x68c
 8015bde:	f002 fb53 	bl	8018288 <atoi>
 8015be2:	4603      	mov	r3, r0
 8015be4:	6023      	str	r3, [r4, #0]
				for(int i=0; i<n; i++){
 8015be6:	f8d7 3684 	ldr.w	r3, [r7, #1668]	; 0x684
 8015bea:	3301      	adds	r3, #1
 8015bec:	f8c7 3684 	str.w	r3, [r7, #1668]	; 0x684
 8015bf0:	f8d7 2684 	ldr.w	r2, [r7, #1668]	; 0x684
 8015bf4:	f8d7 3640 	ldr.w	r3, [r7, #1600]	; 0x640
 8015bf8:	429a      	cmp	r2, r3
 8015bfa:	dbde      	blt.n	8015bba <loadSVMParams+0x226>
 8015bfc:	e244      	b.n	8016088 <loadSVMParams+0x6f4>
				}
	    	}

	    	else if(strcmp(token, "n_sv") == 0){
 8015bfe:	493a      	ldr	r1, [pc, #232]	; (8015ce8 <loadSVMParams+0x354>)
 8015c00:	f8d7 068c 	ldr.w	r0, [r7, #1676]	; 0x68c
 8015c04:	f7ea fb6c 	bl	80002e0 <strcmp>
 8015c08:	4603      	mov	r3, r0
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d13b      	bne.n	8015c86 <loadSVMParams+0x2f2>
				int n = model->n_class;
 8015c0e:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8015c12:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	685b      	ldr	r3, [r3, #4]
 8015c1a:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
				model->n_sv = (int *)malloc(sizeof(int)*n);
 8015c1e:	f8d7 3644 	ldr.w	r3, [r7, #1604]	; 0x644
 8015c22:	009b      	lsls	r3, r3, #2
 8015c24:	4618      	mov	r0, r3
 8015c26:	f002 fb71 	bl	801830c <malloc>
 8015c2a:	4603      	mov	r3, r0
 8015c2c:	461a      	mov	r2, r3
 8015c2e:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8015c32:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 8015c36:	681b      	ldr	r3, [r3, #0]
 8015c38:	615a      	str	r2, [r3, #20]
				for(int i=0;i<n;i++){
 8015c3a:	2300      	movs	r3, #0
 8015c3c:	f8c7 3680 	str.w	r3, [r7, #1664]	; 0x680
 8015c40:	e01a      	b.n	8015c78 <loadSVMParams+0x2e4>
		    		token = strtok(NULL, " ");
 8015c42:	4921      	ldr	r1, [pc, #132]	; (8015cc8 <loadSVMParams+0x334>)
 8015c44:	2000      	movs	r0, #0
 8015c46:	f003 fead 	bl	80199a4 <strtok>
 8015c4a:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
					model->n_sv[i] = atoi(token);
 8015c4e:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8015c52:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 8015c56:	681b      	ldr	r3, [r3, #0]
 8015c58:	695a      	ldr	r2, [r3, #20]
 8015c5a:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8015c5e:	009b      	lsls	r3, r3, #2
 8015c60:	18d4      	adds	r4, r2, r3
 8015c62:	f8d7 068c 	ldr.w	r0, [r7, #1676]	; 0x68c
 8015c66:	f002 fb0f 	bl	8018288 <atoi>
 8015c6a:	4603      	mov	r3, r0
 8015c6c:	6023      	str	r3, [r4, #0]
				for(int i=0;i<n;i++){
 8015c6e:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8015c72:	3301      	adds	r3, #1
 8015c74:	f8c7 3680 	str.w	r3, [r7, #1664]	; 0x680
 8015c78:	f8d7 2680 	ldr.w	r2, [r7, #1664]	; 0x680
 8015c7c:	f8d7 3644 	ldr.w	r3, [r7, #1604]	; 0x644
 8015c80:	429a      	cmp	r2, r3
 8015c82:	dbde      	blt.n	8015c42 <loadSVMParams+0x2ae>
 8015c84:	e200      	b.n	8016088 <loadSVMParams+0x6f4>
				}
	    	}

	    	else if(strcmp(token, "n_feature") == 0){
 8015c86:	4919      	ldr	r1, [pc, #100]	; (8015cec <loadSVMParams+0x358>)
 8015c88:	f8d7 068c 	ldr.w	r0, [r7, #1676]	; 0x68c
 8015c8c:	f7ea fb28 	bl	80002e0 <strcmp>
 8015c90:	4603      	mov	r3, r0
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d12c      	bne.n	8015cf0 <loadSVMParams+0x35c>
	    		token = strtok(NULL, " ");
 8015c96:	490c      	ldr	r1, [pc, #48]	; (8015cc8 <loadSVMParams+0x334>)
 8015c98:	2000      	movs	r0, #0
 8015c9a:	f003 fe83 	bl	80199a4 <strtok>
 8015c9e:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
	    		model->n_feature = atoi(token);
 8015ca2:	f8d7 068c 	ldr.w	r0, [r7, #1676]	; 0x68c
 8015ca6:	f002 faef 	bl	8018288 <atoi>
 8015caa:	4602      	mov	r2, r0
 8015cac:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8015cb0:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	619a      	str	r2, [r3, #24]
 8015cb8:	e1e6      	b.n	8016088 <loadSVMParams+0x6f4>
 8015cba:	bf00      	nop
 8015cbc:	24030eb4 	.word	0x24030eb4
 8015cc0:	24030874 	.word	0x24030874
 8015cc4:	240308ac 	.word	0x240308ac
 8015cc8:	0801c3e0 	.word	0x0801c3e0
 8015ccc:	0801c3e4 	.word	0x0801c3e4
 8015cd0:	0801c3f0 	.word	0x0801c3f0
 8015cd4:	0801c3fc 	.word	0x0801c3fc
 8015cd8:	0801c404 	.word	0x0801c404
 8015cdc:	0801c40c 	.word	0x0801c40c
 8015ce0:	0801c418 	.word	0x0801c418
 8015ce4:	0801c424 	.word	0x0801c424
 8015ce8:	0801c42c 	.word	0x0801c42c
 8015cec:	0801c434 	.word	0x0801c434
	    	}
	    	else if(strcmp(token, "scaler_min") == 0){
 8015cf0:	49c5      	ldr	r1, [pc, #788]	; (8016008 <loadSVMParams+0x674>)
 8015cf2:	f8d7 068c 	ldr.w	r0, [r7, #1676]	; 0x68c
 8015cf6:	f7ea faf3 	bl	80002e0 <strcmp>
 8015cfa:	4603      	mov	r3, r0
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d140      	bne.n	8015d82 <loadSVMParams+0x3ee>
				int n = model->n_feature;
 8015d00:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8015d04:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	699b      	ldr	r3, [r3, #24]
 8015d0c:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
				model->scaler_min = (float *)malloc(sizeof(float)*n);
 8015d10:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 8015d14:	009b      	lsls	r3, r3, #2
 8015d16:	4618      	mov	r0, r3
 8015d18:	f002 faf8 	bl	801830c <malloc>
 8015d1c:	4603      	mov	r3, r0
 8015d1e:	461a      	mov	r2, r3
 8015d20:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8015d24:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	61da      	str	r2, [r3, #28]
				for(int i=0; i<n; i++){
 8015d2c:	2300      	movs	r3, #0
 8015d2e:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 8015d32:	e01f      	b.n	8015d74 <loadSVMParams+0x3e0>
		    		token = strtok(NULL, " ");
 8015d34:	49b5      	ldr	r1, [pc, #724]	; (801600c <loadSVMParams+0x678>)
 8015d36:	2000      	movs	r0, #0
 8015d38:	f003 fe34 	bl	80199a4 <strtok>
 8015d3c:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
					model->scaler_min[i] = strtod(token, NULL);
 8015d40:	2100      	movs	r1, #0
 8015d42:	f8d7 068c 	ldr.w	r0, [r7, #1676]	; 0x68c
 8015d46:	f003 fe21 	bl	801998c <strtod>
 8015d4a:	eeb0 7b40 	vmov.f64	d7, d0
 8015d4e:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8015d52:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	69da      	ldr	r2, [r3, #28]
 8015d5a:	f8d7 367c 	ldr.w	r3, [r7, #1660]	; 0x67c
 8015d5e:	009b      	lsls	r3, r3, #2
 8015d60:	4413      	add	r3, r2
 8015d62:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8015d66:	edc3 7a00 	vstr	s15, [r3]
				for(int i=0; i<n; i++){
 8015d6a:	f8d7 367c 	ldr.w	r3, [r7, #1660]	; 0x67c
 8015d6e:	3301      	adds	r3, #1
 8015d70:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 8015d74:	f8d7 267c 	ldr.w	r2, [r7, #1660]	; 0x67c
 8015d78:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 8015d7c:	429a      	cmp	r2, r3
 8015d7e:	dbd9      	blt.n	8015d34 <loadSVMParams+0x3a0>
 8015d80:	e182      	b.n	8016088 <loadSVMParams+0x6f4>
				}

	    	}
	    	else if(strcmp(token, "scaler_max") == 0){
 8015d82:	49a3      	ldr	r1, [pc, #652]	; (8016010 <loadSVMParams+0x67c>)
 8015d84:	f8d7 068c 	ldr.w	r0, [r7, #1676]	; 0x68c
 8015d88:	f7ea faaa 	bl	80002e0 <strcmp>
 8015d8c:	4603      	mov	r3, r0
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d140      	bne.n	8015e14 <loadSVMParams+0x480>
				int n = model->n_feature;
 8015d92:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8015d96:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 8015d9a:	681b      	ldr	r3, [r3, #0]
 8015d9c:	699b      	ldr	r3, [r3, #24]
 8015d9e:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
				model->scaler_max = (float *)malloc(sizeof(float)*n);
 8015da2:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 8015da6:	009b      	lsls	r3, r3, #2
 8015da8:	4618      	mov	r0, r3
 8015daa:	f002 faaf 	bl	801830c <malloc>
 8015dae:	4603      	mov	r3, r0
 8015db0:	461a      	mov	r2, r3
 8015db2:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8015db6:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 8015dba:	681b      	ldr	r3, [r3, #0]
 8015dbc:	621a      	str	r2, [r3, #32]
				for(int i=0; i<n; i++){
 8015dbe:	2300      	movs	r3, #0
 8015dc0:	f8c7 3678 	str.w	r3, [r7, #1656]	; 0x678
 8015dc4:	e01f      	b.n	8015e06 <loadSVMParams+0x472>
		    		token = strtok(NULL, " ");
 8015dc6:	4991      	ldr	r1, [pc, #580]	; (801600c <loadSVMParams+0x678>)
 8015dc8:	2000      	movs	r0, #0
 8015dca:	f003 fdeb 	bl	80199a4 <strtok>
 8015dce:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
					model->scaler_max[i] = strtod(token, NULL);
 8015dd2:	2100      	movs	r1, #0
 8015dd4:	f8d7 068c 	ldr.w	r0, [r7, #1676]	; 0x68c
 8015dd8:	f003 fdd8 	bl	801998c <strtod>
 8015ddc:	eeb0 7b40 	vmov.f64	d7, d0
 8015de0:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8015de4:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 8015de8:	681b      	ldr	r3, [r3, #0]
 8015dea:	6a1a      	ldr	r2, [r3, #32]
 8015dec:	f8d7 3678 	ldr.w	r3, [r7, #1656]	; 0x678
 8015df0:	009b      	lsls	r3, r3, #2
 8015df2:	4413      	add	r3, r2
 8015df4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8015df8:	edc3 7a00 	vstr	s15, [r3]
				for(int i=0; i<n; i++){
 8015dfc:	f8d7 3678 	ldr.w	r3, [r7, #1656]	; 0x678
 8015e00:	3301      	adds	r3, #1
 8015e02:	f8c7 3678 	str.w	r3, [r7, #1656]	; 0x678
 8015e06:	f8d7 2678 	ldr.w	r2, [r7, #1656]	; 0x678
 8015e0a:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 8015e0e:	429a      	cmp	r2, r3
 8015e10:	dbd9      	blt.n	8015dc6 <loadSVMParams+0x432>
 8015e12:	e139      	b.n	8016088 <loadSVMParams+0x6f4>
				}

	    	}

	    	else if(strcmp(token, "SV") == 0){
 8015e14:	497f      	ldr	r1, [pc, #508]	; (8016014 <loadSVMParams+0x680>)
 8015e16:	f8d7 068c 	ldr.w	r0, [r7, #1676]	; 0x68c
 8015e1a:	f7ea fa61 	bl	80002e0 <strcmp>
 8015e1e:	4603      	mov	r3, r0
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	f040 808f 	bne.w	8015f44 <loadSVMParams+0x5b0>

	    		int total_n_sv = model->total_n_sv;
 8015e26:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8015e2a:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 8015e2e:	681b      	ldr	r3, [r3, #0]
 8015e30:	689b      	ldr	r3, [r3, #8]
 8015e32:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
	    		int n_feature = model->n_feature;
 8015e36:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8015e3a:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	699b      	ldr	r3, [r3, #24]
 8015e42:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650

	    		// allocate memory for support vectors, size (total_n_sv, n_feature)
	    		model->SV = malloc(sizeof(float *)*total_n_sv);
 8015e46:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8015e4a:	009b      	lsls	r3, r3, #2
 8015e4c:	4618      	mov	r0, r3
 8015e4e:	f002 fa5d 	bl	801830c <malloc>
 8015e52:	4603      	mov	r3, r0
 8015e54:	461a      	mov	r2, r3
 8015e56:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8015e5a:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 8015e5e:	681b      	ldr	r3, [r3, #0]
 8015e60:	625a      	str	r2, [r3, #36]	; 0x24
	    		for(int i=0; i<total_n_sv; i++){
 8015e62:	2300      	movs	r3, #0
 8015e64:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
 8015e68:	e016      	b.n	8015e98 <loadSVMParams+0x504>
	    			model->SV[i] = (float *)malloc(sizeof(float)*n_feature);
 8015e6a:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8015e6e:	0099      	lsls	r1, r3, #2
 8015e70:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8015e74:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 8015e78:	681b      	ldr	r3, [r3, #0]
 8015e7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015e7c:	f8d7 3674 	ldr.w	r3, [r7, #1652]	; 0x674
 8015e80:	009b      	lsls	r3, r3, #2
 8015e82:	18d4      	adds	r4, r2, r3
 8015e84:	4608      	mov	r0, r1
 8015e86:	f002 fa41 	bl	801830c <malloc>
 8015e8a:	4603      	mov	r3, r0
 8015e8c:	6023      	str	r3, [r4, #0]
	    		for(int i=0; i<total_n_sv; i++){
 8015e8e:	f8d7 3674 	ldr.w	r3, [r7, #1652]	; 0x674
 8015e92:	3301      	adds	r3, #1
 8015e94:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
 8015e98:	f8d7 2674 	ldr.w	r2, [r7, #1652]	; 0x674
 8015e9c:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8015ea0:	429a      	cmp	r2, r3
 8015ea2:	dbe2      	blt.n	8015e6a <loadSVMParams+0x4d6>
	    		}

	    		// parse value
	    		for(int i=0; i<total_n_sv; i++){
 8015ea4:	2300      	movs	r3, #0
 8015ea6:	f8c7 3670 	str.w	r3, [r7, #1648]	; 0x670
 8015eaa:	e044      	b.n	8015f36 <loadSVMParams+0x5a2>
	    			f_gets(line, sizeof(line), &fp);
 8015eac:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 8015eb0:	f107 030c 	add.w	r3, r7, #12
 8015eb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8015eb8:	4618      	mov	r0, r3
 8015eba:	f7ff fcd2 	bl	8015862 <f_gets>
	    	    	token = strtok(line, " ");
 8015ebe:	f107 030c 	add.w	r3, r7, #12
 8015ec2:	4952      	ldr	r1, [pc, #328]	; (801600c <loadSVMParams+0x678>)
 8015ec4:	4618      	mov	r0, r3
 8015ec6:	f003 fd6d 	bl	80199a4 <strtok>
 8015eca:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
	    			for(int j=0; j<n_feature; j++){
 8015ece:	2300      	movs	r3, #0
 8015ed0:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
 8015ed4:	e024      	b.n	8015f20 <loadSVMParams+0x58c>
	    				model->SV[i][j] = strtod(token, NULL);
 8015ed6:	2100      	movs	r1, #0
 8015ed8:	f8d7 068c 	ldr.w	r0, [r7, #1676]	; 0x68c
 8015edc:	f003 fd56 	bl	801998c <strtod>
 8015ee0:	eeb0 7b40 	vmov.f64	d7, d0
 8015ee4:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8015ee8:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015ef0:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 8015ef4:	009b      	lsls	r3, r3, #2
 8015ef6:	4413      	add	r3, r2
 8015ef8:	681a      	ldr	r2, [r3, #0]
 8015efa:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 8015efe:	009b      	lsls	r3, r3, #2
 8015f00:	4413      	add	r3, r2
 8015f02:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8015f06:	edc3 7a00 	vstr	s15, [r3]
		    	    	token = strtok(NULL, " ");
 8015f0a:	4940      	ldr	r1, [pc, #256]	; (801600c <loadSVMParams+0x678>)
 8015f0c:	2000      	movs	r0, #0
 8015f0e:	f003 fd49 	bl	80199a4 <strtok>
 8015f12:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
	    			for(int j=0; j<n_feature; j++){
 8015f16:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 8015f1a:	3301      	adds	r3, #1
 8015f1c:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
 8015f20:	f8d7 266c 	ldr.w	r2, [r7, #1644]	; 0x66c
 8015f24:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8015f28:	429a      	cmp	r2, r3
 8015f2a:	dbd4      	blt.n	8015ed6 <loadSVMParams+0x542>
	    		for(int i=0; i<total_n_sv; i++){
 8015f2c:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 8015f30:	3301      	adds	r3, #1
 8015f32:	f8c7 3670 	str.w	r3, [r7, #1648]	; 0x670
 8015f36:	f8d7 2670 	ldr.w	r2, [r7, #1648]	; 0x670
 8015f3a:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8015f3e:	429a      	cmp	r2, r3
 8015f40:	dbb4      	blt.n	8015eac <loadSVMParams+0x518>
 8015f42:	e0a1      	b.n	8016088 <loadSVMParams+0x6f4>
	    			}
	    		}
	    	}

	    	else if(strcmp(token, "dual_coef") == 0){
 8015f44:	4934      	ldr	r1, [pc, #208]	; (8016018 <loadSVMParams+0x684>)
 8015f46:	f8d7 068c 	ldr.w	r0, [r7, #1676]	; 0x68c
 8015f4a:	f7ea f9c9 	bl	80002e0 <strcmp>
 8015f4e:	4603      	mov	r3, r0
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	f040 8099 	bne.w	8016088 <loadSVMParams+0x6f4>

	    		// allocate memory for dual_coef, size (n_class-1, total_n_sv)
	    		int m = model->n_class - 1;
 8015f56:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8015f5a:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 8015f5e:	681b      	ldr	r3, [r3, #0]
 8015f60:	685b      	ldr	r3, [r3, #4]
 8015f62:	3b01      	subs	r3, #1
 8015f64:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
	    		int total_n_sv = model->total_n_sv;
 8015f68:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8015f6c:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	689b      	ldr	r3, [r3, #8]
 8015f74:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
	    		model->dual_coef = malloc(sizeof(float *)*m);
 8015f78:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8015f7c:	009b      	lsls	r3, r3, #2
 8015f7e:	4618      	mov	r0, r3
 8015f80:	f002 f9c4 	bl	801830c <malloc>
 8015f84:	4603      	mov	r3, r0
 8015f86:	461a      	mov	r2, r3
 8015f88:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8015f8c:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	629a      	str	r2, [r3, #40]	; 0x28
	    		for(int i=0; i<m; i++)
 8015f94:	2300      	movs	r3, #0
 8015f96:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
 8015f9a:	e016      	b.n	8015fca <loadSVMParams+0x636>
	    			model->dual_coef[i] = (float *)malloc(sizeof(float)*total_n_sv);
 8015f9c:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8015fa0:	0099      	lsls	r1, r3, #2
 8015fa2:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8015fa6:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015fae:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8015fb2:	009b      	lsls	r3, r3, #2
 8015fb4:	18d4      	adds	r4, r2, r3
 8015fb6:	4608      	mov	r0, r1
 8015fb8:	f002 f9a8 	bl	801830c <malloc>
 8015fbc:	4603      	mov	r3, r0
 8015fbe:	6023      	str	r3, [r4, #0]
	    		for(int i=0; i<m; i++)
 8015fc0:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8015fc4:	3301      	adds	r3, #1
 8015fc6:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
 8015fca:	f8d7 2668 	ldr.w	r2, [r7, #1640]	; 0x668
 8015fce:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8015fd2:	429a      	cmp	r2, r3
 8015fd4:	dbe2      	blt.n	8015f9c <loadSVMParams+0x608>

	    		// parse values
	    		for(int i=0; i<total_n_sv; i++)
 8015fd6:	2300      	movs	r3, #0
 8015fd8:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 8015fdc:	e04e      	b.n	801607c <loadSVMParams+0x6e8>
	    		{
	    			f_gets(line, sizeof(line), &fp);
 8015fde:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 8015fe2:	f107 030c 	add.w	r3, r7, #12
 8015fe6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8015fea:	4618      	mov	r0, r3
 8015fec:	f7ff fc39 	bl	8015862 <f_gets>
		    		token = strtok(line, " ");
 8015ff0:	f107 030c 	add.w	r3, r7, #12
 8015ff4:	4905      	ldr	r1, [pc, #20]	; (801600c <loadSVMParams+0x678>)
 8015ff6:	4618      	mov	r0, r3
 8015ff8:	f003 fcd4 	bl	80199a4 <strtok>
 8015ffc:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
	    			for(int j=0; j<m; j++){
 8016000:	2300      	movs	r3, #0
 8016002:	f8c7 3660 	str.w	r3, [r7, #1632]	; 0x660
 8016006:	e02e      	b.n	8016066 <loadSVMParams+0x6d2>
 8016008:	0801c440 	.word	0x0801c440
 801600c:	0801c3e0 	.word	0x0801c3e0
 8016010:	0801c44c 	.word	0x0801c44c
 8016014:	0801c458 	.word	0x0801c458
 8016018:	0801c45c 	.word	0x0801c45c
			    		model->dual_coef[j][i] = strtod(token, NULL);
 801601c:	2100      	movs	r1, #0
 801601e:	f8d7 068c 	ldr.w	r0, [r7, #1676]	; 0x68c
 8016022:	f003 fcb3 	bl	801998c <strtod>
 8016026:	eeb0 7b40 	vmov.f64	d7, d0
 801602a:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 801602e:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 8016032:	681b      	ldr	r3, [r3, #0]
 8016034:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016036:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 801603a:	009b      	lsls	r3, r3, #2
 801603c:	4413      	add	r3, r2
 801603e:	681a      	ldr	r2, [r3, #0]
 8016040:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8016044:	009b      	lsls	r3, r3, #2
 8016046:	4413      	add	r3, r2
 8016048:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801604c:	edc3 7a00 	vstr	s15, [r3]
			    		token = strtok(NULL, " ");
 8016050:	491e      	ldr	r1, [pc, #120]	; (80160cc <loadSVMParams+0x738>)
 8016052:	2000      	movs	r0, #0
 8016054:	f003 fca6 	bl	80199a4 <strtok>
 8016058:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
	    			for(int j=0; j<m; j++){
 801605c:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 8016060:	3301      	adds	r3, #1
 8016062:	f8c7 3660 	str.w	r3, [r7, #1632]	; 0x660
 8016066:	f8d7 2660 	ldr.w	r2, [r7, #1632]	; 0x660
 801606a:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 801606e:	429a      	cmp	r2, r3
 8016070:	dbd4      	blt.n	801601c <loadSVMParams+0x688>
	    		for(int i=0; i<total_n_sv; i++)
 8016072:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8016076:	3301      	adds	r3, #1
 8016078:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 801607c:	f8d7 2664 	ldr.w	r2, [r7, #1636]	; 0x664
 8016080:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8016084:	429a      	cmp	r2, r3
 8016086:	dbaa      	blt.n	8015fde <loadSVMParams+0x64a>
	    while (f_gets(line, sizeof(line), &fp)) {
 8016088:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 801608c:	f107 030c 	add.w	r3, r7, #12
 8016090:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016094:	4618      	mov	r0, r3
 8016096:	f7ff fbe4 	bl	8015862 <f_gets>
 801609a:	4603      	mov	r3, r0
 801609c:	2b00      	cmp	r3, #0
 801609e:	f47f aca7 	bne.w	80159f0 <loadSVMParams+0x5c>



	    }

		f_close(&fp);
 80160a2:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 80160a6:	4618      	mov	r0, r3
 80160a8:	f7ff fbb1 	bl	801580e <f_close>


		if(f_mount(NULL, USBHPath, 0) != FR_OK){
 80160ac:	2200      	movs	r2, #0
 80160ae:	4908      	ldr	r1, [pc, #32]	; (80160d0 <loadSVMParams+0x73c>)
 80160b0:	2000      	movs	r0, #0
 80160b2:	f7fe ffeb 	bl	801508c <f_mount>
 80160b6:	4603      	mov	r3, r0
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d001      	beq.n	80160c0 <loadSVMParams+0x72c>
			  Error_Handler();
 80160bc:	f7ec f9de 	bl	800247c <Error_Handler>
		}

	}

}
 80160c0:	bf00      	nop
 80160c2:	f207 6794 	addw	r7, r7, #1684	; 0x694
 80160c6:	46bd      	mov	sp, r7
 80160c8:	bd90      	pop	{r4, r7, pc}
 80160ca:	bf00      	nop
 80160cc:	0801c3e0 	.word	0x0801c3e0
 80160d0:	24030874 	.word	0x24030874

080160d4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80160d4:	b580      	push	{r7, lr}
 80160d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80160d8:	2201      	movs	r2, #1
 80160da:	490e      	ldr	r1, [pc, #56]	; (8016114 <MX_USB_HOST_Init+0x40>)
 80160dc:	480e      	ldr	r0, [pc, #56]	; (8016118 <MX_USB_HOST_Init+0x44>)
 80160de:	f7fb fdaf 	bl	8011c40 <USBH_Init>
 80160e2:	4603      	mov	r3, r0
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d001      	beq.n	80160ec <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80160e8:	f7ec f9c8 	bl	800247c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 80160ec:	490b      	ldr	r1, [pc, #44]	; (801611c <MX_USB_HOST_Init+0x48>)
 80160ee:	480a      	ldr	r0, [pc, #40]	; (8016118 <MX_USB_HOST_Init+0x44>)
 80160f0:	f7fb fe53 	bl	8011d9a <USBH_RegisterClass>
 80160f4:	4603      	mov	r3, r0
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d001      	beq.n	80160fe <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80160fa:	f7ec f9bf 	bl	800247c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80160fe:	4806      	ldr	r0, [pc, #24]	; (8016118 <MX_USB_HOST_Init+0x44>)
 8016100:	f7fb fed7 	bl	8011eb2 <USBH_Start>
 8016104:	4603      	mov	r3, r0
 8016106:	2b00      	cmp	r3, #0
 8016108:	d001      	beq.n	801610e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801610a:	f7ec f9b7 	bl	800247c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801610e:	bf00      	nop
 8016110:	bd80      	pop	{r7, pc}
 8016112:	bf00      	nop
 8016114:	08016135 	.word	0x08016135
 8016118:	24030adc 	.word	0x24030adc
 801611c:	24000040 	.word	0x24000040

08016120 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8016120:	b580      	push	{r7, lr}
 8016122:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8016124:	4802      	ldr	r0, [pc, #8]	; (8016130 <MX_USB_HOST_Process+0x10>)
 8016126:	f7fb fed5 	bl	8011ed4 <USBH_Process>
}
 801612a:	bf00      	nop
 801612c:	bd80      	pop	{r7, pc}
 801612e:	bf00      	nop
 8016130:	24030adc 	.word	0x24030adc

08016134 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8016134:	b480      	push	{r7}
 8016136:	b083      	sub	sp, #12
 8016138:	af00      	add	r7, sp, #0
 801613a:	6078      	str	r0, [r7, #4]
 801613c:	460b      	mov	r3, r1
 801613e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8016140:	78fb      	ldrb	r3, [r7, #3]
 8016142:	3b01      	subs	r3, #1
 8016144:	2b04      	cmp	r3, #4
 8016146:	d819      	bhi.n	801617c <USBH_UserProcess+0x48>
 8016148:	a201      	add	r2, pc, #4	; (adr r2, 8016150 <USBH_UserProcess+0x1c>)
 801614a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801614e:	bf00      	nop
 8016150:	0801617d 	.word	0x0801617d
 8016154:	0801616d 	.word	0x0801616d
 8016158:	0801617d 	.word	0x0801617d
 801615c:	08016175 	.word	0x08016175
 8016160:	08016165 	.word	0x08016165
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8016164:	4b09      	ldr	r3, [pc, #36]	; (801618c <USBH_UserProcess+0x58>)
 8016166:	2203      	movs	r2, #3
 8016168:	701a      	strb	r2, [r3, #0]
  break;
 801616a:	e008      	b.n	801617e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801616c:	4b07      	ldr	r3, [pc, #28]	; (801618c <USBH_UserProcess+0x58>)
 801616e:	2202      	movs	r2, #2
 8016170:	701a      	strb	r2, [r3, #0]

  break;
 8016172:	e004      	b.n	801617e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8016174:	4b05      	ldr	r3, [pc, #20]	; (801618c <USBH_UserProcess+0x58>)
 8016176:	2201      	movs	r2, #1
 8016178:	701a      	strb	r2, [r3, #0]

  break;
 801617a:	e000      	b.n	801617e <USBH_UserProcess+0x4a>

  default:
  break;
 801617c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801617e:	bf00      	nop
 8016180:	370c      	adds	r7, #12
 8016182:	46bd      	mov	sp, r7
 8016184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016188:	4770      	bx	lr
 801618a:	bf00      	nop
 801618c:	24030eb4 	.word	0x24030eb4

08016190 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8016190:	b580      	push	{r7, lr}
 8016192:	b0ba      	sub	sp, #232	; 0xe8
 8016194:	af00      	add	r7, sp, #0
 8016196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016198:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801619c:	2200      	movs	r2, #0
 801619e:	601a      	str	r2, [r3, #0]
 80161a0:	605a      	str	r2, [r3, #4]
 80161a2:	609a      	str	r2, [r3, #8]
 80161a4:	60da      	str	r2, [r3, #12]
 80161a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80161a8:	f107 0310 	add.w	r3, r7, #16
 80161ac:	22c0      	movs	r2, #192	; 0xc0
 80161ae:	2100      	movs	r1, #0
 80161b0:	4618      	mov	r0, r3
 80161b2:	f002 f8c9 	bl	8018348 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	4a34      	ldr	r2, [pc, #208]	; (801628c <HAL_HCD_MspInit+0xfc>)
 80161bc:	4293      	cmp	r3, r2
 80161be:	d161      	bne.n	8016284 <HAL_HCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80161c0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80161c4:	f04f 0300 	mov.w	r3, #0
 80161c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80161cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80161d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80161d4:	f107 0310 	add.w	r3, r7, #16
 80161d8:	4618      	mov	r0, r3
 80161da:	f7f4 fef9 	bl	800afd0 <HAL_RCCEx_PeriphCLKConfig>
 80161de:	4603      	mov	r3, r0
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d001      	beq.n	80161e8 <HAL_HCD_MspInit+0x58>
    {
      Error_Handler();
 80161e4:	f7ec f94a 	bl	800247c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80161e8:	f7f3 fefc 	bl	8009fe4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80161ec:	4b28      	ldr	r3, [pc, #160]	; (8016290 <HAL_HCD_MspInit+0x100>)
 80161ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80161f2:	4a27      	ldr	r2, [pc, #156]	; (8016290 <HAL_HCD_MspInit+0x100>)
 80161f4:	f043 0301 	orr.w	r3, r3, #1
 80161f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80161fc:	4b24      	ldr	r3, [pc, #144]	; (8016290 <HAL_HCD_MspInit+0x100>)
 80161fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8016202:	f003 0301 	and.w	r3, r3, #1
 8016206:	60fb      	str	r3, [r7, #12]
 8016208:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 801620a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 801620e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016212:	2302      	movs	r3, #2
 8016214:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016218:	2300      	movs	r3, #0
 801621a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801621e:	2300      	movs	r3, #0
 8016220:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8016224:	230a      	movs	r3, #10
 8016226:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801622a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801622e:	4619      	mov	r1, r3
 8016230:	4818      	ldr	r0, [pc, #96]	; (8016294 <HAL_HCD_MspInit+0x104>)
 8016232:	f7f1 ffbf 	bl	80081b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8016236:	f44f 7300 	mov.w	r3, #512	; 0x200
 801623a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801623e:	2300      	movs	r3, #0
 8016240:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016244:	2300      	movs	r3, #0
 8016246:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801624a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801624e:	4619      	mov	r1, r3
 8016250:	4810      	ldr	r0, [pc, #64]	; (8016294 <HAL_HCD_MspInit+0x104>)
 8016252:	f7f1 ffaf 	bl	80081b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8016256:	4b0e      	ldr	r3, [pc, #56]	; (8016290 <HAL_HCD_MspInit+0x100>)
 8016258:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801625c:	4a0c      	ldr	r2, [pc, #48]	; (8016290 <HAL_HCD_MspInit+0x100>)
 801625e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8016262:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8016266:	4b0a      	ldr	r3, [pc, #40]	; (8016290 <HAL_HCD_MspInit+0x100>)
 8016268:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801626c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8016270:	60bb      	str	r3, [r7, #8]
 8016272:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8016274:	2200      	movs	r2, #0
 8016276:	2100      	movs	r1, #0
 8016278:	2065      	movs	r0, #101	; 0x65
 801627a:	f7ee ff4c 	bl	8005116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801627e:	2065      	movs	r0, #101	; 0x65
 8016280:	f7ee ff63 	bl	800514a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8016284:	bf00      	nop
 8016286:	37e8      	adds	r7, #232	; 0xe8
 8016288:	46bd      	mov	sp, r7
 801628a:	bd80      	pop	{r7, pc}
 801628c:	40080000 	.word	0x40080000
 8016290:	58024400 	.word	0x58024400
 8016294:	58020000 	.word	0x58020000

08016298 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8016298:	b580      	push	{r7, lr}
 801629a:	b082      	sub	sp, #8
 801629c:	af00      	add	r7, sp, #0
 801629e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80162a6:	4618      	mov	r0, r3
 80162a8:	f7fc f9f3 	bl	8012692 <USBH_LL_IncTimer>
}
 80162ac:	bf00      	nop
 80162ae:	3708      	adds	r7, #8
 80162b0:	46bd      	mov	sp, r7
 80162b2:	bd80      	pop	{r7, pc}

080162b4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80162b4:	b580      	push	{r7, lr}
 80162b6:	b082      	sub	sp, #8
 80162b8:	af00      	add	r7, sp, #0
 80162ba:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80162c2:	4618      	mov	r0, r3
 80162c4:	f7fc fa2b 	bl	801271e <USBH_LL_Connect>
}
 80162c8:	bf00      	nop
 80162ca:	3708      	adds	r7, #8
 80162cc:	46bd      	mov	sp, r7
 80162ce:	bd80      	pop	{r7, pc}

080162d0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80162d0:	b580      	push	{r7, lr}
 80162d2:	b082      	sub	sp, #8
 80162d4:	af00      	add	r7, sp, #0
 80162d6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80162de:	4618      	mov	r0, r3
 80162e0:	f7fc fa34 	bl	801274c <USBH_LL_Disconnect>
}
 80162e4:	bf00      	nop
 80162e6:	3708      	adds	r7, #8
 80162e8:	46bd      	mov	sp, r7
 80162ea:	bd80      	pop	{r7, pc}

080162ec <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80162ec:	b480      	push	{r7}
 80162ee:	b083      	sub	sp, #12
 80162f0:	af00      	add	r7, sp, #0
 80162f2:	6078      	str	r0, [r7, #4]
 80162f4:	460b      	mov	r3, r1
 80162f6:	70fb      	strb	r3, [r7, #3]
 80162f8:	4613      	mov	r3, r2
 80162fa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80162fc:	bf00      	nop
 80162fe:	370c      	adds	r7, #12
 8016300:	46bd      	mov	sp, r7
 8016302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016306:	4770      	bx	lr

08016308 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8016308:	b580      	push	{r7, lr}
 801630a:	b082      	sub	sp, #8
 801630c:	af00      	add	r7, sp, #0
 801630e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8016316:	4618      	mov	r0, r3
 8016318:	f7fc f9e5 	bl	80126e6 <USBH_LL_PortEnabled>
}
 801631c:	bf00      	nop
 801631e:	3708      	adds	r7, #8
 8016320:	46bd      	mov	sp, r7
 8016322:	bd80      	pop	{r7, pc}

08016324 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8016324:	b580      	push	{r7, lr}
 8016326:	b082      	sub	sp, #8
 8016328:	af00      	add	r7, sp, #0
 801632a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8016332:	4618      	mov	r0, r3
 8016334:	f7fc f9e5 	bl	8012702 <USBH_LL_PortDisabled>
}
 8016338:	bf00      	nop
 801633a:	3708      	adds	r7, #8
 801633c:	46bd      	mov	sp, r7
 801633e:	bd80      	pop	{r7, pc}

08016340 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8016340:	b580      	push	{r7, lr}
 8016342:	b082      	sub	sp, #8
 8016344:	af00      	add	r7, sp, #0
 8016346:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801634e:	2b01      	cmp	r3, #1
 8016350:	d129      	bne.n	80163a6 <USBH_LL_Init+0x66>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8016352:	4a17      	ldr	r2, [pc, #92]	; (80163b0 <USBH_LL_Init+0x70>)
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	4a14      	ldr	r2, [pc, #80]	; (80163b0 <USBH_LL_Init+0x70>)
 801635e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8016362:	4b13      	ldr	r3, [pc, #76]	; (80163b0 <USBH_LL_Init+0x70>)
 8016364:	4a13      	ldr	r2, [pc, #76]	; (80163b4 <USBH_LL_Init+0x74>)
 8016366:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 8016368:	4b11      	ldr	r3, [pc, #68]	; (80163b0 <USBH_LL_Init+0x70>)
 801636a:	2210      	movs	r2, #16
 801636c:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801636e:	4b10      	ldr	r3, [pc, #64]	; (80163b0 <USBH_LL_Init+0x70>)
 8016370:	2201      	movs	r2, #1
 8016372:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8016374:	4b0e      	ldr	r3, [pc, #56]	; (80163b0 <USBH_LL_Init+0x70>)
 8016376:	2200      	movs	r2, #0
 8016378:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801637a:	4b0d      	ldr	r3, [pc, #52]	; (80163b0 <USBH_LL_Init+0x70>)
 801637c:	2202      	movs	r2, #2
 801637e:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8016380:	4b0b      	ldr	r3, [pc, #44]	; (80163b0 <USBH_LL_Init+0x70>)
 8016382:	2200      	movs	r2, #0
 8016384:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8016386:	480a      	ldr	r0, [pc, #40]	; (80163b0 <USBH_LL_Init+0x70>)
 8016388:	f7f2 f8dd 	bl	8008546 <HAL_HCD_Init>
 801638c:	4603      	mov	r3, r0
 801638e:	2b00      	cmp	r3, #0
 8016390:	d001      	beq.n	8016396 <USBH_LL_Init+0x56>
  {
    Error_Handler( );
 8016392:	f7ec f873 	bl	800247c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8016396:	4806      	ldr	r0, [pc, #24]	; (80163b0 <USBH_LL_Init+0x70>)
 8016398:	f7f2 fcc5 	bl	8008d26 <HAL_HCD_GetCurrentFrame>
 801639c:	4603      	mov	r3, r0
 801639e:	4619      	mov	r1, r3
 80163a0:	6878      	ldr	r0, [r7, #4]
 80163a2:	f7fc f967 	bl	8012674 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80163a6:	2300      	movs	r3, #0
}
 80163a8:	4618      	mov	r0, r3
 80163aa:	3708      	adds	r7, #8
 80163ac:	46bd      	mov	sp, r7
 80163ae:	bd80      	pop	{r7, pc}
 80163b0:	24030eb8 	.word	0x24030eb8
 80163b4:	40080000 	.word	0x40080000

080163b8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80163b8:	b580      	push	{r7, lr}
 80163ba:	b084      	sub	sp, #16
 80163bc:	af00      	add	r7, sp, #0
 80163be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80163c0:	2300      	movs	r3, #0
 80163c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80163c4:	2300      	movs	r3, #0
 80163c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80163ce:	4618      	mov	r0, r3
 80163d0:	f7f2 fc33 	bl	8008c3a <HAL_HCD_Start>
 80163d4:	4603      	mov	r3, r0
 80163d6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80163d8:	7bfb      	ldrb	r3, [r7, #15]
 80163da:	4618      	mov	r0, r3
 80163dc:	f000 f98c 	bl	80166f8 <USBH_Get_USB_Status>
 80163e0:	4603      	mov	r3, r0
 80163e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80163e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80163e6:	4618      	mov	r0, r3
 80163e8:	3710      	adds	r7, #16
 80163ea:	46bd      	mov	sp, r7
 80163ec:	bd80      	pop	{r7, pc}

080163ee <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80163ee:	b580      	push	{r7, lr}
 80163f0:	b084      	sub	sp, #16
 80163f2:	af00      	add	r7, sp, #0
 80163f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80163f6:	2300      	movs	r3, #0
 80163f8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80163fa:	2300      	movs	r3, #0
 80163fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8016404:	4618      	mov	r0, r3
 8016406:	f7f2 fc3b 	bl	8008c80 <HAL_HCD_Stop>
 801640a:	4603      	mov	r3, r0
 801640c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801640e:	7bfb      	ldrb	r3, [r7, #15]
 8016410:	4618      	mov	r0, r3
 8016412:	f000 f971 	bl	80166f8 <USBH_Get_USB_Status>
 8016416:	4603      	mov	r3, r0
 8016418:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801641a:	7bbb      	ldrb	r3, [r7, #14]
}
 801641c:	4618      	mov	r0, r3
 801641e:	3710      	adds	r7, #16
 8016420:	46bd      	mov	sp, r7
 8016422:	bd80      	pop	{r7, pc}

08016424 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8016424:	b580      	push	{r7, lr}
 8016426:	b084      	sub	sp, #16
 8016428:	af00      	add	r7, sp, #0
 801642a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 801642c:	2301      	movs	r3, #1
 801642e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8016436:	4618      	mov	r0, r3
 8016438:	f7f2 fc83 	bl	8008d42 <HAL_HCD_GetCurrentSpeed>
 801643c:	4603      	mov	r3, r0
 801643e:	2b02      	cmp	r3, #2
 8016440:	d00c      	beq.n	801645c <USBH_LL_GetSpeed+0x38>
 8016442:	2b02      	cmp	r3, #2
 8016444:	d80d      	bhi.n	8016462 <USBH_LL_GetSpeed+0x3e>
 8016446:	2b00      	cmp	r3, #0
 8016448:	d002      	beq.n	8016450 <USBH_LL_GetSpeed+0x2c>
 801644a:	2b01      	cmp	r3, #1
 801644c:	d003      	beq.n	8016456 <USBH_LL_GetSpeed+0x32>
 801644e:	e008      	b.n	8016462 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8016450:	2300      	movs	r3, #0
 8016452:	73fb      	strb	r3, [r7, #15]
    break;
 8016454:	e008      	b.n	8016468 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8016456:	2301      	movs	r3, #1
 8016458:	73fb      	strb	r3, [r7, #15]
    break;
 801645a:	e005      	b.n	8016468 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 801645c:	2302      	movs	r3, #2
 801645e:	73fb      	strb	r3, [r7, #15]
    break;
 8016460:	e002      	b.n	8016468 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8016462:	2301      	movs	r3, #1
 8016464:	73fb      	strb	r3, [r7, #15]
    break;
 8016466:	bf00      	nop
  }
  return  speed;
 8016468:	7bfb      	ldrb	r3, [r7, #15]
}
 801646a:	4618      	mov	r0, r3
 801646c:	3710      	adds	r7, #16
 801646e:	46bd      	mov	sp, r7
 8016470:	bd80      	pop	{r7, pc}

08016472 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8016472:	b580      	push	{r7, lr}
 8016474:	b084      	sub	sp, #16
 8016476:	af00      	add	r7, sp, #0
 8016478:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801647a:	2300      	movs	r3, #0
 801647c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801647e:	2300      	movs	r3, #0
 8016480:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8016488:	4618      	mov	r0, r3
 801648a:	f7f2 fc16 	bl	8008cba <HAL_HCD_ResetPort>
 801648e:	4603      	mov	r3, r0
 8016490:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8016492:	7bfb      	ldrb	r3, [r7, #15]
 8016494:	4618      	mov	r0, r3
 8016496:	f000 f92f 	bl	80166f8 <USBH_Get_USB_Status>
 801649a:	4603      	mov	r3, r0
 801649c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801649e:	7bbb      	ldrb	r3, [r7, #14]
}
 80164a0:	4618      	mov	r0, r3
 80164a2:	3710      	adds	r7, #16
 80164a4:	46bd      	mov	sp, r7
 80164a6:	bd80      	pop	{r7, pc}

080164a8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80164a8:	b580      	push	{r7, lr}
 80164aa:	b082      	sub	sp, #8
 80164ac:	af00      	add	r7, sp, #0
 80164ae:	6078      	str	r0, [r7, #4]
 80164b0:	460b      	mov	r3, r1
 80164b2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80164ba:	78fa      	ldrb	r2, [r7, #3]
 80164bc:	4611      	mov	r1, r2
 80164be:	4618      	mov	r0, r3
 80164c0:	f7f2 fc1d 	bl	8008cfe <HAL_HCD_HC_GetXferCount>
 80164c4:	4603      	mov	r3, r0
}
 80164c6:	4618      	mov	r0, r3
 80164c8:	3708      	adds	r7, #8
 80164ca:	46bd      	mov	sp, r7
 80164cc:	bd80      	pop	{r7, pc}

080164ce <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80164ce:	b590      	push	{r4, r7, lr}
 80164d0:	b089      	sub	sp, #36	; 0x24
 80164d2:	af04      	add	r7, sp, #16
 80164d4:	6078      	str	r0, [r7, #4]
 80164d6:	4608      	mov	r0, r1
 80164d8:	4611      	mov	r1, r2
 80164da:	461a      	mov	r2, r3
 80164dc:	4603      	mov	r3, r0
 80164de:	70fb      	strb	r3, [r7, #3]
 80164e0:	460b      	mov	r3, r1
 80164e2:	70bb      	strb	r3, [r7, #2]
 80164e4:	4613      	mov	r3, r2
 80164e6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80164e8:	2300      	movs	r3, #0
 80164ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80164ec:	2300      	movs	r3, #0
 80164ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80164f6:	787c      	ldrb	r4, [r7, #1]
 80164f8:	78ba      	ldrb	r2, [r7, #2]
 80164fa:	78f9      	ldrb	r1, [r7, #3]
 80164fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80164fe:	9302      	str	r3, [sp, #8]
 8016500:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016504:	9301      	str	r3, [sp, #4]
 8016506:	f897 3020 	ldrb.w	r3, [r7, #32]
 801650a:	9300      	str	r3, [sp, #0]
 801650c:	4623      	mov	r3, r4
 801650e:	f7f2 f87c 	bl	800860a <HAL_HCD_HC_Init>
 8016512:	4603      	mov	r3, r0
 8016514:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8016516:	7bfb      	ldrb	r3, [r7, #15]
 8016518:	4618      	mov	r0, r3
 801651a:	f000 f8ed 	bl	80166f8 <USBH_Get_USB_Status>
 801651e:	4603      	mov	r3, r0
 8016520:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016522:	7bbb      	ldrb	r3, [r7, #14]
}
 8016524:	4618      	mov	r0, r3
 8016526:	3714      	adds	r7, #20
 8016528:	46bd      	mov	sp, r7
 801652a:	bd90      	pop	{r4, r7, pc}

0801652c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801652c:	b580      	push	{r7, lr}
 801652e:	b084      	sub	sp, #16
 8016530:	af00      	add	r7, sp, #0
 8016532:	6078      	str	r0, [r7, #4]
 8016534:	460b      	mov	r3, r1
 8016536:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016538:	2300      	movs	r3, #0
 801653a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801653c:	2300      	movs	r3, #0
 801653e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8016546:	78fa      	ldrb	r2, [r7, #3]
 8016548:	4611      	mov	r1, r2
 801654a:	4618      	mov	r0, r3
 801654c:	f7f2 f8ec 	bl	8008728 <HAL_HCD_HC_Halt>
 8016550:	4603      	mov	r3, r0
 8016552:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8016554:	7bfb      	ldrb	r3, [r7, #15]
 8016556:	4618      	mov	r0, r3
 8016558:	f000 f8ce 	bl	80166f8 <USBH_Get_USB_Status>
 801655c:	4603      	mov	r3, r0
 801655e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016560:	7bbb      	ldrb	r3, [r7, #14]
}
 8016562:	4618      	mov	r0, r3
 8016564:	3710      	adds	r7, #16
 8016566:	46bd      	mov	sp, r7
 8016568:	bd80      	pop	{r7, pc}

0801656a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801656a:	b590      	push	{r4, r7, lr}
 801656c:	b089      	sub	sp, #36	; 0x24
 801656e:	af04      	add	r7, sp, #16
 8016570:	6078      	str	r0, [r7, #4]
 8016572:	4608      	mov	r0, r1
 8016574:	4611      	mov	r1, r2
 8016576:	461a      	mov	r2, r3
 8016578:	4603      	mov	r3, r0
 801657a:	70fb      	strb	r3, [r7, #3]
 801657c:	460b      	mov	r3, r1
 801657e:	70bb      	strb	r3, [r7, #2]
 8016580:	4613      	mov	r3, r2
 8016582:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016584:	2300      	movs	r3, #0
 8016586:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8016588:	2300      	movs	r3, #0
 801658a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8016592:	787c      	ldrb	r4, [r7, #1]
 8016594:	78ba      	ldrb	r2, [r7, #2]
 8016596:	78f9      	ldrb	r1, [r7, #3]
 8016598:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801659c:	9303      	str	r3, [sp, #12]
 801659e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80165a0:	9302      	str	r3, [sp, #8]
 80165a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165a4:	9301      	str	r3, [sp, #4]
 80165a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80165aa:	9300      	str	r3, [sp, #0]
 80165ac:	4623      	mov	r3, r4
 80165ae:	f7f2 f8df 	bl	8008770 <HAL_HCD_HC_SubmitRequest>
 80165b2:	4603      	mov	r3, r0
 80165b4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80165b6:	7bfb      	ldrb	r3, [r7, #15]
 80165b8:	4618      	mov	r0, r3
 80165ba:	f000 f89d 	bl	80166f8 <USBH_Get_USB_Status>
 80165be:	4603      	mov	r3, r0
 80165c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80165c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80165c4:	4618      	mov	r0, r3
 80165c6:	3714      	adds	r7, #20
 80165c8:	46bd      	mov	sp, r7
 80165ca:	bd90      	pop	{r4, r7, pc}

080165cc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80165cc:	b580      	push	{r7, lr}
 80165ce:	b082      	sub	sp, #8
 80165d0:	af00      	add	r7, sp, #0
 80165d2:	6078      	str	r0, [r7, #4]
 80165d4:	460b      	mov	r3, r1
 80165d6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80165de:	78fa      	ldrb	r2, [r7, #3]
 80165e0:	4611      	mov	r1, r2
 80165e2:	4618      	mov	r0, r3
 80165e4:	f7f2 fb77 	bl	8008cd6 <HAL_HCD_HC_GetURBState>
 80165e8:	4603      	mov	r3, r0
}
 80165ea:	4618      	mov	r0, r3
 80165ec:	3708      	adds	r7, #8
 80165ee:	46bd      	mov	sp, r7
 80165f0:	bd80      	pop	{r7, pc}

080165f2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80165f2:	b580      	push	{r7, lr}
 80165f4:	b082      	sub	sp, #8
 80165f6:	af00      	add	r7, sp, #0
 80165f8:	6078      	str	r0, [r7, #4]
 80165fa:	460b      	mov	r3, r1
 80165fc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8016604:	2b01      	cmp	r3, #1
 8016606:	d103      	bne.n	8016610 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8016608:	78fb      	ldrb	r3, [r7, #3]
 801660a:	4618      	mov	r0, r3
 801660c:	f000 f8a0 	bl	8016750 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8016610:	20c8      	movs	r0, #200	; 0xc8
 8016612:	f7ec ff1b 	bl	800344c <HAL_Delay>
  return USBH_OK;
 8016616:	2300      	movs	r3, #0
}
 8016618:	4618      	mov	r0, r3
 801661a:	3708      	adds	r7, #8
 801661c:	46bd      	mov	sp, r7
 801661e:	bd80      	pop	{r7, pc}

08016620 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8016620:	b480      	push	{r7}
 8016622:	b085      	sub	sp, #20
 8016624:	af00      	add	r7, sp, #0
 8016626:	6078      	str	r0, [r7, #4]
 8016628:	460b      	mov	r3, r1
 801662a:	70fb      	strb	r3, [r7, #3]
 801662c:	4613      	mov	r3, r2
 801662e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8016636:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8016638:	78fb      	ldrb	r3, [r7, #3]
 801663a:	68fa      	ldr	r2, [r7, #12]
 801663c:	212c      	movs	r1, #44	; 0x2c
 801663e:	fb01 f303 	mul.w	r3, r1, r3
 8016642:	4413      	add	r3, r2
 8016644:	333b      	adds	r3, #59	; 0x3b
 8016646:	781b      	ldrb	r3, [r3, #0]
 8016648:	2b00      	cmp	r3, #0
 801664a:	d009      	beq.n	8016660 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801664c:	78fb      	ldrb	r3, [r7, #3]
 801664e:	68fa      	ldr	r2, [r7, #12]
 8016650:	212c      	movs	r1, #44	; 0x2c
 8016652:	fb01 f303 	mul.w	r3, r1, r3
 8016656:	4413      	add	r3, r2
 8016658:	3354      	adds	r3, #84	; 0x54
 801665a:	78ba      	ldrb	r2, [r7, #2]
 801665c:	701a      	strb	r2, [r3, #0]
 801665e:	e008      	b.n	8016672 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8016660:	78fb      	ldrb	r3, [r7, #3]
 8016662:	68fa      	ldr	r2, [r7, #12]
 8016664:	212c      	movs	r1, #44	; 0x2c
 8016666:	fb01 f303 	mul.w	r3, r1, r3
 801666a:	4413      	add	r3, r2
 801666c:	3355      	adds	r3, #85	; 0x55
 801666e:	78ba      	ldrb	r2, [r7, #2]
 8016670:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8016672:	2300      	movs	r3, #0
}
 8016674:	4618      	mov	r0, r3
 8016676:	3714      	adds	r7, #20
 8016678:	46bd      	mov	sp, r7
 801667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801667e:	4770      	bx	lr

08016680 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8016680:	b480      	push	{r7}
 8016682:	b085      	sub	sp, #20
 8016684:	af00      	add	r7, sp, #0
 8016686:	6078      	str	r0, [r7, #4]
 8016688:	460b      	mov	r3, r1
 801668a:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 801668c:	2300      	movs	r3, #0
 801668e:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8016696:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8016698:	78fb      	ldrb	r3, [r7, #3]
 801669a:	68ba      	ldr	r2, [r7, #8]
 801669c:	212c      	movs	r1, #44	; 0x2c
 801669e:	fb01 f303 	mul.w	r3, r1, r3
 80166a2:	4413      	add	r3, r2
 80166a4:	333b      	adds	r3, #59	; 0x3b
 80166a6:	781b      	ldrb	r3, [r3, #0]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d009      	beq.n	80166c0 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 80166ac:	78fb      	ldrb	r3, [r7, #3]
 80166ae:	68ba      	ldr	r2, [r7, #8]
 80166b0:	212c      	movs	r1, #44	; 0x2c
 80166b2:	fb01 f303 	mul.w	r3, r1, r3
 80166b6:	4413      	add	r3, r2
 80166b8:	3354      	adds	r3, #84	; 0x54
 80166ba:	781b      	ldrb	r3, [r3, #0]
 80166bc:	73fb      	strb	r3, [r7, #15]
 80166be:	e008      	b.n	80166d2 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 80166c0:	78fb      	ldrb	r3, [r7, #3]
 80166c2:	68ba      	ldr	r2, [r7, #8]
 80166c4:	212c      	movs	r1, #44	; 0x2c
 80166c6:	fb01 f303 	mul.w	r3, r1, r3
 80166ca:	4413      	add	r3, r2
 80166cc:	3355      	adds	r3, #85	; 0x55
 80166ce:	781b      	ldrb	r3, [r3, #0]
 80166d0:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 80166d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80166d4:	4618      	mov	r0, r3
 80166d6:	3714      	adds	r7, #20
 80166d8:	46bd      	mov	sp, r7
 80166da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166de:	4770      	bx	lr

080166e0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80166e0:	b580      	push	{r7, lr}
 80166e2:	b082      	sub	sp, #8
 80166e4:	af00      	add	r7, sp, #0
 80166e6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80166e8:	6878      	ldr	r0, [r7, #4]
 80166ea:	f7ec feaf 	bl	800344c <HAL_Delay>
}
 80166ee:	bf00      	nop
 80166f0:	3708      	adds	r7, #8
 80166f2:	46bd      	mov	sp, r7
 80166f4:	bd80      	pop	{r7, pc}
	...

080166f8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80166f8:	b480      	push	{r7}
 80166fa:	b085      	sub	sp, #20
 80166fc:	af00      	add	r7, sp, #0
 80166fe:	4603      	mov	r3, r0
 8016700:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8016702:	2300      	movs	r3, #0
 8016704:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016706:	79fb      	ldrb	r3, [r7, #7]
 8016708:	2b03      	cmp	r3, #3
 801670a:	d817      	bhi.n	801673c <USBH_Get_USB_Status+0x44>
 801670c:	a201      	add	r2, pc, #4	; (adr r2, 8016714 <USBH_Get_USB_Status+0x1c>)
 801670e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016712:	bf00      	nop
 8016714:	08016725 	.word	0x08016725
 8016718:	0801672b 	.word	0x0801672b
 801671c:	08016731 	.word	0x08016731
 8016720:	08016737 	.word	0x08016737
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8016724:	2300      	movs	r3, #0
 8016726:	73fb      	strb	r3, [r7, #15]
    break;
 8016728:	e00b      	b.n	8016742 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801672a:	2302      	movs	r3, #2
 801672c:	73fb      	strb	r3, [r7, #15]
    break;
 801672e:	e008      	b.n	8016742 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8016730:	2301      	movs	r3, #1
 8016732:	73fb      	strb	r3, [r7, #15]
    break;
 8016734:	e005      	b.n	8016742 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8016736:	2302      	movs	r3, #2
 8016738:	73fb      	strb	r3, [r7, #15]
    break;
 801673a:	e002      	b.n	8016742 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801673c:	2302      	movs	r3, #2
 801673e:	73fb      	strb	r3, [r7, #15]
    break;
 8016740:	bf00      	nop
  }
  return usb_status;
 8016742:	7bfb      	ldrb	r3, [r7, #15]
}
 8016744:	4618      	mov	r0, r3
 8016746:	3714      	adds	r7, #20
 8016748:	46bd      	mov	sp, r7
 801674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801674e:	4770      	bx	lr

08016750 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8016750:	b580      	push	{r7, lr}
 8016752:	b084      	sub	sp, #16
 8016754:	af00      	add	r7, sp, #0
 8016756:	4603      	mov	r3, r0
 8016758:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801675a:	79fb      	ldrb	r3, [r7, #7]
 801675c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801675e:	79fb      	ldrb	r3, [r7, #7]
 8016760:	2b00      	cmp	r3, #0
 8016762:	d102      	bne.n	801676a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8016764:	2300      	movs	r3, #0
 8016766:	73fb      	strb	r3, [r7, #15]
 8016768:	e001      	b.n	801676e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 801676a:	2301      	movs	r3, #1
 801676c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,(GPIO_PinState)data);
 801676e:	7bfb      	ldrb	r3, [r7, #15]
 8016770:	461a      	mov	r2, r3
 8016772:	2140      	movs	r1, #64	; 0x40
 8016774:	4803      	ldr	r0, [pc, #12]	; (8016784 <MX_DriverVbusFS+0x34>)
 8016776:	f7f1 fecd 	bl	8008514 <HAL_GPIO_WritePin>
}
 801677a:	bf00      	nop
 801677c:	3710      	adds	r7, #16
 801677e:	46bd      	mov	sp, r7
 8016780:	bd80      	pop	{r7, pc}
 8016782:	bf00      	nop
 8016784:	58021800 	.word	0x58021800

08016788 <arm_cfft_init_f32>:
 8016788:	2200      	movs	r2, #0
 801678a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 801678e:	4603      	mov	r3, r0
 8016790:	b430      	push	{r4, r5}
 8016792:	6042      	str	r2, [r0, #4]
 8016794:	8001      	strh	r1, [r0, #0]
 8016796:	d032      	beq.n	80167fe <arm_cfft_init_f32+0x76>
 8016798:	d918      	bls.n	80167cc <arm_cfft_init_f32+0x44>
 801679a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 801679e:	d026      	beq.n	80167ee <arm_cfft_init_f32+0x66>
 80167a0:	d90c      	bls.n	80167bc <arm_cfft_init_f32+0x34>
 80167a2:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80167a6:	d11e      	bne.n	80167e6 <arm_cfft_init_f32+0x5e>
 80167a8:	4916      	ldr	r1, [pc, #88]	; (8016804 <arm_cfft_init_f32+0x7c>)
 80167aa:	4610      	mov	r0, r2
 80167ac:	898d      	ldrh	r5, [r1, #12]
 80167ae:	e9d1 2401 	ldrd	r2, r4, [r1, #4]
 80167b2:	819d      	strh	r5, [r3, #12]
 80167b4:	e9c3 2401 	strd	r2, r4, [r3, #4]
 80167b8:	bc30      	pop	{r4, r5}
 80167ba:	4770      	bx	lr
 80167bc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80167c0:	d017      	beq.n	80167f2 <arm_cfft_init_f32+0x6a>
 80167c2:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80167c6:	d10e      	bne.n	80167e6 <arm_cfft_init_f32+0x5e>
 80167c8:	490f      	ldr	r1, [pc, #60]	; (8016808 <arm_cfft_init_f32+0x80>)
 80167ca:	e7ee      	b.n	80167aa <arm_cfft_init_f32+0x22>
 80167cc:	2940      	cmp	r1, #64	; 0x40
 80167ce:	d012      	beq.n	80167f6 <arm_cfft_init_f32+0x6e>
 80167d0:	d903      	bls.n	80167da <arm_cfft_init_f32+0x52>
 80167d2:	2980      	cmp	r1, #128	; 0x80
 80167d4:	d107      	bne.n	80167e6 <arm_cfft_init_f32+0x5e>
 80167d6:	490d      	ldr	r1, [pc, #52]	; (801680c <arm_cfft_init_f32+0x84>)
 80167d8:	e7e7      	b.n	80167aa <arm_cfft_init_f32+0x22>
 80167da:	2910      	cmp	r1, #16
 80167dc:	d00d      	beq.n	80167fa <arm_cfft_init_f32+0x72>
 80167de:	2920      	cmp	r1, #32
 80167e0:	d101      	bne.n	80167e6 <arm_cfft_init_f32+0x5e>
 80167e2:	490b      	ldr	r1, [pc, #44]	; (8016810 <arm_cfft_init_f32+0x88>)
 80167e4:	e7e1      	b.n	80167aa <arm_cfft_init_f32+0x22>
 80167e6:	f04f 30ff 	mov.w	r0, #4294967295
 80167ea:	bc30      	pop	{r4, r5}
 80167ec:	4770      	bx	lr
 80167ee:	4909      	ldr	r1, [pc, #36]	; (8016814 <arm_cfft_init_f32+0x8c>)
 80167f0:	e7db      	b.n	80167aa <arm_cfft_init_f32+0x22>
 80167f2:	4909      	ldr	r1, [pc, #36]	; (8016818 <arm_cfft_init_f32+0x90>)
 80167f4:	e7d9      	b.n	80167aa <arm_cfft_init_f32+0x22>
 80167f6:	4909      	ldr	r1, [pc, #36]	; (801681c <arm_cfft_init_f32+0x94>)
 80167f8:	e7d7      	b.n	80167aa <arm_cfft_init_f32+0x22>
 80167fa:	4909      	ldr	r1, [pc, #36]	; (8016820 <arm_cfft_init_f32+0x98>)
 80167fc:	e7d5      	b.n	80167aa <arm_cfft_init_f32+0x22>
 80167fe:	4909      	ldr	r1, [pc, #36]	; (8016824 <arm_cfft_init_f32+0x9c>)
 8016800:	e7d3      	b.n	80167aa <arm_cfft_init_f32+0x22>
 8016802:	bf00      	nop
 8016804:	0801c59c 	.word	0x0801c59c
 8016808:	0801c53c 	.word	0x0801c53c
 801680c:	0801c54c 	.word	0x0801c54c
 8016810:	0801c58c 	.word	0x0801c58c
 8016814:	0801c56c 	.word	0x0801c56c
 8016818:	0801c5ac 	.word	0x0801c5ac
 801681c:	0801c5bc 	.word	0x0801c5bc
 8016820:	0801c55c 	.word	0x0801c55c
 8016824:	0801c57c 	.word	0x0801c57c

08016828 <arm_cfft_radix8by2_f32>:
 8016828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801682c:	4607      	mov	r7, r0
 801682e:	4608      	mov	r0, r1
 8016830:	ed2d 8b06 	vpush	{d8-d10}
 8016834:	f8b7 c000 	ldrh.w	ip, [r7]
 8016838:	b082      	sub	sp, #8
 801683a:	687a      	ldr	r2, [r7, #4]
 801683c:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8016840:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8016844:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8016848:	f000 80ac 	beq.w	80169a4 <arm_cfft_radix8by2_f32+0x17c>
 801684c:	008c      	lsls	r4, r1, #2
 801684e:	f100 0310 	add.w	r3, r0, #16
 8016852:	3210      	adds	r2, #16
 8016854:	f108 0610 	add.w	r6, r8, #16
 8016858:	3410      	adds	r4, #16
 801685a:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 801685e:	1905      	adds	r5, r0, r4
 8016860:	4444      	add	r4, r8
 8016862:	ed16 7a04 	vldr	s14, [r6, #-16]
 8016866:	3310      	adds	r3, #16
 8016868:	ed53 4a08 	vldr	s9, [r3, #-32]	; 0xffffffe0
 801686c:	3510      	adds	r5, #16
 801686e:	ed56 0a03 	vldr	s1, [r6, #-12]
 8016872:	3210      	adds	r2, #16
 8016874:	ee74 9a87 	vadd.f32	s19, s9, s14
 8016878:	ed56 7a02 	vldr	s15, [r6, #-8]
 801687c:	ed56 2a01 	vldr	s5, [r6, #-4]
 8016880:	ee74 4ac7 	vsub.f32	s9, s9, s14
 8016884:	ed54 5a04 	vldr	s11, [r4, #-16]
 8016888:	3610      	adds	r6, #16
 801688a:	ed14 5a03 	vldr	s10, [r4, #-12]
 801688e:	3410      	adds	r4, #16
 8016890:	ed14 3a06 	vldr	s6, [r4, #-24]	; 0xffffffe8
 8016894:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 8016898:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
 801689c:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
 80168a0:	ed15 4a05 	vldr	s8, [r5, #-20]	; 0xffffffec
 80168a4:	ee36 9aa5 	vadd.f32	s18, s13, s11
 80168a8:	ed14 6a05 	vldr	s12, [r4, #-20]	; 0xffffffec
 80168ac:	ee33 8a83 	vadd.f32	s16, s7, s6
 80168b0:	ed13 7a07 	vldr	s14, [r3, #-28]	; 0xffffffe4
 80168b4:	ee75 5ae6 	vsub.f32	s11, s11, s13
 80168b8:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 80168bc:	ee34 0a06 	vadd.f32	s0, s8, s12
 80168c0:	ed15 1a07 	vldr	s2, [r5, #-28]	; 0xffffffe4
 80168c4:	ee77 aa20 	vadd.f32	s21, s14, s1
 80168c8:	ed43 9a08 	vstr	s19, [r3, #-32]	; 0xffffffe0
 80168cc:	ee31 aaa7 	vadd.f32	s20, s3, s15
 80168d0:	ee72 9a22 	vadd.f32	s19, s4, s5
 80168d4:	ee71 8a05 	vadd.f32	s17, s2, s10
 80168d8:	ed43 aa07 	vstr	s21, [r3, #-28]	; 0xffffffe4
 80168dc:	ee37 7a60 	vsub.f32	s14, s14, s1
 80168e0:	ed03 aa06 	vstr	s20, [r3, #-24]	; 0xffffffe8
 80168e4:	ee35 5a41 	vsub.f32	s10, s10, s2
 80168e8:	ed43 9a05 	vstr	s19, [r3, #-20]	; 0xffffffec
 80168ec:	ee36 6a44 	vsub.f32	s12, s12, s8
 80168f0:	ed05 9a08 	vstr	s18, [r5, #-32]	; 0xffffffe0
 80168f4:	ed45 8a07 	vstr	s17, [r5, #-28]	; 0xffffffe4
 80168f8:	ee71 1ae7 	vsub.f32	s3, s3, s15
 80168fc:	ed05 8a06 	vstr	s16, [r5, #-24]	; 0xffffffe8
 8016900:	ee72 7a62 	vsub.f32	s15, s4, s5
 8016904:	ed05 0a05 	vstr	s0, [r5, #-20]	; 0xffffffec
 8016908:	ee73 2a63 	vsub.f32	s5, s6, s7
 801690c:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 8016910:	4563      	cmp	r3, ip
 8016912:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 8016916:	ee24 3a84 	vmul.f32	s6, s9, s8
 801691a:	ee27 2a26 	vmul.f32	s4, s14, s13
 801691e:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8016922:	ee65 3aa6 	vmul.f32	s7, s11, s13
 8016926:	ee27 7a04 	vmul.f32	s14, s14, s8
 801692a:	ee65 5a84 	vmul.f32	s11, s11, s8
 801692e:	ee65 6a26 	vmul.f32	s13, s10, s13
 8016932:	ee25 5a04 	vmul.f32	s10, s10, s8
 8016936:	ee37 7a64 	vsub.f32	s14, s14, s9
 801693a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801693e:	ee33 4a02 	vadd.f32	s8, s6, s4
 8016942:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8016946:	ed06 7a07 	vstr	s14, [r6, #-28]	; 0xffffffe4
 801694a:	ed06 4a08 	vstr	s8, [r6, #-32]	; 0xffffffe0
 801694e:	ed04 5a08 	vstr	s10, [r4, #-32]	; 0xffffffe0
 8016952:	ed44 6a07 	vstr	s13, [r4, #-28]	; 0xffffffe4
 8016956:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 801695a:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 801695e:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8016962:	ee27 4a87 	vmul.f32	s8, s15, s14
 8016966:	ee61 5a87 	vmul.f32	s11, s3, s14
 801696a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801696e:	ee22 5a87 	vmul.f32	s10, s5, s14
 8016972:	ee26 7a07 	vmul.f32	s14, s12, s14
 8016976:	ee26 6a26 	vmul.f32	s12, s12, s13
 801697a:	ee62 6aa6 	vmul.f32	s13, s5, s13
 801697e:	ee74 4a84 	vadd.f32	s9, s9, s8
 8016982:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8016986:	ee35 6a46 	vsub.f32	s12, s10, s12
 801698a:	ee37 7a26 	vadd.f32	s14, s14, s13
 801698e:	ed46 4a06 	vstr	s9, [r6, #-24]	; 0xffffffe8
 8016992:	ed46 7a05 	vstr	s15, [r6, #-20]	; 0xffffffec
 8016996:	ed04 6a06 	vstr	s12, [r4, #-24]	; 0xffffffe8
 801699a:	ed04 7a05 	vstr	s14, [r4, #-20]	; 0xffffffec
 801699e:	f47f af60 	bne.w	8016862 <arm_cfft_radix8by2_f32+0x3a>
 80169a2:	687a      	ldr	r2, [r7, #4]
 80169a4:	b289      	uxth	r1, r1
 80169a6:	2302      	movs	r3, #2
 80169a8:	9101      	str	r1, [sp, #4]
 80169aa:	f000 fb07 	bl	8016fbc <arm_radix8_butterfly_f32>
 80169ae:	9901      	ldr	r1, [sp, #4]
 80169b0:	4640      	mov	r0, r8
 80169b2:	687a      	ldr	r2, [r7, #4]
 80169b4:	2302      	movs	r3, #2
 80169b6:	b002      	add	sp, #8
 80169b8:	ecbd 8b06 	vpop	{d8-d10}
 80169bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80169c0:	f000 bafc 	b.w	8016fbc <arm_radix8_butterfly_f32>

080169c4 <arm_cfft_radix8by4_f32>:
 80169c4:	4602      	mov	r2, r0
 80169c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169ca:	ed2d 8b04 	vpush	{d8-d9}
 80169ce:	8813      	ldrh	r3, [r2, #0]
 80169d0:	b08d      	sub	sp, #52	; 0x34
 80169d2:	edd1 7a00 	vldr	s15, [r1]
 80169d6:	085b      	lsrs	r3, r3, #1
 80169d8:	6852      	ldr	r2, [r2, #4]
 80169da:	edd1 5a01 	vldr	s11, [r1, #4]
 80169de:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 80169e2:	900a      	str	r0, [sp, #40]	; 0x28
 80169e4:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 80169e8:	4608      	mov	r0, r1
 80169ea:	ed98 6a00 	vldr	s12, [r8]
 80169ee:	eb08 0583 	add.w	r5, r8, r3, lsl #2
 80169f2:	ed96 7a00 	vldr	s14, [r6]
 80169f6:	f102 0108 	add.w	r1, r2, #8
 80169fa:	ee77 6a86 	vadd.f32	s13, s15, s12
 80169fe:	ed95 5a00 	vldr	s10, [r5]
 8016a02:	edd8 4a01 	vldr	s9, [r8, #4]
 8016a06:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8016a0a:	9102      	str	r1, [sp, #8]
 8016a0c:	0859      	lsrs	r1, r3, #1
 8016a0e:	ee77 3a26 	vadd.f32	s7, s14, s13
 8016a12:	ed96 4a01 	vldr	s8, [r6, #4]
 8016a16:	ee35 6aa4 	vadd.f32	s12, s11, s9
 8016a1a:	ed95 3a01 	vldr	s6, [r5, #4]
 8016a1e:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8016a22:	9109      	str	r1, [sp, #36]	; 0x24
 8016a24:	ee73 3a85 	vadd.f32	s7, s7, s10
 8016a28:	0859      	lsrs	r1, r3, #1
 8016a2a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8016a2e:	4603      	mov	r3, r0
 8016a30:	ee76 4a44 	vsub.f32	s9, s12, s8
 8016a34:	f102 0c10 	add.w	ip, r2, #16
 8016a38:	edc0 3a00 	vstr	s7, [r0]
 8016a3c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8016a40:	ed96 2a01 	vldr	s4, [r6, #4]
 8016a44:	ee74 3a27 	vadd.f32	s7, s8, s15
 8016a48:	3308      	adds	r3, #8
 8016a4a:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8016a4e:	ee36 6a02 	vadd.f32	s12, s12, s4
 8016a52:	edd5 2a01 	vldr	s5, [r5, #4]
 8016a56:	ee35 4ac7 	vsub.f32	s8, s11, s14
 8016a5a:	9303      	str	r3, [sp, #12]
 8016a5c:	ee37 7a25 	vadd.f32	s14, s14, s11
 8016a60:	4637      	mov	r7, r6
 8016a62:	462c      	mov	r4, r5
 8016a64:	3902      	subs	r1, #2
 8016a66:	4643      	mov	r3, r8
 8016a68:	ee74 5ac3 	vsub.f32	s11, s9, s6
 8016a6c:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8016a70:	f8cd c000 	str.w	ip, [sp]
 8016a74:	ee36 6a22 	vadd.f32	s12, s12, s5
 8016a78:	f102 0c18 	add.w	ip, r2, #24
 8016a7c:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8016a80:	3708      	adds	r7, #8
 8016a82:	ee77 7a83 	vadd.f32	s15, s15, s6
 8016a86:	3308      	adds	r3, #8
 8016a88:	ee74 4a05 	vadd.f32	s9, s8, s10
 8016a8c:	3408      	adds	r4, #8
 8016a8e:	ee37 7a45 	vsub.f32	s14, s14, s10
 8016a92:	0849      	lsrs	r1, r1, #1
 8016a94:	ed80 6a01 	vstr	s12, [r0, #4]
 8016a98:	9508      	str	r5, [sp, #32]
 8016a9a:	edc6 3a00 	vstr	s7, [r6]
 8016a9e:	edc6 4a01 	vstr	s9, [r6, #4]
 8016aa2:	9607      	str	r6, [sp, #28]
 8016aa4:	edc8 6a00 	vstr	s13, [r8]
 8016aa8:	edc8 5a01 	vstr	s11, [r8, #4]
 8016aac:	f8cd c004 	str.w	ip, [sp, #4]
 8016ab0:	9706      	str	r7, [sp, #24]
 8016ab2:	9305      	str	r3, [sp, #20]
 8016ab4:	edc5 7a00 	vstr	s15, [r5]
 8016ab8:	9404      	str	r4, [sp, #16]
 8016aba:	ed85 7a01 	vstr	s14, [r5, #4]
 8016abe:	910b      	str	r1, [sp, #44]	; 0x2c
 8016ac0:	f000 813a 	beq.w	8016d38 <arm_cfft_radix8by4_f32+0x374>
 8016ac4:	4637      	mov	r7, r6
 8016ac6:	f1a6 0c0c 	sub.w	ip, r6, #12
 8016aca:	462e      	mov	r6, r5
 8016acc:	f1aa 030c 	sub.w	r3, sl, #12
 8016ad0:	f102 0930 	add.w	r9, r2, #48	; 0x30
 8016ad4:	f102 0a20 	add.w	sl, r2, #32
 8016ad8:	4632      	mov	r2, r6
 8016ada:	442b      	add	r3, r5
 8016adc:	f100 0e10 	add.w	lr, r0, #16
 8016ae0:	f107 0510 	add.w	r5, r7, #16
 8016ae4:	f8dd b000 	ldr.w	fp, [sp]
 8016ae8:	f1a8 040c 	sub.w	r4, r8, #12
 8016aec:	f108 0710 	add.w	r7, r8, #16
 8016af0:	3e0c      	subs	r6, #12
 8016af2:	3210      	adds	r2, #16
 8016af4:	ed17 7a02 	vldr	s14, [r7, #-8]
 8016af8:	3901      	subs	r1, #1
 8016afa:	ed5e 7a02 	vldr	s15, [lr, #-8]
 8016afe:	f1ac 0c08 	sub.w	ip, ip, #8
 8016b02:	ed55 6a02 	vldr	s13, [r5, #-8]
 8016b06:	f10e 0e08 	add.w	lr, lr, #8
 8016b0a:	ee77 1a87 	vadd.f32	s3, s15, s14
 8016b0e:	ed52 4a02 	vldr	s9, [r2, #-8]
 8016b12:	ed57 5a01 	vldr	s11, [r7, #-4]
 8016b16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016b1a:	ed1e 7a03 	vldr	s14, [lr, #-12]
 8016b1e:	f10b 0b08 	add.w	fp, fp, #8
 8016b22:	ee36 6aa1 	vadd.f32	s12, s13, s3
 8016b26:	ed15 3a01 	vldr	s6, [r5, #-4]
 8016b2a:	ee37 4a25 	vadd.f32	s8, s14, s11
 8016b2e:	ed52 3a01 	vldr	s7, [r2, #-4]
 8016b32:	ee37 7a65 	vsub.f32	s14, s14, s11
 8016b36:	f105 0508 	add.w	r5, r5, #8
 8016b3a:	ee36 6a24 	vadd.f32	s12, s12, s9
 8016b3e:	f1a4 0408 	sub.w	r4, r4, #8
 8016b42:	ee73 2a27 	vadd.f32	s5, s6, s15
 8016b46:	f10a 0a10 	add.w	sl, sl, #16
 8016b4a:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8016b4e:	f107 0708 	add.w	r7, r7, #8
 8016b52:	ed0e 6a04 	vstr	s12, [lr, #-16]
 8016b56:	ee37 5a66 	vsub.f32	s10, s14, s13
 8016b5a:	ed55 5a03 	vldr	s11, [r5, #-12]
 8016b5e:	ee71 1ae6 	vsub.f32	s3, s3, s13
 8016b62:	ed12 6a01 	vldr	s12, [r2, #-4]
 8016b66:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016b6a:	ee74 5a25 	vadd.f32	s11, s8, s11
 8016b6e:	f1a6 0608 	sub.w	r6, r6, #8
 8016b72:	ee34 4a43 	vsub.f32	s8, s8, s6
 8016b76:	f109 0918 	add.w	r9, r9, #24
 8016b7a:	ee32 0ae3 	vsub.f32	s0, s5, s7
 8016b7e:	f102 0208 	add.w	r2, r2, #8
 8016b82:	ee75 5a86 	vadd.f32	s11, s11, s12
 8016b86:	f1a3 0308 	sub.w	r3, r3, #8
 8016b8a:	ee34 6a63 	vsub.f32	s12, s8, s7
 8016b8e:	ee77 3aa3 	vadd.f32	s7, s15, s7
 8016b92:	ed4e 5a03 	vstr	s11, [lr, #-12]
 8016b96:	ee35 5a24 	vadd.f32	s10, s10, s9
 8016b9a:	ed96 4a04 	vldr	s8, [r6, #16]
 8016b9e:	ee71 1ae4 	vsub.f32	s3, s3, s9
 8016ba2:	ed9c 3a04 	vldr	s6, [ip, #16]
 8016ba6:	ee37 7a64 	vsub.f32	s14, s14, s9
 8016baa:	edd4 7a04 	vldr	s15, [r4, #16]
 8016bae:	ee73 6a04 	vadd.f32	s13, s6, s8
 8016bb2:	ed93 8a04 	vldr	s16, [r3, #16]
 8016bb6:	edd6 5a03 	vldr	s11, [r6, #12]
 8016bba:	ee33 3a44 	vsub.f32	s6, s6, s8
 8016bbe:	ed9c 2a03 	vldr	s4, [ip, #12]
 8016bc2:	ee77 8ac8 	vsub.f32	s17, s15, s16
 8016bc6:	ee77 0aa6 	vadd.f32	s1, s15, s13
 8016bca:	ed94 1a03 	vldr	s2, [r4, #12]
 8016bce:	ee32 4a25 	vadd.f32	s8, s4, s11
 8016bd2:	edd3 2a03 	vldr	s5, [r3, #12]
 8016bd6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8016bda:	ee70 0a88 	vadd.f32	s1, s1, s16
 8016bde:	ee73 4a41 	vsub.f32	s9, s6, s2
 8016be2:	ee32 2a65 	vsub.f32	s4, s4, s11
 8016be6:	edcc 0a04 	vstr	s1, [ip, #16]
 8016bea:	ee74 0a41 	vsub.f32	s1, s8, s2
 8016bee:	edd4 6a03 	vldr	s13, [r4, #12]
 8016bf2:	ee74 4aa2 	vadd.f32	s9, s9, s5
 8016bf6:	ed93 9a03 	vldr	s18, [r3, #12]
 8016bfa:	ee78 5a82 	vadd.f32	s11, s17, s4
 8016bfe:	ee34 4a26 	vadd.f32	s8, s8, s13
 8016c02:	ee70 0ae2 	vsub.f32	s1, s1, s5
 8016c06:	ee72 2ac1 	vsub.f32	s5, s5, s2
 8016c0a:	ee34 4a09 	vadd.f32	s8, s8, s18
 8016c0e:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8016c12:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8016c16:	ed8c 4a03 	vstr	s8, [ip, #12]
 8016c1a:	ee38 2ac2 	vsub.f32	s4, s17, s4
 8016c1e:	ed1b 1a03 	vldr	s2, [fp, #-12]
 8016c22:	ed1b 4a04 	vldr	s8, [fp, #-16]
 8016c26:	ee60 2a01 	vmul.f32	s5, s0, s2
 8016c2a:	ee64 6a81 	vmul.f32	s13, s9, s2
 8016c2e:	ee20 8a04 	vmul.f32	s16, s0, s8
 8016c32:	ee64 4a84 	vmul.f32	s9, s9, s8
 8016c36:	ee25 0a01 	vmul.f32	s0, s10, s2
 8016c3a:	ee25 5a04 	vmul.f32	s10, s10, s8
 8016c3e:	ee25 4a84 	vmul.f32	s8, s11, s8
 8016c42:	ee65 5a81 	vmul.f32	s11, s11, s2
 8016c46:	ee35 5a62 	vsub.f32	s10, s10, s5
 8016c4a:	ee36 4ac4 	vsub.f32	s8, s13, s8
 8016c4e:	ee75 5aa4 	vadd.f32	s11, s11, s9
 8016c52:	ee38 1a00 	vadd.f32	s2, s16, s0
 8016c56:	ed05 5a03 	vstr	s10, [r5, #-12]
 8016c5a:	ed05 1a04 	vstr	s2, [r5, #-16]
 8016c5e:	ed84 4a04 	vstr	s8, [r4, #16]
 8016c62:	edc4 5a03 	vstr	s11, [r4, #12]
 8016c66:	ed1a 5a08 	vldr	s10, [sl, #-32]	; 0xffffffe0
 8016c6a:	ed5a 5a07 	vldr	s11, [sl, #-28]	; 0xffffffe4
 8016c6e:	ee67 4ac5 	vnmul.f32	s9, s15, s10
 8016c72:	ee66 2a25 	vmul.f32	s5, s12, s11
 8016c76:	ee67 6aa5 	vmul.f32	s13, s15, s11
 8016c7a:	ee21 4a85 	vmul.f32	s8, s3, s10
 8016c7e:	ee60 7a85 	vmul.f32	s15, s1, s10
 8016c82:	ee61 1aa5 	vmul.f32	s3, s3, s11
 8016c86:	ee26 6a05 	vmul.f32	s12, s12, s10
 8016c8a:	ee60 5aa5 	vmul.f32	s11, s1, s11
 8016c8e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8016c92:	ee34 5a22 	vadd.f32	s10, s8, s5
 8016c96:	ee36 6a61 	vsub.f32	s12, s12, s3
 8016c9a:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8016c9e:	ed07 5a04 	vstr	s10, [r7, #-16]
 8016ca2:	ed07 6a03 	vstr	s12, [r7, #-12]
 8016ca6:	edc6 5a04 	vstr	s11, [r6, #16]
 8016caa:	edc6 6a03 	vstr	s13, [r6, #12]
 8016cae:	ed59 2a0c 	vldr	s5, [r9, #-48]	; 0xffffffd0
 8016cb2:	ed59 7a0b 	vldr	s15, [r9, #-44]	; 0xffffffd4
 8016cb6:	ee23 6aa2 	vmul.f32	s12, s7, s5
 8016cba:	ee67 5a27 	vmul.f32	s11, s14, s15
 8016cbe:	ee63 6a27 	vmul.f32	s13, s6, s15
 8016cc2:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8016cc6:	ee27 7a22 	vmul.f32	s14, s14, s5
 8016cca:	ee62 7a27 	vmul.f32	s15, s4, s15
 8016cce:	ee23 3a22 	vmul.f32	s6, s6, s5
 8016cd2:	ee22 2a22 	vmul.f32	s4, s4, s5
 8016cd6:	ee36 6a25 	vadd.f32	s12, s12, s11
 8016cda:	ee37 7a63 	vsub.f32	s14, s14, s7
 8016cde:	ee36 2ac2 	vsub.f32	s4, s13, s4
 8016ce2:	ee77 7a83 	vadd.f32	s15, s15, s6
 8016ce6:	ed02 6a04 	vstr	s12, [r2, #-16]
 8016cea:	ed02 7a03 	vstr	s14, [r2, #-12]
 8016cee:	ed83 2a04 	vstr	s4, [r3, #16]
 8016cf2:	edc3 7a03 	vstr	s15, [r3, #12]
 8016cf6:	f47f aefd 	bne.w	8016af4 <arm_cfft_radix8by4_f32+0x130>
 8016cfa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016cfc:	9903      	ldr	r1, [sp, #12]
 8016cfe:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8016d02:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8016d06:	9103      	str	r1, [sp, #12]
 8016d08:	9902      	ldr	r1, [sp, #8]
 8016d0a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8016d0e:	9102      	str	r1, [sp, #8]
 8016d10:	9906      	ldr	r1, [sp, #24]
 8016d12:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8016d16:	9106      	str	r1, [sp, #24]
 8016d18:	9900      	ldr	r1, [sp, #0]
 8016d1a:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8016d1e:	9100      	str	r1, [sp, #0]
 8016d20:	9905      	ldr	r1, [sp, #20]
 8016d22:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8016d26:	9105      	str	r1, [sp, #20]
 8016d28:	9904      	ldr	r1, [sp, #16]
 8016d2a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8016d2e:	9204      	str	r2, [sp, #16]
 8016d30:	9a01      	ldr	r2, [sp, #4]
 8016d32:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8016d36:	9301      	str	r3, [sp, #4]
 8016d38:	9c03      	ldr	r4, [sp, #12]
 8016d3a:	2304      	movs	r3, #4
 8016d3c:	9e05      	ldr	r6, [sp, #20]
 8016d3e:	ed94 7a00 	vldr	s14, [r4]
 8016d42:	edd6 7a00 	vldr	s15, [r6]
 8016d46:	9a06      	ldr	r2, [sp, #24]
 8016d48:	ee37 6a27 	vadd.f32	s12, s14, s15
 8016d4c:	9d04      	ldr	r5, [sp, #16]
 8016d4e:	edd2 6a00 	vldr	s13, [r2]
 8016d52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016d56:	ed95 3a00 	vldr	s6, [r5]
 8016d5a:	ee76 3a86 	vadd.f32	s7, s13, s12
 8016d5e:	ed96 5a01 	vldr	s10, [r6, #4]
 8016d62:	ed94 4a01 	vldr	s8, [r4, #4]
 8016d66:	ee36 6a66 	vsub.f32	s12, s12, s13
 8016d6a:	edd5 2a01 	vldr	s5, [r5, #4]
 8016d6e:	ee73 3a83 	vadd.f32	s7, s7, s6
 8016d72:	edd2 7a01 	vldr	s15, [r2, #4]
 8016d76:	ee74 5a05 	vadd.f32	s11, s8, s10
 8016d7a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8016d7e:	ee34 4a45 	vsub.f32	s8, s8, s10
 8016d82:	edc4 3a00 	vstr	s7, [r4]
 8016d86:	ee77 4a87 	vadd.f32	s9, s15, s14
 8016d8a:	edd2 3a01 	vldr	s7, [r2, #4]
 8016d8e:	ee36 6a43 	vsub.f32	s12, s12, s6
 8016d92:	ed95 2a01 	vldr	s4, [r5, #4]
 8016d96:	ee34 5a66 	vsub.f32	s10, s8, s13
 8016d9a:	ee75 3aa3 	vadd.f32	s7, s11, s7
 8016d9e:	9103      	str	r1, [sp, #12]
 8016da0:	ee74 4ae2 	vsub.f32	s9, s9, s5
 8016da4:	ee35 5a03 	vadd.f32	s10, s10, s6
 8016da8:	ee73 3a82 	vadd.f32	s7, s7, s4
 8016dac:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8016db0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016db4:	edc4 3a01 	vstr	s7, [r4, #4]
 8016db8:	ee76 6a84 	vadd.f32	s13, s13, s8
 8016dbc:	9c02      	ldr	r4, [sp, #8]
 8016dbe:	ee75 5ae2 	vsub.f32	s11, s11, s5
 8016dc2:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8016dc6:	edd4 3a00 	vldr	s7, [r4]
 8016dca:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8016dce:	ed94 7a01 	vldr	s14, [r4, #4]
 8016dd2:	ee24 4aa3 	vmul.f32	s8, s9, s7
 8016dd6:	ee64 4a87 	vmul.f32	s9, s9, s14
 8016dda:	ee25 7a07 	vmul.f32	s14, s10, s14
 8016dde:	ee25 5a23 	vmul.f32	s10, s10, s7
 8016de2:	ee34 7a07 	vadd.f32	s14, s8, s14
 8016de6:	ee35 5a64 	vsub.f32	s10, s10, s9
 8016dea:	ed82 7a00 	vstr	s14, [r2]
 8016dee:	ed82 5a01 	vstr	s10, [r2, #4]
 8016df2:	9a00      	ldr	r2, [sp, #0]
 8016df4:	edd2 4a01 	vldr	s9, [r2, #4]
 8016df8:	ed92 7a00 	vldr	s14, [r2]
 8016dfc:	9a01      	ldr	r2, [sp, #4]
 8016dfe:	ee26 5a07 	vmul.f32	s10, s12, s14
 8016e02:	ee26 6a24 	vmul.f32	s12, s12, s9
 8016e06:	ee25 7a87 	vmul.f32	s14, s11, s14
 8016e0a:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8016e0e:	ee37 6a46 	vsub.f32	s12, s14, s12
 8016e12:	ee75 5a25 	vadd.f32	s11, s10, s11
 8016e16:	ed86 6a01 	vstr	s12, [r6, #4]
 8016e1a:	edc6 5a00 	vstr	s11, [r6]
 8016e1e:	edd2 5a01 	vldr	s11, [r2, #4]
 8016e22:	ed92 7a00 	vldr	s14, [r2]
 8016e26:	ee27 6a87 	vmul.f32	s12, s15, s14
 8016e2a:	ee26 7a87 	vmul.f32	s14, s13, s14
 8016e2e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8016e32:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8016e36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016e3a:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016e3e:	edc5 6a00 	vstr	s13, [r5]
 8016e42:	edc5 7a01 	vstr	s15, [r5, #4]
 8016e46:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016e48:	6862      	ldr	r2, [r4, #4]
 8016e4a:	f000 f8b7 	bl	8016fbc <arm_radix8_butterfly_f32>
 8016e4e:	9903      	ldr	r1, [sp, #12]
 8016e50:	9807      	ldr	r0, [sp, #28]
 8016e52:	2304      	movs	r3, #4
 8016e54:	6862      	ldr	r2, [r4, #4]
 8016e56:	9100      	str	r1, [sp, #0]
 8016e58:	f000 f8b0 	bl	8016fbc <arm_radix8_butterfly_f32>
 8016e5c:	4640      	mov	r0, r8
 8016e5e:	9900      	ldr	r1, [sp, #0]
 8016e60:	6862      	ldr	r2, [r4, #4]
 8016e62:	2304      	movs	r3, #4
 8016e64:	f000 f8aa 	bl	8016fbc <arm_radix8_butterfly_f32>
 8016e68:	9900      	ldr	r1, [sp, #0]
 8016e6a:	6862      	ldr	r2, [r4, #4]
 8016e6c:	2304      	movs	r3, #4
 8016e6e:	9808      	ldr	r0, [sp, #32]
 8016e70:	b00d      	add	sp, #52	; 0x34
 8016e72:	ecbd 8b04 	vpop	{d8-d9}
 8016e76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e7a:	f000 b89f 	b.w	8016fbc <arm_radix8_butterfly_f32>
 8016e7e:	bf00      	nop

08016e80 <arm_cfft_f32>:
 8016e80:	2a01      	cmp	r2, #1
 8016e82:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e86:	4607      	mov	r7, r0
 8016e88:	4690      	mov	r8, r2
 8016e8a:	460c      	mov	r4, r1
 8016e8c:	4699      	mov	r9, r3
 8016e8e:	8805      	ldrh	r5, [r0, #0]
 8016e90:	d05b      	beq.n	8016f4a <arm_cfft_f32+0xca>
 8016e92:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8016e96:	d053      	beq.n	8016f40 <arm_cfft_f32+0xc0>
 8016e98:	d810      	bhi.n	8016ebc <arm_cfft_f32+0x3c>
 8016e9a:	2d40      	cmp	r5, #64	; 0x40
 8016e9c:	d015      	beq.n	8016eca <arm_cfft_f32+0x4a>
 8016e9e:	d94b      	bls.n	8016f38 <arm_cfft_f32+0xb8>
 8016ea0:	2d80      	cmp	r5, #128	; 0x80
 8016ea2:	d103      	bne.n	8016eac <arm_cfft_f32+0x2c>
 8016ea4:	4621      	mov	r1, r4
 8016ea6:	4638      	mov	r0, r7
 8016ea8:	f7ff fcbe 	bl	8016828 <arm_cfft_radix8by2_f32>
 8016eac:	f1b9 0f00 	cmp.w	r9, #0
 8016eb0:	d114      	bne.n	8016edc <arm_cfft_f32+0x5c>
 8016eb2:	f1b8 0f01 	cmp.w	r8, #1
 8016eb6:	d019      	beq.n	8016eec <arm_cfft_f32+0x6c>
 8016eb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016ebc:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8016ec0:	d03e      	beq.n	8016f40 <arm_cfft_f32+0xc0>
 8016ec2:	d932      	bls.n	8016f2a <arm_cfft_f32+0xaa>
 8016ec4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8016ec8:	d1f0      	bne.n	8016eac <arm_cfft_f32+0x2c>
 8016eca:	2301      	movs	r3, #1
 8016ecc:	687a      	ldr	r2, [r7, #4]
 8016ece:	4629      	mov	r1, r5
 8016ed0:	4620      	mov	r0, r4
 8016ed2:	f000 f873 	bl	8016fbc <arm_radix8_butterfly_f32>
 8016ed6:	f1b9 0f00 	cmp.w	r9, #0
 8016eda:	d0ea      	beq.n	8016eb2 <arm_cfft_f32+0x32>
 8016edc:	68ba      	ldr	r2, [r7, #8]
 8016ede:	4620      	mov	r0, r4
 8016ee0:	89b9      	ldrh	r1, [r7, #12]
 8016ee2:	f000 f843 	bl	8016f6c <arm_bitreversal_32>
 8016ee6:	f1b8 0f01 	cmp.w	r8, #1
 8016eea:	d1e5      	bne.n	8016eb8 <arm_cfft_f32+0x38>
 8016eec:	ee07 5a90 	vmov	s15, r5
 8016ef0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016ef4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016ef8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8016efc:	2d00      	cmp	r5, #0
 8016efe:	d0db      	beq.n	8016eb8 <arm_cfft_f32+0x38>
 8016f00:	f104 0108 	add.w	r1, r4, #8
 8016f04:	2300      	movs	r3, #0
 8016f06:	ed11 7a02 	vldr	s14, [r1, #-8]
 8016f0a:	3301      	adds	r3, #1
 8016f0c:	ed51 7a01 	vldr	s15, [r1, #-4]
 8016f10:	3108      	adds	r1, #8
 8016f12:	429d      	cmp	r5, r3
 8016f14:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016f18:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8016f1c:	ed01 7a04 	vstr	s14, [r1, #-16]
 8016f20:	ed41 7a03 	vstr	s15, [r1, #-12]
 8016f24:	d1ef      	bne.n	8016f06 <arm_cfft_f32+0x86>
 8016f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016f2a:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8016f2e:	d0cc      	beq.n	8016eca <arm_cfft_f32+0x4a>
 8016f30:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8016f34:	d0b6      	beq.n	8016ea4 <arm_cfft_f32+0x24>
 8016f36:	e7b9      	b.n	8016eac <arm_cfft_f32+0x2c>
 8016f38:	2d10      	cmp	r5, #16
 8016f3a:	d0b3      	beq.n	8016ea4 <arm_cfft_f32+0x24>
 8016f3c:	2d20      	cmp	r5, #32
 8016f3e:	d1b5      	bne.n	8016eac <arm_cfft_f32+0x2c>
 8016f40:	4621      	mov	r1, r4
 8016f42:	4638      	mov	r0, r7
 8016f44:	f7ff fd3e 	bl	80169c4 <arm_cfft_radix8by4_f32>
 8016f48:	e7b0      	b.n	8016eac <arm_cfft_f32+0x2c>
 8016f4a:	b165      	cbz	r5, 8016f66 <arm_cfft_f32+0xe6>
 8016f4c:	310c      	adds	r1, #12
 8016f4e:	2600      	movs	r6, #0
 8016f50:	ed51 7a02 	vldr	s15, [r1, #-8]
 8016f54:	3601      	adds	r6, #1
 8016f56:	3108      	adds	r1, #8
 8016f58:	eef1 7a67 	vneg.f32	s15, s15
 8016f5c:	42b5      	cmp	r5, r6
 8016f5e:	ed41 7a04 	vstr	s15, [r1, #-16]
 8016f62:	d1f5      	bne.n	8016f50 <arm_cfft_f32+0xd0>
 8016f64:	e795      	b.n	8016e92 <arm_cfft_f32+0x12>
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d0a6      	beq.n	8016eb8 <arm_cfft_f32+0x38>
 8016f6a:	e7b7      	b.n	8016edc <arm_cfft_f32+0x5c>

08016f6c <arm_bitreversal_32>:
 8016f6c:	b321      	cbz	r1, 8016fb8 <arm_bitreversal_32+0x4c>
 8016f6e:	f102 0c02 	add.w	ip, r2, #2
 8016f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f76:	4690      	mov	r8, r2
 8016f78:	2500      	movs	r5, #0
 8016f7a:	f838 4015 	ldrh.w	r4, [r8, r5, lsl #1]
 8016f7e:	f83c 3015 	ldrh.w	r3, [ip, r5, lsl #1]
 8016f82:	3502      	adds	r5, #2
 8016f84:	08a4      	lsrs	r4, r4, #2
 8016f86:	089b      	lsrs	r3, r3, #2
 8016f88:	428d      	cmp	r5, r1
 8016f8a:	ea4f 0784 	mov.w	r7, r4, lsl #2
 8016f8e:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
 8016f92:	ea4f 0683 	mov.w	r6, r3, lsl #2
 8016f96:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8016f9a:	f107 0704 	add.w	r7, r7, #4
 8016f9e:	f106 0604 	add.w	r6, r6, #4
 8016fa2:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8016fa6:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
 8016faa:	59c4      	ldr	r4, [r0, r7]
 8016fac:	5983      	ldr	r3, [r0, r6]
 8016fae:	51c3      	str	r3, [r0, r7]
 8016fb0:	5184      	str	r4, [r0, r6]
 8016fb2:	d3e2      	bcc.n	8016f7a <arm_bitreversal_32+0xe>
 8016fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fb8:	4770      	bx	lr
 8016fba:	bf00      	nop

08016fbc <arm_radix8_butterfly_f32>:
 8016fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fc0:	ed2d 8b10 	vpush	{d8-d15}
 8016fc4:	b093      	sub	sp, #76	; 0x4c
 8016fc6:	468a      	mov	sl, r1
 8016fc8:	eddf 8aba 	vldr	s17, [pc, #744]	; 80172b4 <arm_radix8_butterfly_f32+0x2f8>
 8016fcc:	468b      	mov	fp, r1
 8016fce:	9010      	str	r0, [sp, #64]	; 0x40
 8016fd0:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
 8016fd4:	4603      	mov	r3, r0
 8016fd6:	3304      	adds	r3, #4
 8016fd8:	9311      	str	r3, [sp, #68]	; 0x44
 8016fda:	ea4f 06da 	mov.w	r6, sl, lsr #3
 8016fde:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8016fe0:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 8016fe4:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8016fe8:	eb05 1146 	add.w	r1, r5, r6, lsl #5
 8016fec:	960d      	str	r6, [sp, #52]	; 0x34
 8016fee:	00f0      	lsls	r0, r6, #3
 8016ff0:	f04f 0e00 	mov.w	lr, #0
 8016ff4:	eb01 1406 	add.w	r4, r1, r6, lsl #4
 8016ff8:	0137      	lsls	r7, r6, #4
 8016ffa:	9003      	str	r0, [sp, #12]
 8016ffc:	eba6 0286 	sub.w	r2, r6, r6, lsl #2
 8017000:	9400      	str	r4, [sp, #0]
 8017002:	9702      	str	r7, [sp, #8]
 8017004:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 8017008:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 801700c:	1d04      	adds	r4, r0, #4
 801700e:	1d38      	adds	r0, r7, #4
 8017010:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8017014:	442c      	add	r4, r5
 8017016:	ebc6 09c6 	rsb	r9, r6, r6, lsl #3
 801701a:	9701      	str	r7, [sp, #4]
 801701c:	4428      	add	r0, r5
 801701e:	9d01      	ldr	r5, [sp, #4]
 8017020:	eb02 1746 	add.w	r7, r2, r6, lsl #5
 8017024:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8017028:	00ed      	lsls	r5, r5, #3
 801702a:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 801702e:	9501      	str	r5, [sp, #4]
 8017030:	ea4f 1508 	mov.w	r5, r8, lsl #4
 8017034:	9504      	str	r5, [sp, #16]
 8017036:	ea4f 05c8 	mov.w	r5, r8, lsl #3
 801703a:	9505      	str	r5, [sp, #20]
 801703c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801703e:	ea4f 1845 	mov.w	r8, r5, lsl #5
 8017042:	9d00      	ldr	r5, [sp, #0]
 8017044:	edd1 6a00 	vldr	s13, [r1]
 8017048:	44d6      	add	lr, sl
 801704a:	ed5c 7a01 	vldr	s15, [ip, #-4]
 801704e:	ed95 7a00 	vldr	s14, [r5]
 8017052:	45f3      	cmp	fp, lr
 8017054:	ed14 6a01 	vldr	s12, [r4, #-4]
 8017058:	ee37 2aa6 	vadd.f32	s4, s15, s13
 801705c:	edd6 2a00 	vldr	s5, [r6]
 8017060:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017064:	edd7 3a00 	vldr	s7, [r7]
 8017068:	ed10 5a01 	vldr	s10, [r0, #-4]
 801706c:	ee36 3a22 	vadd.f32	s6, s12, s5
 8017070:	edd2 6a00 	vldr	s13, [r2]
 8017074:	ee75 5a07 	vadd.f32	s11, s10, s14
 8017078:	ee36 4aa3 	vadd.f32	s8, s13, s7
 801707c:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8017080:	ee72 4a25 	vadd.f32	s9, s4, s11
 8017084:	ee73 3a04 	vadd.f32	s7, s6, s8
 8017088:	ee35 5a47 	vsub.f32	s10, s10, s14
 801708c:	ee36 7a62 	vsub.f32	s14, s12, s5
 8017090:	ee32 2a65 	vsub.f32	s4, s4, s11
 8017094:	ee74 5aa3 	vadd.f32	s11, s9, s7
 8017098:	ee74 4ae3 	vsub.f32	s9, s9, s7
 801709c:	ee37 6a66 	vsub.f32	s12, s14, s13
 80170a0:	ed4c 5a01 	vstr	s11, [ip, #-4]
 80170a4:	ee33 3a44 	vsub.f32	s6, s6, s8
 80170a8:	edc1 4a00 	vstr	s9, [r1]
 80170ac:	ee37 7a26 	vadd.f32	s14, s14, s13
 80170b0:	ed97 4a01 	vldr	s8, [r7, #4]
 80170b4:	ee66 6a28 	vmul.f32	s13, s12, s17
 80170b8:	edd4 5a00 	vldr	s11, [r4]
 80170bc:	ed96 6a01 	vldr	s12, [r6, #4]
 80170c0:	ee27 7a28 	vmul.f32	s14, s14, s17
 80170c4:	edd2 3a01 	vldr	s7, [r2, #4]
 80170c8:	ee77 2aa6 	vadd.f32	s5, s15, s13
 80170cc:	ee75 4ac6 	vsub.f32	s9, s11, s12
 80170d0:	ed91 1a01 	vldr	s2, [r1, #4]
 80170d4:	ee33 0ac4 	vsub.f32	s0, s7, s8
 80170d8:	edd5 0a01 	vldr	s1, [r5, #4]
 80170dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80170e0:	eddc 6a00 	vldr	s13, [ip]
 80170e4:	ee75 5a86 	vadd.f32	s11, s11, s12
 80170e8:	ed90 6a00 	vldr	s12, [r0]
 80170ec:	ee73 3a84 	vadd.f32	s7, s7, s8
 80170f0:	ee74 1a80 	vadd.f32	s3, s9, s0
 80170f4:	ee36 4a81 	vadd.f32	s8, s13, s2
 80170f8:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80170fc:	ee76 6ac1 	vsub.f32	s13, s13, s2
 8017100:	ee36 1a20 	vadd.f32	s2, s12, s1
 8017104:	ee61 1aa8 	vmul.f32	s3, s3, s17
 8017108:	ee36 6a60 	vsub.f32	s12, s12, s1
 801710c:	ee64 4aa8 	vmul.f32	s9, s9, s17
 8017110:	ee75 0aa3 	vadd.f32	s1, s11, s7
 8017114:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8017118:	ee74 3a01 	vadd.f32	s7, s8, s2
 801711c:	ee34 4a41 	vsub.f32	s8, s8, s2
 8017120:	ee36 1a21 	vadd.f32	s2, s12, s3
 8017124:	ee33 0aa0 	vadd.f32	s0, s7, s1
 8017128:	ee36 6a61 	vsub.f32	s12, s12, s3
 801712c:	ee73 3ae0 	vsub.f32	s7, s7, s1
 8017130:	ee76 1aa4 	vadd.f32	s3, s13, s9
 8017134:	ed8c 0a00 	vstr	s0, [ip]
 8017138:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801713c:	449c      	add	ip, r3
 801713e:	ee75 4a07 	vadd.f32	s9, s10, s14
 8017142:	edc1 3a01 	vstr	s7, [r1, #4]
 8017146:	ee35 7a47 	vsub.f32	s14, s10, s14
 801714a:	4419      	add	r1, r3
 801714c:	ee32 5a25 	vadd.f32	s10, s4, s11
 8017150:	ee72 5a65 	vsub.f32	s11, s4, s11
 8017154:	ee72 3a81 	vadd.f32	s7, s5, s2
 8017158:	ed00 5a01 	vstr	s10, [r0, #-4]
 801715c:	ee34 2a43 	vsub.f32	s4, s8, s6
 8017160:	edc5 5a00 	vstr	s11, [r5]
 8017164:	ee37 5a86 	vadd.f32	s10, s15, s12
 8017168:	ee71 5ae4 	vsub.f32	s11, s3, s9
 801716c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8017170:	ed80 2a00 	vstr	s4, [r0]
 8017174:	ee36 6ac7 	vsub.f32	s12, s13, s14
 8017178:	4418      	add	r0, r3
 801717a:	ee33 4a04 	vadd.f32	s8, s6, s8
 801717e:	ee72 2ac1 	vsub.f32	s5, s5, s2
 8017182:	ee74 4aa1 	vadd.f32	s9, s9, s3
 8017186:	ee37 7a26 	vadd.f32	s14, s14, s13
 801718a:	ed85 4a01 	vstr	s8, [r5, #4]
 801718e:	ed44 3a01 	vstr	s7, [r4, #-4]
 8017192:	441d      	add	r5, r3
 8017194:	edc7 2a00 	vstr	s5, [r7]
 8017198:	ed86 5a00 	vstr	s10, [r6]
 801719c:	edc2 7a00 	vstr	s15, [r2]
 80171a0:	edc4 5a00 	vstr	s11, [r4]
 80171a4:	441c      	add	r4, r3
 80171a6:	edc7 4a01 	vstr	s9, [r7, #4]
 80171aa:	441f      	add	r7, r3
 80171ac:	ed86 6a01 	vstr	s12, [r6, #4]
 80171b0:	441e      	add	r6, r3
 80171b2:	ed82 7a01 	vstr	s14, [r2, #4]
 80171b6:	441a      	add	r2, r3
 80171b8:	f63f af44 	bhi.w	8017044 <arm_radix8_butterfly_f32+0x88>
 80171bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80171be:	2a07      	cmp	r2, #7
 80171c0:	f240 81b7 	bls.w	8017532 <arm_radix8_butterfly_f32+0x576>
 80171c4:	9a03      	ldr	r2, [sp, #12]
 80171c6:	f108 0808 	add.w	r8, r8, #8
 80171ca:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80171cc:	f109 0008 	add.w	r0, r9, #8
 80171d0:	3208      	adds	r2, #8
 80171d2:	9e01      	ldr	r6, [sp, #4]
 80171d4:	9d04      	ldr	r5, [sp, #16]
 80171d6:	4694      	mov	ip, r2
 80171d8:	463a      	mov	r2, r7
 80171da:	3608      	adds	r6, #8
 80171dc:	9c05      	ldr	r4, [sp, #20]
 80171de:	4442      	add	r2, r8
 80171e0:	3508      	adds	r5, #8
 80171e2:	3408      	adds	r4, #8
 80171e4:	9902      	ldr	r1, [sp, #8]
 80171e6:	920b      	str	r2, [sp, #44]	; 0x2c
 80171e8:	eb07 020c 	add.w	r2, r7, ip
 80171ec:	310c      	adds	r1, #12
 80171ee:	f04f 0800 	mov.w	r8, #0
 80171f2:	920a      	str	r2, [sp, #40]	; 0x28
 80171f4:	19ba      	adds	r2, r7, r6
 80171f6:	9209      	str	r2, [sp, #36]	; 0x24
 80171f8:	197a      	adds	r2, r7, r5
 80171fa:	9208      	str	r2, [sp, #32]
 80171fc:	193a      	adds	r2, r7, r4
 80171fe:	9207      	str	r2, [sp, #28]
 8017200:	183a      	adds	r2, r7, r0
 8017202:	9206      	str	r2, [sp, #24]
 8017204:	187a      	adds	r2, r7, r1
 8017206:	9204      	str	r2, [sp, #16]
 8017208:	f107 020c 	add.w	r2, r7, #12
 801720c:	9205      	str	r2, [sp, #20]
 801720e:	2201      	movs	r2, #1
 8017210:	9203      	str	r2, [sp, #12]
 8017212:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017214:	f8dd c010 	ldr.w	ip, [sp, #16]
 8017218:	4490      	add	r8, r2
 801721a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801721c:	9f05      	ldr	r7, [sp, #20]
 801721e:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8017222:	9e06      	ldr	r6, [sp, #24]
 8017224:	eba8 0e88 	sub.w	lr, r8, r8, lsl #2
 8017228:	9d07      	ldr	r5, [sp, #28]
 801722a:	eb02 01c8 	add.w	r1, r2, r8, lsl #3
 801722e:	ed92 ea00 	vldr	s28, [r2]
 8017232:	9c08      	ldr	r4, [sp, #32]
 8017234:	eb01 02c8 	add.w	r2, r1, r8, lsl #3
 8017238:	edd1 da00 	vldr	s27, [r1]
 801723c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801723e:	eb02 01c8 	add.w	r1, r2, r8, lsl #3
 8017242:	ed92 da00 	vldr	s26, [r2]
 8017246:	eb01 02c8 	add.w	r2, r1, r8, lsl #3
 801724a:	edd1 ca00 	vldr	s25, [r1]
 801724e:	eb02 01c8 	add.w	r1, r2, r8, lsl #3
 8017252:	ed92 ca00 	vldr	s24, [r2]
 8017256:	eb01 02c8 	add.w	r2, r1, r8, lsl #3
 801725a:	edd1 ba00 	vldr	s23, [r1]
 801725e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017260:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
 8017264:	ed92 ba00 	vldr	s22, [r2]
 8017268:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801726a:	eb0e 09c8 	add.w	r9, lr, r8, lsl #3
 801726e:	910c      	str	r1, [sp, #48]	; 0x30
 8017270:	9200      	str	r2, [sp, #0]
 8017272:	eb09 02c8 	add.w	r2, r9, r8, lsl #3
 8017276:	ed99 aa01 	vldr	s20, [r9, #4]
 801727a:	edde aa01 	vldr	s21, [lr, #4]
 801727e:	eb02 09c8 	add.w	r9, r2, r8, lsl #3
 8017282:	edd2 9a01 	vldr	s19, [r2, #4]
 8017286:	f8dd e00c 	ldr.w	lr, [sp, #12]
 801728a:	eb09 02c8 	add.w	r2, r9, r8, lsl #3
 801728e:	ed99 9a01 	vldr	s18, [r9, #4]
 8017292:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017294:	eb02 09c8 	add.w	r9, r2, r8, lsl #3
 8017298:	ed92 8a01 	vldr	s16, [r2, #4]
 801729c:	edd9 7a01 	vldr	s15, [r9, #4]
 80172a0:	eb09 02c8 	add.w	r2, r9, r8, lsl #3
 80172a4:	edcd 7a01 	vstr	s15, [sp, #4]
 80172a8:	edd2 7a01 	vldr	s15, [r2, #4]
 80172ac:	9a00      	ldr	r2, [sp, #0]
 80172ae:	edcd 7a02 	vstr	s15, [sp, #8]
 80172b2:	e001      	b.n	80172b8 <arm_radix8_butterfly_f32+0x2fc>
 80172b4:	3f3504f3 	.word	0x3f3504f3
 80172b8:	ed92 7a00 	vldr	s14, [r2]
 80172bc:	44d6      	add	lr, sl
 80172be:	ed17 1a01 	vldr	s2, [r7, #-4]
 80172c2:	ed90 5a00 	vldr	s10, [r0]
 80172c6:	45f3      	cmp	fp, lr
 80172c8:	ed1c fa01 	vldr	s30, [ip, #-4]
 80172cc:	ee31 3a07 	vadd.f32	s6, s2, s14
 80172d0:	edd6 5a00 	vldr	s11, [r6]
 80172d4:	ee31 1a47 	vsub.f32	s2, s2, s14
 80172d8:	edd4 7a00 	vldr	s15, [r4]
 80172dc:	ed95 7a00 	vldr	s14, [r5]
 80172e0:	ed91 4a00 	vldr	s8, [r1]
 80172e4:	ee3f 6a27 	vadd.f32	s12, s30, s15
 80172e8:	ee77 6a25 	vadd.f32	s13, s14, s11
 80172ec:	edd7 ea00 	vldr	s29, [r7]
 80172f0:	ee74 fa05 	vadd.f32	s31, s8, s10
 80172f4:	ee73 1a06 	vadd.f32	s3, s6, s12
 80172f8:	ee34 4a45 	vsub.f32	s8, s8, s10
 80172fc:	ee3f 5aa6 	vadd.f32	s10, s31, s13
 8017300:	ee37 7a65 	vsub.f32	s14, s14, s11
 8017304:	ee33 3a46 	vsub.f32	s6, s6, s12
 8017308:	ee31 6a85 	vadd.f32	s12, s3, s10
 801730c:	ee7f 7a67 	vsub.f32	s15, s30, s15
 8017310:	ee34 fa07 	vadd.f32	s30, s8, s14
 8017314:	ed07 6a01 	vstr	s12, [r7, #-4]
 8017318:	ee34 4a47 	vsub.f32	s8, s8, s14
 801731c:	edd5 3a01 	vldr	s7, [r5, #4]
 8017320:	ee7f fae6 	vsub.f32	s31, s31, s13
 8017324:	ed90 7a01 	vldr	s14, [r0, #4]
 8017328:	ee2f fa28 	vmul.f32	s30, s30, s17
 801732c:	edd1 5a01 	vldr	s11, [r1, #4]
 8017330:	ee24 4a28 	vmul.f32	s8, s8, s17
 8017334:	ed96 6a01 	vldr	s12, [r6, #4]
 8017338:	ee31 5ac5 	vsub.f32	s10, s3, s10
 801733c:	ee75 0ac7 	vsub.f32	s1, s11, s14
 8017340:	edd2 6a01 	vldr	s13, [r2, #4]
 8017344:	ee73 2ac6 	vsub.f32	s5, s7, s12
 8017348:	edd4 4a01 	vldr	s9, [r4, #4]
 801734c:	ee75 5a87 	vadd.f32	s11, s11, s14
 8017350:	ed9c 7a00 	vldr	s14, [ip]
 8017354:	ee37 2a8f 	vadd.f32	s4, s15, s30
 8017358:	ee33 6a86 	vadd.f32	s12, s7, s12
 801735c:	ee37 facf 	vsub.f32	s30, s15, s30
 8017360:	ee7e 3aa6 	vadd.f32	s7, s29, s13
 8017364:	ee70 7ae2 	vsub.f32	s15, s1, s5
 8017368:	ee7e eae6 	vsub.f32	s29, s29, s13
 801736c:	ee70 2aa2 	vadd.f32	s5, s1, s5
 8017370:	ee77 6a24 	vadd.f32	s13, s14, s9
 8017374:	ee75 0a86 	vadd.f32	s1, s11, s12
 8017378:	ee37 7a64 	vsub.f32	s14, s14, s9
 801737c:	ee33 0aa6 	vadd.f32	s0, s7, s13
 8017380:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8017384:	ee62 2aa8 	vmul.f32	s5, s5, s17
 8017388:	ee35 6ac6 	vsub.f32	s12, s11, s12
 801738c:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8017390:	ee7e 5aa7 	vadd.f32	s11, s29, s15
 8017394:	ee77 4a22 	vadd.f32	s9, s14, s5
 8017398:	ee7e eae7 	vsub.f32	s29, s29, s15
 801739c:	ee77 7a62 	vsub.f32	s15, s14, s5
 80173a0:	ee71 2a04 	vadd.f32	s5, s2, s8
 80173a4:	ee31 7a44 	vsub.f32	s14, s2, s8
 80173a8:	ee30 1a60 	vsub.f32	s2, s0, s1
 80173ac:	ee73 1a06 	vadd.f32	s3, s6, s12
 80173b0:	ee33 6a46 	vsub.f32	s12, s6, s12
 80173b4:	ee33 3aef 	vsub.f32	s6, s7, s31
 80173b8:	ee7f 6aa3 	vadd.f32	s13, s31, s7
 80173bc:	ee3e 4acf 	vsub.f32	s8, s29, s30
 80173c0:	ee75 3ac2 	vsub.f32	s7, s11, s4
 80173c4:	ee72 5a25 	vadd.f32	s11, s4, s11
 80173c8:	ee32 2aa4 	vadd.f32	s4, s5, s9
 80173cc:	ee72 4ae4 	vsub.f32	s9, s5, s9
 80173d0:	ee77 2a27 	vadd.f32	s5, s14, s15
 80173d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80173d8:	ee7f 7a2e 	vadd.f32	s15, s30, s29
 80173dc:	ee2c fa85 	vmul.f32	s30, s25, s10
 80173e0:	ee69 ea01 	vmul.f32	s29, s18, s2
 80173e4:	ee29 5a05 	vmul.f32	s10, s18, s10
 80173e8:	ee2c 1a81 	vmul.f32	s2, s25, s2
 80173ec:	ee6d faa1 	vmul.f32	s31, s27, s3
 80173f0:	ee70 0a20 	vadd.f32	s1, s0, s1
 80173f4:	ee6a 1a21 	vmul.f32	s3, s20, s3
 80173f8:	ee2a 0a03 	vmul.f32	s0, s20, s6
 80173fc:	ee2d 3a83 	vmul.f32	s6, s27, s6
 8017400:	edc7 0a00 	vstr	s1, [r7]
 8017404:	ee7f ea2e 	vadd.f32	s29, s30, s29
 8017408:	441f      	add	r7, r3
 801740a:	ee2a faa3 	vmul.f32	s30, s21, s7
 801740e:	ee31 5a45 	vsub.f32	s10, s2, s10
 8017412:	ee6e 3a23 	vmul.f32	s7, s28, s7
 8017416:	edc2 ea00 	vstr	s29, [r2]
 801741a:	ee3f 0a80 	vadd.f32	s0, s31, s0
 801741e:	ee33 3a61 	vsub.f32	s6, s6, s3
 8017422:	ed82 5a01 	vstr	s10, [r2, #4]
 8017426:	ee6e 0a02 	vmul.f32	s1, s28, s4
 801742a:	ed9d 5a02 	vldr	s10, [sp, #8]
 801742e:	edcd 3a00 	vstr	s7, [sp]
 8017432:	ee6b ea86 	vmul.f32	s29, s23, s12
 8017436:	eddd 3a01 	vldr	s7, [sp, #4]
 801743a:	ee6b fa24 	vmul.f32	s31, s22, s9
 801743e:	ed0c 0a01 	vstr	s0, [ip, #-4]
 8017442:	ee65 4a24 	vmul.f32	s9, s10, s9
 8017446:	ed8c 3a00 	vstr	s6, [ip]
 801744a:	ee23 1aa6 	vmul.f32	s2, s7, s13
 801744e:	ee23 6a86 	vmul.f32	s12, s7, s12
 8017452:	eddd 3a00 	vldr	s7, [sp]
 8017456:	ee25 5a25 	vmul.f32	s10, s10, s11
 801745a:	441a      	add	r2, r3
 801745c:	ee2c 0a22 	vmul.f32	s0, s24, s5
 8017460:	449c      	add	ip, r3
 8017462:	ee68 1a04 	vmul.f32	s3, s16, s8
 8017466:	ee70 0a8f 	vadd.f32	s1, s1, s30
 801746a:	ee2d 3a07 	vmul.f32	s6, s26, s14
 801746e:	ee29 faa7 	vmul.f32	s30, s19, s15
 8017472:	ee2a 2a82 	vmul.f32	s4, s21, s4
 8017476:	ee6b 6aa6 	vmul.f32	s13, s23, s13
 801747a:	ee6b 5a25 	vmul.f32	s11, s22, s11
 801747e:	ee68 2a22 	vmul.f32	s5, s16, s5
 8017482:	ee2c 4a04 	vmul.f32	s8, s24, s8
 8017486:	ee29 7a87 	vmul.f32	s14, s19, s14
 801748a:	ee6d 7a27 	vmul.f32	s15, s26, s15
 801748e:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8017492:	ee7e ea81 	vadd.f32	s29, s29, s2
 8017496:	ee36 6ac6 	vsub.f32	s12, s13, s12
 801749a:	ee3f 5a85 	vadd.f32	s10, s31, s10
 801749e:	ee75 4ae4 	vsub.f32	s9, s11, s9
 80174a2:	edc4 ea00 	vstr	s29, [r4]
 80174a6:	ee30 0a21 	vadd.f32	s0, s0, s3
 80174aa:	ed84 6a01 	vstr	s12, [r4, #4]
 80174ae:	ee74 2a62 	vsub.f32	s5, s8, s5
 80174b2:	edc1 0a00 	vstr	s1, [r1]
 80174b6:	ee33 3a0f 	vadd.f32	s6, s6, s30
 80174ba:	edc1 3a01 	vstr	s7, [r1, #4]
 80174be:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80174c2:	ed86 5a00 	vstr	s10, [r6]
 80174c6:	edc6 4a01 	vstr	s9, [r6, #4]
 80174ca:	4419      	add	r1, r3
 80174cc:	ed80 0a00 	vstr	s0, [r0]
 80174d0:	441c      	add	r4, r3
 80174d2:	edc0 2a01 	vstr	s5, [r0, #4]
 80174d6:	441e      	add	r6, r3
 80174d8:	ed85 3a00 	vstr	s6, [r5]
 80174dc:	4418      	add	r0, r3
 80174de:	ed85 7a01 	vstr	s14, [r5, #4]
 80174e2:	441d      	add	r5, r3
 80174e4:	f63f aee8 	bhi.w	80172b8 <arm_radix8_butterfly_f32+0x2fc>
 80174e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80174ea:	9a03      	ldr	r2, [sp, #12]
 80174ec:	3108      	adds	r1, #8
 80174ee:	3201      	adds	r2, #1
 80174f0:	910b      	str	r1, [sp, #44]	; 0x2c
 80174f2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80174f4:	9203      	str	r2, [sp, #12]
 80174f6:	3108      	adds	r1, #8
 80174f8:	910a      	str	r1, [sp, #40]	; 0x28
 80174fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80174fc:	3108      	adds	r1, #8
 80174fe:	9109      	str	r1, [sp, #36]	; 0x24
 8017500:	9908      	ldr	r1, [sp, #32]
 8017502:	3108      	adds	r1, #8
 8017504:	9108      	str	r1, [sp, #32]
 8017506:	9907      	ldr	r1, [sp, #28]
 8017508:	3108      	adds	r1, #8
 801750a:	9107      	str	r1, [sp, #28]
 801750c:	9906      	ldr	r1, [sp, #24]
 801750e:	3108      	adds	r1, #8
 8017510:	9106      	str	r1, [sp, #24]
 8017512:	9905      	ldr	r1, [sp, #20]
 8017514:	3108      	adds	r1, #8
 8017516:	9105      	str	r1, [sp, #20]
 8017518:	9904      	ldr	r1, [sp, #16]
 801751a:	3108      	adds	r1, #8
 801751c:	9104      	str	r1, [sp, #16]
 801751e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017520:	4291      	cmp	r1, r2
 8017522:	f47f ae76 	bne.w	8017212 <arm_radix8_butterfly_f32+0x256>
 8017526:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017528:	468a      	mov	sl, r1
 801752a:	00db      	lsls	r3, r3, #3
 801752c:	b29b      	uxth	r3, r3
 801752e:	930e      	str	r3, [sp, #56]	; 0x38
 8017530:	e553      	b.n	8016fda <arm_radix8_butterfly_f32+0x1e>
 8017532:	b013      	add	sp, #76	; 0x4c
 8017534:	ecbd 8b10 	vpop	{d8-d15}
 8017538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801753c <sinf_poly>:
 801753c:	07cb      	lsls	r3, r1, #31
 801753e:	d412      	bmi.n	8017566 <sinf_poly+0x2a>
 8017540:	ee21 5b00 	vmul.f64	d5, d1, d0
 8017544:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 8017548:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 801754c:	eea6 7b01 	vfma.f64	d7, d6, d1
 8017550:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 8017554:	ee21 1b05 	vmul.f64	d1, d1, d5
 8017558:	eea6 0b05 	vfma.f64	d0, d6, d5
 801755c:	eea7 0b01 	vfma.f64	d0, d7, d1
 8017560:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8017564:	4770      	bx	lr
 8017566:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 801756a:	ee21 5b01 	vmul.f64	d5, d1, d1
 801756e:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 8017572:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 8017576:	eea1 7b06 	vfma.f64	d7, d1, d6
 801757a:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 801757e:	eea1 0b06 	vfma.f64	d0, d1, d6
 8017582:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 8017586:	ee21 1b05 	vmul.f64	d1, d1, d5
 801758a:	eea5 0b06 	vfma.f64	d0, d5, d6
 801758e:	e7e5      	b.n	801755c <sinf_poly+0x20>

08017590 <cosf>:
 8017590:	b538      	push	{r3, r4, r5, lr}
 8017592:	ee10 4a10 	vmov	r4, s0
 8017596:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801759a:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 801759e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 80175a2:	d21f      	bcs.n	80175e4 <cosf+0x54>
 80175a4:	ee27 0b07 	vmul.f64	d0, d7, d7
 80175a8:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 80175ac:	f0c0 8088 	bcc.w	80176c0 <cosf+0x130>
 80175b0:	ee20 4b00 	vmul.f64	d4, d0, d0
 80175b4:	4b46      	ldr	r3, [pc, #280]	; (80176d0 <cosf+0x140>)
 80175b6:	ed93 5b14 	vldr	d5, [r3, #80]	; 0x50
 80175ba:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 80175be:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80175c2:	eea0 6b05 	vfma.f64	d6, d0, d5
 80175c6:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 80175ca:	eea0 7b05 	vfma.f64	d7, d0, d5
 80175ce:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 80175d2:	ee20 0b04 	vmul.f64	d0, d0, d4
 80175d6:	eea4 7b05 	vfma.f64	d7, d4, d5
 80175da:	eea6 7b00 	vfma.f64	d7, d6, d0
 80175de:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 80175e2:	bd38      	pop	{r3, r4, r5, pc}
 80175e4:	f240 422e 	movw	r2, #1070	; 0x42e
 80175e8:	4293      	cmp	r3, r2
 80175ea:	d82b      	bhi.n	8017644 <cosf+0xb4>
 80175ec:	4b38      	ldr	r3, [pc, #224]	; (80176d0 <cosf+0x140>)
 80175ee:	ed93 6b08 	vldr	d6, [r3, #32]
 80175f2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80175f6:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 80175fa:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80175fe:	ee16 1a90 	vmov	r1, s13
 8017602:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 8017606:	1609      	asrs	r1, r1, #24
 8017608:	ee06 1a90 	vmov	s13, r1
 801760c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8017610:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8017614:	f001 0203 	and.w	r2, r1, #3
 8017618:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801761c:	eea5 7b46 	vfms.f64	d7, d5, d6
 8017620:	eeb0 0b47 	vmov.f64	d0, d7
 8017624:	ed92 7b00 	vldr	d7, [r2]
 8017628:	ee20 1b00 	vmul.f64	d1, d0, d0
 801762c:	f011 0f02 	tst.w	r1, #2
 8017630:	bf08      	it	eq
 8017632:	4618      	moveq	r0, r3
 8017634:	f081 0101 	eor.w	r1, r1, #1
 8017638:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801763c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017640:	f7ff bf7c 	b.w	801753c <sinf_poly>
 8017644:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8017648:	d236      	bcs.n	80176b8 <cosf+0x128>
 801764a:	4a22      	ldr	r2, [pc, #136]	; (80176d4 <cosf+0x144>)
 801764c:	f3c4 6183 	ubfx	r1, r4, #26, #4
 8017650:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 8017654:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8017658:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 801765c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8017660:	4083      	lsls	r3, r0
 8017662:	6a28      	ldr	r0, [r5, #32]
 8017664:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8017668:	fba3 1000 	umull	r1, r0, r3, r0
 801766c:	6929      	ldr	r1, [r5, #16]
 801766e:	435a      	muls	r2, r3
 8017670:	fbe3 0201 	umlal	r0, r2, r3, r1
 8017674:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 8017678:	0f8d      	lsrs	r5, r1, #30
 801767a:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 801767e:	1a51      	subs	r1, r2, r1
 8017680:	f7e9 f824 	bl	80006cc <__aeabi_l2d>
 8017684:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8017688:	4b11      	ldr	r3, [pc, #68]	; (80176d0 <cosf+0x140>)
 801768a:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 80176c8 <cosf+0x138>
 801768e:	ec41 0b16 	vmov	d6, r0, r1
 8017692:	f004 0203 	and.w	r2, r4, #3
 8017696:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801769a:	f014 0f02 	tst.w	r4, #2
 801769e:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80176a2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80176a6:	ed92 0b00 	vldr	d0, [r2]
 80176aa:	ee27 1b07 	vmul.f64	d1, d7, d7
 80176ae:	f085 0101 	eor.w	r1, r5, #1
 80176b2:	bf08      	it	eq
 80176b4:	4618      	moveq	r0, r3
 80176b6:	e7bf      	b.n	8017638 <cosf+0xa8>
 80176b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80176bc:	f000 ba80 	b.w	8017bc0 <__math_invalidf>
 80176c0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80176c4:	e78d      	b.n	80175e2 <cosf+0x52>
 80176c6:	bf00      	nop
 80176c8:	54442d18 	.word	0x54442d18
 80176cc:	3c1921fb 	.word	0x3c1921fb
 80176d0:	08032df8 	.word	0x08032df8
 80176d4:	08032d98 	.word	0x08032d98

080176d8 <exp>:
 80176d8:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 80176da:	ee10 3a90 	vmov	r3, s1
 80176de:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 80176e2:	f3c3 540a 	ubfx	r4, r3, #20, #11
 80176e6:	18a2      	adds	r2, r4, r2
 80176e8:	2a3e      	cmp	r2, #62	; 0x3e
 80176ea:	ee10 1a10 	vmov	r1, s0
 80176ee:	d922      	bls.n	8017736 <exp+0x5e>
 80176f0:	2a00      	cmp	r2, #0
 80176f2:	da06      	bge.n	8017702 <exp+0x2a>
 80176f4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80176f8:	ee30 0b07 	vadd.f64	d0, d0, d7
 80176fc:	b004      	add	sp, #16
 80176fe:	bcf0      	pop	{r4, r5, r6, r7}
 8017700:	4770      	bx	lr
 8017702:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 8017706:	f04f 0000 	mov.w	r0, #0
 801770a:	d913      	bls.n	8017734 <exp+0x5c>
 801770c:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 8017710:	bf08      	it	eq
 8017712:	4281      	cmpeq	r1, r0
 8017714:	f000 80a0 	beq.w	8017858 <exp+0x180>
 8017718:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801771c:	4294      	cmp	r4, r2
 801771e:	d0e9      	beq.n	80176f4 <exp+0x1c>
 8017720:	4283      	cmp	r3, r0
 8017722:	da03      	bge.n	801772c <exp+0x54>
 8017724:	b004      	add	sp, #16
 8017726:	bcf0      	pop	{r4, r5, r6, r7}
 8017728:	f000 b9be 	b.w	8017aa8 <__math_uflow>
 801772c:	b004      	add	sp, #16
 801772e:	bcf0      	pop	{r4, r5, r6, r7}
 8017730:	f000 b9c2 	b.w	8017ab8 <__math_oflow>
 8017734:	4604      	mov	r4, r0
 8017736:	4950      	ldr	r1, [pc, #320]	; (8017878 <exp+0x1a0>)
 8017738:	ed91 6b02 	vldr	d6, [r1, #8]
 801773c:	ed91 5b00 	vldr	d5, [r1]
 8017740:	eeb0 7b46 	vmov.f64	d7, d6
 8017744:	eea5 7b00 	vfma.f64	d7, d5, d0
 8017748:	ee17 5a10 	vmov	r5, s14
 801774c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017750:	ed91 6b04 	vldr	d6, [r1, #16]
 8017754:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8017758:	eea6 0b07 	vfma.f64	d0, d6, d7
 801775c:	ed91 6b06 	vldr	d6, [r1, #24]
 8017760:	18d8      	adds	r0, r3, r3
 8017762:	f100 030f 	add.w	r3, r0, #15
 8017766:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801776a:	eea6 0b07 	vfma.f64	d0, d6, d7
 801776e:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8017772:	ee20 7b00 	vmul.f64	d7, d0, d0
 8017776:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 801777a:	ed91 5b08 	vldr	d5, [r1, #32]
 801777e:	ee30 6b06 	vadd.f64	d6, d0, d6
 8017782:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8017786:	eea4 5b00 	vfma.f64	d5, d4, d0
 801778a:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 801778e:	eea5 6b07 	vfma.f64	d6, d5, d7
 8017792:	ee27 7b07 	vmul.f64	d7, d7, d7
 8017796:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 801779a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 801779e:	f8d2 c004 	ldr.w	ip, [r2, #4]
 80177a2:	eea4 5b00 	vfma.f64	d5, d4, d0
 80177a6:	2600      	movs	r6, #0
 80177a8:	19f2      	adds	r2, r6, r7
 80177aa:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 80177ae:	eea7 6b05 	vfma.f64	d6, d7, d5
 80177b2:	2c00      	cmp	r4, #0
 80177b4:	d14b      	bne.n	801784e <exp+0x176>
 80177b6:	42b5      	cmp	r5, r6
 80177b8:	db10      	blt.n	80177dc <exp+0x104>
 80177ba:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 80177be:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8017860 <exp+0x188>
 80177c2:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 80177c6:	4610      	mov	r0, r2
 80177c8:	ec41 0b10 	vmov	d0, r0, r1
 80177cc:	eea6 0b00 	vfma.f64	d0, d6, d0
 80177d0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80177d4:	b004      	add	sp, #16
 80177d6:	bcf0      	pop	{r4, r5, r6, r7}
 80177d8:	f000 b9a6 	b.w	8017b28 <__math_check_oflow>
 80177dc:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80177e0:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 80177e4:	4610      	mov	r0, r2
 80177e6:	ec41 0b17 	vmov	d7, r0, r1
 80177ea:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80177ee:	ee26 6b07 	vmul.f64	d6, d6, d7
 80177f2:	ee37 5b06 	vadd.f64	d5, d7, d6
 80177f6:	eeb4 5bc4 	vcmpe.f64	d5, d4
 80177fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177fe:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8017868 <exp+0x190>
 8017802:	d51e      	bpl.n	8017842 <exp+0x16a>
 8017804:	ee35 3b04 	vadd.f64	d3, d5, d4
 8017808:	ee37 7b45 	vsub.f64	d7, d7, d5
 801780c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8017810:	ee34 6b43 	vsub.f64	d6, d4, d3
 8017814:	ee36 5b05 	vadd.f64	d5, d6, d5
 8017818:	ee35 5b07 	vadd.f64	d5, d5, d7
 801781c:	ee35 5b03 	vadd.f64	d5, d5, d3
 8017820:	ee35 5b44 	vsub.f64	d5, d5, d4
 8017824:	eeb5 5b40 	vcmp.f64	d5, #0.0
 8017828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801782c:	d101      	bne.n	8017832 <exp+0x15a>
 801782e:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8017870 <exp+0x198>
 8017832:	ed8d 0b00 	vstr	d0, [sp]
 8017836:	ed9d 7b00 	vldr	d7, [sp]
 801783a:	ee27 7b00 	vmul.f64	d7, d7, d0
 801783e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017842:	ee25 0b00 	vmul.f64	d0, d5, d0
 8017846:	b004      	add	sp, #16
 8017848:	bcf0      	pop	{r4, r5, r6, r7}
 801784a:	f000 b964 	b.w	8017b16 <__math_check_uflow>
 801784e:	ec43 2b10 	vmov	d0, r2, r3
 8017852:	eea6 0b00 	vfma.f64	d0, d6, d0
 8017856:	e751      	b.n	80176fc <exp+0x24>
 8017858:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8017870 <exp+0x198>
 801785c:	e74e      	b.n	80176fc <exp+0x24>
 801785e:	bf00      	nop
 8017860:	00000000 	.word	0x00000000
 8017864:	7f000000 	.word	0x7f000000
 8017868:	00000000 	.word	0x00000000
 801786c:	00100000 	.word	0x00100000
	...
 8017878:	08031a28 	.word	0x08031a28
 801787c:	00000000 	.word	0x00000000

08017880 <log>:
 8017880:	b470      	push	{r4, r5, r6}
 8017882:	ee10 1a90 	vmov	r1, s1
 8017886:	ee10 2a10 	vmov	r2, s0
 801788a:	f04f 34ff 	mov.w	r4, #4294967295
 801788e:	4294      	cmp	r4, r2
 8017890:	f101 4040 	add.w	r0, r1, #3221225472	; 0xc0000000
 8017894:	4c72      	ldr	r4, [pc, #456]	; (8017a60 <log+0x1e0>)
 8017896:	f500 1090 	add.w	r0, r0, #1179648	; 0x120000
 801789a:	eb74 0000 	sbcs.w	r0, r4, r0
 801789e:	ed2d 8b02 	vpush	{d8}
 80178a2:	ea4f 4311 	mov.w	r3, r1, lsr #16
 80178a6:	d35c      	bcc.n	8017962 <log+0xe2>
 80178a8:	4b6e      	ldr	r3, [pc, #440]	; (8017a64 <log+0x1e4>)
 80178aa:	4299      	cmp	r1, r3
 80178ac:	bf08      	it	eq
 80178ae:	2a00      	cmpeq	r2, #0
 80178b0:	f000 80c6 	beq.w	8017a40 <log+0x1c0>
 80178b4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80178b8:	ee30 0b47 	vsub.f64	d0, d0, d7
 80178bc:	4b6a      	ldr	r3, [pc, #424]	; (8017a68 <log+0x1e8>)
 80178be:	ee20 2b00 	vmul.f64	d2, d0, d0
 80178c2:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 80178c6:	ee20 4b02 	vmul.f64	d4, d0, d2
 80178ca:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80178ce:	eea6 7b00 	vfma.f64	d7, d6, d0
 80178d2:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 80178d6:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 80178da:	eea6 7b02 	vfma.f64	d7, d6, d2
 80178de:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 80178e2:	eea5 6b00 	vfma.f64	d6, d5, d0
 80178e6:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 80178ea:	ed93 3b1e 	vldr	d3, [r3, #120]	; 0x78
 80178ee:	eea5 6b02 	vfma.f64	d6, d5, d2
 80178f2:	ed93 5b1c 	vldr	d5, [r3, #112]	; 0x70
 80178f6:	eea3 5b00 	vfma.f64	d5, d3, d0
 80178fa:	ed93 3b20 	vldr	d3, [r3, #128]	; 0x80
 80178fe:	eea3 5b02 	vfma.f64	d5, d3, d2
 8017902:	ed93 3b22 	vldr	d3, [r3, #136]	; 0x88
 8017906:	eeb0 2b40 	vmov.f64	d2, d0
 801790a:	eea3 5b04 	vfma.f64	d5, d3, d4
 801790e:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8017912:	eea5 6b04 	vfma.f64	d6, d5, d4
 8017916:	eea6 7b04 	vfma.f64	d7, d6, d4
 801791a:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8017a48 <log+0x1c8>
 801791e:	eeb0 1b47 	vmov.f64	d1, d7
 8017922:	eeb0 5b40 	vmov.f64	d5, d0
 8017926:	eea0 5b06 	vfma.f64	d5, d0, d6
 801792a:	eea0 5b46 	vfms.f64	d5, d0, d6
 801792e:	ee30 8b45 	vsub.f64	d8, d0, d5
 8017932:	ee25 7b05 	vmul.f64	d7, d5, d5
 8017936:	ee30 5b05 	vadd.f64	d5, d0, d5
 801793a:	eea7 2b03 	vfma.f64	d2, d7, d3
 801793e:	ee30 6b42 	vsub.f64	d6, d0, d2
 8017942:	eea7 6b03 	vfma.f64	d6, d7, d3
 8017946:	ee23 3b08 	vmul.f64	d3, d3, d8
 801794a:	eea3 6b05 	vfma.f64	d6, d3, d5
 801794e:	eeb0 0b46 	vmov.f64	d0, d6
 8017952:	eea1 0b04 	vfma.f64	d0, d1, d4
 8017956:	ee32 0b00 	vadd.f64	d0, d2, d0
 801795a:	ecbd 8b02 	vpop	{d8}
 801795e:	bc70      	pop	{r4, r5, r6}
 8017960:	4770      	bx	lr
 8017962:	f1a3 0410 	sub.w	r4, r3, #16
 8017966:	f647 70df 	movw	r0, #32735	; 0x7fdf
 801796a:	4284      	cmp	r4, r0
 801796c:	d923      	bls.n	80179b6 <log+0x136>
 801796e:	1894      	adds	r4, r2, r2
 8017970:	eb41 0001 	adc.w	r0, r1, r1
 8017974:	4320      	orrs	r0, r4
 8017976:	d105      	bne.n	8017984 <log+0x104>
 8017978:	ecbd 8b02 	vpop	{d8}
 801797c:	2001      	movs	r0, #1
 801797e:	bc70      	pop	{r4, r5, r6}
 8017980:	f000 b8a2 	b.w	8017ac8 <__math_divzero>
 8017984:	4839      	ldr	r0, [pc, #228]	; (8017a6c <log+0x1ec>)
 8017986:	4281      	cmp	r1, r0
 8017988:	bf08      	it	eq
 801798a:	2a00      	cmpeq	r2, #0
 801798c:	d0e5      	beq.n	801795a <log+0xda>
 801798e:	041a      	lsls	r2, r3, #16
 8017990:	d404      	bmi.n	801799c <log+0x11c>
 8017992:	f647 72f0 	movw	r2, #32752	; 0x7ff0
 8017996:	ea32 0303 	bics.w	r3, r2, r3
 801799a:	d104      	bne.n	80179a6 <log+0x126>
 801799c:	ecbd 8b02 	vpop	{d8}
 80179a0:	bc70      	pop	{r4, r5, r6}
 80179a2:	f000 b8a9 	b.w	8017af8 <__math_invalid>
 80179a6:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8017a50 <log+0x1d0>
 80179aa:	ee20 7b07 	vmul.f64	d7, d0, d7
 80179ae:	ec53 2b17 	vmov	r2, r3, d7
 80179b2:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 80179b6:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 80179ba:	f503 13d0 	add.w	r3, r3, #1703936	; 0x1a0000
 80179be:	0d1e      	lsrs	r6, r3, #20
 80179c0:	1e14      	subs	r4, r2, #0
 80179c2:	4a29      	ldr	r2, [pc, #164]	; (8017a68 <log+0x1e8>)
 80179c4:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 80179c8:	f3c3 3046 	ubfx	r0, r3, #13, #7
 80179cc:	0536      	lsls	r6, r6, #20
 80179ce:	1b8d      	subs	r5, r1, r6
 80179d0:	eb02 1100 	add.w	r1, r2, r0, lsl #4
 80179d4:	ed91 7b24 	vldr	d7, [r1, #144]	; 0x90
 80179d8:	ec45 4b16 	vmov	d6, r4, r5
 80179dc:	151b      	asrs	r3, r3, #20
 80179de:	eea6 5b07 	vfma.f64	d5, d6, d7
 80179e2:	ee07 3a90 	vmov	s15, r3
 80179e6:	ee25 2b05 	vmul.f64	d2, d5, d5
 80179ea:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80179ee:	ed92 4b00 	vldr	d4, [r2]
 80179f2:	ee25 1b02 	vmul.f64	d1, d5, d2
 80179f6:	ed91 7b26 	vldr	d7, [r1, #152]	; 0x98
 80179fa:	eea4 7b06 	vfma.f64	d7, d4, d6
 80179fe:	ee35 4b07 	vadd.f64	d4, d5, d7
 8017a02:	ee37 0b44 	vsub.f64	d0, d7, d4
 8017a06:	ed92 7b02 	vldr	d7, [r2, #8]
 8017a0a:	ee30 0b05 	vadd.f64	d0, d0, d5
 8017a0e:	eea7 0b06 	vfma.f64	d0, d7, d6
 8017a12:	ed92 7b04 	vldr	d7, [r2, #16]
 8017a16:	ed92 6b08 	vldr	d6, [r2, #32]
 8017a1a:	eea7 0b02 	vfma.f64	d0, d7, d2
 8017a1e:	ed92 7b06 	vldr	d7, [r2, #24]
 8017a22:	ed92 3b0c 	vldr	d3, [r2, #48]	; 0x30
 8017a26:	eea6 7b05 	vfma.f64	d7, d6, d5
 8017a2a:	ed92 6b0a 	vldr	d6, [r2, #40]	; 0x28
 8017a2e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8017a32:	eea6 7b02 	vfma.f64	d7, d6, d2
 8017a36:	eea1 0b07 	vfma.f64	d0, d1, d7
 8017a3a:	ee30 0b04 	vadd.f64	d0, d0, d4
 8017a3e:	e78c      	b.n	801795a <log+0xda>
 8017a40:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8017a58 <log+0x1d8>
 8017a44:	e789      	b.n	801795a <log+0xda>
 8017a46:	bf00      	nop
 8017a48:	00000000 	.word	0x00000000
 8017a4c:	41a00000 	.word	0x41a00000
 8017a50:	00000000 	.word	0x00000000
 8017a54:	43300000 	.word	0x43300000
	...
 8017a60:	000308ff 	.word	0x000308ff
 8017a64:	3ff00000 	.word	0x3ff00000
 8017a68:	08032298 	.word	0x08032298
 8017a6c:	7ff00000 	.word	0x7ff00000

08017a70 <with_errno>:
 8017a70:	b513      	push	{r0, r1, r4, lr}
 8017a72:	4604      	mov	r4, r0
 8017a74:	ed8d 0b00 	vstr	d0, [sp]
 8017a78:	f000 fc0a 	bl	8018290 <__errno>
 8017a7c:	ed9d 0b00 	vldr	d0, [sp]
 8017a80:	6004      	str	r4, [r0, #0]
 8017a82:	b002      	add	sp, #8
 8017a84:	bd10      	pop	{r4, pc}

08017a86 <xflow>:
 8017a86:	b082      	sub	sp, #8
 8017a88:	b158      	cbz	r0, 8017aa2 <xflow+0x1c>
 8017a8a:	eeb1 7b40 	vneg.f64	d7, d0
 8017a8e:	ed8d 7b00 	vstr	d7, [sp]
 8017a92:	ed9d 7b00 	vldr	d7, [sp]
 8017a96:	2022      	movs	r0, #34	; 0x22
 8017a98:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017a9c:	b002      	add	sp, #8
 8017a9e:	f7ff bfe7 	b.w	8017a70 <with_errno>
 8017aa2:	eeb0 7b40 	vmov.f64	d7, d0
 8017aa6:	e7f2      	b.n	8017a8e <xflow+0x8>

08017aa8 <__math_uflow>:
 8017aa8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017ab0 <__math_uflow+0x8>
 8017aac:	f7ff bfeb 	b.w	8017a86 <xflow>
 8017ab0:	00000000 	.word	0x00000000
 8017ab4:	10000000 	.word	0x10000000

08017ab8 <__math_oflow>:
 8017ab8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017ac0 <__math_oflow+0x8>
 8017abc:	f7ff bfe3 	b.w	8017a86 <xflow>
 8017ac0:	00000000 	.word	0x00000000
 8017ac4:	70000000 	.word	0x70000000

08017ac8 <__math_divzero>:
 8017ac8:	b082      	sub	sp, #8
 8017aca:	2800      	cmp	r0, #0
 8017acc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8017ad0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8017ad4:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8017ad8:	ed8d 7b00 	vstr	d7, [sp]
 8017adc:	ed9d 0b00 	vldr	d0, [sp]
 8017ae0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8017af0 <__math_divzero+0x28>
 8017ae4:	2022      	movs	r0, #34	; 0x22
 8017ae6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8017aea:	b002      	add	sp, #8
 8017aec:	f7ff bfc0 	b.w	8017a70 <with_errno>
	...

08017af8 <__math_invalid>:
 8017af8:	eeb0 7b40 	vmov.f64	d7, d0
 8017afc:	eeb4 7b47 	vcmp.f64	d7, d7
 8017b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b04:	ee30 6b40 	vsub.f64	d6, d0, d0
 8017b08:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8017b0c:	d602      	bvs.n	8017b14 <__math_invalid+0x1c>
 8017b0e:	2021      	movs	r0, #33	; 0x21
 8017b10:	f7ff bfae 	b.w	8017a70 <with_errno>
 8017b14:	4770      	bx	lr

08017b16 <__math_check_uflow>:
 8017b16:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8017b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b1e:	d102      	bne.n	8017b26 <__math_check_uflow+0x10>
 8017b20:	2022      	movs	r0, #34	; 0x22
 8017b22:	f7ff bfa5 	b.w	8017a70 <with_errno>
 8017b26:	4770      	bx	lr

08017b28 <__math_check_oflow>:
 8017b28:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8017b48 <__math_check_oflow+0x20>
 8017b2c:	eeb0 7bc0 	vabs.f64	d7, d0
 8017b30:	eeb4 7b46 	vcmp.f64	d7, d6
 8017b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b38:	dd02      	ble.n	8017b40 <__math_check_oflow+0x18>
 8017b3a:	2022      	movs	r0, #34	; 0x22
 8017b3c:	f7ff bf98 	b.w	8017a70 <with_errno>
 8017b40:	4770      	bx	lr
 8017b42:	bf00      	nop
 8017b44:	f3af 8000 	nop.w
 8017b48:	ffffffff 	.word	0xffffffff
 8017b4c:	7fefffff 	.word	0x7fefffff

08017b50 <with_errnof>:
 8017b50:	b513      	push	{r0, r1, r4, lr}
 8017b52:	4604      	mov	r4, r0
 8017b54:	ed8d 0a01 	vstr	s0, [sp, #4]
 8017b58:	f000 fb9a 	bl	8018290 <__errno>
 8017b5c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8017b60:	6004      	str	r4, [r0, #0]
 8017b62:	b002      	add	sp, #8
 8017b64:	bd10      	pop	{r4, pc}

08017b66 <xflowf>:
 8017b66:	b130      	cbz	r0, 8017b76 <xflowf+0x10>
 8017b68:	eef1 7a40 	vneg.f32	s15, s0
 8017b6c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8017b70:	2022      	movs	r0, #34	; 0x22
 8017b72:	f7ff bfed 	b.w	8017b50 <with_errnof>
 8017b76:	eef0 7a40 	vmov.f32	s15, s0
 8017b7a:	e7f7      	b.n	8017b6c <xflowf+0x6>

08017b7c <__math_uflowf>:
 8017b7c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017b84 <__math_uflowf+0x8>
 8017b80:	f7ff bff1 	b.w	8017b66 <xflowf>
 8017b84:	10000000 	.word	0x10000000

08017b88 <__math_may_uflowf>:
 8017b88:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017b90 <__math_may_uflowf+0x8>
 8017b8c:	f7ff bfeb 	b.w	8017b66 <xflowf>
 8017b90:	1a200000 	.word	0x1a200000

08017b94 <__math_oflowf>:
 8017b94:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017b9c <__math_oflowf+0x8>
 8017b98:	f7ff bfe5 	b.w	8017b66 <xflowf>
 8017b9c:	70000000 	.word	0x70000000

08017ba0 <__math_divzerof>:
 8017ba0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8017ba4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8017ba8:	2800      	cmp	r0, #0
 8017baa:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8017bae:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8017bbc <__math_divzerof+0x1c>
 8017bb2:	2022      	movs	r0, #34	; 0x22
 8017bb4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8017bb8:	f7ff bfca 	b.w	8017b50 <with_errnof>
 8017bbc:	00000000 	.word	0x00000000

08017bc0 <__math_invalidf>:
 8017bc0:	eef0 7a40 	vmov.f32	s15, s0
 8017bc4:	ee30 7a40 	vsub.f32	s14, s0, s0
 8017bc8:	eef4 7a67 	vcmp.f32	s15, s15
 8017bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bd0:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8017bd4:	d602      	bvs.n	8017bdc <__math_invalidf+0x1c>
 8017bd6:	2021      	movs	r0, #33	; 0x21
 8017bd8:	f7ff bfba 	b.w	8017b50 <with_errnof>
 8017bdc:	4770      	bx	lr
	...

08017be0 <expf>:
 8017be0:	ee10 2a10 	vmov	r2, s0
 8017be4:	f240 412a 	movw	r1, #1066	; 0x42a
 8017be8:	f3c2 530a 	ubfx	r3, r2, #20, #11
 8017bec:	428b      	cmp	r3, r1
 8017bee:	b430      	push	{r4, r5}
 8017bf0:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8017bf4:	d92a      	bls.n	8017c4c <expf+0x6c>
 8017bf6:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 8017bfa:	d058      	beq.n	8017cae <expf+0xce>
 8017bfc:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8017c00:	d303      	bcc.n	8017c0a <expf+0x2a>
 8017c02:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017c06:	bc30      	pop	{r4, r5}
 8017c08:	4770      	bx	lr
 8017c0a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8017cb4 <expf+0xd4>
 8017c0e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8017c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c16:	dd03      	ble.n	8017c20 <expf+0x40>
 8017c18:	bc30      	pop	{r4, r5}
 8017c1a:	2000      	movs	r0, #0
 8017c1c:	f7ff bfba 	b.w	8017b94 <__math_oflowf>
 8017c20:	eddf 7a25 	vldr	s15, [pc, #148]	; 8017cb8 <expf+0xd8>
 8017c24:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8017c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c2c:	d503      	bpl.n	8017c36 <expf+0x56>
 8017c2e:	bc30      	pop	{r4, r5}
 8017c30:	2000      	movs	r0, #0
 8017c32:	f7ff bfa3 	b.w	8017b7c <__math_uflowf>
 8017c36:	eddf 7a21 	vldr	s15, [pc, #132]	; 8017cbc <expf+0xdc>
 8017c3a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8017c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c42:	d503      	bpl.n	8017c4c <expf+0x6c>
 8017c44:	bc30      	pop	{r4, r5}
 8017c46:	2000      	movs	r0, #0
 8017c48:	f7ff bf9e 	b.w	8017b88 <__math_may_uflowf>
 8017c4c:	4b1c      	ldr	r3, [pc, #112]	; (8017cc0 <expf+0xe0>)
 8017c4e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8017c52:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 8017c56:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 8017c5a:	eeb0 7b44 	vmov.f64	d7, d4
 8017c5e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8017c62:	ee17 0a10 	vmov	r0, s14
 8017c66:	ee37 7b44 	vsub.f64	d7, d7, d4
 8017c6a:	f000 021f 	and.w	r2, r0, #31
 8017c6e:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8017c72:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 8017c76:	ee27 4b07 	vmul.f64	d4, d7, d7
 8017c7a:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 8017c7e:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8017c82:	eea5 6b07 	vfma.f64	d6, d5, d7
 8017c86:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 8017c8a:	684d      	ldr	r5, [r1, #4]
 8017c8c:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 8017c90:	2100      	movs	r1, #0
 8017c92:	190a      	adds	r2, r1, r4
 8017c94:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 8017c98:	eea5 0b07 	vfma.f64	d0, d5, d7
 8017c9c:	ec43 2b17 	vmov	d7, r2, r3
 8017ca0:	eea6 0b04 	vfma.f64	d0, d6, d4
 8017ca4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017ca8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8017cac:	e7ab      	b.n	8017c06 <expf+0x26>
 8017cae:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8017cc4 <expf+0xe4>
 8017cb2:	e7a8      	b.n	8017c06 <expf+0x26>
 8017cb4:	42b17217 	.word	0x42b17217
 8017cb8:	c2cff1b4 	.word	0xc2cff1b4
 8017cbc:	c2ce8ecf 	.word	0xc2ce8ecf
 8017cc0:	08032b28 	.word	0x08032b28
 8017cc4:	00000000 	.word	0x00000000

08017cc8 <fmaxf>:
 8017cc8:	b508      	push	{r3, lr}
 8017cca:	ed2d 8b02 	vpush	{d8}
 8017cce:	eeb0 8a40 	vmov.f32	s16, s0
 8017cd2:	eef0 8a60 	vmov.f32	s17, s1
 8017cd6:	f000 f82d 	bl	8017d34 <__fpclassifyf>
 8017cda:	b148      	cbz	r0, 8017cf0 <fmaxf+0x28>
 8017cdc:	eeb0 0a68 	vmov.f32	s0, s17
 8017ce0:	f000 f828 	bl	8017d34 <__fpclassifyf>
 8017ce4:	b130      	cbz	r0, 8017cf4 <fmaxf+0x2c>
 8017ce6:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8017cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cee:	dc01      	bgt.n	8017cf4 <fmaxf+0x2c>
 8017cf0:	eeb0 8a68 	vmov.f32	s16, s17
 8017cf4:	eeb0 0a48 	vmov.f32	s0, s16
 8017cf8:	ecbd 8b02 	vpop	{d8}
 8017cfc:	bd08      	pop	{r3, pc}

08017cfe <fminf>:
 8017cfe:	b508      	push	{r3, lr}
 8017d00:	ed2d 8b02 	vpush	{d8}
 8017d04:	eeb0 8a40 	vmov.f32	s16, s0
 8017d08:	eef0 8a60 	vmov.f32	s17, s1
 8017d0c:	f000 f812 	bl	8017d34 <__fpclassifyf>
 8017d10:	b148      	cbz	r0, 8017d26 <fminf+0x28>
 8017d12:	eeb0 0a68 	vmov.f32	s0, s17
 8017d16:	f000 f80d 	bl	8017d34 <__fpclassifyf>
 8017d1a:	b130      	cbz	r0, 8017d2a <fminf+0x2c>
 8017d1c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8017d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d24:	d401      	bmi.n	8017d2a <fminf+0x2c>
 8017d26:	eeb0 8a68 	vmov.f32	s16, s17
 8017d2a:	eeb0 0a48 	vmov.f32	s0, s16
 8017d2e:	ecbd 8b02 	vpop	{d8}
 8017d32:	bd08      	pop	{r3, pc}

08017d34 <__fpclassifyf>:
 8017d34:	ee10 3a10 	vmov	r3, s0
 8017d38:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8017d3c:	d00d      	beq.n	8017d5a <__fpclassifyf+0x26>
 8017d3e:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8017d42:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8017d46:	d30a      	bcc.n	8017d5e <__fpclassifyf+0x2a>
 8017d48:	4b07      	ldr	r3, [pc, #28]	; (8017d68 <__fpclassifyf+0x34>)
 8017d4a:	1e42      	subs	r2, r0, #1
 8017d4c:	429a      	cmp	r2, r3
 8017d4e:	d908      	bls.n	8017d62 <__fpclassifyf+0x2e>
 8017d50:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8017d54:	4258      	negs	r0, r3
 8017d56:	4158      	adcs	r0, r3
 8017d58:	4770      	bx	lr
 8017d5a:	2002      	movs	r0, #2
 8017d5c:	4770      	bx	lr
 8017d5e:	2004      	movs	r0, #4
 8017d60:	4770      	bx	lr
 8017d62:	2003      	movs	r0, #3
 8017d64:	4770      	bx	lr
 8017d66:	bf00      	nop
 8017d68:	007ffffe 	.word	0x007ffffe

08017d6c <checkint>:
 8017d6c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8017d70:	2b7e      	cmp	r3, #126	; 0x7e
 8017d72:	dd10      	ble.n	8017d96 <checkint+0x2a>
 8017d74:	2b96      	cmp	r3, #150	; 0x96
 8017d76:	dc0c      	bgt.n	8017d92 <checkint+0x26>
 8017d78:	2201      	movs	r2, #1
 8017d7a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8017d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8017d82:	1e5a      	subs	r2, r3, #1
 8017d84:	4202      	tst	r2, r0
 8017d86:	d106      	bne.n	8017d96 <checkint+0x2a>
 8017d88:	4203      	tst	r3, r0
 8017d8a:	bf0c      	ite	eq
 8017d8c:	2002      	moveq	r0, #2
 8017d8e:	2001      	movne	r0, #1
 8017d90:	4770      	bx	lr
 8017d92:	2002      	movs	r0, #2
 8017d94:	4770      	bx	lr
 8017d96:	2000      	movs	r0, #0
 8017d98:	4770      	bx	lr
 8017d9a:	0000      	movs	r0, r0
 8017d9c:	0000      	movs	r0, r0
	...

08017da0 <powf>:
 8017da0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017da2:	ee10 1a10 	vmov	r1, s0
 8017da6:	ee10 4a90 	vmov	r4, s1
 8017daa:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8017dae:	0062      	lsls	r2, r4, #1
 8017db0:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8017db4:	eef0 7a40 	vmov.f32	s15, s0
 8017db8:	f102 30ff 	add.w	r0, r2, #4294967295
 8017dbc:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8017dc0:	d252      	bcs.n	8017e68 <powf+0xc8>
 8017dc2:	4298      	cmp	r0, r3
 8017dc4:	d252      	bcs.n	8017e6c <powf+0xcc>
 8017dc6:	2000      	movs	r0, #0
 8017dc8:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 8017dcc:	4ca0      	ldr	r4, [pc, #640]	; (8018050 <powf+0x2b0>)
 8017dce:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 8017dd2:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8017dd6:	f3c2 45c3 	ubfx	r5, r2, #19, #4
 8017dda:	0dd2      	lsrs	r2, r2, #23
 8017ddc:	05d2      	lsls	r2, r2, #23
 8017dde:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 8017de2:	1a8b      	subs	r3, r1, r2
 8017de4:	ed95 6b00 	vldr	d6, [r5]
 8017de8:	ee07 3a90 	vmov	s15, r3
 8017dec:	15d2      	asrs	r2, r2, #23
 8017dee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8017df2:	eea6 5b07 	vfma.f64	d5, d6, d7
 8017df6:	ed95 6b02 	vldr	d6, [r5, #8]
 8017dfa:	ee25 2b05 	vmul.f64	d2, d5, d5
 8017dfe:	ee22 1b02 	vmul.f64	d1, d2, d2
 8017e02:	ee07 2a90 	vmov	s15, r2
 8017e06:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
 8017e0a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017e0e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8017e12:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
 8017e16:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
 8017e1a:	eea5 3b06 	vfma.f64	d3, d5, d6
 8017e1e:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
 8017e22:	eea5 6b04 	vfma.f64	d6, d5, d4
 8017e26:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
 8017e2a:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 8017e2e:	eea5 7b04 	vfma.f64	d7, d5, d4
 8017e32:	eea2 7b06 	vfma.f64	d7, d2, d6
 8017e36:	eea3 7b01 	vfma.f64	d7, d3, d1
 8017e3a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017e3e:	ee10 3a90 	vmov	r3, s1
 8017e42:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 8017e46:	f248 03bf 	movw	r3, #32959	; 0x80bf
 8017e4a:	429a      	cmp	r2, r3
 8017e4c:	f0c0 80b1 	bcc.w	8017fb2 <powf+0x212>
 8017e50:	ed9f 7b77 	vldr	d7, [pc, #476]	; 8018030 <powf+0x290>
 8017e54:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8017e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e5c:	dd79      	ble.n	8017f52 <powf+0x1b2>
 8017e5e:	b003      	add	sp, #12
 8017e60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017e64:	f7ff be96 	b.w	8017b94 <__math_oflowf>
 8017e68:	4298      	cmp	r0, r3
 8017e6a:	d32d      	bcc.n	8017ec8 <powf+0x128>
 8017e6c:	b952      	cbnz	r2, 8017e84 <powf+0xe4>
 8017e6e:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8017e72:	005b      	lsls	r3, r3, #1
 8017e74:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8017e78:	f240 80c9 	bls.w	801800e <powf+0x26e>
 8017e7c:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8017e80:	b003      	add	sp, #12
 8017e82:	bd30      	pop	{r4, r5, pc}
 8017e84:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8017e88:	d105      	bne.n	8017e96 <powf+0xf6>
 8017e8a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8017e8e:	0064      	lsls	r4, r4, #1
 8017e90:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8017e94:	e7f0      	b.n	8017e78 <powf+0xd8>
 8017e96:	004b      	lsls	r3, r1, #1
 8017e98:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8017e9c:	d8ee      	bhi.n	8017e7c <powf+0xdc>
 8017e9e:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8017ea2:	d1eb      	bne.n	8017e7c <powf+0xdc>
 8017ea4:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8017ea8:	f000 80b1 	beq.w	801800e <powf+0x26e>
 8017eac:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8017eb0:	ea6f 0404 	mvn.w	r4, r4
 8017eb4:	bf34      	ite	cc
 8017eb6:	2300      	movcc	r3, #0
 8017eb8:	2301      	movcs	r3, #1
 8017eba:	0fe4      	lsrs	r4, r4, #31
 8017ebc:	42a3      	cmp	r3, r4
 8017ebe:	f040 80a9 	bne.w	8018014 <powf+0x274>
 8017ec2:	ee20 0aa0 	vmul.f32	s0, s1, s1
 8017ec6:	e7db      	b.n	8017e80 <powf+0xe0>
 8017ec8:	004d      	lsls	r5, r1, #1
 8017eca:	1e6a      	subs	r2, r5, #1
 8017ecc:	429a      	cmp	r2, r3
 8017ece:	d31c      	bcc.n	8017f0a <powf+0x16a>
 8017ed0:	2900      	cmp	r1, #0
 8017ed2:	ee20 0a00 	vmul.f32	s0, s0, s0
 8017ed6:	da0f      	bge.n	8017ef8 <powf+0x158>
 8017ed8:	ee10 0a90 	vmov	r0, s1
 8017edc:	f7ff ff46 	bl	8017d6c <checkint>
 8017ee0:	2801      	cmp	r0, #1
 8017ee2:	d109      	bne.n	8017ef8 <powf+0x158>
 8017ee4:	eeb1 0a40 	vneg.f32	s0, s0
 8017ee8:	b945      	cbnz	r5, 8017efc <powf+0x15c>
 8017eea:	2c00      	cmp	r4, #0
 8017eec:	dac8      	bge.n	8017e80 <powf+0xe0>
 8017eee:	b003      	add	sp, #12
 8017ef0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017ef4:	f7ff be54 	b.w	8017ba0 <__math_divzerof>
 8017ef8:	2000      	movs	r0, #0
 8017efa:	e7f5      	b.n	8017ee8 <powf+0x148>
 8017efc:	2c00      	cmp	r4, #0
 8017efe:	dabf      	bge.n	8017e80 <powf+0xe0>
 8017f00:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017f04:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8017f08:	e7ba      	b.n	8017e80 <powf+0xe0>
 8017f0a:	2900      	cmp	r1, #0
 8017f0c:	da1f      	bge.n	8017f4e <powf+0x1ae>
 8017f0e:	ee10 0a90 	vmov	r0, s1
 8017f12:	f7ff ff2b 	bl	8017d6c <checkint>
 8017f16:	b920      	cbnz	r0, 8017f22 <powf+0x182>
 8017f18:	b003      	add	sp, #12
 8017f1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017f1e:	f7ff be4f 	b.w	8017bc0 <__math_invalidf>
 8017f22:	2801      	cmp	r0, #1
 8017f24:	bf14      	ite	ne
 8017f26:	2000      	movne	r0, #0
 8017f28:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8017f2c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8017f30:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8017f34:	f4bf af48 	bcs.w	8017dc8 <powf+0x28>
 8017f38:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8018054 <powf+0x2b4>
 8017f3c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8017f40:	ee10 3a10 	vmov	r3, s0
 8017f44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017f48:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8017f4c:	e73c      	b.n	8017dc8 <powf+0x28>
 8017f4e:	2000      	movs	r0, #0
 8017f50:	e7ee      	b.n	8017f30 <powf+0x190>
 8017f52:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8018038 <powf+0x298>
 8017f56:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8017f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f5e:	dd10      	ble.n	8017f82 <powf+0x1e2>
 8017f60:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 8017f64:	2800      	cmp	r0, #0
 8017f66:	d158      	bne.n	801801a <powf+0x27a>
 8017f68:	9300      	str	r3, [sp, #0]
 8017f6a:	eddd 7a00 	vldr	s15, [sp]
 8017f6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017f72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017f76:	eef4 7a47 	vcmp.f32	s15, s14
 8017f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f7e:	f47f af6e 	bne.w	8017e5e <powf+0xbe>
 8017f82:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8018040 <powf+0x2a0>
 8017f86:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8017f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f8e:	d804      	bhi.n	8017f9a <powf+0x1fa>
 8017f90:	b003      	add	sp, #12
 8017f92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017f96:	f7ff bdf1 	b.w	8017b7c <__math_uflowf>
 8017f9a:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8018048 <powf+0x2a8>
 8017f9e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8017fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fa6:	d504      	bpl.n	8017fb2 <powf+0x212>
 8017fa8:	b003      	add	sp, #12
 8017faa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017fae:	f7ff bdeb 	b.w	8017b88 <__math_may_uflowf>
 8017fb2:	4b29      	ldr	r3, [pc, #164]	; (8018058 <powf+0x2b8>)
 8017fb4:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8017fb8:	ee30 6b07 	vadd.f64	d6, d0, d7
 8017fbc:	ee16 2a10 	vmov	r2, s12
 8017fc0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8017fc4:	f002 011f 	and.w	r1, r2, #31
 8017fc8:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 8017fcc:	ee30 7b47 	vsub.f64	d7, d0, d7
 8017fd0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8017fd4:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 8017fd8:	ee27 4b07 	vmul.f64	d4, d7, d7
 8017fdc:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 8017fe0:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 8017fe4:	eea7 6b05 	vfma.f64	d6, d7, d5
 8017fe8:	686d      	ldr	r5, [r5, #4]
 8017fea:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 8017fee:	1882      	adds	r2, r0, r2
 8017ff0:	2300      	movs	r3, #0
 8017ff2:	1918      	adds	r0, r3, r4
 8017ff4:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 8017ff8:	eea7 0b05 	vfma.f64	d0, d7, d5
 8017ffc:	ec41 0b17 	vmov	d7, r0, r1
 8018000:	eea6 0b04 	vfma.f64	d0, d6, d4
 8018004:	ee20 0b07 	vmul.f64	d0, d0, d7
 8018008:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801800c:	e738      	b.n	8017e80 <powf+0xe0>
 801800e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8018012:	e735      	b.n	8017e80 <powf+0xe0>
 8018014:	ed9f 0a11 	vldr	s0, [pc, #68]	; 801805c <powf+0x2bc>
 8018018:	e732      	b.n	8017e80 <powf+0xe0>
 801801a:	9301      	str	r3, [sp, #4]
 801801c:	eddd 7a01 	vldr	s15, [sp, #4]
 8018020:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8018024:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018028:	e7a5      	b.n	8017f76 <powf+0x1d6>
 801802a:	bf00      	nop
 801802c:	f3af 8000 	nop.w
 8018030:	ffd1d571 	.word	0xffd1d571
 8018034:	405fffff 	.word	0x405fffff
 8018038:	ffa3aae2 	.word	0xffa3aae2
 801803c:	405fffff 	.word	0x405fffff
 8018040:	00000000 	.word	0x00000000
 8018044:	c062c000 	.word	0xc062c000
 8018048:	00000000 	.word	0x00000000
 801804c:	c062a000 	.word	0xc062a000
 8018050:	08032c70 	.word	0x08032c70
 8018054:	4b000000 	.word	0x4b000000
 8018058:	08032b28 	.word	0x08032b28
 801805c:	00000000 	.word	0x00000000

08018060 <log10f>:
 8018060:	b508      	push	{r3, lr}
 8018062:	ed2d 8b02 	vpush	{d8}
 8018066:	eeb0 8a40 	vmov.f32	s16, s0
 801806a:	f000 f845 	bl	80180f8 <__ieee754_log10f>
 801806e:	eeb4 8a48 	vcmp.f32	s16, s16
 8018072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018076:	d60f      	bvs.n	8018098 <log10f+0x38>
 8018078:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801807c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018080:	d80a      	bhi.n	8018098 <log10f+0x38>
 8018082:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8018086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801808a:	d108      	bne.n	801809e <log10f+0x3e>
 801808c:	f000 f900 	bl	8018290 <__errno>
 8018090:	2322      	movs	r3, #34	; 0x22
 8018092:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80180b4 <log10f+0x54>
 8018096:	6003      	str	r3, [r0, #0]
 8018098:	ecbd 8b02 	vpop	{d8}
 801809c:	bd08      	pop	{r3, pc}
 801809e:	f000 f8f7 	bl	8018290 <__errno>
 80180a2:	ecbd 8b02 	vpop	{d8}
 80180a6:	2321      	movs	r3, #33	; 0x21
 80180a8:	6003      	str	r3, [r0, #0]
 80180aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80180ae:	4802      	ldr	r0, [pc, #8]	; (80180b8 <log10f+0x58>)
 80180b0:	f000 b8e4 	b.w	801827c <nanf>
 80180b4:	ff800000 	.word	0xff800000
 80180b8:	0803312f 	.word	0x0803312f

080180bc <sqrtf>:
 80180bc:	b508      	push	{r3, lr}
 80180be:	ed2d 8b02 	vpush	{d8}
 80180c2:	eeb0 8a40 	vmov.f32	s16, s0
 80180c6:	f000 f86f 	bl	80181a8 <__ieee754_sqrtf>
 80180ca:	eeb4 8a48 	vcmp.f32	s16, s16
 80180ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180d2:	d60c      	bvs.n	80180ee <sqrtf+0x32>
 80180d4:	eddf 8a07 	vldr	s17, [pc, #28]	; 80180f4 <sqrtf+0x38>
 80180d8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80180dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180e0:	d505      	bpl.n	80180ee <sqrtf+0x32>
 80180e2:	f000 f8d5 	bl	8018290 <__errno>
 80180e6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80180ea:	2321      	movs	r3, #33	; 0x21
 80180ec:	6003      	str	r3, [r0, #0]
 80180ee:	ecbd 8b02 	vpop	{d8}
 80180f2:	bd08      	pop	{r3, pc}
 80180f4:	00000000 	.word	0x00000000

080180f8 <__ieee754_log10f>:
 80180f8:	b508      	push	{r3, lr}
 80180fa:	ee10 2a10 	vmov	r2, s0
 80180fe:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8018102:	ed2d 8b02 	vpush	{d8}
 8018106:	d108      	bne.n	801811a <__ieee754_log10f+0x22>
 8018108:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8018190 <__ieee754_log10f+0x98>
 801810c:	eddf 7a21 	vldr	s15, [pc, #132]	; 8018194 <__ieee754_log10f+0x9c>
 8018110:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8018114:	ecbd 8b02 	vpop	{d8}
 8018118:	bd08      	pop	{r3, pc}
 801811a:	2a00      	cmp	r2, #0
 801811c:	da02      	bge.n	8018124 <__ieee754_log10f+0x2c>
 801811e:	ee30 7a40 	vsub.f32	s14, s0, s0
 8018122:	e7f3      	b.n	801810c <__ieee754_log10f+0x14>
 8018124:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8018128:	db02      	blt.n	8018130 <__ieee754_log10f+0x38>
 801812a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801812e:	e7f1      	b.n	8018114 <__ieee754_log10f+0x1c>
 8018130:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8018134:	bfbf      	itttt	lt
 8018136:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8018198 <__ieee754_log10f+0xa0>
 801813a:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801813e:	f06f 0118 	mvnlt.w	r1, #24
 8018142:	ee17 2a90 	vmovlt	r2, s15
 8018146:	ea4f 53e2 	mov.w	r3, r2, asr #23
 801814a:	bfa8      	it	ge
 801814c:	2100      	movge	r1, #0
 801814e:	3b7f      	subs	r3, #127	; 0x7f
 8018150:	440b      	add	r3, r1
 8018152:	0fd9      	lsrs	r1, r3, #31
 8018154:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8018158:	ee07 3a90 	vmov	s15, r3
 801815c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8018160:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8018164:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8018168:	ee00 3a10 	vmov	s0, r3
 801816c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8018170:	f000 f81e 	bl	80181b0 <logf>
 8018174:	eddf 7a09 	vldr	s15, [pc, #36]	; 801819c <__ieee754_log10f+0xa4>
 8018178:	ee20 0a27 	vmul.f32	s0, s0, s15
 801817c:	eddf 7a08 	vldr	s15, [pc, #32]	; 80181a0 <__ieee754_log10f+0xa8>
 8018180:	eea8 0a27 	vfma.f32	s0, s16, s15
 8018184:	eddf 7a07 	vldr	s15, [pc, #28]	; 80181a4 <__ieee754_log10f+0xac>
 8018188:	eea8 0a27 	vfma.f32	s0, s16, s15
 801818c:	e7c2      	b.n	8018114 <__ieee754_log10f+0x1c>
 801818e:	bf00      	nop
 8018190:	cc000000 	.word	0xcc000000
 8018194:	00000000 	.word	0x00000000
 8018198:	4c000000 	.word	0x4c000000
 801819c:	3ede5bd9 	.word	0x3ede5bd9
 80181a0:	355427db 	.word	0x355427db
 80181a4:	3e9a2080 	.word	0x3e9a2080

080181a8 <__ieee754_sqrtf>:
 80181a8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80181ac:	4770      	bx	lr
	...

080181b0 <logf>:
 80181b0:	ee10 3a10 	vmov	r3, s0
 80181b4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80181b8:	b410      	push	{r4}
 80181ba:	d055      	beq.n	8018268 <logf+0xb8>
 80181bc:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 80181c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80181c4:	d31a      	bcc.n	80181fc <logf+0x4c>
 80181c6:	005a      	lsls	r2, r3, #1
 80181c8:	d104      	bne.n	80181d4 <logf+0x24>
 80181ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80181ce:	2001      	movs	r0, #1
 80181d0:	f7ff bce6 	b.w	8017ba0 <__math_divzerof>
 80181d4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80181d8:	d043      	beq.n	8018262 <logf+0xb2>
 80181da:	2b00      	cmp	r3, #0
 80181dc:	db02      	blt.n	80181e4 <logf+0x34>
 80181de:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 80181e2:	d303      	bcc.n	80181ec <logf+0x3c>
 80181e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80181e8:	f7ff bcea 	b.w	8017bc0 <__math_invalidf>
 80181ec:	eddf 7a20 	vldr	s15, [pc, #128]	; 8018270 <logf+0xc0>
 80181f0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80181f4:	ee10 3a10 	vmov	r3, s0
 80181f8:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 80181fc:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 8018200:	491c      	ldr	r1, [pc, #112]	; (8018274 <logf+0xc4>)
 8018202:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 8018206:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 801820a:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 801820e:	0dd4      	lsrs	r4, r2, #23
 8018210:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8018214:	05e4      	lsls	r4, r4, #23
 8018216:	ed90 6b00 	vldr	d6, [r0]
 801821a:	1b1b      	subs	r3, r3, r4
 801821c:	ee07 3a90 	vmov	s15, r3
 8018220:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 8018224:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8018228:	15d2      	asrs	r2, r2, #23
 801822a:	eea6 0b07 	vfma.f64	d0, d6, d7
 801822e:	ed90 6b02 	vldr	d6, [r0, #8]
 8018232:	ee20 4b00 	vmul.f64	d4, d0, d0
 8018236:	ee07 2a90 	vmov	s15, r2
 801823a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801823e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8018242:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 8018246:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 801824a:	eea5 7b00 	vfma.f64	d7, d5, d0
 801824e:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8018252:	ee30 0b06 	vadd.f64	d0, d0, d6
 8018256:	eea5 7b04 	vfma.f64	d7, d5, d4
 801825a:	eea4 0b07 	vfma.f64	d0, d4, d7
 801825e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8018262:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018266:	4770      	bx	lr
 8018268:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8018278 <logf+0xc8>
 801826c:	e7f9      	b.n	8018262 <logf+0xb2>
 801826e:	bf00      	nop
 8018270:	4b000000 	.word	0x4b000000
 8018274:	08032ed8 	.word	0x08032ed8
 8018278:	00000000 	.word	0x00000000

0801827c <nanf>:
 801827c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8018284 <nanf+0x8>
 8018280:	4770      	bx	lr
 8018282:	bf00      	nop
 8018284:	7fc00000 	.word	0x7fc00000

08018288 <atoi>:
 8018288:	220a      	movs	r2, #10
 801828a:	2100      	movs	r1, #0
 801828c:	f001 bc68 	b.w	8019b60 <strtol>

08018290 <__errno>:
 8018290:	4b01      	ldr	r3, [pc, #4]	; (8018298 <__errno+0x8>)
 8018292:	6818      	ldr	r0, [r3, #0]
 8018294:	4770      	bx	lr
 8018296:	bf00      	nop
 8018298:	24000060 	.word	0x24000060

0801829c <exit>:
 801829c:	b508      	push	{r3, lr}
 801829e:	4b07      	ldr	r3, [pc, #28]	; (80182bc <exit+0x20>)
 80182a0:	4604      	mov	r4, r0
 80182a2:	b113      	cbz	r3, 80182aa <exit+0xe>
 80182a4:	2100      	movs	r1, #0
 80182a6:	f3af 8000 	nop.w
 80182aa:	4b05      	ldr	r3, [pc, #20]	; (80182c0 <exit+0x24>)
 80182ac:	6818      	ldr	r0, [r3, #0]
 80182ae:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80182b0:	b103      	cbz	r3, 80182b4 <exit+0x18>
 80182b2:	4798      	blx	r3
 80182b4:	4620      	mov	r0, r4
 80182b6:	f7ea fef4 	bl	80030a2 <_exit>
 80182ba:	bf00      	nop
 80182bc:	00000000 	.word	0x00000000
 80182c0:	08032ff8 	.word	0x08032ff8

080182c4 <__libc_init_array>:
 80182c4:	b570      	push	{r4, r5, r6, lr}
 80182c6:	4d0d      	ldr	r5, [pc, #52]	; (80182fc <__libc_init_array+0x38>)
 80182c8:	4c0d      	ldr	r4, [pc, #52]	; (8018300 <__libc_init_array+0x3c>)
 80182ca:	1b64      	subs	r4, r4, r5
 80182cc:	10a4      	asrs	r4, r4, #2
 80182ce:	2600      	movs	r6, #0
 80182d0:	42a6      	cmp	r6, r4
 80182d2:	d109      	bne.n	80182e8 <__libc_init_array+0x24>
 80182d4:	4d0b      	ldr	r5, [pc, #44]	; (8018304 <__libc_init_array+0x40>)
 80182d6:	4c0c      	ldr	r4, [pc, #48]	; (8018308 <__libc_init_array+0x44>)
 80182d8:	f004 f838 	bl	801c34c <_init>
 80182dc:	1b64      	subs	r4, r4, r5
 80182de:	10a4      	asrs	r4, r4, #2
 80182e0:	2600      	movs	r6, #0
 80182e2:	42a6      	cmp	r6, r4
 80182e4:	d105      	bne.n	80182f2 <__libc_init_array+0x2e>
 80182e6:	bd70      	pop	{r4, r5, r6, pc}
 80182e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80182ec:	4798      	blx	r3
 80182ee:	3601      	adds	r6, #1
 80182f0:	e7ee      	b.n	80182d0 <__libc_init_array+0xc>
 80182f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80182f6:	4798      	blx	r3
 80182f8:	3601      	adds	r6, #1
 80182fa:	e7f2      	b.n	80182e2 <__libc_init_array+0x1e>
 80182fc:	08033500 	.word	0x08033500
 8018300:	08033500 	.word	0x08033500
 8018304:	08033500 	.word	0x08033500
 8018308:	08033504 	.word	0x08033504

0801830c <malloc>:
 801830c:	4b02      	ldr	r3, [pc, #8]	; (8018318 <malloc+0xc>)
 801830e:	4601      	mov	r1, r0
 8018310:	6818      	ldr	r0, [r3, #0]
 8018312:	f000 b88d 	b.w	8018430 <_malloc_r>
 8018316:	bf00      	nop
 8018318:	24000060 	.word	0x24000060

0801831c <free>:
 801831c:	4b02      	ldr	r3, [pc, #8]	; (8018328 <free+0xc>)
 801831e:	4601      	mov	r1, r0
 8018320:	6818      	ldr	r0, [r3, #0]
 8018322:	f000 b819 	b.w	8018358 <_free_r>
 8018326:	bf00      	nop
 8018328:	24000060 	.word	0x24000060

0801832c <memcpy>:
 801832c:	440a      	add	r2, r1
 801832e:	4291      	cmp	r1, r2
 8018330:	f100 33ff 	add.w	r3, r0, #4294967295
 8018334:	d100      	bne.n	8018338 <memcpy+0xc>
 8018336:	4770      	bx	lr
 8018338:	b510      	push	{r4, lr}
 801833a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801833e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018342:	4291      	cmp	r1, r2
 8018344:	d1f9      	bne.n	801833a <memcpy+0xe>
 8018346:	bd10      	pop	{r4, pc}

08018348 <memset>:
 8018348:	4402      	add	r2, r0
 801834a:	4603      	mov	r3, r0
 801834c:	4293      	cmp	r3, r2
 801834e:	d100      	bne.n	8018352 <memset+0xa>
 8018350:	4770      	bx	lr
 8018352:	f803 1b01 	strb.w	r1, [r3], #1
 8018356:	e7f9      	b.n	801834c <memset+0x4>

08018358 <_free_r>:
 8018358:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801835a:	2900      	cmp	r1, #0
 801835c:	d044      	beq.n	80183e8 <_free_r+0x90>
 801835e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018362:	9001      	str	r0, [sp, #4]
 8018364:	2b00      	cmp	r3, #0
 8018366:	f1a1 0404 	sub.w	r4, r1, #4
 801836a:	bfb8      	it	lt
 801836c:	18e4      	addlt	r4, r4, r3
 801836e:	f002 fea9 	bl	801b0c4 <__malloc_lock>
 8018372:	4a1e      	ldr	r2, [pc, #120]	; (80183ec <_free_r+0x94>)
 8018374:	9801      	ldr	r0, [sp, #4]
 8018376:	6813      	ldr	r3, [r2, #0]
 8018378:	b933      	cbnz	r3, 8018388 <_free_r+0x30>
 801837a:	6063      	str	r3, [r4, #4]
 801837c:	6014      	str	r4, [r2, #0]
 801837e:	b003      	add	sp, #12
 8018380:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018384:	f002 bea4 	b.w	801b0d0 <__malloc_unlock>
 8018388:	42a3      	cmp	r3, r4
 801838a:	d908      	bls.n	801839e <_free_r+0x46>
 801838c:	6825      	ldr	r5, [r4, #0]
 801838e:	1961      	adds	r1, r4, r5
 8018390:	428b      	cmp	r3, r1
 8018392:	bf01      	itttt	eq
 8018394:	6819      	ldreq	r1, [r3, #0]
 8018396:	685b      	ldreq	r3, [r3, #4]
 8018398:	1949      	addeq	r1, r1, r5
 801839a:	6021      	streq	r1, [r4, #0]
 801839c:	e7ed      	b.n	801837a <_free_r+0x22>
 801839e:	461a      	mov	r2, r3
 80183a0:	685b      	ldr	r3, [r3, #4]
 80183a2:	b10b      	cbz	r3, 80183a8 <_free_r+0x50>
 80183a4:	42a3      	cmp	r3, r4
 80183a6:	d9fa      	bls.n	801839e <_free_r+0x46>
 80183a8:	6811      	ldr	r1, [r2, #0]
 80183aa:	1855      	adds	r5, r2, r1
 80183ac:	42a5      	cmp	r5, r4
 80183ae:	d10b      	bne.n	80183c8 <_free_r+0x70>
 80183b0:	6824      	ldr	r4, [r4, #0]
 80183b2:	4421      	add	r1, r4
 80183b4:	1854      	adds	r4, r2, r1
 80183b6:	42a3      	cmp	r3, r4
 80183b8:	6011      	str	r1, [r2, #0]
 80183ba:	d1e0      	bne.n	801837e <_free_r+0x26>
 80183bc:	681c      	ldr	r4, [r3, #0]
 80183be:	685b      	ldr	r3, [r3, #4]
 80183c0:	6053      	str	r3, [r2, #4]
 80183c2:	4421      	add	r1, r4
 80183c4:	6011      	str	r1, [r2, #0]
 80183c6:	e7da      	b.n	801837e <_free_r+0x26>
 80183c8:	d902      	bls.n	80183d0 <_free_r+0x78>
 80183ca:	230c      	movs	r3, #12
 80183cc:	6003      	str	r3, [r0, #0]
 80183ce:	e7d6      	b.n	801837e <_free_r+0x26>
 80183d0:	6825      	ldr	r5, [r4, #0]
 80183d2:	1961      	adds	r1, r4, r5
 80183d4:	428b      	cmp	r3, r1
 80183d6:	bf04      	itt	eq
 80183d8:	6819      	ldreq	r1, [r3, #0]
 80183da:	685b      	ldreq	r3, [r3, #4]
 80183dc:	6063      	str	r3, [r4, #4]
 80183de:	bf04      	itt	eq
 80183e0:	1949      	addeq	r1, r1, r5
 80183e2:	6021      	streq	r1, [r4, #0]
 80183e4:	6054      	str	r4, [r2, #4]
 80183e6:	e7ca      	b.n	801837e <_free_r+0x26>
 80183e8:	b003      	add	sp, #12
 80183ea:	bd30      	pop	{r4, r5, pc}
 80183ec:	240311bc 	.word	0x240311bc

080183f0 <sbrk_aligned>:
 80183f0:	b570      	push	{r4, r5, r6, lr}
 80183f2:	4e0e      	ldr	r6, [pc, #56]	; (801842c <sbrk_aligned+0x3c>)
 80183f4:	460c      	mov	r4, r1
 80183f6:	6831      	ldr	r1, [r6, #0]
 80183f8:	4605      	mov	r5, r0
 80183fa:	b911      	cbnz	r1, 8018402 <sbrk_aligned+0x12>
 80183fc:	f000 fce6 	bl	8018dcc <_sbrk_r>
 8018400:	6030      	str	r0, [r6, #0]
 8018402:	4621      	mov	r1, r4
 8018404:	4628      	mov	r0, r5
 8018406:	f000 fce1 	bl	8018dcc <_sbrk_r>
 801840a:	1c43      	adds	r3, r0, #1
 801840c:	d00a      	beq.n	8018424 <sbrk_aligned+0x34>
 801840e:	1cc4      	adds	r4, r0, #3
 8018410:	f024 0403 	bic.w	r4, r4, #3
 8018414:	42a0      	cmp	r0, r4
 8018416:	d007      	beq.n	8018428 <sbrk_aligned+0x38>
 8018418:	1a21      	subs	r1, r4, r0
 801841a:	4628      	mov	r0, r5
 801841c:	f000 fcd6 	bl	8018dcc <_sbrk_r>
 8018420:	3001      	adds	r0, #1
 8018422:	d101      	bne.n	8018428 <sbrk_aligned+0x38>
 8018424:	f04f 34ff 	mov.w	r4, #4294967295
 8018428:	4620      	mov	r0, r4
 801842a:	bd70      	pop	{r4, r5, r6, pc}
 801842c:	240311c0 	.word	0x240311c0

08018430 <_malloc_r>:
 8018430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018434:	1ccd      	adds	r5, r1, #3
 8018436:	f025 0503 	bic.w	r5, r5, #3
 801843a:	3508      	adds	r5, #8
 801843c:	2d0c      	cmp	r5, #12
 801843e:	bf38      	it	cc
 8018440:	250c      	movcc	r5, #12
 8018442:	2d00      	cmp	r5, #0
 8018444:	4607      	mov	r7, r0
 8018446:	db01      	blt.n	801844c <_malloc_r+0x1c>
 8018448:	42a9      	cmp	r1, r5
 801844a:	d905      	bls.n	8018458 <_malloc_r+0x28>
 801844c:	230c      	movs	r3, #12
 801844e:	603b      	str	r3, [r7, #0]
 8018450:	2600      	movs	r6, #0
 8018452:	4630      	mov	r0, r6
 8018454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018458:	4e2e      	ldr	r6, [pc, #184]	; (8018514 <_malloc_r+0xe4>)
 801845a:	f002 fe33 	bl	801b0c4 <__malloc_lock>
 801845e:	6833      	ldr	r3, [r6, #0]
 8018460:	461c      	mov	r4, r3
 8018462:	bb34      	cbnz	r4, 80184b2 <_malloc_r+0x82>
 8018464:	4629      	mov	r1, r5
 8018466:	4638      	mov	r0, r7
 8018468:	f7ff ffc2 	bl	80183f0 <sbrk_aligned>
 801846c:	1c43      	adds	r3, r0, #1
 801846e:	4604      	mov	r4, r0
 8018470:	d14d      	bne.n	801850e <_malloc_r+0xde>
 8018472:	6834      	ldr	r4, [r6, #0]
 8018474:	4626      	mov	r6, r4
 8018476:	2e00      	cmp	r6, #0
 8018478:	d140      	bne.n	80184fc <_malloc_r+0xcc>
 801847a:	6823      	ldr	r3, [r4, #0]
 801847c:	4631      	mov	r1, r6
 801847e:	4638      	mov	r0, r7
 8018480:	eb04 0803 	add.w	r8, r4, r3
 8018484:	f000 fca2 	bl	8018dcc <_sbrk_r>
 8018488:	4580      	cmp	r8, r0
 801848a:	d13a      	bne.n	8018502 <_malloc_r+0xd2>
 801848c:	6821      	ldr	r1, [r4, #0]
 801848e:	3503      	adds	r5, #3
 8018490:	1a6d      	subs	r5, r5, r1
 8018492:	f025 0503 	bic.w	r5, r5, #3
 8018496:	3508      	adds	r5, #8
 8018498:	2d0c      	cmp	r5, #12
 801849a:	bf38      	it	cc
 801849c:	250c      	movcc	r5, #12
 801849e:	4629      	mov	r1, r5
 80184a0:	4638      	mov	r0, r7
 80184a2:	f7ff ffa5 	bl	80183f0 <sbrk_aligned>
 80184a6:	3001      	adds	r0, #1
 80184a8:	d02b      	beq.n	8018502 <_malloc_r+0xd2>
 80184aa:	6823      	ldr	r3, [r4, #0]
 80184ac:	442b      	add	r3, r5
 80184ae:	6023      	str	r3, [r4, #0]
 80184b0:	e00e      	b.n	80184d0 <_malloc_r+0xa0>
 80184b2:	6822      	ldr	r2, [r4, #0]
 80184b4:	1b52      	subs	r2, r2, r5
 80184b6:	d41e      	bmi.n	80184f6 <_malloc_r+0xc6>
 80184b8:	2a0b      	cmp	r2, #11
 80184ba:	d916      	bls.n	80184ea <_malloc_r+0xba>
 80184bc:	1961      	adds	r1, r4, r5
 80184be:	42a3      	cmp	r3, r4
 80184c0:	6025      	str	r5, [r4, #0]
 80184c2:	bf18      	it	ne
 80184c4:	6059      	strne	r1, [r3, #4]
 80184c6:	6863      	ldr	r3, [r4, #4]
 80184c8:	bf08      	it	eq
 80184ca:	6031      	streq	r1, [r6, #0]
 80184cc:	5162      	str	r2, [r4, r5]
 80184ce:	604b      	str	r3, [r1, #4]
 80184d0:	4638      	mov	r0, r7
 80184d2:	f104 060b 	add.w	r6, r4, #11
 80184d6:	f002 fdfb 	bl	801b0d0 <__malloc_unlock>
 80184da:	f026 0607 	bic.w	r6, r6, #7
 80184de:	1d23      	adds	r3, r4, #4
 80184e0:	1af2      	subs	r2, r6, r3
 80184e2:	d0b6      	beq.n	8018452 <_malloc_r+0x22>
 80184e4:	1b9b      	subs	r3, r3, r6
 80184e6:	50a3      	str	r3, [r4, r2]
 80184e8:	e7b3      	b.n	8018452 <_malloc_r+0x22>
 80184ea:	6862      	ldr	r2, [r4, #4]
 80184ec:	42a3      	cmp	r3, r4
 80184ee:	bf0c      	ite	eq
 80184f0:	6032      	streq	r2, [r6, #0]
 80184f2:	605a      	strne	r2, [r3, #4]
 80184f4:	e7ec      	b.n	80184d0 <_malloc_r+0xa0>
 80184f6:	4623      	mov	r3, r4
 80184f8:	6864      	ldr	r4, [r4, #4]
 80184fa:	e7b2      	b.n	8018462 <_malloc_r+0x32>
 80184fc:	4634      	mov	r4, r6
 80184fe:	6876      	ldr	r6, [r6, #4]
 8018500:	e7b9      	b.n	8018476 <_malloc_r+0x46>
 8018502:	230c      	movs	r3, #12
 8018504:	603b      	str	r3, [r7, #0]
 8018506:	4638      	mov	r0, r7
 8018508:	f002 fde2 	bl	801b0d0 <__malloc_unlock>
 801850c:	e7a1      	b.n	8018452 <_malloc_r+0x22>
 801850e:	6025      	str	r5, [r4, #0]
 8018510:	e7de      	b.n	80184d0 <_malloc_r+0xa0>
 8018512:	bf00      	nop
 8018514:	240311bc 	.word	0x240311bc

08018518 <__cvt>:
 8018518:	b5f0      	push	{r4, r5, r6, r7, lr}
 801851a:	ed2d 8b02 	vpush	{d8}
 801851e:	eeb0 8b40 	vmov.f64	d8, d0
 8018522:	b085      	sub	sp, #20
 8018524:	4617      	mov	r7, r2
 8018526:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8018528:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801852a:	ee18 2a90 	vmov	r2, s17
 801852e:	f025 0520 	bic.w	r5, r5, #32
 8018532:	2a00      	cmp	r2, #0
 8018534:	bfb6      	itet	lt
 8018536:	222d      	movlt	r2, #45	; 0x2d
 8018538:	2200      	movge	r2, #0
 801853a:	eeb1 8b40 	vneglt.f64	d8, d0
 801853e:	2d46      	cmp	r5, #70	; 0x46
 8018540:	460c      	mov	r4, r1
 8018542:	701a      	strb	r2, [r3, #0]
 8018544:	d004      	beq.n	8018550 <__cvt+0x38>
 8018546:	2d45      	cmp	r5, #69	; 0x45
 8018548:	d100      	bne.n	801854c <__cvt+0x34>
 801854a:	3401      	adds	r4, #1
 801854c:	2102      	movs	r1, #2
 801854e:	e000      	b.n	8018552 <__cvt+0x3a>
 8018550:	2103      	movs	r1, #3
 8018552:	ab03      	add	r3, sp, #12
 8018554:	9301      	str	r3, [sp, #4]
 8018556:	ab02      	add	r3, sp, #8
 8018558:	9300      	str	r3, [sp, #0]
 801855a:	4622      	mov	r2, r4
 801855c:	4633      	mov	r3, r6
 801855e:	eeb0 0b48 	vmov.f64	d0, d8
 8018562:	f001 fbb1 	bl	8019cc8 <_dtoa_r>
 8018566:	2d47      	cmp	r5, #71	; 0x47
 8018568:	d101      	bne.n	801856e <__cvt+0x56>
 801856a:	07fb      	lsls	r3, r7, #31
 801856c:	d51a      	bpl.n	80185a4 <__cvt+0x8c>
 801856e:	2d46      	cmp	r5, #70	; 0x46
 8018570:	eb00 0204 	add.w	r2, r0, r4
 8018574:	d10c      	bne.n	8018590 <__cvt+0x78>
 8018576:	7803      	ldrb	r3, [r0, #0]
 8018578:	2b30      	cmp	r3, #48	; 0x30
 801857a:	d107      	bne.n	801858c <__cvt+0x74>
 801857c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018584:	bf1c      	itt	ne
 8018586:	f1c4 0401 	rsbne	r4, r4, #1
 801858a:	6034      	strne	r4, [r6, #0]
 801858c:	6833      	ldr	r3, [r6, #0]
 801858e:	441a      	add	r2, r3
 8018590:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018598:	bf08      	it	eq
 801859a:	9203      	streq	r2, [sp, #12]
 801859c:	2130      	movs	r1, #48	; 0x30
 801859e:	9b03      	ldr	r3, [sp, #12]
 80185a0:	4293      	cmp	r3, r2
 80185a2:	d307      	bcc.n	80185b4 <__cvt+0x9c>
 80185a4:	9b03      	ldr	r3, [sp, #12]
 80185a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80185a8:	1a1b      	subs	r3, r3, r0
 80185aa:	6013      	str	r3, [r2, #0]
 80185ac:	b005      	add	sp, #20
 80185ae:	ecbd 8b02 	vpop	{d8}
 80185b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80185b4:	1c5c      	adds	r4, r3, #1
 80185b6:	9403      	str	r4, [sp, #12]
 80185b8:	7019      	strb	r1, [r3, #0]
 80185ba:	e7f0      	b.n	801859e <__cvt+0x86>

080185bc <__exponent>:
 80185bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80185be:	4603      	mov	r3, r0
 80185c0:	2900      	cmp	r1, #0
 80185c2:	bfb8      	it	lt
 80185c4:	4249      	neglt	r1, r1
 80185c6:	f803 2b02 	strb.w	r2, [r3], #2
 80185ca:	bfb4      	ite	lt
 80185cc:	222d      	movlt	r2, #45	; 0x2d
 80185ce:	222b      	movge	r2, #43	; 0x2b
 80185d0:	2909      	cmp	r1, #9
 80185d2:	7042      	strb	r2, [r0, #1]
 80185d4:	dd2a      	ble.n	801862c <__exponent+0x70>
 80185d6:	f10d 0407 	add.w	r4, sp, #7
 80185da:	46a4      	mov	ip, r4
 80185dc:	270a      	movs	r7, #10
 80185de:	46a6      	mov	lr, r4
 80185e0:	460a      	mov	r2, r1
 80185e2:	fb91 f6f7 	sdiv	r6, r1, r7
 80185e6:	fb07 1516 	mls	r5, r7, r6, r1
 80185ea:	3530      	adds	r5, #48	; 0x30
 80185ec:	2a63      	cmp	r2, #99	; 0x63
 80185ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80185f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80185f6:	4631      	mov	r1, r6
 80185f8:	dcf1      	bgt.n	80185de <__exponent+0x22>
 80185fa:	3130      	adds	r1, #48	; 0x30
 80185fc:	f1ae 0502 	sub.w	r5, lr, #2
 8018600:	f804 1c01 	strb.w	r1, [r4, #-1]
 8018604:	1c44      	adds	r4, r0, #1
 8018606:	4629      	mov	r1, r5
 8018608:	4561      	cmp	r1, ip
 801860a:	d30a      	bcc.n	8018622 <__exponent+0x66>
 801860c:	f10d 0209 	add.w	r2, sp, #9
 8018610:	eba2 020e 	sub.w	r2, r2, lr
 8018614:	4565      	cmp	r5, ip
 8018616:	bf88      	it	hi
 8018618:	2200      	movhi	r2, #0
 801861a:	4413      	add	r3, r2
 801861c:	1a18      	subs	r0, r3, r0
 801861e:	b003      	add	sp, #12
 8018620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018622:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018626:	f804 2f01 	strb.w	r2, [r4, #1]!
 801862a:	e7ed      	b.n	8018608 <__exponent+0x4c>
 801862c:	2330      	movs	r3, #48	; 0x30
 801862e:	3130      	adds	r1, #48	; 0x30
 8018630:	7083      	strb	r3, [r0, #2]
 8018632:	70c1      	strb	r1, [r0, #3]
 8018634:	1d03      	adds	r3, r0, #4
 8018636:	e7f1      	b.n	801861c <__exponent+0x60>

08018638 <_printf_float>:
 8018638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801863c:	b08b      	sub	sp, #44	; 0x2c
 801863e:	460c      	mov	r4, r1
 8018640:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8018644:	4616      	mov	r6, r2
 8018646:	461f      	mov	r7, r3
 8018648:	4605      	mov	r5, r0
 801864a:	f002 fd21 	bl	801b090 <_localeconv_r>
 801864e:	f8d0 b000 	ldr.w	fp, [r0]
 8018652:	4658      	mov	r0, fp
 8018654:	f7e7 fe4e 	bl	80002f4 <strlen>
 8018658:	2300      	movs	r3, #0
 801865a:	9308      	str	r3, [sp, #32]
 801865c:	f8d8 3000 	ldr.w	r3, [r8]
 8018660:	f894 9018 	ldrb.w	r9, [r4, #24]
 8018664:	6822      	ldr	r2, [r4, #0]
 8018666:	3307      	adds	r3, #7
 8018668:	f023 0307 	bic.w	r3, r3, #7
 801866c:	f103 0108 	add.w	r1, r3, #8
 8018670:	f8c8 1000 	str.w	r1, [r8]
 8018674:	4682      	mov	sl, r0
 8018676:	e9d3 0100 	ldrd	r0, r1, [r3]
 801867a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801867e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80188e0 <_printf_float+0x2a8>
 8018682:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8018686:	eeb0 6bc0 	vabs.f64	d6, d0
 801868a:	eeb4 6b47 	vcmp.f64	d6, d7
 801868e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018692:	dd24      	ble.n	80186de <_printf_float+0xa6>
 8018694:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8018698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801869c:	d502      	bpl.n	80186a4 <_printf_float+0x6c>
 801869e:	232d      	movs	r3, #45	; 0x2d
 80186a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80186a4:	4b90      	ldr	r3, [pc, #576]	; (80188e8 <_printf_float+0x2b0>)
 80186a6:	4891      	ldr	r0, [pc, #580]	; (80188ec <_printf_float+0x2b4>)
 80186a8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80186ac:	bf94      	ite	ls
 80186ae:	4698      	movls	r8, r3
 80186b0:	4680      	movhi	r8, r0
 80186b2:	2303      	movs	r3, #3
 80186b4:	6123      	str	r3, [r4, #16]
 80186b6:	f022 0204 	bic.w	r2, r2, #4
 80186ba:	2300      	movs	r3, #0
 80186bc:	6022      	str	r2, [r4, #0]
 80186be:	9304      	str	r3, [sp, #16]
 80186c0:	9700      	str	r7, [sp, #0]
 80186c2:	4633      	mov	r3, r6
 80186c4:	aa09      	add	r2, sp, #36	; 0x24
 80186c6:	4621      	mov	r1, r4
 80186c8:	4628      	mov	r0, r5
 80186ca:	f000 f9d3 	bl	8018a74 <_printf_common>
 80186ce:	3001      	adds	r0, #1
 80186d0:	f040 808a 	bne.w	80187e8 <_printf_float+0x1b0>
 80186d4:	f04f 30ff 	mov.w	r0, #4294967295
 80186d8:	b00b      	add	sp, #44	; 0x2c
 80186da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186de:	eeb4 0b40 	vcmp.f64	d0, d0
 80186e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186e6:	d709      	bvc.n	80186fc <_printf_float+0xc4>
 80186e8:	ee10 3a90 	vmov	r3, s1
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	bfbc      	itt	lt
 80186f0:	232d      	movlt	r3, #45	; 0x2d
 80186f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80186f6:	487e      	ldr	r0, [pc, #504]	; (80188f0 <_printf_float+0x2b8>)
 80186f8:	4b7e      	ldr	r3, [pc, #504]	; (80188f4 <_printf_float+0x2bc>)
 80186fa:	e7d5      	b.n	80186a8 <_printf_float+0x70>
 80186fc:	6863      	ldr	r3, [r4, #4]
 80186fe:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8018702:	9104      	str	r1, [sp, #16]
 8018704:	1c59      	adds	r1, r3, #1
 8018706:	d13c      	bne.n	8018782 <_printf_float+0x14a>
 8018708:	2306      	movs	r3, #6
 801870a:	6063      	str	r3, [r4, #4]
 801870c:	2300      	movs	r3, #0
 801870e:	9303      	str	r3, [sp, #12]
 8018710:	ab08      	add	r3, sp, #32
 8018712:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8018716:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801871a:	ab07      	add	r3, sp, #28
 801871c:	6861      	ldr	r1, [r4, #4]
 801871e:	9300      	str	r3, [sp, #0]
 8018720:	6022      	str	r2, [r4, #0]
 8018722:	f10d 031b 	add.w	r3, sp, #27
 8018726:	4628      	mov	r0, r5
 8018728:	f7ff fef6 	bl	8018518 <__cvt>
 801872c:	9b04      	ldr	r3, [sp, #16]
 801872e:	9907      	ldr	r1, [sp, #28]
 8018730:	2b47      	cmp	r3, #71	; 0x47
 8018732:	4680      	mov	r8, r0
 8018734:	d108      	bne.n	8018748 <_printf_float+0x110>
 8018736:	1cc8      	adds	r0, r1, #3
 8018738:	db02      	blt.n	8018740 <_printf_float+0x108>
 801873a:	6863      	ldr	r3, [r4, #4]
 801873c:	4299      	cmp	r1, r3
 801873e:	dd41      	ble.n	80187c4 <_printf_float+0x18c>
 8018740:	f1a9 0902 	sub.w	r9, r9, #2
 8018744:	fa5f f989 	uxtb.w	r9, r9
 8018748:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801874c:	d820      	bhi.n	8018790 <_printf_float+0x158>
 801874e:	3901      	subs	r1, #1
 8018750:	464a      	mov	r2, r9
 8018752:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8018756:	9107      	str	r1, [sp, #28]
 8018758:	f7ff ff30 	bl	80185bc <__exponent>
 801875c:	9a08      	ldr	r2, [sp, #32]
 801875e:	9004      	str	r0, [sp, #16]
 8018760:	1813      	adds	r3, r2, r0
 8018762:	2a01      	cmp	r2, #1
 8018764:	6123      	str	r3, [r4, #16]
 8018766:	dc02      	bgt.n	801876e <_printf_float+0x136>
 8018768:	6822      	ldr	r2, [r4, #0]
 801876a:	07d2      	lsls	r2, r2, #31
 801876c:	d501      	bpl.n	8018772 <_printf_float+0x13a>
 801876e:	3301      	adds	r3, #1
 8018770:	6123      	str	r3, [r4, #16]
 8018772:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8018776:	2b00      	cmp	r3, #0
 8018778:	d0a2      	beq.n	80186c0 <_printf_float+0x88>
 801877a:	232d      	movs	r3, #45	; 0x2d
 801877c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018780:	e79e      	b.n	80186c0 <_printf_float+0x88>
 8018782:	9904      	ldr	r1, [sp, #16]
 8018784:	2947      	cmp	r1, #71	; 0x47
 8018786:	d1c1      	bne.n	801870c <_printf_float+0xd4>
 8018788:	2b00      	cmp	r3, #0
 801878a:	d1bf      	bne.n	801870c <_printf_float+0xd4>
 801878c:	2301      	movs	r3, #1
 801878e:	e7bc      	b.n	801870a <_printf_float+0xd2>
 8018790:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8018794:	d118      	bne.n	80187c8 <_printf_float+0x190>
 8018796:	2900      	cmp	r1, #0
 8018798:	6863      	ldr	r3, [r4, #4]
 801879a:	dd0b      	ble.n	80187b4 <_printf_float+0x17c>
 801879c:	6121      	str	r1, [r4, #16]
 801879e:	b913      	cbnz	r3, 80187a6 <_printf_float+0x16e>
 80187a0:	6822      	ldr	r2, [r4, #0]
 80187a2:	07d0      	lsls	r0, r2, #31
 80187a4:	d502      	bpl.n	80187ac <_printf_float+0x174>
 80187a6:	3301      	adds	r3, #1
 80187a8:	440b      	add	r3, r1
 80187aa:	6123      	str	r3, [r4, #16]
 80187ac:	2300      	movs	r3, #0
 80187ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80187b0:	9304      	str	r3, [sp, #16]
 80187b2:	e7de      	b.n	8018772 <_printf_float+0x13a>
 80187b4:	b913      	cbnz	r3, 80187bc <_printf_float+0x184>
 80187b6:	6822      	ldr	r2, [r4, #0]
 80187b8:	07d2      	lsls	r2, r2, #31
 80187ba:	d501      	bpl.n	80187c0 <_printf_float+0x188>
 80187bc:	3302      	adds	r3, #2
 80187be:	e7f4      	b.n	80187aa <_printf_float+0x172>
 80187c0:	2301      	movs	r3, #1
 80187c2:	e7f2      	b.n	80187aa <_printf_float+0x172>
 80187c4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80187c8:	9b08      	ldr	r3, [sp, #32]
 80187ca:	4299      	cmp	r1, r3
 80187cc:	db05      	blt.n	80187da <_printf_float+0x1a2>
 80187ce:	6823      	ldr	r3, [r4, #0]
 80187d0:	6121      	str	r1, [r4, #16]
 80187d2:	07d8      	lsls	r0, r3, #31
 80187d4:	d5ea      	bpl.n	80187ac <_printf_float+0x174>
 80187d6:	1c4b      	adds	r3, r1, #1
 80187d8:	e7e7      	b.n	80187aa <_printf_float+0x172>
 80187da:	2900      	cmp	r1, #0
 80187dc:	bfd4      	ite	le
 80187de:	f1c1 0202 	rsble	r2, r1, #2
 80187e2:	2201      	movgt	r2, #1
 80187e4:	4413      	add	r3, r2
 80187e6:	e7e0      	b.n	80187aa <_printf_float+0x172>
 80187e8:	6823      	ldr	r3, [r4, #0]
 80187ea:	055a      	lsls	r2, r3, #21
 80187ec:	d407      	bmi.n	80187fe <_printf_float+0x1c6>
 80187ee:	6923      	ldr	r3, [r4, #16]
 80187f0:	4642      	mov	r2, r8
 80187f2:	4631      	mov	r1, r6
 80187f4:	4628      	mov	r0, r5
 80187f6:	47b8      	blx	r7
 80187f8:	3001      	adds	r0, #1
 80187fa:	d12a      	bne.n	8018852 <_printf_float+0x21a>
 80187fc:	e76a      	b.n	80186d4 <_printf_float+0x9c>
 80187fe:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8018802:	f240 80e2 	bls.w	80189ca <_printf_float+0x392>
 8018806:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801880a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801880e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018812:	d133      	bne.n	801887c <_printf_float+0x244>
 8018814:	4a38      	ldr	r2, [pc, #224]	; (80188f8 <_printf_float+0x2c0>)
 8018816:	2301      	movs	r3, #1
 8018818:	4631      	mov	r1, r6
 801881a:	4628      	mov	r0, r5
 801881c:	47b8      	blx	r7
 801881e:	3001      	adds	r0, #1
 8018820:	f43f af58 	beq.w	80186d4 <_printf_float+0x9c>
 8018824:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8018828:	429a      	cmp	r2, r3
 801882a:	db02      	blt.n	8018832 <_printf_float+0x1fa>
 801882c:	6823      	ldr	r3, [r4, #0]
 801882e:	07d8      	lsls	r0, r3, #31
 8018830:	d50f      	bpl.n	8018852 <_printf_float+0x21a>
 8018832:	4653      	mov	r3, sl
 8018834:	465a      	mov	r2, fp
 8018836:	4631      	mov	r1, r6
 8018838:	4628      	mov	r0, r5
 801883a:	47b8      	blx	r7
 801883c:	3001      	adds	r0, #1
 801883e:	f43f af49 	beq.w	80186d4 <_printf_float+0x9c>
 8018842:	f04f 0800 	mov.w	r8, #0
 8018846:	f104 091a 	add.w	r9, r4, #26
 801884a:	9b08      	ldr	r3, [sp, #32]
 801884c:	3b01      	subs	r3, #1
 801884e:	4543      	cmp	r3, r8
 8018850:	dc09      	bgt.n	8018866 <_printf_float+0x22e>
 8018852:	6823      	ldr	r3, [r4, #0]
 8018854:	079b      	lsls	r3, r3, #30
 8018856:	f100 8108 	bmi.w	8018a6a <_printf_float+0x432>
 801885a:	68e0      	ldr	r0, [r4, #12]
 801885c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801885e:	4298      	cmp	r0, r3
 8018860:	bfb8      	it	lt
 8018862:	4618      	movlt	r0, r3
 8018864:	e738      	b.n	80186d8 <_printf_float+0xa0>
 8018866:	2301      	movs	r3, #1
 8018868:	464a      	mov	r2, r9
 801886a:	4631      	mov	r1, r6
 801886c:	4628      	mov	r0, r5
 801886e:	47b8      	blx	r7
 8018870:	3001      	adds	r0, #1
 8018872:	f43f af2f 	beq.w	80186d4 <_printf_float+0x9c>
 8018876:	f108 0801 	add.w	r8, r8, #1
 801887a:	e7e6      	b.n	801884a <_printf_float+0x212>
 801887c:	9b07      	ldr	r3, [sp, #28]
 801887e:	2b00      	cmp	r3, #0
 8018880:	dc3c      	bgt.n	80188fc <_printf_float+0x2c4>
 8018882:	4a1d      	ldr	r2, [pc, #116]	; (80188f8 <_printf_float+0x2c0>)
 8018884:	2301      	movs	r3, #1
 8018886:	4631      	mov	r1, r6
 8018888:	4628      	mov	r0, r5
 801888a:	47b8      	blx	r7
 801888c:	3001      	adds	r0, #1
 801888e:	f43f af21 	beq.w	80186d4 <_printf_float+0x9c>
 8018892:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8018896:	4313      	orrs	r3, r2
 8018898:	d102      	bne.n	80188a0 <_printf_float+0x268>
 801889a:	6823      	ldr	r3, [r4, #0]
 801889c:	07d9      	lsls	r1, r3, #31
 801889e:	d5d8      	bpl.n	8018852 <_printf_float+0x21a>
 80188a0:	4653      	mov	r3, sl
 80188a2:	465a      	mov	r2, fp
 80188a4:	4631      	mov	r1, r6
 80188a6:	4628      	mov	r0, r5
 80188a8:	47b8      	blx	r7
 80188aa:	3001      	adds	r0, #1
 80188ac:	f43f af12 	beq.w	80186d4 <_printf_float+0x9c>
 80188b0:	f04f 0900 	mov.w	r9, #0
 80188b4:	f104 0a1a 	add.w	sl, r4, #26
 80188b8:	9b07      	ldr	r3, [sp, #28]
 80188ba:	425b      	negs	r3, r3
 80188bc:	454b      	cmp	r3, r9
 80188be:	dc01      	bgt.n	80188c4 <_printf_float+0x28c>
 80188c0:	9b08      	ldr	r3, [sp, #32]
 80188c2:	e795      	b.n	80187f0 <_printf_float+0x1b8>
 80188c4:	2301      	movs	r3, #1
 80188c6:	4652      	mov	r2, sl
 80188c8:	4631      	mov	r1, r6
 80188ca:	4628      	mov	r0, r5
 80188cc:	47b8      	blx	r7
 80188ce:	3001      	adds	r0, #1
 80188d0:	f43f af00 	beq.w	80186d4 <_printf_float+0x9c>
 80188d4:	f109 0901 	add.w	r9, r9, #1
 80188d8:	e7ee      	b.n	80188b8 <_printf_float+0x280>
 80188da:	bf00      	nop
 80188dc:	f3af 8000 	nop.w
 80188e0:	ffffffff 	.word	0xffffffff
 80188e4:	7fefffff 	.word	0x7fefffff
 80188e8:	08032ffc 	.word	0x08032ffc
 80188ec:	08033000 	.word	0x08033000
 80188f0:	08033008 	.word	0x08033008
 80188f4:	08033004 	.word	0x08033004
 80188f8:	0803300c 	.word	0x0803300c
 80188fc:	9a08      	ldr	r2, [sp, #32]
 80188fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8018900:	429a      	cmp	r2, r3
 8018902:	bfa8      	it	ge
 8018904:	461a      	movge	r2, r3
 8018906:	2a00      	cmp	r2, #0
 8018908:	4691      	mov	r9, r2
 801890a:	dc38      	bgt.n	801897e <_printf_float+0x346>
 801890c:	2300      	movs	r3, #0
 801890e:	9305      	str	r3, [sp, #20]
 8018910:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018914:	f104 021a 	add.w	r2, r4, #26
 8018918:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801891a:	9905      	ldr	r1, [sp, #20]
 801891c:	9304      	str	r3, [sp, #16]
 801891e:	eba3 0309 	sub.w	r3, r3, r9
 8018922:	428b      	cmp	r3, r1
 8018924:	dc33      	bgt.n	801898e <_printf_float+0x356>
 8018926:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801892a:	429a      	cmp	r2, r3
 801892c:	db3c      	blt.n	80189a8 <_printf_float+0x370>
 801892e:	6823      	ldr	r3, [r4, #0]
 8018930:	07da      	lsls	r2, r3, #31
 8018932:	d439      	bmi.n	80189a8 <_printf_float+0x370>
 8018934:	9b08      	ldr	r3, [sp, #32]
 8018936:	9a04      	ldr	r2, [sp, #16]
 8018938:	9907      	ldr	r1, [sp, #28]
 801893a:	1a9a      	subs	r2, r3, r2
 801893c:	eba3 0901 	sub.w	r9, r3, r1
 8018940:	4591      	cmp	r9, r2
 8018942:	bfa8      	it	ge
 8018944:	4691      	movge	r9, r2
 8018946:	f1b9 0f00 	cmp.w	r9, #0
 801894a:	dc35      	bgt.n	80189b8 <_printf_float+0x380>
 801894c:	f04f 0800 	mov.w	r8, #0
 8018950:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018954:	f104 0a1a 	add.w	sl, r4, #26
 8018958:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801895c:	1a9b      	subs	r3, r3, r2
 801895e:	eba3 0309 	sub.w	r3, r3, r9
 8018962:	4543      	cmp	r3, r8
 8018964:	f77f af75 	ble.w	8018852 <_printf_float+0x21a>
 8018968:	2301      	movs	r3, #1
 801896a:	4652      	mov	r2, sl
 801896c:	4631      	mov	r1, r6
 801896e:	4628      	mov	r0, r5
 8018970:	47b8      	blx	r7
 8018972:	3001      	adds	r0, #1
 8018974:	f43f aeae 	beq.w	80186d4 <_printf_float+0x9c>
 8018978:	f108 0801 	add.w	r8, r8, #1
 801897c:	e7ec      	b.n	8018958 <_printf_float+0x320>
 801897e:	4613      	mov	r3, r2
 8018980:	4631      	mov	r1, r6
 8018982:	4642      	mov	r2, r8
 8018984:	4628      	mov	r0, r5
 8018986:	47b8      	blx	r7
 8018988:	3001      	adds	r0, #1
 801898a:	d1bf      	bne.n	801890c <_printf_float+0x2d4>
 801898c:	e6a2      	b.n	80186d4 <_printf_float+0x9c>
 801898e:	2301      	movs	r3, #1
 8018990:	4631      	mov	r1, r6
 8018992:	4628      	mov	r0, r5
 8018994:	9204      	str	r2, [sp, #16]
 8018996:	47b8      	blx	r7
 8018998:	3001      	adds	r0, #1
 801899a:	f43f ae9b 	beq.w	80186d4 <_printf_float+0x9c>
 801899e:	9b05      	ldr	r3, [sp, #20]
 80189a0:	9a04      	ldr	r2, [sp, #16]
 80189a2:	3301      	adds	r3, #1
 80189a4:	9305      	str	r3, [sp, #20]
 80189a6:	e7b7      	b.n	8018918 <_printf_float+0x2e0>
 80189a8:	4653      	mov	r3, sl
 80189aa:	465a      	mov	r2, fp
 80189ac:	4631      	mov	r1, r6
 80189ae:	4628      	mov	r0, r5
 80189b0:	47b8      	blx	r7
 80189b2:	3001      	adds	r0, #1
 80189b4:	d1be      	bne.n	8018934 <_printf_float+0x2fc>
 80189b6:	e68d      	b.n	80186d4 <_printf_float+0x9c>
 80189b8:	9a04      	ldr	r2, [sp, #16]
 80189ba:	464b      	mov	r3, r9
 80189bc:	4442      	add	r2, r8
 80189be:	4631      	mov	r1, r6
 80189c0:	4628      	mov	r0, r5
 80189c2:	47b8      	blx	r7
 80189c4:	3001      	adds	r0, #1
 80189c6:	d1c1      	bne.n	801894c <_printf_float+0x314>
 80189c8:	e684      	b.n	80186d4 <_printf_float+0x9c>
 80189ca:	9a08      	ldr	r2, [sp, #32]
 80189cc:	2a01      	cmp	r2, #1
 80189ce:	dc01      	bgt.n	80189d4 <_printf_float+0x39c>
 80189d0:	07db      	lsls	r3, r3, #31
 80189d2:	d537      	bpl.n	8018a44 <_printf_float+0x40c>
 80189d4:	2301      	movs	r3, #1
 80189d6:	4642      	mov	r2, r8
 80189d8:	4631      	mov	r1, r6
 80189da:	4628      	mov	r0, r5
 80189dc:	47b8      	blx	r7
 80189de:	3001      	adds	r0, #1
 80189e0:	f43f ae78 	beq.w	80186d4 <_printf_float+0x9c>
 80189e4:	4653      	mov	r3, sl
 80189e6:	465a      	mov	r2, fp
 80189e8:	4631      	mov	r1, r6
 80189ea:	4628      	mov	r0, r5
 80189ec:	47b8      	blx	r7
 80189ee:	3001      	adds	r0, #1
 80189f0:	f43f ae70 	beq.w	80186d4 <_printf_float+0x9c>
 80189f4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80189f8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80189fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a00:	d01b      	beq.n	8018a3a <_printf_float+0x402>
 8018a02:	9b08      	ldr	r3, [sp, #32]
 8018a04:	f108 0201 	add.w	r2, r8, #1
 8018a08:	3b01      	subs	r3, #1
 8018a0a:	4631      	mov	r1, r6
 8018a0c:	4628      	mov	r0, r5
 8018a0e:	47b8      	blx	r7
 8018a10:	3001      	adds	r0, #1
 8018a12:	d10e      	bne.n	8018a32 <_printf_float+0x3fa>
 8018a14:	e65e      	b.n	80186d4 <_printf_float+0x9c>
 8018a16:	2301      	movs	r3, #1
 8018a18:	464a      	mov	r2, r9
 8018a1a:	4631      	mov	r1, r6
 8018a1c:	4628      	mov	r0, r5
 8018a1e:	47b8      	blx	r7
 8018a20:	3001      	adds	r0, #1
 8018a22:	f43f ae57 	beq.w	80186d4 <_printf_float+0x9c>
 8018a26:	f108 0801 	add.w	r8, r8, #1
 8018a2a:	9b08      	ldr	r3, [sp, #32]
 8018a2c:	3b01      	subs	r3, #1
 8018a2e:	4543      	cmp	r3, r8
 8018a30:	dcf1      	bgt.n	8018a16 <_printf_float+0x3de>
 8018a32:	9b04      	ldr	r3, [sp, #16]
 8018a34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8018a38:	e6db      	b.n	80187f2 <_printf_float+0x1ba>
 8018a3a:	f04f 0800 	mov.w	r8, #0
 8018a3e:	f104 091a 	add.w	r9, r4, #26
 8018a42:	e7f2      	b.n	8018a2a <_printf_float+0x3f2>
 8018a44:	2301      	movs	r3, #1
 8018a46:	4642      	mov	r2, r8
 8018a48:	e7df      	b.n	8018a0a <_printf_float+0x3d2>
 8018a4a:	2301      	movs	r3, #1
 8018a4c:	464a      	mov	r2, r9
 8018a4e:	4631      	mov	r1, r6
 8018a50:	4628      	mov	r0, r5
 8018a52:	47b8      	blx	r7
 8018a54:	3001      	adds	r0, #1
 8018a56:	f43f ae3d 	beq.w	80186d4 <_printf_float+0x9c>
 8018a5a:	f108 0801 	add.w	r8, r8, #1
 8018a5e:	68e3      	ldr	r3, [r4, #12]
 8018a60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018a62:	1a5b      	subs	r3, r3, r1
 8018a64:	4543      	cmp	r3, r8
 8018a66:	dcf0      	bgt.n	8018a4a <_printf_float+0x412>
 8018a68:	e6f7      	b.n	801885a <_printf_float+0x222>
 8018a6a:	f04f 0800 	mov.w	r8, #0
 8018a6e:	f104 0919 	add.w	r9, r4, #25
 8018a72:	e7f4      	b.n	8018a5e <_printf_float+0x426>

08018a74 <_printf_common>:
 8018a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a78:	4616      	mov	r6, r2
 8018a7a:	4699      	mov	r9, r3
 8018a7c:	688a      	ldr	r2, [r1, #8]
 8018a7e:	690b      	ldr	r3, [r1, #16]
 8018a80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018a84:	4293      	cmp	r3, r2
 8018a86:	bfb8      	it	lt
 8018a88:	4613      	movlt	r3, r2
 8018a8a:	6033      	str	r3, [r6, #0]
 8018a8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018a90:	4607      	mov	r7, r0
 8018a92:	460c      	mov	r4, r1
 8018a94:	b10a      	cbz	r2, 8018a9a <_printf_common+0x26>
 8018a96:	3301      	adds	r3, #1
 8018a98:	6033      	str	r3, [r6, #0]
 8018a9a:	6823      	ldr	r3, [r4, #0]
 8018a9c:	0699      	lsls	r1, r3, #26
 8018a9e:	bf42      	ittt	mi
 8018aa0:	6833      	ldrmi	r3, [r6, #0]
 8018aa2:	3302      	addmi	r3, #2
 8018aa4:	6033      	strmi	r3, [r6, #0]
 8018aa6:	6825      	ldr	r5, [r4, #0]
 8018aa8:	f015 0506 	ands.w	r5, r5, #6
 8018aac:	d106      	bne.n	8018abc <_printf_common+0x48>
 8018aae:	f104 0a19 	add.w	sl, r4, #25
 8018ab2:	68e3      	ldr	r3, [r4, #12]
 8018ab4:	6832      	ldr	r2, [r6, #0]
 8018ab6:	1a9b      	subs	r3, r3, r2
 8018ab8:	42ab      	cmp	r3, r5
 8018aba:	dc26      	bgt.n	8018b0a <_printf_common+0x96>
 8018abc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018ac0:	1e13      	subs	r3, r2, #0
 8018ac2:	6822      	ldr	r2, [r4, #0]
 8018ac4:	bf18      	it	ne
 8018ac6:	2301      	movne	r3, #1
 8018ac8:	0692      	lsls	r2, r2, #26
 8018aca:	d42b      	bmi.n	8018b24 <_printf_common+0xb0>
 8018acc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018ad0:	4649      	mov	r1, r9
 8018ad2:	4638      	mov	r0, r7
 8018ad4:	47c0      	blx	r8
 8018ad6:	3001      	adds	r0, #1
 8018ad8:	d01e      	beq.n	8018b18 <_printf_common+0xa4>
 8018ada:	6823      	ldr	r3, [r4, #0]
 8018adc:	68e5      	ldr	r5, [r4, #12]
 8018ade:	6832      	ldr	r2, [r6, #0]
 8018ae0:	f003 0306 	and.w	r3, r3, #6
 8018ae4:	2b04      	cmp	r3, #4
 8018ae6:	bf08      	it	eq
 8018ae8:	1aad      	subeq	r5, r5, r2
 8018aea:	68a3      	ldr	r3, [r4, #8]
 8018aec:	6922      	ldr	r2, [r4, #16]
 8018aee:	bf0c      	ite	eq
 8018af0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018af4:	2500      	movne	r5, #0
 8018af6:	4293      	cmp	r3, r2
 8018af8:	bfc4      	itt	gt
 8018afa:	1a9b      	subgt	r3, r3, r2
 8018afc:	18ed      	addgt	r5, r5, r3
 8018afe:	2600      	movs	r6, #0
 8018b00:	341a      	adds	r4, #26
 8018b02:	42b5      	cmp	r5, r6
 8018b04:	d11a      	bne.n	8018b3c <_printf_common+0xc8>
 8018b06:	2000      	movs	r0, #0
 8018b08:	e008      	b.n	8018b1c <_printf_common+0xa8>
 8018b0a:	2301      	movs	r3, #1
 8018b0c:	4652      	mov	r2, sl
 8018b0e:	4649      	mov	r1, r9
 8018b10:	4638      	mov	r0, r7
 8018b12:	47c0      	blx	r8
 8018b14:	3001      	adds	r0, #1
 8018b16:	d103      	bne.n	8018b20 <_printf_common+0xac>
 8018b18:	f04f 30ff 	mov.w	r0, #4294967295
 8018b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b20:	3501      	adds	r5, #1
 8018b22:	e7c6      	b.n	8018ab2 <_printf_common+0x3e>
 8018b24:	18e1      	adds	r1, r4, r3
 8018b26:	1c5a      	adds	r2, r3, #1
 8018b28:	2030      	movs	r0, #48	; 0x30
 8018b2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018b2e:	4422      	add	r2, r4
 8018b30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018b34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018b38:	3302      	adds	r3, #2
 8018b3a:	e7c7      	b.n	8018acc <_printf_common+0x58>
 8018b3c:	2301      	movs	r3, #1
 8018b3e:	4622      	mov	r2, r4
 8018b40:	4649      	mov	r1, r9
 8018b42:	4638      	mov	r0, r7
 8018b44:	47c0      	blx	r8
 8018b46:	3001      	adds	r0, #1
 8018b48:	d0e6      	beq.n	8018b18 <_printf_common+0xa4>
 8018b4a:	3601      	adds	r6, #1
 8018b4c:	e7d9      	b.n	8018b02 <_printf_common+0x8e>
	...

08018b50 <_printf_i>:
 8018b50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018b54:	7e0f      	ldrb	r7, [r1, #24]
 8018b56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018b58:	2f78      	cmp	r7, #120	; 0x78
 8018b5a:	4691      	mov	r9, r2
 8018b5c:	4680      	mov	r8, r0
 8018b5e:	460c      	mov	r4, r1
 8018b60:	469a      	mov	sl, r3
 8018b62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8018b66:	d807      	bhi.n	8018b78 <_printf_i+0x28>
 8018b68:	2f62      	cmp	r7, #98	; 0x62
 8018b6a:	d80a      	bhi.n	8018b82 <_printf_i+0x32>
 8018b6c:	2f00      	cmp	r7, #0
 8018b6e:	f000 80d8 	beq.w	8018d22 <_printf_i+0x1d2>
 8018b72:	2f58      	cmp	r7, #88	; 0x58
 8018b74:	f000 80a3 	beq.w	8018cbe <_printf_i+0x16e>
 8018b78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018b7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018b80:	e03a      	b.n	8018bf8 <_printf_i+0xa8>
 8018b82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018b86:	2b15      	cmp	r3, #21
 8018b88:	d8f6      	bhi.n	8018b78 <_printf_i+0x28>
 8018b8a:	a101      	add	r1, pc, #4	; (adr r1, 8018b90 <_printf_i+0x40>)
 8018b8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018b90:	08018be9 	.word	0x08018be9
 8018b94:	08018bfd 	.word	0x08018bfd
 8018b98:	08018b79 	.word	0x08018b79
 8018b9c:	08018b79 	.word	0x08018b79
 8018ba0:	08018b79 	.word	0x08018b79
 8018ba4:	08018b79 	.word	0x08018b79
 8018ba8:	08018bfd 	.word	0x08018bfd
 8018bac:	08018b79 	.word	0x08018b79
 8018bb0:	08018b79 	.word	0x08018b79
 8018bb4:	08018b79 	.word	0x08018b79
 8018bb8:	08018b79 	.word	0x08018b79
 8018bbc:	08018d09 	.word	0x08018d09
 8018bc0:	08018c2d 	.word	0x08018c2d
 8018bc4:	08018ceb 	.word	0x08018ceb
 8018bc8:	08018b79 	.word	0x08018b79
 8018bcc:	08018b79 	.word	0x08018b79
 8018bd0:	08018d2b 	.word	0x08018d2b
 8018bd4:	08018b79 	.word	0x08018b79
 8018bd8:	08018c2d 	.word	0x08018c2d
 8018bdc:	08018b79 	.word	0x08018b79
 8018be0:	08018b79 	.word	0x08018b79
 8018be4:	08018cf3 	.word	0x08018cf3
 8018be8:	682b      	ldr	r3, [r5, #0]
 8018bea:	1d1a      	adds	r2, r3, #4
 8018bec:	681b      	ldr	r3, [r3, #0]
 8018bee:	602a      	str	r2, [r5, #0]
 8018bf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018bf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018bf8:	2301      	movs	r3, #1
 8018bfa:	e0a3      	b.n	8018d44 <_printf_i+0x1f4>
 8018bfc:	6820      	ldr	r0, [r4, #0]
 8018bfe:	6829      	ldr	r1, [r5, #0]
 8018c00:	0606      	lsls	r6, r0, #24
 8018c02:	f101 0304 	add.w	r3, r1, #4
 8018c06:	d50a      	bpl.n	8018c1e <_printf_i+0xce>
 8018c08:	680e      	ldr	r6, [r1, #0]
 8018c0a:	602b      	str	r3, [r5, #0]
 8018c0c:	2e00      	cmp	r6, #0
 8018c0e:	da03      	bge.n	8018c18 <_printf_i+0xc8>
 8018c10:	232d      	movs	r3, #45	; 0x2d
 8018c12:	4276      	negs	r6, r6
 8018c14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018c18:	485e      	ldr	r0, [pc, #376]	; (8018d94 <_printf_i+0x244>)
 8018c1a:	230a      	movs	r3, #10
 8018c1c:	e019      	b.n	8018c52 <_printf_i+0x102>
 8018c1e:	680e      	ldr	r6, [r1, #0]
 8018c20:	602b      	str	r3, [r5, #0]
 8018c22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018c26:	bf18      	it	ne
 8018c28:	b236      	sxthne	r6, r6
 8018c2a:	e7ef      	b.n	8018c0c <_printf_i+0xbc>
 8018c2c:	682b      	ldr	r3, [r5, #0]
 8018c2e:	6820      	ldr	r0, [r4, #0]
 8018c30:	1d19      	adds	r1, r3, #4
 8018c32:	6029      	str	r1, [r5, #0]
 8018c34:	0601      	lsls	r1, r0, #24
 8018c36:	d501      	bpl.n	8018c3c <_printf_i+0xec>
 8018c38:	681e      	ldr	r6, [r3, #0]
 8018c3a:	e002      	b.n	8018c42 <_printf_i+0xf2>
 8018c3c:	0646      	lsls	r6, r0, #25
 8018c3e:	d5fb      	bpl.n	8018c38 <_printf_i+0xe8>
 8018c40:	881e      	ldrh	r6, [r3, #0]
 8018c42:	4854      	ldr	r0, [pc, #336]	; (8018d94 <_printf_i+0x244>)
 8018c44:	2f6f      	cmp	r7, #111	; 0x6f
 8018c46:	bf0c      	ite	eq
 8018c48:	2308      	moveq	r3, #8
 8018c4a:	230a      	movne	r3, #10
 8018c4c:	2100      	movs	r1, #0
 8018c4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018c52:	6865      	ldr	r5, [r4, #4]
 8018c54:	60a5      	str	r5, [r4, #8]
 8018c56:	2d00      	cmp	r5, #0
 8018c58:	bfa2      	ittt	ge
 8018c5a:	6821      	ldrge	r1, [r4, #0]
 8018c5c:	f021 0104 	bicge.w	r1, r1, #4
 8018c60:	6021      	strge	r1, [r4, #0]
 8018c62:	b90e      	cbnz	r6, 8018c68 <_printf_i+0x118>
 8018c64:	2d00      	cmp	r5, #0
 8018c66:	d04d      	beq.n	8018d04 <_printf_i+0x1b4>
 8018c68:	4615      	mov	r5, r2
 8018c6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8018c6e:	fb03 6711 	mls	r7, r3, r1, r6
 8018c72:	5dc7      	ldrb	r7, [r0, r7]
 8018c74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018c78:	4637      	mov	r7, r6
 8018c7a:	42bb      	cmp	r3, r7
 8018c7c:	460e      	mov	r6, r1
 8018c7e:	d9f4      	bls.n	8018c6a <_printf_i+0x11a>
 8018c80:	2b08      	cmp	r3, #8
 8018c82:	d10b      	bne.n	8018c9c <_printf_i+0x14c>
 8018c84:	6823      	ldr	r3, [r4, #0]
 8018c86:	07de      	lsls	r6, r3, #31
 8018c88:	d508      	bpl.n	8018c9c <_printf_i+0x14c>
 8018c8a:	6923      	ldr	r3, [r4, #16]
 8018c8c:	6861      	ldr	r1, [r4, #4]
 8018c8e:	4299      	cmp	r1, r3
 8018c90:	bfde      	ittt	le
 8018c92:	2330      	movle	r3, #48	; 0x30
 8018c94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018c98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018c9c:	1b52      	subs	r2, r2, r5
 8018c9e:	6122      	str	r2, [r4, #16]
 8018ca0:	f8cd a000 	str.w	sl, [sp]
 8018ca4:	464b      	mov	r3, r9
 8018ca6:	aa03      	add	r2, sp, #12
 8018ca8:	4621      	mov	r1, r4
 8018caa:	4640      	mov	r0, r8
 8018cac:	f7ff fee2 	bl	8018a74 <_printf_common>
 8018cb0:	3001      	adds	r0, #1
 8018cb2:	d14c      	bne.n	8018d4e <_printf_i+0x1fe>
 8018cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8018cb8:	b004      	add	sp, #16
 8018cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018cbe:	4835      	ldr	r0, [pc, #212]	; (8018d94 <_printf_i+0x244>)
 8018cc0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8018cc4:	6829      	ldr	r1, [r5, #0]
 8018cc6:	6823      	ldr	r3, [r4, #0]
 8018cc8:	f851 6b04 	ldr.w	r6, [r1], #4
 8018ccc:	6029      	str	r1, [r5, #0]
 8018cce:	061d      	lsls	r5, r3, #24
 8018cd0:	d514      	bpl.n	8018cfc <_printf_i+0x1ac>
 8018cd2:	07df      	lsls	r7, r3, #31
 8018cd4:	bf44      	itt	mi
 8018cd6:	f043 0320 	orrmi.w	r3, r3, #32
 8018cda:	6023      	strmi	r3, [r4, #0]
 8018cdc:	b91e      	cbnz	r6, 8018ce6 <_printf_i+0x196>
 8018cde:	6823      	ldr	r3, [r4, #0]
 8018ce0:	f023 0320 	bic.w	r3, r3, #32
 8018ce4:	6023      	str	r3, [r4, #0]
 8018ce6:	2310      	movs	r3, #16
 8018ce8:	e7b0      	b.n	8018c4c <_printf_i+0xfc>
 8018cea:	6823      	ldr	r3, [r4, #0]
 8018cec:	f043 0320 	orr.w	r3, r3, #32
 8018cf0:	6023      	str	r3, [r4, #0]
 8018cf2:	2378      	movs	r3, #120	; 0x78
 8018cf4:	4828      	ldr	r0, [pc, #160]	; (8018d98 <_printf_i+0x248>)
 8018cf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018cfa:	e7e3      	b.n	8018cc4 <_printf_i+0x174>
 8018cfc:	0659      	lsls	r1, r3, #25
 8018cfe:	bf48      	it	mi
 8018d00:	b2b6      	uxthmi	r6, r6
 8018d02:	e7e6      	b.n	8018cd2 <_printf_i+0x182>
 8018d04:	4615      	mov	r5, r2
 8018d06:	e7bb      	b.n	8018c80 <_printf_i+0x130>
 8018d08:	682b      	ldr	r3, [r5, #0]
 8018d0a:	6826      	ldr	r6, [r4, #0]
 8018d0c:	6961      	ldr	r1, [r4, #20]
 8018d0e:	1d18      	adds	r0, r3, #4
 8018d10:	6028      	str	r0, [r5, #0]
 8018d12:	0635      	lsls	r5, r6, #24
 8018d14:	681b      	ldr	r3, [r3, #0]
 8018d16:	d501      	bpl.n	8018d1c <_printf_i+0x1cc>
 8018d18:	6019      	str	r1, [r3, #0]
 8018d1a:	e002      	b.n	8018d22 <_printf_i+0x1d2>
 8018d1c:	0670      	lsls	r0, r6, #25
 8018d1e:	d5fb      	bpl.n	8018d18 <_printf_i+0x1c8>
 8018d20:	8019      	strh	r1, [r3, #0]
 8018d22:	2300      	movs	r3, #0
 8018d24:	6123      	str	r3, [r4, #16]
 8018d26:	4615      	mov	r5, r2
 8018d28:	e7ba      	b.n	8018ca0 <_printf_i+0x150>
 8018d2a:	682b      	ldr	r3, [r5, #0]
 8018d2c:	1d1a      	adds	r2, r3, #4
 8018d2e:	602a      	str	r2, [r5, #0]
 8018d30:	681d      	ldr	r5, [r3, #0]
 8018d32:	6862      	ldr	r2, [r4, #4]
 8018d34:	2100      	movs	r1, #0
 8018d36:	4628      	mov	r0, r5
 8018d38:	f7e7 faea 	bl	8000310 <memchr>
 8018d3c:	b108      	cbz	r0, 8018d42 <_printf_i+0x1f2>
 8018d3e:	1b40      	subs	r0, r0, r5
 8018d40:	6060      	str	r0, [r4, #4]
 8018d42:	6863      	ldr	r3, [r4, #4]
 8018d44:	6123      	str	r3, [r4, #16]
 8018d46:	2300      	movs	r3, #0
 8018d48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018d4c:	e7a8      	b.n	8018ca0 <_printf_i+0x150>
 8018d4e:	6923      	ldr	r3, [r4, #16]
 8018d50:	462a      	mov	r2, r5
 8018d52:	4649      	mov	r1, r9
 8018d54:	4640      	mov	r0, r8
 8018d56:	47d0      	blx	sl
 8018d58:	3001      	adds	r0, #1
 8018d5a:	d0ab      	beq.n	8018cb4 <_printf_i+0x164>
 8018d5c:	6823      	ldr	r3, [r4, #0]
 8018d5e:	079b      	lsls	r3, r3, #30
 8018d60:	d413      	bmi.n	8018d8a <_printf_i+0x23a>
 8018d62:	68e0      	ldr	r0, [r4, #12]
 8018d64:	9b03      	ldr	r3, [sp, #12]
 8018d66:	4298      	cmp	r0, r3
 8018d68:	bfb8      	it	lt
 8018d6a:	4618      	movlt	r0, r3
 8018d6c:	e7a4      	b.n	8018cb8 <_printf_i+0x168>
 8018d6e:	2301      	movs	r3, #1
 8018d70:	4632      	mov	r2, r6
 8018d72:	4649      	mov	r1, r9
 8018d74:	4640      	mov	r0, r8
 8018d76:	47d0      	blx	sl
 8018d78:	3001      	adds	r0, #1
 8018d7a:	d09b      	beq.n	8018cb4 <_printf_i+0x164>
 8018d7c:	3501      	adds	r5, #1
 8018d7e:	68e3      	ldr	r3, [r4, #12]
 8018d80:	9903      	ldr	r1, [sp, #12]
 8018d82:	1a5b      	subs	r3, r3, r1
 8018d84:	42ab      	cmp	r3, r5
 8018d86:	dcf2      	bgt.n	8018d6e <_printf_i+0x21e>
 8018d88:	e7eb      	b.n	8018d62 <_printf_i+0x212>
 8018d8a:	2500      	movs	r5, #0
 8018d8c:	f104 0619 	add.w	r6, r4, #25
 8018d90:	e7f5      	b.n	8018d7e <_printf_i+0x22e>
 8018d92:	bf00      	nop
 8018d94:	0803300e 	.word	0x0803300e
 8018d98:	0803301f 	.word	0x0803301f

08018d9c <iprintf>:
 8018d9c:	b40f      	push	{r0, r1, r2, r3}
 8018d9e:	4b0a      	ldr	r3, [pc, #40]	; (8018dc8 <iprintf+0x2c>)
 8018da0:	b513      	push	{r0, r1, r4, lr}
 8018da2:	681c      	ldr	r4, [r3, #0]
 8018da4:	b124      	cbz	r4, 8018db0 <iprintf+0x14>
 8018da6:	69a3      	ldr	r3, [r4, #24]
 8018da8:	b913      	cbnz	r3, 8018db0 <iprintf+0x14>
 8018daa:	4620      	mov	r0, r4
 8018dac:	f001 fd52 	bl	801a854 <__sinit>
 8018db0:	ab05      	add	r3, sp, #20
 8018db2:	9a04      	ldr	r2, [sp, #16]
 8018db4:	68a1      	ldr	r1, [r4, #8]
 8018db6:	9301      	str	r3, [sp, #4]
 8018db8:	4620      	mov	r0, r4
 8018dba:	f002 fe8d 	bl	801bad8 <_vfiprintf_r>
 8018dbe:	b002      	add	sp, #8
 8018dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018dc4:	b004      	add	sp, #16
 8018dc6:	4770      	bx	lr
 8018dc8:	24000060 	.word	0x24000060

08018dcc <_sbrk_r>:
 8018dcc:	b538      	push	{r3, r4, r5, lr}
 8018dce:	4d06      	ldr	r5, [pc, #24]	; (8018de8 <_sbrk_r+0x1c>)
 8018dd0:	2300      	movs	r3, #0
 8018dd2:	4604      	mov	r4, r0
 8018dd4:	4608      	mov	r0, r1
 8018dd6:	602b      	str	r3, [r5, #0]
 8018dd8:	f7ea f9be 	bl	8003158 <_sbrk>
 8018ddc:	1c43      	adds	r3, r0, #1
 8018dde:	d102      	bne.n	8018de6 <_sbrk_r+0x1a>
 8018de0:	682b      	ldr	r3, [r5, #0]
 8018de2:	b103      	cbz	r3, 8018de6 <_sbrk_r+0x1a>
 8018de4:	6023      	str	r3, [r4, #0]
 8018de6:	bd38      	pop	{r3, r4, r5, pc}
 8018de8:	240311c8 	.word	0x240311c8

08018dec <sulp>:
 8018dec:	b570      	push	{r4, r5, r6, lr}
 8018dee:	4604      	mov	r4, r0
 8018df0:	460d      	mov	r5, r1
 8018df2:	4616      	mov	r6, r2
 8018df4:	ec45 4b10 	vmov	d0, r4, r5
 8018df8:	f002 fce2 	bl	801b7c0 <__ulp>
 8018dfc:	b17e      	cbz	r6, 8018e1e <sulp+0x32>
 8018dfe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8018e02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8018e06:	2b00      	cmp	r3, #0
 8018e08:	dd09      	ble.n	8018e1e <sulp+0x32>
 8018e0a:	051b      	lsls	r3, r3, #20
 8018e0c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8018e10:	2000      	movs	r0, #0
 8018e12:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8018e16:	ec41 0b17 	vmov	d7, r0, r1
 8018e1a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8018e1e:	bd70      	pop	{r4, r5, r6, pc}

08018e20 <_strtod_l>:
 8018e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e24:	ed2d 8b0e 	vpush	{d8-d14}
 8018e28:	b097      	sub	sp, #92	; 0x5c
 8018e2a:	461f      	mov	r7, r3
 8018e2c:	2300      	movs	r3, #0
 8018e2e:	9312      	str	r3, [sp, #72]	; 0x48
 8018e30:	4ba1      	ldr	r3, [pc, #644]	; (80190b8 <_strtod_l+0x298>)
 8018e32:	920d      	str	r2, [sp, #52]	; 0x34
 8018e34:	681b      	ldr	r3, [r3, #0]
 8018e36:	9307      	str	r3, [sp, #28]
 8018e38:	4604      	mov	r4, r0
 8018e3a:	4618      	mov	r0, r3
 8018e3c:	468b      	mov	fp, r1
 8018e3e:	f7e7 fa59 	bl	80002f4 <strlen>
 8018e42:	f04f 0800 	mov.w	r8, #0
 8018e46:	4605      	mov	r5, r0
 8018e48:	f04f 0900 	mov.w	r9, #0
 8018e4c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8018e50:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018e52:	7813      	ldrb	r3, [r2, #0]
 8018e54:	2b2b      	cmp	r3, #43	; 0x2b
 8018e56:	d04d      	beq.n	8018ef4 <_strtod_l+0xd4>
 8018e58:	d83a      	bhi.n	8018ed0 <_strtod_l+0xb0>
 8018e5a:	2b0d      	cmp	r3, #13
 8018e5c:	d833      	bhi.n	8018ec6 <_strtod_l+0xa6>
 8018e5e:	2b08      	cmp	r3, #8
 8018e60:	d833      	bhi.n	8018eca <_strtod_l+0xaa>
 8018e62:	2b00      	cmp	r3, #0
 8018e64:	d03d      	beq.n	8018ee2 <_strtod_l+0xc2>
 8018e66:	2300      	movs	r3, #0
 8018e68:	9308      	str	r3, [sp, #32]
 8018e6a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8018e6c:	7833      	ldrb	r3, [r6, #0]
 8018e6e:	2b30      	cmp	r3, #48	; 0x30
 8018e70:	f040 80b0 	bne.w	8018fd4 <_strtod_l+0x1b4>
 8018e74:	7873      	ldrb	r3, [r6, #1]
 8018e76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018e7a:	2b58      	cmp	r3, #88	; 0x58
 8018e7c:	d167      	bne.n	8018f4e <_strtod_l+0x12e>
 8018e7e:	9b08      	ldr	r3, [sp, #32]
 8018e80:	9301      	str	r3, [sp, #4]
 8018e82:	ab12      	add	r3, sp, #72	; 0x48
 8018e84:	9702      	str	r7, [sp, #8]
 8018e86:	9300      	str	r3, [sp, #0]
 8018e88:	4a8c      	ldr	r2, [pc, #560]	; (80190bc <_strtod_l+0x29c>)
 8018e8a:	ab13      	add	r3, sp, #76	; 0x4c
 8018e8c:	a911      	add	r1, sp, #68	; 0x44
 8018e8e:	4620      	mov	r0, r4
 8018e90:	f001 fdf6 	bl	801aa80 <__gethex>
 8018e94:	f010 0507 	ands.w	r5, r0, #7
 8018e98:	4607      	mov	r7, r0
 8018e9a:	d005      	beq.n	8018ea8 <_strtod_l+0x88>
 8018e9c:	2d06      	cmp	r5, #6
 8018e9e:	d12b      	bne.n	8018ef8 <_strtod_l+0xd8>
 8018ea0:	3601      	adds	r6, #1
 8018ea2:	2300      	movs	r3, #0
 8018ea4:	9611      	str	r6, [sp, #68]	; 0x44
 8018ea6:	9308      	str	r3, [sp, #32]
 8018ea8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	f040 854e 	bne.w	801994c <_strtod_l+0xb2c>
 8018eb0:	9b08      	ldr	r3, [sp, #32]
 8018eb2:	b1e3      	cbz	r3, 8018eee <_strtod_l+0xce>
 8018eb4:	ec49 8b17 	vmov	d7, r8, r9
 8018eb8:	eeb1 0b47 	vneg.f64	d0, d7
 8018ebc:	b017      	add	sp, #92	; 0x5c
 8018ebe:	ecbd 8b0e 	vpop	{d8-d14}
 8018ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ec6:	2b20      	cmp	r3, #32
 8018ec8:	d1cd      	bne.n	8018e66 <_strtod_l+0x46>
 8018eca:	3201      	adds	r2, #1
 8018ecc:	9211      	str	r2, [sp, #68]	; 0x44
 8018ece:	e7bf      	b.n	8018e50 <_strtod_l+0x30>
 8018ed0:	2b2d      	cmp	r3, #45	; 0x2d
 8018ed2:	d1c8      	bne.n	8018e66 <_strtod_l+0x46>
 8018ed4:	2301      	movs	r3, #1
 8018ed6:	9308      	str	r3, [sp, #32]
 8018ed8:	1c53      	adds	r3, r2, #1
 8018eda:	9311      	str	r3, [sp, #68]	; 0x44
 8018edc:	7853      	ldrb	r3, [r2, #1]
 8018ede:	2b00      	cmp	r3, #0
 8018ee0:	d1c3      	bne.n	8018e6a <_strtod_l+0x4a>
 8018ee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018ee4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8018ee8:	2b00      	cmp	r3, #0
 8018eea:	f040 852d 	bne.w	8019948 <_strtod_l+0xb28>
 8018eee:	ec49 8b10 	vmov	d0, r8, r9
 8018ef2:	e7e3      	b.n	8018ebc <_strtod_l+0x9c>
 8018ef4:	2300      	movs	r3, #0
 8018ef6:	e7ee      	b.n	8018ed6 <_strtod_l+0xb6>
 8018ef8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018efa:	b13a      	cbz	r2, 8018f0c <_strtod_l+0xec>
 8018efc:	2135      	movs	r1, #53	; 0x35
 8018efe:	a814      	add	r0, sp, #80	; 0x50
 8018f00:	f002 fd66 	bl	801b9d0 <__copybits>
 8018f04:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018f06:	4620      	mov	r0, r4
 8018f08:	f002 f928 	bl	801b15c <_Bfree>
 8018f0c:	3d01      	subs	r5, #1
 8018f0e:	2d04      	cmp	r5, #4
 8018f10:	d806      	bhi.n	8018f20 <_strtod_l+0x100>
 8018f12:	e8df f005 	tbb	[pc, r5]
 8018f16:	030a      	.short	0x030a
 8018f18:	1714      	.short	0x1714
 8018f1a:	0a          	.byte	0x0a
 8018f1b:	00          	.byte	0x00
 8018f1c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8018f20:	073f      	lsls	r7, r7, #28
 8018f22:	d5c1      	bpl.n	8018ea8 <_strtod_l+0x88>
 8018f24:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8018f28:	e7be      	b.n	8018ea8 <_strtod_l+0x88>
 8018f2a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8018f2e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018f30:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8018f34:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8018f38:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8018f3c:	e7f0      	b.n	8018f20 <_strtod_l+0x100>
 8018f3e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 80190c0 <_strtod_l+0x2a0>
 8018f42:	e7ed      	b.n	8018f20 <_strtod_l+0x100>
 8018f44:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8018f48:	f04f 38ff 	mov.w	r8, #4294967295
 8018f4c:	e7e8      	b.n	8018f20 <_strtod_l+0x100>
 8018f4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018f50:	1c5a      	adds	r2, r3, #1
 8018f52:	9211      	str	r2, [sp, #68]	; 0x44
 8018f54:	785b      	ldrb	r3, [r3, #1]
 8018f56:	2b30      	cmp	r3, #48	; 0x30
 8018f58:	d0f9      	beq.n	8018f4e <_strtod_l+0x12e>
 8018f5a:	2b00      	cmp	r3, #0
 8018f5c:	d0a4      	beq.n	8018ea8 <_strtod_l+0x88>
 8018f5e:	2301      	movs	r3, #1
 8018f60:	f04f 0a00 	mov.w	sl, #0
 8018f64:	9304      	str	r3, [sp, #16]
 8018f66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018f68:	930a      	str	r3, [sp, #40]	; 0x28
 8018f6a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8018f6e:	f8cd a018 	str.w	sl, [sp, #24]
 8018f72:	220a      	movs	r2, #10
 8018f74:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018f76:	7807      	ldrb	r7, [r0, #0]
 8018f78:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8018f7c:	b2d9      	uxtb	r1, r3
 8018f7e:	2909      	cmp	r1, #9
 8018f80:	d92a      	bls.n	8018fd8 <_strtod_l+0x1b8>
 8018f82:	9907      	ldr	r1, [sp, #28]
 8018f84:	462a      	mov	r2, r5
 8018f86:	f002 ff22 	bl	801bdce <strncmp>
 8018f8a:	2800      	cmp	r0, #0
 8018f8c:	d033      	beq.n	8018ff6 <_strtod_l+0x1d6>
 8018f8e:	2000      	movs	r0, #0
 8018f90:	9b06      	ldr	r3, [sp, #24]
 8018f92:	463a      	mov	r2, r7
 8018f94:	4601      	mov	r1, r0
 8018f96:	4607      	mov	r7, r0
 8018f98:	2a65      	cmp	r2, #101	; 0x65
 8018f9a:	d001      	beq.n	8018fa0 <_strtod_l+0x180>
 8018f9c:	2a45      	cmp	r2, #69	; 0x45
 8018f9e:	d117      	bne.n	8018fd0 <_strtod_l+0x1b0>
 8018fa0:	b91b      	cbnz	r3, 8018faa <_strtod_l+0x18a>
 8018fa2:	9b04      	ldr	r3, [sp, #16]
 8018fa4:	4303      	orrs	r3, r0
 8018fa6:	d09c      	beq.n	8018ee2 <_strtod_l+0xc2>
 8018fa8:	2300      	movs	r3, #0
 8018faa:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8018fae:	f10b 0201 	add.w	r2, fp, #1
 8018fb2:	9211      	str	r2, [sp, #68]	; 0x44
 8018fb4:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8018fb8:	2a2b      	cmp	r2, #43	; 0x2b
 8018fba:	d071      	beq.n	80190a0 <_strtod_l+0x280>
 8018fbc:	2a2d      	cmp	r2, #45	; 0x2d
 8018fbe:	d077      	beq.n	80190b0 <_strtod_l+0x290>
 8018fc0:	f04f 0e00 	mov.w	lr, #0
 8018fc4:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8018fc8:	2d09      	cmp	r5, #9
 8018fca:	d97f      	bls.n	80190cc <_strtod_l+0x2ac>
 8018fcc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8018fd0:	2500      	movs	r5, #0
 8018fd2:	e09b      	b.n	801910c <_strtod_l+0x2ec>
 8018fd4:	2300      	movs	r3, #0
 8018fd6:	e7c3      	b.n	8018f60 <_strtod_l+0x140>
 8018fd8:	9906      	ldr	r1, [sp, #24]
 8018fda:	2908      	cmp	r1, #8
 8018fdc:	bfdd      	ittte	le
 8018fde:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8018fe0:	fb02 3301 	mlale	r3, r2, r1, r3
 8018fe4:	9309      	strle	r3, [sp, #36]	; 0x24
 8018fe6:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8018fea:	9b06      	ldr	r3, [sp, #24]
 8018fec:	3001      	adds	r0, #1
 8018fee:	3301      	adds	r3, #1
 8018ff0:	9306      	str	r3, [sp, #24]
 8018ff2:	9011      	str	r0, [sp, #68]	; 0x44
 8018ff4:	e7be      	b.n	8018f74 <_strtod_l+0x154>
 8018ff6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018ff8:	195a      	adds	r2, r3, r5
 8018ffa:	9211      	str	r2, [sp, #68]	; 0x44
 8018ffc:	5d5a      	ldrb	r2, [r3, r5]
 8018ffe:	9b06      	ldr	r3, [sp, #24]
 8019000:	b3a3      	cbz	r3, 801906c <_strtod_l+0x24c>
 8019002:	4607      	mov	r7, r0
 8019004:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8019008:	2909      	cmp	r1, #9
 801900a:	d912      	bls.n	8019032 <_strtod_l+0x212>
 801900c:	2101      	movs	r1, #1
 801900e:	e7c3      	b.n	8018f98 <_strtod_l+0x178>
 8019010:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019012:	1c5a      	adds	r2, r3, #1
 8019014:	9211      	str	r2, [sp, #68]	; 0x44
 8019016:	785a      	ldrb	r2, [r3, #1]
 8019018:	3001      	adds	r0, #1
 801901a:	2a30      	cmp	r2, #48	; 0x30
 801901c:	d0f8      	beq.n	8019010 <_strtod_l+0x1f0>
 801901e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8019022:	2b08      	cmp	r3, #8
 8019024:	f200 8497 	bhi.w	8019956 <_strtod_l+0xb36>
 8019028:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801902a:	930a      	str	r3, [sp, #40]	; 0x28
 801902c:	4607      	mov	r7, r0
 801902e:	2000      	movs	r0, #0
 8019030:	4603      	mov	r3, r0
 8019032:	3a30      	subs	r2, #48	; 0x30
 8019034:	f100 0101 	add.w	r1, r0, #1
 8019038:	d012      	beq.n	8019060 <_strtod_l+0x240>
 801903a:	440f      	add	r7, r1
 801903c:	eb00 0c03 	add.w	ip, r0, r3
 8019040:	4619      	mov	r1, r3
 8019042:	250a      	movs	r5, #10
 8019044:	4561      	cmp	r1, ip
 8019046:	d113      	bne.n	8019070 <_strtod_l+0x250>
 8019048:	1819      	adds	r1, r3, r0
 801904a:	2908      	cmp	r1, #8
 801904c:	f103 0301 	add.w	r3, r3, #1
 8019050:	4403      	add	r3, r0
 8019052:	dc1c      	bgt.n	801908e <_strtod_l+0x26e>
 8019054:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019056:	210a      	movs	r1, #10
 8019058:	fb01 2200 	mla	r2, r1, r0, r2
 801905c:	9209      	str	r2, [sp, #36]	; 0x24
 801905e:	2100      	movs	r1, #0
 8019060:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019062:	1c50      	adds	r0, r2, #1
 8019064:	9011      	str	r0, [sp, #68]	; 0x44
 8019066:	7852      	ldrb	r2, [r2, #1]
 8019068:	4608      	mov	r0, r1
 801906a:	e7cb      	b.n	8019004 <_strtod_l+0x1e4>
 801906c:	9806      	ldr	r0, [sp, #24]
 801906e:	e7d4      	b.n	801901a <_strtod_l+0x1fa>
 8019070:	2908      	cmp	r1, #8
 8019072:	dc04      	bgt.n	801907e <_strtod_l+0x25e>
 8019074:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8019076:	436e      	muls	r6, r5
 8019078:	9609      	str	r6, [sp, #36]	; 0x24
 801907a:	3101      	adds	r1, #1
 801907c:	e7e2      	b.n	8019044 <_strtod_l+0x224>
 801907e:	f101 0e01 	add.w	lr, r1, #1
 8019082:	f1be 0f10 	cmp.w	lr, #16
 8019086:	bfd8      	it	le
 8019088:	fb05 fa0a 	mulle.w	sl, r5, sl
 801908c:	e7f5      	b.n	801907a <_strtod_l+0x25a>
 801908e:	2b10      	cmp	r3, #16
 8019090:	bfdc      	itt	le
 8019092:	210a      	movle	r1, #10
 8019094:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8019098:	e7e1      	b.n	801905e <_strtod_l+0x23e>
 801909a:	2700      	movs	r7, #0
 801909c:	2101      	movs	r1, #1
 801909e:	e780      	b.n	8018fa2 <_strtod_l+0x182>
 80190a0:	f04f 0e00 	mov.w	lr, #0
 80190a4:	f10b 0202 	add.w	r2, fp, #2
 80190a8:	9211      	str	r2, [sp, #68]	; 0x44
 80190aa:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80190ae:	e789      	b.n	8018fc4 <_strtod_l+0x1a4>
 80190b0:	f04f 0e01 	mov.w	lr, #1
 80190b4:	e7f6      	b.n	80190a4 <_strtod_l+0x284>
 80190b6:	bf00      	nop
 80190b8:	08033374 	.word	0x08033374
 80190bc:	08033030 	.word	0x08033030
 80190c0:	7ff00000 	.word	0x7ff00000
 80190c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80190c6:	1c55      	adds	r5, r2, #1
 80190c8:	9511      	str	r5, [sp, #68]	; 0x44
 80190ca:	7852      	ldrb	r2, [r2, #1]
 80190cc:	2a30      	cmp	r2, #48	; 0x30
 80190ce:	d0f9      	beq.n	80190c4 <_strtod_l+0x2a4>
 80190d0:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80190d4:	2d08      	cmp	r5, #8
 80190d6:	f63f af7b 	bhi.w	8018fd0 <_strtod_l+0x1b0>
 80190da:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80190de:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80190e0:	9207      	str	r2, [sp, #28]
 80190e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80190e4:	1c55      	adds	r5, r2, #1
 80190e6:	9511      	str	r5, [sp, #68]	; 0x44
 80190e8:	7852      	ldrb	r2, [r2, #1]
 80190ea:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80190ee:	2e09      	cmp	r6, #9
 80190f0:	d937      	bls.n	8019162 <_strtod_l+0x342>
 80190f2:	9e07      	ldr	r6, [sp, #28]
 80190f4:	1bad      	subs	r5, r5, r6
 80190f6:	2d08      	cmp	r5, #8
 80190f8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80190fc:	dc02      	bgt.n	8019104 <_strtod_l+0x2e4>
 80190fe:	4565      	cmp	r5, ip
 8019100:	bfa8      	it	ge
 8019102:	4665      	movge	r5, ip
 8019104:	f1be 0f00 	cmp.w	lr, #0
 8019108:	d000      	beq.n	801910c <_strtod_l+0x2ec>
 801910a:	426d      	negs	r5, r5
 801910c:	2b00      	cmp	r3, #0
 801910e:	d14d      	bne.n	80191ac <_strtod_l+0x38c>
 8019110:	9b04      	ldr	r3, [sp, #16]
 8019112:	4303      	orrs	r3, r0
 8019114:	f47f aec8 	bne.w	8018ea8 <_strtod_l+0x88>
 8019118:	2900      	cmp	r1, #0
 801911a:	f47f aee2 	bne.w	8018ee2 <_strtod_l+0xc2>
 801911e:	2a69      	cmp	r2, #105	; 0x69
 8019120:	d027      	beq.n	8019172 <_strtod_l+0x352>
 8019122:	dc24      	bgt.n	801916e <_strtod_l+0x34e>
 8019124:	2a49      	cmp	r2, #73	; 0x49
 8019126:	d024      	beq.n	8019172 <_strtod_l+0x352>
 8019128:	2a4e      	cmp	r2, #78	; 0x4e
 801912a:	f47f aeda 	bne.w	8018ee2 <_strtod_l+0xc2>
 801912e:	4996      	ldr	r1, [pc, #600]	; (8019388 <_strtod_l+0x568>)
 8019130:	a811      	add	r0, sp, #68	; 0x44
 8019132:	f001 fefd 	bl	801af30 <__match>
 8019136:	2800      	cmp	r0, #0
 8019138:	f43f aed3 	beq.w	8018ee2 <_strtod_l+0xc2>
 801913c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801913e:	781b      	ldrb	r3, [r3, #0]
 8019140:	2b28      	cmp	r3, #40	; 0x28
 8019142:	d12d      	bne.n	80191a0 <_strtod_l+0x380>
 8019144:	4991      	ldr	r1, [pc, #580]	; (801938c <_strtod_l+0x56c>)
 8019146:	aa14      	add	r2, sp, #80	; 0x50
 8019148:	a811      	add	r0, sp, #68	; 0x44
 801914a:	f001 ff05 	bl	801af58 <__hexnan>
 801914e:	2805      	cmp	r0, #5
 8019150:	d126      	bne.n	80191a0 <_strtod_l+0x380>
 8019152:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019154:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8019158:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801915c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8019160:	e6a2      	b.n	8018ea8 <_strtod_l+0x88>
 8019162:	250a      	movs	r5, #10
 8019164:	fb05 250c 	mla	r5, r5, ip, r2
 8019168:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 801916c:	e7b9      	b.n	80190e2 <_strtod_l+0x2c2>
 801916e:	2a6e      	cmp	r2, #110	; 0x6e
 8019170:	e7db      	b.n	801912a <_strtod_l+0x30a>
 8019172:	4987      	ldr	r1, [pc, #540]	; (8019390 <_strtod_l+0x570>)
 8019174:	a811      	add	r0, sp, #68	; 0x44
 8019176:	f001 fedb 	bl	801af30 <__match>
 801917a:	2800      	cmp	r0, #0
 801917c:	f43f aeb1 	beq.w	8018ee2 <_strtod_l+0xc2>
 8019180:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019182:	4984      	ldr	r1, [pc, #528]	; (8019394 <_strtod_l+0x574>)
 8019184:	3b01      	subs	r3, #1
 8019186:	a811      	add	r0, sp, #68	; 0x44
 8019188:	9311      	str	r3, [sp, #68]	; 0x44
 801918a:	f001 fed1 	bl	801af30 <__match>
 801918e:	b910      	cbnz	r0, 8019196 <_strtod_l+0x376>
 8019190:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019192:	3301      	adds	r3, #1
 8019194:	9311      	str	r3, [sp, #68]	; 0x44
 8019196:	f8df 9210 	ldr.w	r9, [pc, #528]	; 80193a8 <_strtod_l+0x588>
 801919a:	f04f 0800 	mov.w	r8, #0
 801919e:	e683      	b.n	8018ea8 <_strtod_l+0x88>
 80191a0:	487d      	ldr	r0, [pc, #500]	; (8019398 <_strtod_l+0x578>)
 80191a2:	f002 fdc9 	bl	801bd38 <nan>
 80191a6:	ec59 8b10 	vmov	r8, r9, d0
 80191aa:	e67d      	b.n	8018ea8 <_strtod_l+0x88>
 80191ac:	1bea      	subs	r2, r5, r7
 80191ae:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 80191b2:	9207      	str	r2, [sp, #28]
 80191b4:	9a06      	ldr	r2, [sp, #24]
 80191b6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80191ba:	2a00      	cmp	r2, #0
 80191bc:	bf08      	it	eq
 80191be:	461a      	moveq	r2, r3
 80191c0:	2b10      	cmp	r3, #16
 80191c2:	9206      	str	r2, [sp, #24]
 80191c4:	461a      	mov	r2, r3
 80191c6:	bfa8      	it	ge
 80191c8:	2210      	movge	r2, #16
 80191ca:	2b09      	cmp	r3, #9
 80191cc:	ec59 8b17 	vmov	r8, r9, d7
 80191d0:	dd0c      	ble.n	80191ec <_strtod_l+0x3cc>
 80191d2:	4972      	ldr	r1, [pc, #456]	; (801939c <_strtod_l+0x57c>)
 80191d4:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80191d8:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 80191dc:	ee06 aa90 	vmov	s13, sl
 80191e0:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80191e4:	eea7 6b05 	vfma.f64	d6, d7, d5
 80191e8:	ec59 8b16 	vmov	r8, r9, d6
 80191ec:	2b0f      	cmp	r3, #15
 80191ee:	dc36      	bgt.n	801925e <_strtod_l+0x43e>
 80191f0:	9907      	ldr	r1, [sp, #28]
 80191f2:	2900      	cmp	r1, #0
 80191f4:	f43f ae58 	beq.w	8018ea8 <_strtod_l+0x88>
 80191f8:	dd23      	ble.n	8019242 <_strtod_l+0x422>
 80191fa:	2916      	cmp	r1, #22
 80191fc:	dc0b      	bgt.n	8019216 <_strtod_l+0x3f6>
 80191fe:	4b67      	ldr	r3, [pc, #412]	; (801939c <_strtod_l+0x57c>)
 8019200:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8019204:	ed93 7b00 	vldr	d7, [r3]
 8019208:	ec49 8b16 	vmov	d6, r8, r9
 801920c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019210:	ec59 8b17 	vmov	r8, r9, d7
 8019214:	e648      	b.n	8018ea8 <_strtod_l+0x88>
 8019216:	9807      	ldr	r0, [sp, #28]
 8019218:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801921c:	4281      	cmp	r1, r0
 801921e:	db1e      	blt.n	801925e <_strtod_l+0x43e>
 8019220:	4a5e      	ldr	r2, [pc, #376]	; (801939c <_strtod_l+0x57c>)
 8019222:	f1c3 030f 	rsb	r3, r3, #15
 8019226:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801922a:	ed91 7b00 	vldr	d7, [r1]
 801922e:	ec49 8b16 	vmov	d6, r8, r9
 8019232:	1ac3      	subs	r3, r0, r3
 8019234:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8019238:	ee27 7b06 	vmul.f64	d7, d7, d6
 801923c:	ed92 6b00 	vldr	d6, [r2]
 8019240:	e7e4      	b.n	801920c <_strtod_l+0x3ec>
 8019242:	9907      	ldr	r1, [sp, #28]
 8019244:	3116      	adds	r1, #22
 8019246:	db0a      	blt.n	801925e <_strtod_l+0x43e>
 8019248:	4b54      	ldr	r3, [pc, #336]	; (801939c <_strtod_l+0x57c>)
 801924a:	1b7d      	subs	r5, r7, r5
 801924c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8019250:	ed95 7b00 	vldr	d7, [r5]
 8019254:	ec49 8b16 	vmov	d6, r8, r9
 8019258:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801925c:	e7d8      	b.n	8019210 <_strtod_l+0x3f0>
 801925e:	9907      	ldr	r1, [sp, #28]
 8019260:	1a9a      	subs	r2, r3, r2
 8019262:	440a      	add	r2, r1
 8019264:	2a00      	cmp	r2, #0
 8019266:	dd6f      	ble.n	8019348 <_strtod_l+0x528>
 8019268:	f012 000f 	ands.w	r0, r2, #15
 801926c:	d00a      	beq.n	8019284 <_strtod_l+0x464>
 801926e:	494b      	ldr	r1, [pc, #300]	; (801939c <_strtod_l+0x57c>)
 8019270:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8019274:	ed91 7b00 	vldr	d7, [r1]
 8019278:	ec49 8b16 	vmov	d6, r8, r9
 801927c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019280:	ec59 8b17 	vmov	r8, r9, d7
 8019284:	f032 020f 	bics.w	r2, r2, #15
 8019288:	d04f      	beq.n	801932a <_strtod_l+0x50a>
 801928a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801928e:	dd22      	ble.n	80192d6 <_strtod_l+0x4b6>
 8019290:	2500      	movs	r5, #0
 8019292:	462e      	mov	r6, r5
 8019294:	9506      	str	r5, [sp, #24]
 8019296:	462f      	mov	r7, r5
 8019298:	2322      	movs	r3, #34	; 0x22
 801929a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 80193a8 <_strtod_l+0x588>
 801929e:	6023      	str	r3, [r4, #0]
 80192a0:	f04f 0800 	mov.w	r8, #0
 80192a4:	9b06      	ldr	r3, [sp, #24]
 80192a6:	2b00      	cmp	r3, #0
 80192a8:	f43f adfe 	beq.w	8018ea8 <_strtod_l+0x88>
 80192ac:	9912      	ldr	r1, [sp, #72]	; 0x48
 80192ae:	4620      	mov	r0, r4
 80192b0:	f001 ff54 	bl	801b15c <_Bfree>
 80192b4:	4639      	mov	r1, r7
 80192b6:	4620      	mov	r0, r4
 80192b8:	f001 ff50 	bl	801b15c <_Bfree>
 80192bc:	4631      	mov	r1, r6
 80192be:	4620      	mov	r0, r4
 80192c0:	f001 ff4c 	bl	801b15c <_Bfree>
 80192c4:	9906      	ldr	r1, [sp, #24]
 80192c6:	4620      	mov	r0, r4
 80192c8:	f001 ff48 	bl	801b15c <_Bfree>
 80192cc:	4629      	mov	r1, r5
 80192ce:	4620      	mov	r0, r4
 80192d0:	f001 ff44 	bl	801b15c <_Bfree>
 80192d4:	e5e8      	b.n	8018ea8 <_strtod_l+0x88>
 80192d6:	2000      	movs	r0, #0
 80192d8:	ec49 8b17 	vmov	d7, r8, r9
 80192dc:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 80193a0 <_strtod_l+0x580>
 80192e0:	1112      	asrs	r2, r2, #4
 80192e2:	4601      	mov	r1, r0
 80192e4:	2a01      	cmp	r2, #1
 80192e6:	dc23      	bgt.n	8019330 <_strtod_l+0x510>
 80192e8:	b108      	cbz	r0, 80192ee <_strtod_l+0x4ce>
 80192ea:	ec59 8b17 	vmov	r8, r9, d7
 80192ee:	4a2c      	ldr	r2, [pc, #176]	; (80193a0 <_strtod_l+0x580>)
 80192f0:	482c      	ldr	r0, [pc, #176]	; (80193a4 <_strtod_l+0x584>)
 80192f2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80192f6:	ed92 7b00 	vldr	d7, [r2]
 80192fa:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80192fe:	ec49 8b16 	vmov	d6, r8, r9
 8019302:	4a29      	ldr	r2, [pc, #164]	; (80193a8 <_strtod_l+0x588>)
 8019304:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019308:	ee17 1a90 	vmov	r1, s15
 801930c:	400a      	ands	r2, r1
 801930e:	4282      	cmp	r2, r0
 8019310:	ec59 8b17 	vmov	r8, r9, d7
 8019314:	d8bc      	bhi.n	8019290 <_strtod_l+0x470>
 8019316:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801931a:	4282      	cmp	r2, r0
 801931c:	bf86      	itte	hi
 801931e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80193ac <_strtod_l+0x58c>
 8019322:	f04f 38ff 	movhi.w	r8, #4294967295
 8019326:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801932a:	2200      	movs	r2, #0
 801932c:	9204      	str	r2, [sp, #16]
 801932e:	e078      	b.n	8019422 <_strtod_l+0x602>
 8019330:	07d6      	lsls	r6, r2, #31
 8019332:	d504      	bpl.n	801933e <_strtod_l+0x51e>
 8019334:	ed9c 6b00 	vldr	d6, [ip]
 8019338:	2001      	movs	r0, #1
 801933a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801933e:	3101      	adds	r1, #1
 8019340:	1052      	asrs	r2, r2, #1
 8019342:	f10c 0c08 	add.w	ip, ip, #8
 8019346:	e7cd      	b.n	80192e4 <_strtod_l+0x4c4>
 8019348:	d0ef      	beq.n	801932a <_strtod_l+0x50a>
 801934a:	4252      	negs	r2, r2
 801934c:	f012 000f 	ands.w	r0, r2, #15
 8019350:	d00a      	beq.n	8019368 <_strtod_l+0x548>
 8019352:	4912      	ldr	r1, [pc, #72]	; (801939c <_strtod_l+0x57c>)
 8019354:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8019358:	ed91 7b00 	vldr	d7, [r1]
 801935c:	ec49 8b16 	vmov	d6, r8, r9
 8019360:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8019364:	ec59 8b17 	vmov	r8, r9, d7
 8019368:	1112      	asrs	r2, r2, #4
 801936a:	d0de      	beq.n	801932a <_strtod_l+0x50a>
 801936c:	2a1f      	cmp	r2, #31
 801936e:	dd1f      	ble.n	80193b0 <_strtod_l+0x590>
 8019370:	2500      	movs	r5, #0
 8019372:	462e      	mov	r6, r5
 8019374:	9506      	str	r5, [sp, #24]
 8019376:	462f      	mov	r7, r5
 8019378:	2322      	movs	r3, #34	; 0x22
 801937a:	f04f 0800 	mov.w	r8, #0
 801937e:	f04f 0900 	mov.w	r9, #0
 8019382:	6023      	str	r3, [r4, #0]
 8019384:	e78e      	b.n	80192a4 <_strtod_l+0x484>
 8019386:	bf00      	nop
 8019388:	08033009 	.word	0x08033009
 801938c:	08033044 	.word	0x08033044
 8019390:	08033001 	.word	0x08033001
 8019394:	08033234 	.word	0x08033234
 8019398:	0803312f 	.word	0x0803312f
 801939c:	08033410 	.word	0x08033410
 80193a0:	080333e8 	.word	0x080333e8
 80193a4:	7ca00000 	.word	0x7ca00000
 80193a8:	7ff00000 	.word	0x7ff00000
 80193ac:	7fefffff 	.word	0x7fefffff
 80193b0:	f012 0110 	ands.w	r1, r2, #16
 80193b4:	bf18      	it	ne
 80193b6:	216a      	movne	r1, #106	; 0x6a
 80193b8:	9104      	str	r1, [sp, #16]
 80193ba:	ec49 8b17 	vmov	d7, r8, r9
 80193be:	49be      	ldr	r1, [pc, #760]	; (80196b8 <_strtod_l+0x898>)
 80193c0:	2000      	movs	r0, #0
 80193c2:	07d6      	lsls	r6, r2, #31
 80193c4:	d504      	bpl.n	80193d0 <_strtod_l+0x5b0>
 80193c6:	ed91 6b00 	vldr	d6, [r1]
 80193ca:	2001      	movs	r0, #1
 80193cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80193d0:	1052      	asrs	r2, r2, #1
 80193d2:	f101 0108 	add.w	r1, r1, #8
 80193d6:	d1f4      	bne.n	80193c2 <_strtod_l+0x5a2>
 80193d8:	b108      	cbz	r0, 80193de <_strtod_l+0x5be>
 80193da:	ec59 8b17 	vmov	r8, r9, d7
 80193de:	9a04      	ldr	r2, [sp, #16]
 80193e0:	b1c2      	cbz	r2, 8019414 <_strtod_l+0x5f4>
 80193e2:	f3c9 510a 	ubfx	r1, r9, #20, #11
 80193e6:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 80193ea:	2a00      	cmp	r2, #0
 80193ec:	4648      	mov	r0, r9
 80193ee:	dd11      	ble.n	8019414 <_strtod_l+0x5f4>
 80193f0:	2a1f      	cmp	r2, #31
 80193f2:	f340 812e 	ble.w	8019652 <_strtod_l+0x832>
 80193f6:	2a34      	cmp	r2, #52	; 0x34
 80193f8:	bfde      	ittt	le
 80193fa:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 80193fe:	f04f 32ff 	movle.w	r2, #4294967295
 8019402:	fa02 f101 	lslle.w	r1, r2, r1
 8019406:	f04f 0800 	mov.w	r8, #0
 801940a:	bfcc      	ite	gt
 801940c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8019410:	ea01 0900 	andle.w	r9, r1, r0
 8019414:	ec49 8b17 	vmov	d7, r8, r9
 8019418:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801941c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019420:	d0a6      	beq.n	8019370 <_strtod_l+0x550>
 8019422:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019424:	9200      	str	r2, [sp, #0]
 8019426:	990a      	ldr	r1, [sp, #40]	; 0x28
 8019428:	9a06      	ldr	r2, [sp, #24]
 801942a:	4620      	mov	r0, r4
 801942c:	f001 fefe 	bl	801b22c <__s2b>
 8019430:	9006      	str	r0, [sp, #24]
 8019432:	2800      	cmp	r0, #0
 8019434:	f43f af2c 	beq.w	8019290 <_strtod_l+0x470>
 8019438:	9b07      	ldr	r3, [sp, #28]
 801943a:	1b7d      	subs	r5, r7, r5
 801943c:	2b00      	cmp	r3, #0
 801943e:	bfb4      	ite	lt
 8019440:	462b      	movlt	r3, r5
 8019442:	2300      	movge	r3, #0
 8019444:	9309      	str	r3, [sp, #36]	; 0x24
 8019446:	9b07      	ldr	r3, [sp, #28]
 8019448:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8019698 <_strtod_l+0x878>
 801944c:	ed9f ab94 	vldr	d10, [pc, #592]	; 80196a0 <_strtod_l+0x880>
 8019450:	ed9f bb95 	vldr	d11, [pc, #596]	; 80196a8 <_strtod_l+0x888>
 8019454:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019458:	2500      	movs	r5, #0
 801945a:	930c      	str	r3, [sp, #48]	; 0x30
 801945c:	462e      	mov	r6, r5
 801945e:	9b06      	ldr	r3, [sp, #24]
 8019460:	4620      	mov	r0, r4
 8019462:	6859      	ldr	r1, [r3, #4]
 8019464:	f001 fe3a 	bl	801b0dc <_Balloc>
 8019468:	4607      	mov	r7, r0
 801946a:	2800      	cmp	r0, #0
 801946c:	f43f af14 	beq.w	8019298 <_strtod_l+0x478>
 8019470:	9b06      	ldr	r3, [sp, #24]
 8019472:	691a      	ldr	r2, [r3, #16]
 8019474:	3202      	adds	r2, #2
 8019476:	f103 010c 	add.w	r1, r3, #12
 801947a:	0092      	lsls	r2, r2, #2
 801947c:	300c      	adds	r0, #12
 801947e:	f7fe ff55 	bl	801832c <memcpy>
 8019482:	ec49 8b10 	vmov	d0, r8, r9
 8019486:	aa14      	add	r2, sp, #80	; 0x50
 8019488:	a913      	add	r1, sp, #76	; 0x4c
 801948a:	4620      	mov	r0, r4
 801948c:	f002 fa14 	bl	801b8b8 <__d2b>
 8019490:	ec49 8b18 	vmov	d8, r8, r9
 8019494:	9012      	str	r0, [sp, #72]	; 0x48
 8019496:	2800      	cmp	r0, #0
 8019498:	f43f aefe 	beq.w	8019298 <_strtod_l+0x478>
 801949c:	2101      	movs	r1, #1
 801949e:	4620      	mov	r0, r4
 80194a0:	f001 ff5e 	bl	801b360 <__i2b>
 80194a4:	4606      	mov	r6, r0
 80194a6:	2800      	cmp	r0, #0
 80194a8:	f43f aef6 	beq.w	8019298 <_strtod_l+0x478>
 80194ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80194ae:	9914      	ldr	r1, [sp, #80]	; 0x50
 80194b0:	2b00      	cmp	r3, #0
 80194b2:	bfab      	itete	ge
 80194b4:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 80194b6:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 80194b8:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 80194bc:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 80194c0:	bfac      	ite	ge
 80194c2:	eb03 0b02 	addge.w	fp, r3, r2
 80194c6:	eba2 0a03 	sublt.w	sl, r2, r3
 80194ca:	9a04      	ldr	r2, [sp, #16]
 80194cc:	1a9b      	subs	r3, r3, r2
 80194ce:	440b      	add	r3, r1
 80194d0:	4a7a      	ldr	r2, [pc, #488]	; (80196bc <_strtod_l+0x89c>)
 80194d2:	3b01      	subs	r3, #1
 80194d4:	4293      	cmp	r3, r2
 80194d6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80194da:	f280 80cd 	bge.w	8019678 <_strtod_l+0x858>
 80194de:	1ad2      	subs	r2, r2, r3
 80194e0:	2a1f      	cmp	r2, #31
 80194e2:	eba1 0102 	sub.w	r1, r1, r2
 80194e6:	f04f 0001 	mov.w	r0, #1
 80194ea:	f300 80b9 	bgt.w	8019660 <_strtod_l+0x840>
 80194ee:	fa00 f302 	lsl.w	r3, r0, r2
 80194f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80194f4:	2300      	movs	r3, #0
 80194f6:	930a      	str	r3, [sp, #40]	; 0x28
 80194f8:	eb0b 0301 	add.w	r3, fp, r1
 80194fc:	9a04      	ldr	r2, [sp, #16]
 80194fe:	459b      	cmp	fp, r3
 8019500:	448a      	add	sl, r1
 8019502:	4492      	add	sl, r2
 8019504:	465a      	mov	r2, fp
 8019506:	bfa8      	it	ge
 8019508:	461a      	movge	r2, r3
 801950a:	4552      	cmp	r2, sl
 801950c:	bfa8      	it	ge
 801950e:	4652      	movge	r2, sl
 8019510:	2a00      	cmp	r2, #0
 8019512:	bfc2      	ittt	gt
 8019514:	1a9b      	subgt	r3, r3, r2
 8019516:	ebaa 0a02 	subgt.w	sl, sl, r2
 801951a:	ebab 0b02 	subgt.w	fp, fp, r2
 801951e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019520:	2a00      	cmp	r2, #0
 8019522:	dd18      	ble.n	8019556 <_strtod_l+0x736>
 8019524:	4631      	mov	r1, r6
 8019526:	4620      	mov	r0, r4
 8019528:	930f      	str	r3, [sp, #60]	; 0x3c
 801952a:	f001 ffd9 	bl	801b4e0 <__pow5mult>
 801952e:	4606      	mov	r6, r0
 8019530:	2800      	cmp	r0, #0
 8019532:	f43f aeb1 	beq.w	8019298 <_strtod_l+0x478>
 8019536:	4601      	mov	r1, r0
 8019538:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801953a:	4620      	mov	r0, r4
 801953c:	f001 ff26 	bl	801b38c <__multiply>
 8019540:	900e      	str	r0, [sp, #56]	; 0x38
 8019542:	2800      	cmp	r0, #0
 8019544:	f43f aea8 	beq.w	8019298 <_strtod_l+0x478>
 8019548:	9912      	ldr	r1, [sp, #72]	; 0x48
 801954a:	4620      	mov	r0, r4
 801954c:	f001 fe06 	bl	801b15c <_Bfree>
 8019550:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019552:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019554:	9212      	str	r2, [sp, #72]	; 0x48
 8019556:	2b00      	cmp	r3, #0
 8019558:	f300 8093 	bgt.w	8019682 <_strtod_l+0x862>
 801955c:	9b07      	ldr	r3, [sp, #28]
 801955e:	2b00      	cmp	r3, #0
 8019560:	dd08      	ble.n	8019574 <_strtod_l+0x754>
 8019562:	4639      	mov	r1, r7
 8019564:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019566:	4620      	mov	r0, r4
 8019568:	f001 ffba 	bl	801b4e0 <__pow5mult>
 801956c:	4607      	mov	r7, r0
 801956e:	2800      	cmp	r0, #0
 8019570:	f43f ae92 	beq.w	8019298 <_strtod_l+0x478>
 8019574:	f1ba 0f00 	cmp.w	sl, #0
 8019578:	dd08      	ble.n	801958c <_strtod_l+0x76c>
 801957a:	4639      	mov	r1, r7
 801957c:	4652      	mov	r2, sl
 801957e:	4620      	mov	r0, r4
 8019580:	f002 f808 	bl	801b594 <__lshift>
 8019584:	4607      	mov	r7, r0
 8019586:	2800      	cmp	r0, #0
 8019588:	f43f ae86 	beq.w	8019298 <_strtod_l+0x478>
 801958c:	f1bb 0f00 	cmp.w	fp, #0
 8019590:	dd08      	ble.n	80195a4 <_strtod_l+0x784>
 8019592:	4631      	mov	r1, r6
 8019594:	465a      	mov	r2, fp
 8019596:	4620      	mov	r0, r4
 8019598:	f001 fffc 	bl	801b594 <__lshift>
 801959c:	4606      	mov	r6, r0
 801959e:	2800      	cmp	r0, #0
 80195a0:	f43f ae7a 	beq.w	8019298 <_strtod_l+0x478>
 80195a4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80195a6:	463a      	mov	r2, r7
 80195a8:	4620      	mov	r0, r4
 80195aa:	f002 f87f 	bl	801b6ac <__mdiff>
 80195ae:	4605      	mov	r5, r0
 80195b0:	2800      	cmp	r0, #0
 80195b2:	f43f ae71 	beq.w	8019298 <_strtod_l+0x478>
 80195b6:	2300      	movs	r3, #0
 80195b8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80195bc:	60c3      	str	r3, [r0, #12]
 80195be:	4631      	mov	r1, r6
 80195c0:	f002 f858 	bl	801b674 <__mcmp>
 80195c4:	2800      	cmp	r0, #0
 80195c6:	da7d      	bge.n	80196c4 <_strtod_l+0x8a4>
 80195c8:	ea5a 0308 	orrs.w	r3, sl, r8
 80195cc:	f040 80a3 	bne.w	8019716 <_strtod_l+0x8f6>
 80195d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80195d4:	2b00      	cmp	r3, #0
 80195d6:	f040 809e 	bne.w	8019716 <_strtod_l+0x8f6>
 80195da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80195de:	0d1b      	lsrs	r3, r3, #20
 80195e0:	051b      	lsls	r3, r3, #20
 80195e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80195e6:	f240 8096 	bls.w	8019716 <_strtod_l+0x8f6>
 80195ea:	696b      	ldr	r3, [r5, #20]
 80195ec:	b91b      	cbnz	r3, 80195f6 <_strtod_l+0x7d6>
 80195ee:	692b      	ldr	r3, [r5, #16]
 80195f0:	2b01      	cmp	r3, #1
 80195f2:	f340 8090 	ble.w	8019716 <_strtod_l+0x8f6>
 80195f6:	4629      	mov	r1, r5
 80195f8:	2201      	movs	r2, #1
 80195fa:	4620      	mov	r0, r4
 80195fc:	f001 ffca 	bl	801b594 <__lshift>
 8019600:	4631      	mov	r1, r6
 8019602:	4605      	mov	r5, r0
 8019604:	f002 f836 	bl	801b674 <__mcmp>
 8019608:	2800      	cmp	r0, #0
 801960a:	f340 8084 	ble.w	8019716 <_strtod_l+0x8f6>
 801960e:	9904      	ldr	r1, [sp, #16]
 8019610:	4a2b      	ldr	r2, [pc, #172]	; (80196c0 <_strtod_l+0x8a0>)
 8019612:	464b      	mov	r3, r9
 8019614:	2900      	cmp	r1, #0
 8019616:	f000 809d 	beq.w	8019754 <_strtod_l+0x934>
 801961a:	ea02 0109 	and.w	r1, r2, r9
 801961e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8019622:	f300 8097 	bgt.w	8019754 <_strtod_l+0x934>
 8019626:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801962a:	f77f aea5 	ble.w	8019378 <_strtod_l+0x558>
 801962e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80196b0 <_strtod_l+0x890>
 8019632:	ec49 8b16 	vmov	d6, r8, r9
 8019636:	ee26 7b07 	vmul.f64	d7, d6, d7
 801963a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801963e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8019642:	4313      	orrs	r3, r2
 8019644:	bf08      	it	eq
 8019646:	2322      	moveq	r3, #34	; 0x22
 8019648:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801964c:	bf08      	it	eq
 801964e:	6023      	streq	r3, [r4, #0]
 8019650:	e62c      	b.n	80192ac <_strtod_l+0x48c>
 8019652:	f04f 31ff 	mov.w	r1, #4294967295
 8019656:	fa01 f202 	lsl.w	r2, r1, r2
 801965a:	ea02 0808 	and.w	r8, r2, r8
 801965e:	e6d9      	b.n	8019414 <_strtod_l+0x5f4>
 8019660:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8019664:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8019668:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801966c:	33e2      	adds	r3, #226	; 0xe2
 801966e:	fa00 f303 	lsl.w	r3, r0, r3
 8019672:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8019676:	e73f      	b.n	80194f8 <_strtod_l+0x6d8>
 8019678:	2200      	movs	r2, #0
 801967a:	2301      	movs	r3, #1
 801967c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8019680:	e73a      	b.n	80194f8 <_strtod_l+0x6d8>
 8019682:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019684:	461a      	mov	r2, r3
 8019686:	4620      	mov	r0, r4
 8019688:	f001 ff84 	bl	801b594 <__lshift>
 801968c:	9012      	str	r0, [sp, #72]	; 0x48
 801968e:	2800      	cmp	r0, #0
 8019690:	f47f af64 	bne.w	801955c <_strtod_l+0x73c>
 8019694:	e600      	b.n	8019298 <_strtod_l+0x478>
 8019696:	bf00      	nop
 8019698:	94a03595 	.word	0x94a03595
 801969c:	3fcfffff 	.word	0x3fcfffff
 80196a0:	94a03595 	.word	0x94a03595
 80196a4:	3fdfffff 	.word	0x3fdfffff
 80196a8:	35afe535 	.word	0x35afe535
 80196ac:	3fe00000 	.word	0x3fe00000
 80196b0:	00000000 	.word	0x00000000
 80196b4:	39500000 	.word	0x39500000
 80196b8:	08033058 	.word	0x08033058
 80196bc:	fffffc02 	.word	0xfffffc02
 80196c0:	7ff00000 	.word	0x7ff00000
 80196c4:	46cb      	mov	fp, r9
 80196c6:	d15f      	bne.n	8019788 <_strtod_l+0x968>
 80196c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80196cc:	f1ba 0f00 	cmp.w	sl, #0
 80196d0:	d02a      	beq.n	8019728 <_strtod_l+0x908>
 80196d2:	4aa7      	ldr	r2, [pc, #668]	; (8019970 <_strtod_l+0xb50>)
 80196d4:	4293      	cmp	r3, r2
 80196d6:	d12b      	bne.n	8019730 <_strtod_l+0x910>
 80196d8:	9b04      	ldr	r3, [sp, #16]
 80196da:	4642      	mov	r2, r8
 80196dc:	b1fb      	cbz	r3, 801971e <_strtod_l+0x8fe>
 80196de:	4ba5      	ldr	r3, [pc, #660]	; (8019974 <_strtod_l+0xb54>)
 80196e0:	ea09 0303 	and.w	r3, r9, r3
 80196e4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80196e8:	f04f 31ff 	mov.w	r1, #4294967295
 80196ec:	d81a      	bhi.n	8019724 <_strtod_l+0x904>
 80196ee:	0d1b      	lsrs	r3, r3, #20
 80196f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80196f4:	fa01 f303 	lsl.w	r3, r1, r3
 80196f8:	429a      	cmp	r2, r3
 80196fa:	d119      	bne.n	8019730 <_strtod_l+0x910>
 80196fc:	4b9e      	ldr	r3, [pc, #632]	; (8019978 <_strtod_l+0xb58>)
 80196fe:	459b      	cmp	fp, r3
 8019700:	d102      	bne.n	8019708 <_strtod_l+0x8e8>
 8019702:	3201      	adds	r2, #1
 8019704:	f43f adc8 	beq.w	8019298 <_strtod_l+0x478>
 8019708:	4b9a      	ldr	r3, [pc, #616]	; (8019974 <_strtod_l+0xb54>)
 801970a:	ea0b 0303 	and.w	r3, fp, r3
 801970e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8019712:	f04f 0800 	mov.w	r8, #0
 8019716:	9b04      	ldr	r3, [sp, #16]
 8019718:	2b00      	cmp	r3, #0
 801971a:	d188      	bne.n	801962e <_strtod_l+0x80e>
 801971c:	e5c6      	b.n	80192ac <_strtod_l+0x48c>
 801971e:	f04f 33ff 	mov.w	r3, #4294967295
 8019722:	e7e9      	b.n	80196f8 <_strtod_l+0x8d8>
 8019724:	460b      	mov	r3, r1
 8019726:	e7e7      	b.n	80196f8 <_strtod_l+0x8d8>
 8019728:	ea53 0308 	orrs.w	r3, r3, r8
 801972c:	f43f af6f 	beq.w	801960e <_strtod_l+0x7ee>
 8019730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019732:	b1cb      	cbz	r3, 8019768 <_strtod_l+0x948>
 8019734:	ea13 0f0b 	tst.w	r3, fp
 8019738:	d0ed      	beq.n	8019716 <_strtod_l+0x8f6>
 801973a:	9a04      	ldr	r2, [sp, #16]
 801973c:	4640      	mov	r0, r8
 801973e:	4649      	mov	r1, r9
 8019740:	f1ba 0f00 	cmp.w	sl, #0
 8019744:	d014      	beq.n	8019770 <_strtod_l+0x950>
 8019746:	f7ff fb51 	bl	8018dec <sulp>
 801974a:	ee38 7b00 	vadd.f64	d7, d8, d0
 801974e:	ec59 8b17 	vmov	r8, r9, d7
 8019752:	e7e0      	b.n	8019716 <_strtod_l+0x8f6>
 8019754:	4013      	ands	r3, r2
 8019756:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801975a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801975e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8019762:	f04f 38ff 	mov.w	r8, #4294967295
 8019766:	e7d6      	b.n	8019716 <_strtod_l+0x8f6>
 8019768:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801976a:	ea13 0f08 	tst.w	r3, r8
 801976e:	e7e3      	b.n	8019738 <_strtod_l+0x918>
 8019770:	f7ff fb3c 	bl	8018dec <sulp>
 8019774:	ee38 0b40 	vsub.f64	d0, d8, d0
 8019778:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801977c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019780:	ec59 8b10 	vmov	r8, r9, d0
 8019784:	d1c7      	bne.n	8019716 <_strtod_l+0x8f6>
 8019786:	e5f7      	b.n	8019378 <_strtod_l+0x558>
 8019788:	4631      	mov	r1, r6
 801978a:	4628      	mov	r0, r5
 801978c:	f002 f8f0 	bl	801b970 <__ratio>
 8019790:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8019794:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8019798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801979c:	d865      	bhi.n	801986a <_strtod_l+0xa4a>
 801979e:	f1ba 0f00 	cmp.w	sl, #0
 80197a2:	d042      	beq.n	801982a <_strtod_l+0xa0a>
 80197a4:	4b75      	ldr	r3, [pc, #468]	; (801997c <_strtod_l+0xb5c>)
 80197a6:	2200      	movs	r2, #0
 80197a8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 80197ac:	4871      	ldr	r0, [pc, #452]	; (8019974 <_strtod_l+0xb54>)
 80197ae:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8019988 <_strtod_l+0xb68>
 80197b2:	ea0b 0100 	and.w	r1, fp, r0
 80197b6:	4561      	cmp	r1, ip
 80197b8:	f040 808e 	bne.w	80198d8 <_strtod_l+0xab8>
 80197bc:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80197c0:	ec49 8b10 	vmov	d0, r8, r9
 80197c4:	ec43 2b1c 	vmov	d12, r2, r3
 80197c8:	910a      	str	r1, [sp, #40]	; 0x28
 80197ca:	f001 fff9 	bl	801b7c0 <__ulp>
 80197ce:	ec49 8b1e 	vmov	d14, r8, r9
 80197d2:	4868      	ldr	r0, [pc, #416]	; (8019974 <_strtod_l+0xb54>)
 80197d4:	eeac eb00 	vfma.f64	d14, d12, d0
 80197d8:	ee1e 3a90 	vmov	r3, s29
 80197dc:	4a68      	ldr	r2, [pc, #416]	; (8019980 <_strtod_l+0xb60>)
 80197de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80197e0:	4018      	ands	r0, r3
 80197e2:	4290      	cmp	r0, r2
 80197e4:	ec59 8b1e 	vmov	r8, r9, d14
 80197e8:	d94e      	bls.n	8019888 <_strtod_l+0xa68>
 80197ea:	ee18 3a90 	vmov	r3, s17
 80197ee:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80197f2:	4293      	cmp	r3, r2
 80197f4:	d104      	bne.n	8019800 <_strtod_l+0x9e0>
 80197f6:	ee18 3a10 	vmov	r3, s16
 80197fa:	3301      	adds	r3, #1
 80197fc:	f43f ad4c 	beq.w	8019298 <_strtod_l+0x478>
 8019800:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8019978 <_strtod_l+0xb58>
 8019804:	f04f 38ff 	mov.w	r8, #4294967295
 8019808:	9912      	ldr	r1, [sp, #72]	; 0x48
 801980a:	4620      	mov	r0, r4
 801980c:	f001 fca6 	bl	801b15c <_Bfree>
 8019810:	4639      	mov	r1, r7
 8019812:	4620      	mov	r0, r4
 8019814:	f001 fca2 	bl	801b15c <_Bfree>
 8019818:	4631      	mov	r1, r6
 801981a:	4620      	mov	r0, r4
 801981c:	f001 fc9e 	bl	801b15c <_Bfree>
 8019820:	4629      	mov	r1, r5
 8019822:	4620      	mov	r0, r4
 8019824:	f001 fc9a 	bl	801b15c <_Bfree>
 8019828:	e619      	b.n	801945e <_strtod_l+0x63e>
 801982a:	f1b8 0f00 	cmp.w	r8, #0
 801982e:	d112      	bne.n	8019856 <_strtod_l+0xa36>
 8019830:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019834:	b9b3      	cbnz	r3, 8019864 <_strtod_l+0xa44>
 8019836:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801983a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801983e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019842:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8019846:	bf58      	it	pl
 8019848:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 801984c:	eeb1 7b4d 	vneg.f64	d7, d13
 8019850:	ec53 2b17 	vmov	r2, r3, d7
 8019854:	e7aa      	b.n	80197ac <_strtod_l+0x98c>
 8019856:	f1b8 0f01 	cmp.w	r8, #1
 801985a:	d103      	bne.n	8019864 <_strtod_l+0xa44>
 801985c:	f1b9 0f00 	cmp.w	r9, #0
 8019860:	f43f ad8a 	beq.w	8019378 <_strtod_l+0x558>
 8019864:	4b47      	ldr	r3, [pc, #284]	; (8019984 <_strtod_l+0xb64>)
 8019866:	2200      	movs	r2, #0
 8019868:	e79e      	b.n	80197a8 <_strtod_l+0x988>
 801986a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801986e:	ee20 db0d 	vmul.f64	d13, d0, d13
 8019872:	f1ba 0f00 	cmp.w	sl, #0
 8019876:	d104      	bne.n	8019882 <_strtod_l+0xa62>
 8019878:	eeb1 7b4d 	vneg.f64	d7, d13
 801987c:	ec53 2b17 	vmov	r2, r3, d7
 8019880:	e794      	b.n	80197ac <_strtod_l+0x98c>
 8019882:	eeb0 7b4d 	vmov.f64	d7, d13
 8019886:	e7f9      	b.n	801987c <_strtod_l+0xa5c>
 8019888:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801988c:	9b04      	ldr	r3, [sp, #16]
 801988e:	2b00      	cmp	r3, #0
 8019890:	d1ba      	bne.n	8019808 <_strtod_l+0x9e8>
 8019892:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019896:	0d1b      	lsrs	r3, r3, #20
 8019898:	051b      	lsls	r3, r3, #20
 801989a:	4299      	cmp	r1, r3
 801989c:	d1b4      	bne.n	8019808 <_strtod_l+0x9e8>
 801989e:	ec51 0b1d 	vmov	r0, r1, d13
 80198a2:	f7e6 ff59 	bl	8000758 <__aeabi_d2lz>
 80198a6:	f7e6 ff11 	bl	80006cc <__aeabi_l2d>
 80198aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80198ae:	ec41 0b17 	vmov	d7, r0, r1
 80198b2:	ea43 0308 	orr.w	r3, r3, r8
 80198b6:	ea53 030a 	orrs.w	r3, r3, sl
 80198ba:	ee3d db47 	vsub.f64	d13, d13, d7
 80198be:	d03c      	beq.n	801993a <_strtod_l+0xb1a>
 80198c0:	eeb4 dbca 	vcmpe.f64	d13, d10
 80198c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198c8:	f53f acf0 	bmi.w	80192ac <_strtod_l+0x48c>
 80198cc:	eeb4 dbcb 	vcmpe.f64	d13, d11
 80198d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198d4:	dd98      	ble.n	8019808 <_strtod_l+0x9e8>
 80198d6:	e4e9      	b.n	80192ac <_strtod_l+0x48c>
 80198d8:	9804      	ldr	r0, [sp, #16]
 80198da:	b1f0      	cbz	r0, 801991a <_strtod_l+0xafa>
 80198dc:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 80198e0:	d81b      	bhi.n	801991a <_strtod_l+0xafa>
 80198e2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8019968 <_strtod_l+0xb48>
 80198e6:	eeb4 dbc7 	vcmpe.f64	d13, d7
 80198ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198ee:	d811      	bhi.n	8019914 <_strtod_l+0xaf4>
 80198f0:	eebc dbcd 	vcvt.u32.f64	s26, d13
 80198f4:	ee1d 3a10 	vmov	r3, s26
 80198f8:	2b01      	cmp	r3, #1
 80198fa:	bf38      	it	cc
 80198fc:	2301      	movcc	r3, #1
 80198fe:	ee0d 3a10 	vmov	s26, r3
 8019902:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8019906:	f1ba 0f00 	cmp.w	sl, #0
 801990a:	d113      	bne.n	8019934 <_strtod_l+0xb14>
 801990c:	eeb1 7b4d 	vneg.f64	d7, d13
 8019910:	ec53 2b17 	vmov	r2, r3, d7
 8019914:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8019918:	1a43      	subs	r3, r0, r1
 801991a:	eeb0 0b48 	vmov.f64	d0, d8
 801991e:	ec43 2b1c 	vmov	d12, r2, r3
 8019922:	910a      	str	r1, [sp, #40]	; 0x28
 8019924:	f001 ff4c 	bl	801b7c0 <__ulp>
 8019928:	990a      	ldr	r1, [sp, #40]	; 0x28
 801992a:	eeac 8b00 	vfma.f64	d8, d12, d0
 801992e:	ec59 8b18 	vmov	r8, r9, d8
 8019932:	e7ab      	b.n	801988c <_strtod_l+0xa6c>
 8019934:	eeb0 7b4d 	vmov.f64	d7, d13
 8019938:	e7ea      	b.n	8019910 <_strtod_l+0xaf0>
 801993a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 801993e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019942:	f57f af61 	bpl.w	8019808 <_strtod_l+0x9e8>
 8019946:	e4b1      	b.n	80192ac <_strtod_l+0x48c>
 8019948:	2300      	movs	r3, #0
 801994a:	9308      	str	r3, [sp, #32]
 801994c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801994e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019950:	6013      	str	r3, [r2, #0]
 8019952:	f7ff baad 	b.w	8018eb0 <_strtod_l+0x90>
 8019956:	2a65      	cmp	r2, #101	; 0x65
 8019958:	f43f ab9f 	beq.w	801909a <_strtod_l+0x27a>
 801995c:	2a45      	cmp	r2, #69	; 0x45
 801995e:	f43f ab9c 	beq.w	801909a <_strtod_l+0x27a>
 8019962:	2101      	movs	r1, #1
 8019964:	f7ff bbd4 	b.w	8019110 <_strtod_l+0x2f0>
 8019968:	ffc00000 	.word	0xffc00000
 801996c:	41dfffff 	.word	0x41dfffff
 8019970:	000fffff 	.word	0x000fffff
 8019974:	7ff00000 	.word	0x7ff00000
 8019978:	7fefffff 	.word	0x7fefffff
 801997c:	3ff00000 	.word	0x3ff00000
 8019980:	7c9fffff 	.word	0x7c9fffff
 8019984:	bff00000 	.word	0xbff00000
 8019988:	7fe00000 	.word	0x7fe00000

0801998c <strtod>:
 801998c:	460a      	mov	r2, r1
 801998e:	4601      	mov	r1, r0
 8019990:	4802      	ldr	r0, [pc, #8]	; (801999c <strtod+0x10>)
 8019992:	4b03      	ldr	r3, [pc, #12]	; (80199a0 <strtod+0x14>)
 8019994:	6800      	ldr	r0, [r0, #0]
 8019996:	f7ff ba43 	b.w	8018e20 <_strtod_l>
 801999a:	bf00      	nop
 801999c:	24000060 	.word	0x24000060
 80199a0:	240000c8 	.word	0x240000c8

080199a4 <strtok>:
 80199a4:	4b16      	ldr	r3, [pc, #88]	; (8019a00 <strtok+0x5c>)
 80199a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80199a8:	681e      	ldr	r6, [r3, #0]
 80199aa:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80199ac:	4605      	mov	r5, r0
 80199ae:	b9fc      	cbnz	r4, 80199f0 <strtok+0x4c>
 80199b0:	2050      	movs	r0, #80	; 0x50
 80199b2:	9101      	str	r1, [sp, #4]
 80199b4:	f7fe fcaa 	bl	801830c <malloc>
 80199b8:	9901      	ldr	r1, [sp, #4]
 80199ba:	65b0      	str	r0, [r6, #88]	; 0x58
 80199bc:	4602      	mov	r2, r0
 80199be:	b920      	cbnz	r0, 80199ca <strtok+0x26>
 80199c0:	4b10      	ldr	r3, [pc, #64]	; (8019a04 <strtok+0x60>)
 80199c2:	4811      	ldr	r0, [pc, #68]	; (8019a08 <strtok+0x64>)
 80199c4:	2157      	movs	r1, #87	; 0x57
 80199c6:	f000 f8d5 	bl	8019b74 <__assert_func>
 80199ca:	e9c0 4400 	strd	r4, r4, [r0]
 80199ce:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80199d2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80199d6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80199da:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80199de:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80199e2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80199e6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80199ea:	6184      	str	r4, [r0, #24]
 80199ec:	7704      	strb	r4, [r0, #28]
 80199ee:	6244      	str	r4, [r0, #36]	; 0x24
 80199f0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80199f2:	2301      	movs	r3, #1
 80199f4:	4628      	mov	r0, r5
 80199f6:	b002      	add	sp, #8
 80199f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80199fc:	f000 b806 	b.w	8019a0c <__strtok_r>
 8019a00:	24000060 	.word	0x24000060
 8019a04:	08033080 	.word	0x08033080
 8019a08:	08033097 	.word	0x08033097

08019a0c <__strtok_r>:
 8019a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a0e:	b908      	cbnz	r0, 8019a14 <__strtok_r+0x8>
 8019a10:	6810      	ldr	r0, [r2, #0]
 8019a12:	b188      	cbz	r0, 8019a38 <__strtok_r+0x2c>
 8019a14:	4604      	mov	r4, r0
 8019a16:	4620      	mov	r0, r4
 8019a18:	f814 5b01 	ldrb.w	r5, [r4], #1
 8019a1c:	460f      	mov	r7, r1
 8019a1e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8019a22:	b91e      	cbnz	r6, 8019a2c <__strtok_r+0x20>
 8019a24:	b965      	cbnz	r5, 8019a40 <__strtok_r+0x34>
 8019a26:	6015      	str	r5, [r2, #0]
 8019a28:	4628      	mov	r0, r5
 8019a2a:	e005      	b.n	8019a38 <__strtok_r+0x2c>
 8019a2c:	42b5      	cmp	r5, r6
 8019a2e:	d1f6      	bne.n	8019a1e <__strtok_r+0x12>
 8019a30:	2b00      	cmp	r3, #0
 8019a32:	d1f0      	bne.n	8019a16 <__strtok_r+0xa>
 8019a34:	6014      	str	r4, [r2, #0]
 8019a36:	7003      	strb	r3, [r0, #0]
 8019a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a3a:	461c      	mov	r4, r3
 8019a3c:	e00c      	b.n	8019a58 <__strtok_r+0x4c>
 8019a3e:	b915      	cbnz	r5, 8019a46 <__strtok_r+0x3a>
 8019a40:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019a44:	460e      	mov	r6, r1
 8019a46:	f816 5b01 	ldrb.w	r5, [r6], #1
 8019a4a:	42ab      	cmp	r3, r5
 8019a4c:	d1f7      	bne.n	8019a3e <__strtok_r+0x32>
 8019a4e:	2b00      	cmp	r3, #0
 8019a50:	d0f3      	beq.n	8019a3a <__strtok_r+0x2e>
 8019a52:	2300      	movs	r3, #0
 8019a54:	f804 3c01 	strb.w	r3, [r4, #-1]
 8019a58:	6014      	str	r4, [r2, #0]
 8019a5a:	e7ed      	b.n	8019a38 <__strtok_r+0x2c>

08019a5c <_strtol_l.constprop.0>:
 8019a5c:	2b01      	cmp	r3, #1
 8019a5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019a62:	d001      	beq.n	8019a68 <_strtol_l.constprop.0+0xc>
 8019a64:	2b24      	cmp	r3, #36	; 0x24
 8019a66:	d906      	bls.n	8019a76 <_strtol_l.constprop.0+0x1a>
 8019a68:	f7fe fc12 	bl	8018290 <__errno>
 8019a6c:	2316      	movs	r3, #22
 8019a6e:	6003      	str	r3, [r0, #0]
 8019a70:	2000      	movs	r0, #0
 8019a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a76:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8019b5c <_strtol_l.constprop.0+0x100>
 8019a7a:	460d      	mov	r5, r1
 8019a7c:	462e      	mov	r6, r5
 8019a7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019a82:	f814 700c 	ldrb.w	r7, [r4, ip]
 8019a86:	f017 0708 	ands.w	r7, r7, #8
 8019a8a:	d1f7      	bne.n	8019a7c <_strtol_l.constprop.0+0x20>
 8019a8c:	2c2d      	cmp	r4, #45	; 0x2d
 8019a8e:	d132      	bne.n	8019af6 <_strtol_l.constprop.0+0x9a>
 8019a90:	782c      	ldrb	r4, [r5, #0]
 8019a92:	2701      	movs	r7, #1
 8019a94:	1cb5      	adds	r5, r6, #2
 8019a96:	2b00      	cmp	r3, #0
 8019a98:	d05b      	beq.n	8019b52 <_strtol_l.constprop.0+0xf6>
 8019a9a:	2b10      	cmp	r3, #16
 8019a9c:	d109      	bne.n	8019ab2 <_strtol_l.constprop.0+0x56>
 8019a9e:	2c30      	cmp	r4, #48	; 0x30
 8019aa0:	d107      	bne.n	8019ab2 <_strtol_l.constprop.0+0x56>
 8019aa2:	782c      	ldrb	r4, [r5, #0]
 8019aa4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8019aa8:	2c58      	cmp	r4, #88	; 0x58
 8019aaa:	d14d      	bne.n	8019b48 <_strtol_l.constprop.0+0xec>
 8019aac:	786c      	ldrb	r4, [r5, #1]
 8019aae:	2310      	movs	r3, #16
 8019ab0:	3502      	adds	r5, #2
 8019ab2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8019ab6:	f108 38ff 	add.w	r8, r8, #4294967295
 8019aba:	f04f 0c00 	mov.w	ip, #0
 8019abe:	fbb8 f9f3 	udiv	r9, r8, r3
 8019ac2:	4666      	mov	r6, ip
 8019ac4:	fb03 8a19 	mls	sl, r3, r9, r8
 8019ac8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8019acc:	f1be 0f09 	cmp.w	lr, #9
 8019ad0:	d816      	bhi.n	8019b00 <_strtol_l.constprop.0+0xa4>
 8019ad2:	4674      	mov	r4, lr
 8019ad4:	42a3      	cmp	r3, r4
 8019ad6:	dd24      	ble.n	8019b22 <_strtol_l.constprop.0+0xc6>
 8019ad8:	f1bc 0f00 	cmp.w	ip, #0
 8019adc:	db1e      	blt.n	8019b1c <_strtol_l.constprop.0+0xc0>
 8019ade:	45b1      	cmp	r9, r6
 8019ae0:	d31c      	bcc.n	8019b1c <_strtol_l.constprop.0+0xc0>
 8019ae2:	d101      	bne.n	8019ae8 <_strtol_l.constprop.0+0x8c>
 8019ae4:	45a2      	cmp	sl, r4
 8019ae6:	db19      	blt.n	8019b1c <_strtol_l.constprop.0+0xc0>
 8019ae8:	fb06 4603 	mla	r6, r6, r3, r4
 8019aec:	f04f 0c01 	mov.w	ip, #1
 8019af0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019af4:	e7e8      	b.n	8019ac8 <_strtol_l.constprop.0+0x6c>
 8019af6:	2c2b      	cmp	r4, #43	; 0x2b
 8019af8:	bf04      	itt	eq
 8019afa:	782c      	ldrbeq	r4, [r5, #0]
 8019afc:	1cb5      	addeq	r5, r6, #2
 8019afe:	e7ca      	b.n	8019a96 <_strtol_l.constprop.0+0x3a>
 8019b00:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8019b04:	f1be 0f19 	cmp.w	lr, #25
 8019b08:	d801      	bhi.n	8019b0e <_strtol_l.constprop.0+0xb2>
 8019b0a:	3c37      	subs	r4, #55	; 0x37
 8019b0c:	e7e2      	b.n	8019ad4 <_strtol_l.constprop.0+0x78>
 8019b0e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8019b12:	f1be 0f19 	cmp.w	lr, #25
 8019b16:	d804      	bhi.n	8019b22 <_strtol_l.constprop.0+0xc6>
 8019b18:	3c57      	subs	r4, #87	; 0x57
 8019b1a:	e7db      	b.n	8019ad4 <_strtol_l.constprop.0+0x78>
 8019b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8019b20:	e7e6      	b.n	8019af0 <_strtol_l.constprop.0+0x94>
 8019b22:	f1bc 0f00 	cmp.w	ip, #0
 8019b26:	da05      	bge.n	8019b34 <_strtol_l.constprop.0+0xd8>
 8019b28:	2322      	movs	r3, #34	; 0x22
 8019b2a:	6003      	str	r3, [r0, #0]
 8019b2c:	4646      	mov	r6, r8
 8019b2e:	b942      	cbnz	r2, 8019b42 <_strtol_l.constprop.0+0xe6>
 8019b30:	4630      	mov	r0, r6
 8019b32:	e79e      	b.n	8019a72 <_strtol_l.constprop.0+0x16>
 8019b34:	b107      	cbz	r7, 8019b38 <_strtol_l.constprop.0+0xdc>
 8019b36:	4276      	negs	r6, r6
 8019b38:	2a00      	cmp	r2, #0
 8019b3a:	d0f9      	beq.n	8019b30 <_strtol_l.constprop.0+0xd4>
 8019b3c:	f1bc 0f00 	cmp.w	ip, #0
 8019b40:	d000      	beq.n	8019b44 <_strtol_l.constprop.0+0xe8>
 8019b42:	1e69      	subs	r1, r5, #1
 8019b44:	6011      	str	r1, [r2, #0]
 8019b46:	e7f3      	b.n	8019b30 <_strtol_l.constprop.0+0xd4>
 8019b48:	2430      	movs	r4, #48	; 0x30
 8019b4a:	2b00      	cmp	r3, #0
 8019b4c:	d1b1      	bne.n	8019ab2 <_strtol_l.constprop.0+0x56>
 8019b4e:	2308      	movs	r3, #8
 8019b50:	e7af      	b.n	8019ab2 <_strtol_l.constprop.0+0x56>
 8019b52:	2c30      	cmp	r4, #48	; 0x30
 8019b54:	d0a5      	beq.n	8019aa2 <_strtol_l.constprop.0+0x46>
 8019b56:	230a      	movs	r3, #10
 8019b58:	e7ab      	b.n	8019ab2 <_strtol_l.constprop.0+0x56>
 8019b5a:	bf00      	nop
 8019b5c:	08033131 	.word	0x08033131

08019b60 <strtol>:
 8019b60:	4613      	mov	r3, r2
 8019b62:	460a      	mov	r2, r1
 8019b64:	4601      	mov	r1, r0
 8019b66:	4802      	ldr	r0, [pc, #8]	; (8019b70 <strtol+0x10>)
 8019b68:	6800      	ldr	r0, [r0, #0]
 8019b6a:	f7ff bf77 	b.w	8019a5c <_strtol_l.constprop.0>
 8019b6e:	bf00      	nop
 8019b70:	24000060 	.word	0x24000060

08019b74 <__assert_func>:
 8019b74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019b76:	4614      	mov	r4, r2
 8019b78:	461a      	mov	r2, r3
 8019b7a:	4b09      	ldr	r3, [pc, #36]	; (8019ba0 <__assert_func+0x2c>)
 8019b7c:	681b      	ldr	r3, [r3, #0]
 8019b7e:	4605      	mov	r5, r0
 8019b80:	68d8      	ldr	r0, [r3, #12]
 8019b82:	b14c      	cbz	r4, 8019b98 <__assert_func+0x24>
 8019b84:	4b07      	ldr	r3, [pc, #28]	; (8019ba4 <__assert_func+0x30>)
 8019b86:	9100      	str	r1, [sp, #0]
 8019b88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019b8c:	4906      	ldr	r1, [pc, #24]	; (8019ba8 <__assert_func+0x34>)
 8019b8e:	462b      	mov	r3, r5
 8019b90:	f000 fede 	bl	801a950 <fiprintf>
 8019b94:	f002 fa10 	bl	801bfb8 <abort>
 8019b98:	4b04      	ldr	r3, [pc, #16]	; (8019bac <__assert_func+0x38>)
 8019b9a:	461c      	mov	r4, r3
 8019b9c:	e7f3      	b.n	8019b86 <__assert_func+0x12>
 8019b9e:	bf00      	nop
 8019ba0:	24000060 	.word	0x24000060
 8019ba4:	080330f4 	.word	0x080330f4
 8019ba8:	08033101 	.word	0x08033101
 8019bac:	0803312f 	.word	0x0803312f

08019bb0 <quorem>:
 8019bb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bb4:	6903      	ldr	r3, [r0, #16]
 8019bb6:	690c      	ldr	r4, [r1, #16]
 8019bb8:	42a3      	cmp	r3, r4
 8019bba:	4607      	mov	r7, r0
 8019bbc:	f2c0 8081 	blt.w	8019cc2 <quorem+0x112>
 8019bc0:	3c01      	subs	r4, #1
 8019bc2:	f101 0814 	add.w	r8, r1, #20
 8019bc6:	f100 0514 	add.w	r5, r0, #20
 8019bca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019bce:	9301      	str	r3, [sp, #4]
 8019bd0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8019bd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019bd8:	3301      	adds	r3, #1
 8019bda:	429a      	cmp	r2, r3
 8019bdc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8019be0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8019be4:	fbb2 f6f3 	udiv	r6, r2, r3
 8019be8:	d331      	bcc.n	8019c4e <quorem+0x9e>
 8019bea:	f04f 0e00 	mov.w	lr, #0
 8019bee:	4640      	mov	r0, r8
 8019bf0:	46ac      	mov	ip, r5
 8019bf2:	46f2      	mov	sl, lr
 8019bf4:	f850 2b04 	ldr.w	r2, [r0], #4
 8019bf8:	b293      	uxth	r3, r2
 8019bfa:	fb06 e303 	mla	r3, r6, r3, lr
 8019bfe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8019c02:	b29b      	uxth	r3, r3
 8019c04:	ebaa 0303 	sub.w	r3, sl, r3
 8019c08:	f8dc a000 	ldr.w	sl, [ip]
 8019c0c:	0c12      	lsrs	r2, r2, #16
 8019c0e:	fa13 f38a 	uxtah	r3, r3, sl
 8019c12:	fb06 e202 	mla	r2, r6, r2, lr
 8019c16:	9300      	str	r3, [sp, #0]
 8019c18:	9b00      	ldr	r3, [sp, #0]
 8019c1a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8019c1e:	b292      	uxth	r2, r2
 8019c20:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8019c24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8019c28:	f8bd 3000 	ldrh.w	r3, [sp]
 8019c2c:	4581      	cmp	r9, r0
 8019c2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019c32:	f84c 3b04 	str.w	r3, [ip], #4
 8019c36:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8019c3a:	d2db      	bcs.n	8019bf4 <quorem+0x44>
 8019c3c:	f855 300b 	ldr.w	r3, [r5, fp]
 8019c40:	b92b      	cbnz	r3, 8019c4e <quorem+0x9e>
 8019c42:	9b01      	ldr	r3, [sp, #4]
 8019c44:	3b04      	subs	r3, #4
 8019c46:	429d      	cmp	r5, r3
 8019c48:	461a      	mov	r2, r3
 8019c4a:	d32e      	bcc.n	8019caa <quorem+0xfa>
 8019c4c:	613c      	str	r4, [r7, #16]
 8019c4e:	4638      	mov	r0, r7
 8019c50:	f001 fd10 	bl	801b674 <__mcmp>
 8019c54:	2800      	cmp	r0, #0
 8019c56:	db24      	blt.n	8019ca2 <quorem+0xf2>
 8019c58:	3601      	adds	r6, #1
 8019c5a:	4628      	mov	r0, r5
 8019c5c:	f04f 0c00 	mov.w	ip, #0
 8019c60:	f858 2b04 	ldr.w	r2, [r8], #4
 8019c64:	f8d0 e000 	ldr.w	lr, [r0]
 8019c68:	b293      	uxth	r3, r2
 8019c6a:	ebac 0303 	sub.w	r3, ip, r3
 8019c6e:	0c12      	lsrs	r2, r2, #16
 8019c70:	fa13 f38e 	uxtah	r3, r3, lr
 8019c74:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8019c78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8019c7c:	b29b      	uxth	r3, r3
 8019c7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019c82:	45c1      	cmp	r9, r8
 8019c84:	f840 3b04 	str.w	r3, [r0], #4
 8019c88:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8019c8c:	d2e8      	bcs.n	8019c60 <quorem+0xb0>
 8019c8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019c92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019c96:	b922      	cbnz	r2, 8019ca2 <quorem+0xf2>
 8019c98:	3b04      	subs	r3, #4
 8019c9a:	429d      	cmp	r5, r3
 8019c9c:	461a      	mov	r2, r3
 8019c9e:	d30a      	bcc.n	8019cb6 <quorem+0x106>
 8019ca0:	613c      	str	r4, [r7, #16]
 8019ca2:	4630      	mov	r0, r6
 8019ca4:	b003      	add	sp, #12
 8019ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019caa:	6812      	ldr	r2, [r2, #0]
 8019cac:	3b04      	subs	r3, #4
 8019cae:	2a00      	cmp	r2, #0
 8019cb0:	d1cc      	bne.n	8019c4c <quorem+0x9c>
 8019cb2:	3c01      	subs	r4, #1
 8019cb4:	e7c7      	b.n	8019c46 <quorem+0x96>
 8019cb6:	6812      	ldr	r2, [r2, #0]
 8019cb8:	3b04      	subs	r3, #4
 8019cba:	2a00      	cmp	r2, #0
 8019cbc:	d1f0      	bne.n	8019ca0 <quorem+0xf0>
 8019cbe:	3c01      	subs	r4, #1
 8019cc0:	e7eb      	b.n	8019c9a <quorem+0xea>
 8019cc2:	2000      	movs	r0, #0
 8019cc4:	e7ee      	b.n	8019ca4 <quorem+0xf4>
	...

08019cc8 <_dtoa_r>:
 8019cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ccc:	ed2d 8b02 	vpush	{d8}
 8019cd0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8019cd2:	b091      	sub	sp, #68	; 0x44
 8019cd4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8019cd8:	ec59 8b10 	vmov	r8, r9, d0
 8019cdc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8019cde:	9106      	str	r1, [sp, #24]
 8019ce0:	4606      	mov	r6, r0
 8019ce2:	9208      	str	r2, [sp, #32]
 8019ce4:	930c      	str	r3, [sp, #48]	; 0x30
 8019ce6:	b975      	cbnz	r5, 8019d06 <_dtoa_r+0x3e>
 8019ce8:	2010      	movs	r0, #16
 8019cea:	f7fe fb0f 	bl	801830c <malloc>
 8019cee:	4602      	mov	r2, r0
 8019cf0:	6270      	str	r0, [r6, #36]	; 0x24
 8019cf2:	b920      	cbnz	r0, 8019cfe <_dtoa_r+0x36>
 8019cf4:	4baa      	ldr	r3, [pc, #680]	; (8019fa0 <_dtoa_r+0x2d8>)
 8019cf6:	21ea      	movs	r1, #234	; 0xea
 8019cf8:	48aa      	ldr	r0, [pc, #680]	; (8019fa4 <_dtoa_r+0x2dc>)
 8019cfa:	f7ff ff3b 	bl	8019b74 <__assert_func>
 8019cfe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8019d02:	6005      	str	r5, [r0, #0]
 8019d04:	60c5      	str	r5, [r0, #12]
 8019d06:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8019d08:	6819      	ldr	r1, [r3, #0]
 8019d0a:	b151      	cbz	r1, 8019d22 <_dtoa_r+0x5a>
 8019d0c:	685a      	ldr	r2, [r3, #4]
 8019d0e:	604a      	str	r2, [r1, #4]
 8019d10:	2301      	movs	r3, #1
 8019d12:	4093      	lsls	r3, r2
 8019d14:	608b      	str	r3, [r1, #8]
 8019d16:	4630      	mov	r0, r6
 8019d18:	f001 fa20 	bl	801b15c <_Bfree>
 8019d1c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8019d1e:	2200      	movs	r2, #0
 8019d20:	601a      	str	r2, [r3, #0]
 8019d22:	f1b9 0300 	subs.w	r3, r9, #0
 8019d26:	bfbb      	ittet	lt
 8019d28:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8019d2c:	9303      	strlt	r3, [sp, #12]
 8019d2e:	2300      	movge	r3, #0
 8019d30:	2201      	movlt	r2, #1
 8019d32:	bfac      	ite	ge
 8019d34:	6023      	strge	r3, [r4, #0]
 8019d36:	6022      	strlt	r2, [r4, #0]
 8019d38:	4b9b      	ldr	r3, [pc, #620]	; (8019fa8 <_dtoa_r+0x2e0>)
 8019d3a:	9c03      	ldr	r4, [sp, #12]
 8019d3c:	43a3      	bics	r3, r4
 8019d3e:	d11c      	bne.n	8019d7a <_dtoa_r+0xb2>
 8019d40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019d42:	f242 730f 	movw	r3, #9999	; 0x270f
 8019d46:	6013      	str	r3, [r2, #0]
 8019d48:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8019d4c:	ea53 0308 	orrs.w	r3, r3, r8
 8019d50:	f000 84fd 	beq.w	801a74e <_dtoa_r+0xa86>
 8019d54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019d56:	b963      	cbnz	r3, 8019d72 <_dtoa_r+0xaa>
 8019d58:	4b94      	ldr	r3, [pc, #592]	; (8019fac <_dtoa_r+0x2e4>)
 8019d5a:	e01f      	b.n	8019d9c <_dtoa_r+0xd4>
 8019d5c:	4b94      	ldr	r3, [pc, #592]	; (8019fb0 <_dtoa_r+0x2e8>)
 8019d5e:	9301      	str	r3, [sp, #4]
 8019d60:	3308      	adds	r3, #8
 8019d62:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8019d64:	6013      	str	r3, [r2, #0]
 8019d66:	9801      	ldr	r0, [sp, #4]
 8019d68:	b011      	add	sp, #68	; 0x44
 8019d6a:	ecbd 8b02 	vpop	{d8}
 8019d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d72:	4b8e      	ldr	r3, [pc, #568]	; (8019fac <_dtoa_r+0x2e4>)
 8019d74:	9301      	str	r3, [sp, #4]
 8019d76:	3303      	adds	r3, #3
 8019d78:	e7f3      	b.n	8019d62 <_dtoa_r+0x9a>
 8019d7a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8019d7e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d86:	d10b      	bne.n	8019da0 <_dtoa_r+0xd8>
 8019d88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019d8a:	2301      	movs	r3, #1
 8019d8c:	6013      	str	r3, [r2, #0]
 8019d8e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019d90:	2b00      	cmp	r3, #0
 8019d92:	f000 84d9 	beq.w	801a748 <_dtoa_r+0xa80>
 8019d96:	4887      	ldr	r0, [pc, #540]	; (8019fb4 <_dtoa_r+0x2ec>)
 8019d98:	6018      	str	r0, [r3, #0]
 8019d9a:	1e43      	subs	r3, r0, #1
 8019d9c:	9301      	str	r3, [sp, #4]
 8019d9e:	e7e2      	b.n	8019d66 <_dtoa_r+0x9e>
 8019da0:	a90f      	add	r1, sp, #60	; 0x3c
 8019da2:	aa0e      	add	r2, sp, #56	; 0x38
 8019da4:	4630      	mov	r0, r6
 8019da6:	eeb0 0b48 	vmov.f64	d0, d8
 8019daa:	f001 fd85 	bl	801b8b8 <__d2b>
 8019dae:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8019db2:	4605      	mov	r5, r0
 8019db4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8019db6:	2900      	cmp	r1, #0
 8019db8:	d046      	beq.n	8019e48 <_dtoa_r+0x180>
 8019dba:	ee18 4a90 	vmov	r4, s17
 8019dbe:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8019dc2:	ec53 2b18 	vmov	r2, r3, d8
 8019dc6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8019dca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019dce:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8019dd2:	2400      	movs	r4, #0
 8019dd4:	ec43 2b16 	vmov	d6, r2, r3
 8019dd8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8019ddc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8019f88 <_dtoa_r+0x2c0>
 8019de0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8019de4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8019f90 <_dtoa_r+0x2c8>
 8019de8:	eea7 6b05 	vfma.f64	d6, d7, d5
 8019dec:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8019f98 <_dtoa_r+0x2d0>
 8019df0:	ee07 1a90 	vmov	s15, r1
 8019df4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8019df8:	eeb0 7b46 	vmov.f64	d7, d6
 8019dfc:	eea4 7b05 	vfma.f64	d7, d4, d5
 8019e00:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8019e04:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8019e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e0c:	ee16 ba90 	vmov	fp, s13
 8019e10:	940a      	str	r4, [sp, #40]	; 0x28
 8019e12:	d508      	bpl.n	8019e26 <_dtoa_r+0x15e>
 8019e14:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8019e18:	eeb4 6b47 	vcmp.f64	d6, d7
 8019e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e20:	bf18      	it	ne
 8019e22:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8019e26:	f1bb 0f16 	cmp.w	fp, #22
 8019e2a:	d82f      	bhi.n	8019e8c <_dtoa_r+0x1c4>
 8019e2c:	4b62      	ldr	r3, [pc, #392]	; (8019fb8 <_dtoa_r+0x2f0>)
 8019e2e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8019e32:	ed93 7b00 	vldr	d7, [r3]
 8019e36:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8019e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e3e:	d501      	bpl.n	8019e44 <_dtoa_r+0x17c>
 8019e40:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019e44:	2300      	movs	r3, #0
 8019e46:	e022      	b.n	8019e8e <_dtoa_r+0x1c6>
 8019e48:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8019e4a:	4401      	add	r1, r0
 8019e4c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8019e50:	2b20      	cmp	r3, #32
 8019e52:	bfc1      	itttt	gt
 8019e54:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8019e58:	fa04 f303 	lslgt.w	r3, r4, r3
 8019e5c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8019e60:	fa28 f804 	lsrgt.w	r8, r8, r4
 8019e64:	bfd6      	itet	le
 8019e66:	f1c3 0320 	rsble	r3, r3, #32
 8019e6a:	ea43 0808 	orrgt.w	r8, r3, r8
 8019e6e:	fa08 f803 	lslle.w	r8, r8, r3
 8019e72:	ee07 8a90 	vmov	s15, r8
 8019e76:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8019e7a:	3901      	subs	r1, #1
 8019e7c:	ee17 4a90 	vmov	r4, s15
 8019e80:	ec53 2b17 	vmov	r2, r3, d7
 8019e84:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8019e88:	2401      	movs	r4, #1
 8019e8a:	e7a3      	b.n	8019dd4 <_dtoa_r+0x10c>
 8019e8c:	2301      	movs	r3, #1
 8019e8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8019e90:	1a43      	subs	r3, r0, r1
 8019e92:	1e5a      	subs	r2, r3, #1
 8019e94:	bf45      	ittet	mi
 8019e96:	f1c3 0301 	rsbmi	r3, r3, #1
 8019e9a:	9304      	strmi	r3, [sp, #16]
 8019e9c:	2300      	movpl	r3, #0
 8019e9e:	2300      	movmi	r3, #0
 8019ea0:	9205      	str	r2, [sp, #20]
 8019ea2:	bf54      	ite	pl
 8019ea4:	9304      	strpl	r3, [sp, #16]
 8019ea6:	9305      	strmi	r3, [sp, #20]
 8019ea8:	f1bb 0f00 	cmp.w	fp, #0
 8019eac:	db18      	blt.n	8019ee0 <_dtoa_r+0x218>
 8019eae:	9b05      	ldr	r3, [sp, #20]
 8019eb0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8019eb4:	445b      	add	r3, fp
 8019eb6:	9305      	str	r3, [sp, #20]
 8019eb8:	2300      	movs	r3, #0
 8019eba:	9a06      	ldr	r2, [sp, #24]
 8019ebc:	2a09      	cmp	r2, #9
 8019ebe:	d849      	bhi.n	8019f54 <_dtoa_r+0x28c>
 8019ec0:	2a05      	cmp	r2, #5
 8019ec2:	bfc4      	itt	gt
 8019ec4:	3a04      	subgt	r2, #4
 8019ec6:	9206      	strgt	r2, [sp, #24]
 8019ec8:	9a06      	ldr	r2, [sp, #24]
 8019eca:	f1a2 0202 	sub.w	r2, r2, #2
 8019ece:	bfcc      	ite	gt
 8019ed0:	2400      	movgt	r4, #0
 8019ed2:	2401      	movle	r4, #1
 8019ed4:	2a03      	cmp	r2, #3
 8019ed6:	d848      	bhi.n	8019f6a <_dtoa_r+0x2a2>
 8019ed8:	e8df f002 	tbb	[pc, r2]
 8019edc:	3a2c2e0b 	.word	0x3a2c2e0b
 8019ee0:	9b04      	ldr	r3, [sp, #16]
 8019ee2:	2200      	movs	r2, #0
 8019ee4:	eba3 030b 	sub.w	r3, r3, fp
 8019ee8:	9304      	str	r3, [sp, #16]
 8019eea:	9209      	str	r2, [sp, #36]	; 0x24
 8019eec:	f1cb 0300 	rsb	r3, fp, #0
 8019ef0:	e7e3      	b.n	8019eba <_dtoa_r+0x1f2>
 8019ef2:	2200      	movs	r2, #0
 8019ef4:	9207      	str	r2, [sp, #28]
 8019ef6:	9a08      	ldr	r2, [sp, #32]
 8019ef8:	2a00      	cmp	r2, #0
 8019efa:	dc39      	bgt.n	8019f70 <_dtoa_r+0x2a8>
 8019efc:	f04f 0a01 	mov.w	sl, #1
 8019f00:	46d1      	mov	r9, sl
 8019f02:	4652      	mov	r2, sl
 8019f04:	f8cd a020 	str.w	sl, [sp, #32]
 8019f08:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8019f0a:	2100      	movs	r1, #0
 8019f0c:	6079      	str	r1, [r7, #4]
 8019f0e:	2004      	movs	r0, #4
 8019f10:	f100 0c14 	add.w	ip, r0, #20
 8019f14:	4594      	cmp	ip, r2
 8019f16:	6879      	ldr	r1, [r7, #4]
 8019f18:	d92f      	bls.n	8019f7a <_dtoa_r+0x2b2>
 8019f1a:	4630      	mov	r0, r6
 8019f1c:	930d      	str	r3, [sp, #52]	; 0x34
 8019f1e:	f001 f8dd 	bl	801b0dc <_Balloc>
 8019f22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019f24:	9001      	str	r0, [sp, #4]
 8019f26:	4602      	mov	r2, r0
 8019f28:	2800      	cmp	r0, #0
 8019f2a:	d149      	bne.n	8019fc0 <_dtoa_r+0x2f8>
 8019f2c:	4b23      	ldr	r3, [pc, #140]	; (8019fbc <_dtoa_r+0x2f4>)
 8019f2e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8019f32:	e6e1      	b.n	8019cf8 <_dtoa_r+0x30>
 8019f34:	2201      	movs	r2, #1
 8019f36:	e7dd      	b.n	8019ef4 <_dtoa_r+0x22c>
 8019f38:	2200      	movs	r2, #0
 8019f3a:	9207      	str	r2, [sp, #28]
 8019f3c:	9a08      	ldr	r2, [sp, #32]
 8019f3e:	eb0b 0a02 	add.w	sl, fp, r2
 8019f42:	f10a 0901 	add.w	r9, sl, #1
 8019f46:	464a      	mov	r2, r9
 8019f48:	2a01      	cmp	r2, #1
 8019f4a:	bfb8      	it	lt
 8019f4c:	2201      	movlt	r2, #1
 8019f4e:	e7db      	b.n	8019f08 <_dtoa_r+0x240>
 8019f50:	2201      	movs	r2, #1
 8019f52:	e7f2      	b.n	8019f3a <_dtoa_r+0x272>
 8019f54:	2401      	movs	r4, #1
 8019f56:	2200      	movs	r2, #0
 8019f58:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8019f5c:	f04f 3aff 	mov.w	sl, #4294967295
 8019f60:	2100      	movs	r1, #0
 8019f62:	46d1      	mov	r9, sl
 8019f64:	2212      	movs	r2, #18
 8019f66:	9108      	str	r1, [sp, #32]
 8019f68:	e7ce      	b.n	8019f08 <_dtoa_r+0x240>
 8019f6a:	2201      	movs	r2, #1
 8019f6c:	9207      	str	r2, [sp, #28]
 8019f6e:	e7f5      	b.n	8019f5c <_dtoa_r+0x294>
 8019f70:	f8dd a020 	ldr.w	sl, [sp, #32]
 8019f74:	46d1      	mov	r9, sl
 8019f76:	4652      	mov	r2, sl
 8019f78:	e7c6      	b.n	8019f08 <_dtoa_r+0x240>
 8019f7a:	3101      	adds	r1, #1
 8019f7c:	6079      	str	r1, [r7, #4]
 8019f7e:	0040      	lsls	r0, r0, #1
 8019f80:	e7c6      	b.n	8019f10 <_dtoa_r+0x248>
 8019f82:	bf00      	nop
 8019f84:	f3af 8000 	nop.w
 8019f88:	636f4361 	.word	0x636f4361
 8019f8c:	3fd287a7 	.word	0x3fd287a7
 8019f90:	8b60c8b3 	.word	0x8b60c8b3
 8019f94:	3fc68a28 	.word	0x3fc68a28
 8019f98:	509f79fb 	.word	0x509f79fb
 8019f9c:	3fd34413 	.word	0x3fd34413
 8019fa0:	08033080 	.word	0x08033080
 8019fa4:	0803323e 	.word	0x0803323e
 8019fa8:	7ff00000 	.word	0x7ff00000
 8019fac:	0803323a 	.word	0x0803323a
 8019fb0:	08033231 	.word	0x08033231
 8019fb4:	0803300d 	.word	0x0803300d
 8019fb8:	08033410 	.word	0x08033410
 8019fbc:	08033299 	.word	0x08033299
 8019fc0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8019fc2:	9901      	ldr	r1, [sp, #4]
 8019fc4:	6011      	str	r1, [r2, #0]
 8019fc6:	f1b9 0f0e 	cmp.w	r9, #14
 8019fca:	d86c      	bhi.n	801a0a6 <_dtoa_r+0x3de>
 8019fcc:	2c00      	cmp	r4, #0
 8019fce:	d06a      	beq.n	801a0a6 <_dtoa_r+0x3de>
 8019fd0:	f1bb 0f00 	cmp.w	fp, #0
 8019fd4:	f340 80a0 	ble.w	801a118 <_dtoa_r+0x450>
 8019fd8:	49c1      	ldr	r1, [pc, #772]	; (801a2e0 <_dtoa_r+0x618>)
 8019fda:	f00b 020f 	and.w	r2, fp, #15
 8019fde:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8019fe2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8019fe6:	ed92 7b00 	vldr	d7, [r2]
 8019fea:	ea4f 112b 	mov.w	r1, fp, asr #4
 8019fee:	f000 8087 	beq.w	801a100 <_dtoa_r+0x438>
 8019ff2:	4abc      	ldr	r2, [pc, #752]	; (801a2e4 <_dtoa_r+0x61c>)
 8019ff4:	ed92 6b08 	vldr	d6, [r2, #32]
 8019ff8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8019ffc:	ed8d 6b02 	vstr	d6, [sp, #8]
 801a000:	f001 010f 	and.w	r1, r1, #15
 801a004:	2203      	movs	r2, #3
 801a006:	48b7      	ldr	r0, [pc, #732]	; (801a2e4 <_dtoa_r+0x61c>)
 801a008:	2900      	cmp	r1, #0
 801a00a:	d17b      	bne.n	801a104 <_dtoa_r+0x43c>
 801a00c:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a010:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801a014:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a018:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a01a:	2900      	cmp	r1, #0
 801a01c:	f000 80a2 	beq.w	801a164 <_dtoa_r+0x49c>
 801a020:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801a024:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a028:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a02c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a030:	f140 8098 	bpl.w	801a164 <_dtoa_r+0x49c>
 801a034:	f1b9 0f00 	cmp.w	r9, #0
 801a038:	f000 8094 	beq.w	801a164 <_dtoa_r+0x49c>
 801a03c:	f1ba 0f00 	cmp.w	sl, #0
 801a040:	dd2f      	ble.n	801a0a2 <_dtoa_r+0x3da>
 801a042:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801a046:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a04a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a04e:	f10b 37ff 	add.w	r7, fp, #4294967295
 801a052:	3201      	adds	r2, #1
 801a054:	4650      	mov	r0, sl
 801a056:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a05a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801a05e:	ee07 2a90 	vmov	s15, r2
 801a062:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a066:	eea7 5b06 	vfma.f64	d5, d7, d6
 801a06a:	ee15 4a90 	vmov	r4, s11
 801a06e:	ec52 1b15 	vmov	r1, r2, d5
 801a072:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801a076:	2800      	cmp	r0, #0
 801a078:	d177      	bne.n	801a16a <_dtoa_r+0x4a2>
 801a07a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801a07e:	ee36 6b47 	vsub.f64	d6, d6, d7
 801a082:	ec42 1b17 	vmov	d7, r1, r2
 801a086:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a08a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a08e:	f300 8263 	bgt.w	801a558 <_dtoa_r+0x890>
 801a092:	eeb1 7b47 	vneg.f64	d7, d7
 801a096:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a09a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a09e:	f100 8258 	bmi.w	801a552 <_dtoa_r+0x88a>
 801a0a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 801a0a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a0a8:	2a00      	cmp	r2, #0
 801a0aa:	f2c0 811d 	blt.w	801a2e8 <_dtoa_r+0x620>
 801a0ae:	f1bb 0f0e 	cmp.w	fp, #14
 801a0b2:	f300 8119 	bgt.w	801a2e8 <_dtoa_r+0x620>
 801a0b6:	4b8a      	ldr	r3, [pc, #552]	; (801a2e0 <_dtoa_r+0x618>)
 801a0b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a0bc:	ed93 6b00 	vldr	d6, [r3]
 801a0c0:	9b08      	ldr	r3, [sp, #32]
 801a0c2:	2b00      	cmp	r3, #0
 801a0c4:	f280 80b7 	bge.w	801a236 <_dtoa_r+0x56e>
 801a0c8:	f1b9 0f00 	cmp.w	r9, #0
 801a0cc:	f300 80b3 	bgt.w	801a236 <_dtoa_r+0x56e>
 801a0d0:	f040 823f 	bne.w	801a552 <_dtoa_r+0x88a>
 801a0d4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801a0d8:	ee26 6b07 	vmul.f64	d6, d6, d7
 801a0dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a0e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a0e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a0e8:	464c      	mov	r4, r9
 801a0ea:	464f      	mov	r7, r9
 801a0ec:	f280 8215 	bge.w	801a51a <_dtoa_r+0x852>
 801a0f0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a0f4:	2331      	movs	r3, #49	; 0x31
 801a0f6:	f808 3b01 	strb.w	r3, [r8], #1
 801a0fa:	f10b 0b01 	add.w	fp, fp, #1
 801a0fe:	e211      	b.n	801a524 <_dtoa_r+0x85c>
 801a100:	2202      	movs	r2, #2
 801a102:	e780      	b.n	801a006 <_dtoa_r+0x33e>
 801a104:	07cc      	lsls	r4, r1, #31
 801a106:	d504      	bpl.n	801a112 <_dtoa_r+0x44a>
 801a108:	ed90 6b00 	vldr	d6, [r0]
 801a10c:	3201      	adds	r2, #1
 801a10e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a112:	1049      	asrs	r1, r1, #1
 801a114:	3008      	adds	r0, #8
 801a116:	e777      	b.n	801a008 <_dtoa_r+0x340>
 801a118:	d022      	beq.n	801a160 <_dtoa_r+0x498>
 801a11a:	f1cb 0100 	rsb	r1, fp, #0
 801a11e:	4a70      	ldr	r2, [pc, #448]	; (801a2e0 <_dtoa_r+0x618>)
 801a120:	f001 000f 	and.w	r0, r1, #15
 801a124:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801a128:	ed92 7b00 	vldr	d7, [r2]
 801a12c:	ee28 7b07 	vmul.f64	d7, d8, d7
 801a130:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a134:	486b      	ldr	r0, [pc, #428]	; (801a2e4 <_dtoa_r+0x61c>)
 801a136:	1109      	asrs	r1, r1, #4
 801a138:	2400      	movs	r4, #0
 801a13a:	2202      	movs	r2, #2
 801a13c:	b929      	cbnz	r1, 801a14a <_dtoa_r+0x482>
 801a13e:	2c00      	cmp	r4, #0
 801a140:	f43f af6a 	beq.w	801a018 <_dtoa_r+0x350>
 801a144:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a148:	e766      	b.n	801a018 <_dtoa_r+0x350>
 801a14a:	07cf      	lsls	r7, r1, #31
 801a14c:	d505      	bpl.n	801a15a <_dtoa_r+0x492>
 801a14e:	ed90 6b00 	vldr	d6, [r0]
 801a152:	3201      	adds	r2, #1
 801a154:	2401      	movs	r4, #1
 801a156:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a15a:	1049      	asrs	r1, r1, #1
 801a15c:	3008      	adds	r0, #8
 801a15e:	e7ed      	b.n	801a13c <_dtoa_r+0x474>
 801a160:	2202      	movs	r2, #2
 801a162:	e759      	b.n	801a018 <_dtoa_r+0x350>
 801a164:	465f      	mov	r7, fp
 801a166:	4648      	mov	r0, r9
 801a168:	e775      	b.n	801a056 <_dtoa_r+0x38e>
 801a16a:	ec42 1b17 	vmov	d7, r1, r2
 801a16e:	4a5c      	ldr	r2, [pc, #368]	; (801a2e0 <_dtoa_r+0x618>)
 801a170:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801a174:	ed12 4b02 	vldr	d4, [r2, #-8]
 801a178:	9a01      	ldr	r2, [sp, #4]
 801a17a:	1814      	adds	r4, r2, r0
 801a17c:	9a07      	ldr	r2, [sp, #28]
 801a17e:	b352      	cbz	r2, 801a1d6 <_dtoa_r+0x50e>
 801a180:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801a184:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801a188:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a18c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801a190:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801a194:	ee35 7b47 	vsub.f64	d7, d5, d7
 801a198:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a19c:	ee14 2a90 	vmov	r2, s9
 801a1a0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a1a4:	3230      	adds	r2, #48	; 0x30
 801a1a6:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a1aa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a1ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a1b2:	f808 2b01 	strb.w	r2, [r8], #1
 801a1b6:	d439      	bmi.n	801a22c <_dtoa_r+0x564>
 801a1b8:	ee32 5b46 	vsub.f64	d5, d2, d6
 801a1bc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801a1c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a1c4:	d472      	bmi.n	801a2ac <_dtoa_r+0x5e4>
 801a1c6:	45a0      	cmp	r8, r4
 801a1c8:	f43f af6b 	beq.w	801a0a2 <_dtoa_r+0x3da>
 801a1cc:	ee27 7b03 	vmul.f64	d7, d7, d3
 801a1d0:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a1d4:	e7e0      	b.n	801a198 <_dtoa_r+0x4d0>
 801a1d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a1da:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a1de:	4621      	mov	r1, r4
 801a1e0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801a1e4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a1e8:	ee14 2a90 	vmov	r2, s9
 801a1ec:	3230      	adds	r2, #48	; 0x30
 801a1ee:	f808 2b01 	strb.w	r2, [r8], #1
 801a1f2:	45a0      	cmp	r8, r4
 801a1f4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a1f8:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a1fc:	d118      	bne.n	801a230 <_dtoa_r+0x568>
 801a1fe:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801a202:	ee37 4b05 	vadd.f64	d4, d7, d5
 801a206:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801a20a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a20e:	dc4d      	bgt.n	801a2ac <_dtoa_r+0x5e4>
 801a210:	ee35 7b47 	vsub.f64	d7, d5, d7
 801a214:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a21c:	f57f af41 	bpl.w	801a0a2 <_dtoa_r+0x3da>
 801a220:	4688      	mov	r8, r1
 801a222:	3901      	subs	r1, #1
 801a224:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801a228:	2b30      	cmp	r3, #48	; 0x30
 801a22a:	d0f9      	beq.n	801a220 <_dtoa_r+0x558>
 801a22c:	46bb      	mov	fp, r7
 801a22e:	e02a      	b.n	801a286 <_dtoa_r+0x5be>
 801a230:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a234:	e7d6      	b.n	801a1e4 <_dtoa_r+0x51c>
 801a236:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a23a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801a23e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a242:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801a246:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801a24a:	ee15 3a10 	vmov	r3, s10
 801a24e:	3330      	adds	r3, #48	; 0x30
 801a250:	f808 3b01 	strb.w	r3, [r8], #1
 801a254:	9b01      	ldr	r3, [sp, #4]
 801a256:	eba8 0303 	sub.w	r3, r8, r3
 801a25a:	4599      	cmp	r9, r3
 801a25c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801a260:	eea3 7b46 	vfms.f64	d7, d3, d6
 801a264:	d133      	bne.n	801a2ce <_dtoa_r+0x606>
 801a266:	ee37 7b07 	vadd.f64	d7, d7, d7
 801a26a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a26e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a272:	dc1a      	bgt.n	801a2aa <_dtoa_r+0x5e2>
 801a274:	eeb4 7b46 	vcmp.f64	d7, d6
 801a278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a27c:	d103      	bne.n	801a286 <_dtoa_r+0x5be>
 801a27e:	ee15 3a10 	vmov	r3, s10
 801a282:	07d9      	lsls	r1, r3, #31
 801a284:	d411      	bmi.n	801a2aa <_dtoa_r+0x5e2>
 801a286:	4629      	mov	r1, r5
 801a288:	4630      	mov	r0, r6
 801a28a:	f000 ff67 	bl	801b15c <_Bfree>
 801a28e:	2300      	movs	r3, #0
 801a290:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a292:	f888 3000 	strb.w	r3, [r8]
 801a296:	f10b 0301 	add.w	r3, fp, #1
 801a29a:	6013      	str	r3, [r2, #0]
 801a29c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a29e:	2b00      	cmp	r3, #0
 801a2a0:	f43f ad61 	beq.w	8019d66 <_dtoa_r+0x9e>
 801a2a4:	f8c3 8000 	str.w	r8, [r3]
 801a2a8:	e55d      	b.n	8019d66 <_dtoa_r+0x9e>
 801a2aa:	465f      	mov	r7, fp
 801a2ac:	4643      	mov	r3, r8
 801a2ae:	4698      	mov	r8, r3
 801a2b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a2b4:	2a39      	cmp	r2, #57	; 0x39
 801a2b6:	d106      	bne.n	801a2c6 <_dtoa_r+0x5fe>
 801a2b8:	9a01      	ldr	r2, [sp, #4]
 801a2ba:	429a      	cmp	r2, r3
 801a2bc:	d1f7      	bne.n	801a2ae <_dtoa_r+0x5e6>
 801a2be:	9901      	ldr	r1, [sp, #4]
 801a2c0:	2230      	movs	r2, #48	; 0x30
 801a2c2:	3701      	adds	r7, #1
 801a2c4:	700a      	strb	r2, [r1, #0]
 801a2c6:	781a      	ldrb	r2, [r3, #0]
 801a2c8:	3201      	adds	r2, #1
 801a2ca:	701a      	strb	r2, [r3, #0]
 801a2cc:	e7ae      	b.n	801a22c <_dtoa_r+0x564>
 801a2ce:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a2d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a2d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a2da:	d1b2      	bne.n	801a242 <_dtoa_r+0x57a>
 801a2dc:	e7d3      	b.n	801a286 <_dtoa_r+0x5be>
 801a2de:	bf00      	nop
 801a2e0:	08033410 	.word	0x08033410
 801a2e4:	080333e8 	.word	0x080333e8
 801a2e8:	9907      	ldr	r1, [sp, #28]
 801a2ea:	2900      	cmp	r1, #0
 801a2ec:	f000 80d0 	beq.w	801a490 <_dtoa_r+0x7c8>
 801a2f0:	9906      	ldr	r1, [sp, #24]
 801a2f2:	2901      	cmp	r1, #1
 801a2f4:	f300 80b4 	bgt.w	801a460 <_dtoa_r+0x798>
 801a2f8:	990a      	ldr	r1, [sp, #40]	; 0x28
 801a2fa:	2900      	cmp	r1, #0
 801a2fc:	f000 80ac 	beq.w	801a458 <_dtoa_r+0x790>
 801a300:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a304:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a308:	461c      	mov	r4, r3
 801a30a:	930a      	str	r3, [sp, #40]	; 0x28
 801a30c:	9b04      	ldr	r3, [sp, #16]
 801a30e:	4413      	add	r3, r2
 801a310:	9304      	str	r3, [sp, #16]
 801a312:	9b05      	ldr	r3, [sp, #20]
 801a314:	2101      	movs	r1, #1
 801a316:	4413      	add	r3, r2
 801a318:	4630      	mov	r0, r6
 801a31a:	9305      	str	r3, [sp, #20]
 801a31c:	f001 f820 	bl	801b360 <__i2b>
 801a320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a322:	4607      	mov	r7, r0
 801a324:	f1b8 0f00 	cmp.w	r8, #0
 801a328:	dd0d      	ble.n	801a346 <_dtoa_r+0x67e>
 801a32a:	9a05      	ldr	r2, [sp, #20]
 801a32c:	2a00      	cmp	r2, #0
 801a32e:	dd0a      	ble.n	801a346 <_dtoa_r+0x67e>
 801a330:	4542      	cmp	r2, r8
 801a332:	9904      	ldr	r1, [sp, #16]
 801a334:	bfa8      	it	ge
 801a336:	4642      	movge	r2, r8
 801a338:	1a89      	subs	r1, r1, r2
 801a33a:	9104      	str	r1, [sp, #16]
 801a33c:	9905      	ldr	r1, [sp, #20]
 801a33e:	eba8 0802 	sub.w	r8, r8, r2
 801a342:	1a8a      	subs	r2, r1, r2
 801a344:	9205      	str	r2, [sp, #20]
 801a346:	b303      	cbz	r3, 801a38a <_dtoa_r+0x6c2>
 801a348:	9a07      	ldr	r2, [sp, #28]
 801a34a:	2a00      	cmp	r2, #0
 801a34c:	f000 80a5 	beq.w	801a49a <_dtoa_r+0x7d2>
 801a350:	2c00      	cmp	r4, #0
 801a352:	dd13      	ble.n	801a37c <_dtoa_r+0x6b4>
 801a354:	4639      	mov	r1, r7
 801a356:	4622      	mov	r2, r4
 801a358:	4630      	mov	r0, r6
 801a35a:	930d      	str	r3, [sp, #52]	; 0x34
 801a35c:	f001 f8c0 	bl	801b4e0 <__pow5mult>
 801a360:	462a      	mov	r2, r5
 801a362:	4601      	mov	r1, r0
 801a364:	4607      	mov	r7, r0
 801a366:	4630      	mov	r0, r6
 801a368:	f001 f810 	bl	801b38c <__multiply>
 801a36c:	4629      	mov	r1, r5
 801a36e:	900a      	str	r0, [sp, #40]	; 0x28
 801a370:	4630      	mov	r0, r6
 801a372:	f000 fef3 	bl	801b15c <_Bfree>
 801a376:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a378:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a37a:	4615      	mov	r5, r2
 801a37c:	1b1a      	subs	r2, r3, r4
 801a37e:	d004      	beq.n	801a38a <_dtoa_r+0x6c2>
 801a380:	4629      	mov	r1, r5
 801a382:	4630      	mov	r0, r6
 801a384:	f001 f8ac 	bl	801b4e0 <__pow5mult>
 801a388:	4605      	mov	r5, r0
 801a38a:	2101      	movs	r1, #1
 801a38c:	4630      	mov	r0, r6
 801a38e:	f000 ffe7 	bl	801b360 <__i2b>
 801a392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a394:	2b00      	cmp	r3, #0
 801a396:	4604      	mov	r4, r0
 801a398:	f340 8081 	ble.w	801a49e <_dtoa_r+0x7d6>
 801a39c:	461a      	mov	r2, r3
 801a39e:	4601      	mov	r1, r0
 801a3a0:	4630      	mov	r0, r6
 801a3a2:	f001 f89d 	bl	801b4e0 <__pow5mult>
 801a3a6:	9b06      	ldr	r3, [sp, #24]
 801a3a8:	2b01      	cmp	r3, #1
 801a3aa:	4604      	mov	r4, r0
 801a3ac:	dd7a      	ble.n	801a4a4 <_dtoa_r+0x7dc>
 801a3ae:	2300      	movs	r3, #0
 801a3b0:	930a      	str	r3, [sp, #40]	; 0x28
 801a3b2:	6922      	ldr	r2, [r4, #16]
 801a3b4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801a3b8:	6910      	ldr	r0, [r2, #16]
 801a3ba:	f000 ff81 	bl	801b2c0 <__hi0bits>
 801a3be:	f1c0 0020 	rsb	r0, r0, #32
 801a3c2:	9b05      	ldr	r3, [sp, #20]
 801a3c4:	4418      	add	r0, r3
 801a3c6:	f010 001f 	ands.w	r0, r0, #31
 801a3ca:	f000 808c 	beq.w	801a4e6 <_dtoa_r+0x81e>
 801a3ce:	f1c0 0220 	rsb	r2, r0, #32
 801a3d2:	2a04      	cmp	r2, #4
 801a3d4:	f340 8085 	ble.w	801a4e2 <_dtoa_r+0x81a>
 801a3d8:	f1c0 001c 	rsb	r0, r0, #28
 801a3dc:	9b04      	ldr	r3, [sp, #16]
 801a3de:	4403      	add	r3, r0
 801a3e0:	9304      	str	r3, [sp, #16]
 801a3e2:	9b05      	ldr	r3, [sp, #20]
 801a3e4:	4403      	add	r3, r0
 801a3e6:	4480      	add	r8, r0
 801a3e8:	9305      	str	r3, [sp, #20]
 801a3ea:	9b04      	ldr	r3, [sp, #16]
 801a3ec:	2b00      	cmp	r3, #0
 801a3ee:	dd05      	ble.n	801a3fc <_dtoa_r+0x734>
 801a3f0:	4629      	mov	r1, r5
 801a3f2:	461a      	mov	r2, r3
 801a3f4:	4630      	mov	r0, r6
 801a3f6:	f001 f8cd 	bl	801b594 <__lshift>
 801a3fa:	4605      	mov	r5, r0
 801a3fc:	9b05      	ldr	r3, [sp, #20]
 801a3fe:	2b00      	cmp	r3, #0
 801a400:	dd05      	ble.n	801a40e <_dtoa_r+0x746>
 801a402:	4621      	mov	r1, r4
 801a404:	461a      	mov	r2, r3
 801a406:	4630      	mov	r0, r6
 801a408:	f001 f8c4 	bl	801b594 <__lshift>
 801a40c:	4604      	mov	r4, r0
 801a40e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a410:	2b00      	cmp	r3, #0
 801a412:	d06a      	beq.n	801a4ea <_dtoa_r+0x822>
 801a414:	4621      	mov	r1, r4
 801a416:	4628      	mov	r0, r5
 801a418:	f001 f92c 	bl	801b674 <__mcmp>
 801a41c:	2800      	cmp	r0, #0
 801a41e:	da64      	bge.n	801a4ea <_dtoa_r+0x822>
 801a420:	2300      	movs	r3, #0
 801a422:	4629      	mov	r1, r5
 801a424:	220a      	movs	r2, #10
 801a426:	4630      	mov	r0, r6
 801a428:	f000 feba 	bl	801b1a0 <__multadd>
 801a42c:	9b07      	ldr	r3, [sp, #28]
 801a42e:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a432:	4605      	mov	r5, r0
 801a434:	2b00      	cmp	r3, #0
 801a436:	f000 8191 	beq.w	801a75c <_dtoa_r+0xa94>
 801a43a:	4639      	mov	r1, r7
 801a43c:	2300      	movs	r3, #0
 801a43e:	220a      	movs	r2, #10
 801a440:	4630      	mov	r0, r6
 801a442:	f000 fead 	bl	801b1a0 <__multadd>
 801a446:	f1ba 0f00 	cmp.w	sl, #0
 801a44a:	4607      	mov	r7, r0
 801a44c:	f300 808d 	bgt.w	801a56a <_dtoa_r+0x8a2>
 801a450:	9b06      	ldr	r3, [sp, #24]
 801a452:	2b02      	cmp	r3, #2
 801a454:	dc50      	bgt.n	801a4f8 <_dtoa_r+0x830>
 801a456:	e088      	b.n	801a56a <_dtoa_r+0x8a2>
 801a458:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a45a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801a45e:	e751      	b.n	801a304 <_dtoa_r+0x63c>
 801a460:	f109 34ff 	add.w	r4, r9, #4294967295
 801a464:	42a3      	cmp	r3, r4
 801a466:	bfbf      	itttt	lt
 801a468:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 801a46a:	1ae3      	sublt	r3, r4, r3
 801a46c:	18d2      	addlt	r2, r2, r3
 801a46e:	9209      	strlt	r2, [sp, #36]	; 0x24
 801a470:	bfb6      	itet	lt
 801a472:	4623      	movlt	r3, r4
 801a474:	1b1c      	subge	r4, r3, r4
 801a476:	2400      	movlt	r4, #0
 801a478:	f1b9 0f00 	cmp.w	r9, #0
 801a47c:	bfb5      	itete	lt
 801a47e:	9a04      	ldrlt	r2, [sp, #16]
 801a480:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801a484:	eba2 0809 	sublt.w	r8, r2, r9
 801a488:	464a      	movge	r2, r9
 801a48a:	bfb8      	it	lt
 801a48c:	2200      	movlt	r2, #0
 801a48e:	e73c      	b.n	801a30a <_dtoa_r+0x642>
 801a490:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a494:	9f07      	ldr	r7, [sp, #28]
 801a496:	461c      	mov	r4, r3
 801a498:	e744      	b.n	801a324 <_dtoa_r+0x65c>
 801a49a:	461a      	mov	r2, r3
 801a49c:	e770      	b.n	801a380 <_dtoa_r+0x6b8>
 801a49e:	9b06      	ldr	r3, [sp, #24]
 801a4a0:	2b01      	cmp	r3, #1
 801a4a2:	dc18      	bgt.n	801a4d6 <_dtoa_r+0x80e>
 801a4a4:	9b02      	ldr	r3, [sp, #8]
 801a4a6:	b9b3      	cbnz	r3, 801a4d6 <_dtoa_r+0x80e>
 801a4a8:	9b03      	ldr	r3, [sp, #12]
 801a4aa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801a4ae:	b9a2      	cbnz	r2, 801a4da <_dtoa_r+0x812>
 801a4b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801a4b4:	0d12      	lsrs	r2, r2, #20
 801a4b6:	0512      	lsls	r2, r2, #20
 801a4b8:	b18a      	cbz	r2, 801a4de <_dtoa_r+0x816>
 801a4ba:	9b04      	ldr	r3, [sp, #16]
 801a4bc:	3301      	adds	r3, #1
 801a4be:	9304      	str	r3, [sp, #16]
 801a4c0:	9b05      	ldr	r3, [sp, #20]
 801a4c2:	3301      	adds	r3, #1
 801a4c4:	9305      	str	r3, [sp, #20]
 801a4c6:	2301      	movs	r3, #1
 801a4c8:	930a      	str	r3, [sp, #40]	; 0x28
 801a4ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a4cc:	2b00      	cmp	r3, #0
 801a4ce:	f47f af70 	bne.w	801a3b2 <_dtoa_r+0x6ea>
 801a4d2:	2001      	movs	r0, #1
 801a4d4:	e775      	b.n	801a3c2 <_dtoa_r+0x6fa>
 801a4d6:	2300      	movs	r3, #0
 801a4d8:	e7f6      	b.n	801a4c8 <_dtoa_r+0x800>
 801a4da:	9b02      	ldr	r3, [sp, #8]
 801a4dc:	e7f4      	b.n	801a4c8 <_dtoa_r+0x800>
 801a4de:	920a      	str	r2, [sp, #40]	; 0x28
 801a4e0:	e7f3      	b.n	801a4ca <_dtoa_r+0x802>
 801a4e2:	d082      	beq.n	801a3ea <_dtoa_r+0x722>
 801a4e4:	4610      	mov	r0, r2
 801a4e6:	301c      	adds	r0, #28
 801a4e8:	e778      	b.n	801a3dc <_dtoa_r+0x714>
 801a4ea:	f1b9 0f00 	cmp.w	r9, #0
 801a4ee:	dc37      	bgt.n	801a560 <_dtoa_r+0x898>
 801a4f0:	9b06      	ldr	r3, [sp, #24]
 801a4f2:	2b02      	cmp	r3, #2
 801a4f4:	dd34      	ble.n	801a560 <_dtoa_r+0x898>
 801a4f6:	46ca      	mov	sl, r9
 801a4f8:	f1ba 0f00 	cmp.w	sl, #0
 801a4fc:	d10d      	bne.n	801a51a <_dtoa_r+0x852>
 801a4fe:	4621      	mov	r1, r4
 801a500:	4653      	mov	r3, sl
 801a502:	2205      	movs	r2, #5
 801a504:	4630      	mov	r0, r6
 801a506:	f000 fe4b 	bl	801b1a0 <__multadd>
 801a50a:	4601      	mov	r1, r0
 801a50c:	4604      	mov	r4, r0
 801a50e:	4628      	mov	r0, r5
 801a510:	f001 f8b0 	bl	801b674 <__mcmp>
 801a514:	2800      	cmp	r0, #0
 801a516:	f73f adeb 	bgt.w	801a0f0 <_dtoa_r+0x428>
 801a51a:	9b08      	ldr	r3, [sp, #32]
 801a51c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a520:	ea6f 0b03 	mvn.w	fp, r3
 801a524:	f04f 0900 	mov.w	r9, #0
 801a528:	4621      	mov	r1, r4
 801a52a:	4630      	mov	r0, r6
 801a52c:	f000 fe16 	bl	801b15c <_Bfree>
 801a530:	2f00      	cmp	r7, #0
 801a532:	f43f aea8 	beq.w	801a286 <_dtoa_r+0x5be>
 801a536:	f1b9 0f00 	cmp.w	r9, #0
 801a53a:	d005      	beq.n	801a548 <_dtoa_r+0x880>
 801a53c:	45b9      	cmp	r9, r7
 801a53e:	d003      	beq.n	801a548 <_dtoa_r+0x880>
 801a540:	4649      	mov	r1, r9
 801a542:	4630      	mov	r0, r6
 801a544:	f000 fe0a 	bl	801b15c <_Bfree>
 801a548:	4639      	mov	r1, r7
 801a54a:	4630      	mov	r0, r6
 801a54c:	f000 fe06 	bl	801b15c <_Bfree>
 801a550:	e699      	b.n	801a286 <_dtoa_r+0x5be>
 801a552:	2400      	movs	r4, #0
 801a554:	4627      	mov	r7, r4
 801a556:	e7e0      	b.n	801a51a <_dtoa_r+0x852>
 801a558:	46bb      	mov	fp, r7
 801a55a:	4604      	mov	r4, r0
 801a55c:	4607      	mov	r7, r0
 801a55e:	e5c7      	b.n	801a0f0 <_dtoa_r+0x428>
 801a560:	9b07      	ldr	r3, [sp, #28]
 801a562:	46ca      	mov	sl, r9
 801a564:	2b00      	cmp	r3, #0
 801a566:	f000 8100 	beq.w	801a76a <_dtoa_r+0xaa2>
 801a56a:	f1b8 0f00 	cmp.w	r8, #0
 801a56e:	dd05      	ble.n	801a57c <_dtoa_r+0x8b4>
 801a570:	4639      	mov	r1, r7
 801a572:	4642      	mov	r2, r8
 801a574:	4630      	mov	r0, r6
 801a576:	f001 f80d 	bl	801b594 <__lshift>
 801a57a:	4607      	mov	r7, r0
 801a57c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a57e:	2b00      	cmp	r3, #0
 801a580:	d05d      	beq.n	801a63e <_dtoa_r+0x976>
 801a582:	6879      	ldr	r1, [r7, #4]
 801a584:	4630      	mov	r0, r6
 801a586:	f000 fda9 	bl	801b0dc <_Balloc>
 801a58a:	4680      	mov	r8, r0
 801a58c:	b928      	cbnz	r0, 801a59a <_dtoa_r+0x8d2>
 801a58e:	4b82      	ldr	r3, [pc, #520]	; (801a798 <_dtoa_r+0xad0>)
 801a590:	4602      	mov	r2, r0
 801a592:	f240 21ea 	movw	r1, #746	; 0x2ea
 801a596:	f7ff bbaf 	b.w	8019cf8 <_dtoa_r+0x30>
 801a59a:	693a      	ldr	r2, [r7, #16]
 801a59c:	3202      	adds	r2, #2
 801a59e:	0092      	lsls	r2, r2, #2
 801a5a0:	f107 010c 	add.w	r1, r7, #12
 801a5a4:	300c      	adds	r0, #12
 801a5a6:	f7fd fec1 	bl	801832c <memcpy>
 801a5aa:	2201      	movs	r2, #1
 801a5ac:	4641      	mov	r1, r8
 801a5ae:	4630      	mov	r0, r6
 801a5b0:	f000 fff0 	bl	801b594 <__lshift>
 801a5b4:	9b01      	ldr	r3, [sp, #4]
 801a5b6:	3301      	adds	r3, #1
 801a5b8:	9304      	str	r3, [sp, #16]
 801a5ba:	9b01      	ldr	r3, [sp, #4]
 801a5bc:	4453      	add	r3, sl
 801a5be:	9308      	str	r3, [sp, #32]
 801a5c0:	9b02      	ldr	r3, [sp, #8]
 801a5c2:	f003 0301 	and.w	r3, r3, #1
 801a5c6:	46b9      	mov	r9, r7
 801a5c8:	9307      	str	r3, [sp, #28]
 801a5ca:	4607      	mov	r7, r0
 801a5cc:	9b04      	ldr	r3, [sp, #16]
 801a5ce:	4621      	mov	r1, r4
 801a5d0:	3b01      	subs	r3, #1
 801a5d2:	4628      	mov	r0, r5
 801a5d4:	9302      	str	r3, [sp, #8]
 801a5d6:	f7ff faeb 	bl	8019bb0 <quorem>
 801a5da:	4603      	mov	r3, r0
 801a5dc:	3330      	adds	r3, #48	; 0x30
 801a5de:	9005      	str	r0, [sp, #20]
 801a5e0:	4649      	mov	r1, r9
 801a5e2:	4628      	mov	r0, r5
 801a5e4:	9309      	str	r3, [sp, #36]	; 0x24
 801a5e6:	f001 f845 	bl	801b674 <__mcmp>
 801a5ea:	463a      	mov	r2, r7
 801a5ec:	4682      	mov	sl, r0
 801a5ee:	4621      	mov	r1, r4
 801a5f0:	4630      	mov	r0, r6
 801a5f2:	f001 f85b 	bl	801b6ac <__mdiff>
 801a5f6:	68c2      	ldr	r2, [r0, #12]
 801a5f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a5fa:	4680      	mov	r8, r0
 801a5fc:	bb0a      	cbnz	r2, 801a642 <_dtoa_r+0x97a>
 801a5fe:	4601      	mov	r1, r0
 801a600:	4628      	mov	r0, r5
 801a602:	f001 f837 	bl	801b674 <__mcmp>
 801a606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a608:	4602      	mov	r2, r0
 801a60a:	4641      	mov	r1, r8
 801a60c:	4630      	mov	r0, r6
 801a60e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801a612:	f000 fda3 	bl	801b15c <_Bfree>
 801a616:	9b06      	ldr	r3, [sp, #24]
 801a618:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a61a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a61e:	ea43 0102 	orr.w	r1, r3, r2
 801a622:	9b07      	ldr	r3, [sp, #28]
 801a624:	430b      	orrs	r3, r1
 801a626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a628:	d10d      	bne.n	801a646 <_dtoa_r+0x97e>
 801a62a:	2b39      	cmp	r3, #57	; 0x39
 801a62c:	d029      	beq.n	801a682 <_dtoa_r+0x9ba>
 801a62e:	f1ba 0f00 	cmp.w	sl, #0
 801a632:	dd01      	ble.n	801a638 <_dtoa_r+0x970>
 801a634:	9b05      	ldr	r3, [sp, #20]
 801a636:	3331      	adds	r3, #49	; 0x31
 801a638:	9a02      	ldr	r2, [sp, #8]
 801a63a:	7013      	strb	r3, [r2, #0]
 801a63c:	e774      	b.n	801a528 <_dtoa_r+0x860>
 801a63e:	4638      	mov	r0, r7
 801a640:	e7b8      	b.n	801a5b4 <_dtoa_r+0x8ec>
 801a642:	2201      	movs	r2, #1
 801a644:	e7e1      	b.n	801a60a <_dtoa_r+0x942>
 801a646:	f1ba 0f00 	cmp.w	sl, #0
 801a64a:	db06      	blt.n	801a65a <_dtoa_r+0x992>
 801a64c:	9906      	ldr	r1, [sp, #24]
 801a64e:	ea41 0a0a 	orr.w	sl, r1, sl
 801a652:	9907      	ldr	r1, [sp, #28]
 801a654:	ea5a 0101 	orrs.w	r1, sl, r1
 801a658:	d120      	bne.n	801a69c <_dtoa_r+0x9d4>
 801a65a:	2a00      	cmp	r2, #0
 801a65c:	ddec      	ble.n	801a638 <_dtoa_r+0x970>
 801a65e:	4629      	mov	r1, r5
 801a660:	2201      	movs	r2, #1
 801a662:	4630      	mov	r0, r6
 801a664:	9304      	str	r3, [sp, #16]
 801a666:	f000 ff95 	bl	801b594 <__lshift>
 801a66a:	4621      	mov	r1, r4
 801a66c:	4605      	mov	r5, r0
 801a66e:	f001 f801 	bl	801b674 <__mcmp>
 801a672:	2800      	cmp	r0, #0
 801a674:	9b04      	ldr	r3, [sp, #16]
 801a676:	dc02      	bgt.n	801a67e <_dtoa_r+0x9b6>
 801a678:	d1de      	bne.n	801a638 <_dtoa_r+0x970>
 801a67a:	07da      	lsls	r2, r3, #31
 801a67c:	d5dc      	bpl.n	801a638 <_dtoa_r+0x970>
 801a67e:	2b39      	cmp	r3, #57	; 0x39
 801a680:	d1d8      	bne.n	801a634 <_dtoa_r+0x96c>
 801a682:	9a02      	ldr	r2, [sp, #8]
 801a684:	2339      	movs	r3, #57	; 0x39
 801a686:	7013      	strb	r3, [r2, #0]
 801a688:	4643      	mov	r3, r8
 801a68a:	4698      	mov	r8, r3
 801a68c:	3b01      	subs	r3, #1
 801a68e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801a692:	2a39      	cmp	r2, #57	; 0x39
 801a694:	d051      	beq.n	801a73a <_dtoa_r+0xa72>
 801a696:	3201      	adds	r2, #1
 801a698:	701a      	strb	r2, [r3, #0]
 801a69a:	e745      	b.n	801a528 <_dtoa_r+0x860>
 801a69c:	2a00      	cmp	r2, #0
 801a69e:	dd03      	ble.n	801a6a8 <_dtoa_r+0x9e0>
 801a6a0:	2b39      	cmp	r3, #57	; 0x39
 801a6a2:	d0ee      	beq.n	801a682 <_dtoa_r+0x9ba>
 801a6a4:	3301      	adds	r3, #1
 801a6a6:	e7c7      	b.n	801a638 <_dtoa_r+0x970>
 801a6a8:	9a04      	ldr	r2, [sp, #16]
 801a6aa:	9908      	ldr	r1, [sp, #32]
 801a6ac:	f802 3c01 	strb.w	r3, [r2, #-1]
 801a6b0:	428a      	cmp	r2, r1
 801a6b2:	d02b      	beq.n	801a70c <_dtoa_r+0xa44>
 801a6b4:	4629      	mov	r1, r5
 801a6b6:	2300      	movs	r3, #0
 801a6b8:	220a      	movs	r2, #10
 801a6ba:	4630      	mov	r0, r6
 801a6bc:	f000 fd70 	bl	801b1a0 <__multadd>
 801a6c0:	45b9      	cmp	r9, r7
 801a6c2:	4605      	mov	r5, r0
 801a6c4:	f04f 0300 	mov.w	r3, #0
 801a6c8:	f04f 020a 	mov.w	r2, #10
 801a6cc:	4649      	mov	r1, r9
 801a6ce:	4630      	mov	r0, r6
 801a6d0:	d107      	bne.n	801a6e2 <_dtoa_r+0xa1a>
 801a6d2:	f000 fd65 	bl	801b1a0 <__multadd>
 801a6d6:	4681      	mov	r9, r0
 801a6d8:	4607      	mov	r7, r0
 801a6da:	9b04      	ldr	r3, [sp, #16]
 801a6dc:	3301      	adds	r3, #1
 801a6de:	9304      	str	r3, [sp, #16]
 801a6e0:	e774      	b.n	801a5cc <_dtoa_r+0x904>
 801a6e2:	f000 fd5d 	bl	801b1a0 <__multadd>
 801a6e6:	4639      	mov	r1, r7
 801a6e8:	4681      	mov	r9, r0
 801a6ea:	2300      	movs	r3, #0
 801a6ec:	220a      	movs	r2, #10
 801a6ee:	4630      	mov	r0, r6
 801a6f0:	f000 fd56 	bl	801b1a0 <__multadd>
 801a6f4:	4607      	mov	r7, r0
 801a6f6:	e7f0      	b.n	801a6da <_dtoa_r+0xa12>
 801a6f8:	f1ba 0f00 	cmp.w	sl, #0
 801a6fc:	9a01      	ldr	r2, [sp, #4]
 801a6fe:	bfcc      	ite	gt
 801a700:	46d0      	movgt	r8, sl
 801a702:	f04f 0801 	movle.w	r8, #1
 801a706:	4490      	add	r8, r2
 801a708:	f04f 0900 	mov.w	r9, #0
 801a70c:	4629      	mov	r1, r5
 801a70e:	2201      	movs	r2, #1
 801a710:	4630      	mov	r0, r6
 801a712:	9302      	str	r3, [sp, #8]
 801a714:	f000 ff3e 	bl	801b594 <__lshift>
 801a718:	4621      	mov	r1, r4
 801a71a:	4605      	mov	r5, r0
 801a71c:	f000 ffaa 	bl	801b674 <__mcmp>
 801a720:	2800      	cmp	r0, #0
 801a722:	dcb1      	bgt.n	801a688 <_dtoa_r+0x9c0>
 801a724:	d102      	bne.n	801a72c <_dtoa_r+0xa64>
 801a726:	9b02      	ldr	r3, [sp, #8]
 801a728:	07db      	lsls	r3, r3, #31
 801a72a:	d4ad      	bmi.n	801a688 <_dtoa_r+0x9c0>
 801a72c:	4643      	mov	r3, r8
 801a72e:	4698      	mov	r8, r3
 801a730:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a734:	2a30      	cmp	r2, #48	; 0x30
 801a736:	d0fa      	beq.n	801a72e <_dtoa_r+0xa66>
 801a738:	e6f6      	b.n	801a528 <_dtoa_r+0x860>
 801a73a:	9a01      	ldr	r2, [sp, #4]
 801a73c:	429a      	cmp	r2, r3
 801a73e:	d1a4      	bne.n	801a68a <_dtoa_r+0x9c2>
 801a740:	f10b 0b01 	add.w	fp, fp, #1
 801a744:	2331      	movs	r3, #49	; 0x31
 801a746:	e778      	b.n	801a63a <_dtoa_r+0x972>
 801a748:	4b14      	ldr	r3, [pc, #80]	; (801a79c <_dtoa_r+0xad4>)
 801a74a:	f7ff bb27 	b.w	8019d9c <_dtoa_r+0xd4>
 801a74e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a750:	2b00      	cmp	r3, #0
 801a752:	f47f ab03 	bne.w	8019d5c <_dtoa_r+0x94>
 801a756:	4b12      	ldr	r3, [pc, #72]	; (801a7a0 <_dtoa_r+0xad8>)
 801a758:	f7ff bb20 	b.w	8019d9c <_dtoa_r+0xd4>
 801a75c:	f1ba 0f00 	cmp.w	sl, #0
 801a760:	dc03      	bgt.n	801a76a <_dtoa_r+0xaa2>
 801a762:	9b06      	ldr	r3, [sp, #24]
 801a764:	2b02      	cmp	r3, #2
 801a766:	f73f aec7 	bgt.w	801a4f8 <_dtoa_r+0x830>
 801a76a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a76e:	4621      	mov	r1, r4
 801a770:	4628      	mov	r0, r5
 801a772:	f7ff fa1d 	bl	8019bb0 <quorem>
 801a776:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801a77a:	f808 3b01 	strb.w	r3, [r8], #1
 801a77e:	9a01      	ldr	r2, [sp, #4]
 801a780:	eba8 0202 	sub.w	r2, r8, r2
 801a784:	4592      	cmp	sl, r2
 801a786:	ddb7      	ble.n	801a6f8 <_dtoa_r+0xa30>
 801a788:	4629      	mov	r1, r5
 801a78a:	2300      	movs	r3, #0
 801a78c:	220a      	movs	r2, #10
 801a78e:	4630      	mov	r0, r6
 801a790:	f000 fd06 	bl	801b1a0 <__multadd>
 801a794:	4605      	mov	r5, r0
 801a796:	e7ea      	b.n	801a76e <_dtoa_r+0xaa6>
 801a798:	08033299 	.word	0x08033299
 801a79c:	0803300c 	.word	0x0803300c
 801a7a0:	08033231 	.word	0x08033231

0801a7a4 <std>:
 801a7a4:	2300      	movs	r3, #0
 801a7a6:	b510      	push	{r4, lr}
 801a7a8:	4604      	mov	r4, r0
 801a7aa:	e9c0 3300 	strd	r3, r3, [r0]
 801a7ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a7b2:	6083      	str	r3, [r0, #8]
 801a7b4:	8181      	strh	r1, [r0, #12]
 801a7b6:	6643      	str	r3, [r0, #100]	; 0x64
 801a7b8:	81c2      	strh	r2, [r0, #14]
 801a7ba:	6183      	str	r3, [r0, #24]
 801a7bc:	4619      	mov	r1, r3
 801a7be:	2208      	movs	r2, #8
 801a7c0:	305c      	adds	r0, #92	; 0x5c
 801a7c2:	f7fd fdc1 	bl	8018348 <memset>
 801a7c6:	4b05      	ldr	r3, [pc, #20]	; (801a7dc <std+0x38>)
 801a7c8:	6263      	str	r3, [r4, #36]	; 0x24
 801a7ca:	4b05      	ldr	r3, [pc, #20]	; (801a7e0 <std+0x3c>)
 801a7cc:	62a3      	str	r3, [r4, #40]	; 0x28
 801a7ce:	4b05      	ldr	r3, [pc, #20]	; (801a7e4 <std+0x40>)
 801a7d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a7d2:	4b05      	ldr	r3, [pc, #20]	; (801a7e8 <std+0x44>)
 801a7d4:	6224      	str	r4, [r4, #32]
 801a7d6:	6323      	str	r3, [r4, #48]	; 0x30
 801a7d8:	bd10      	pop	{r4, pc}
 801a7da:	bf00      	nop
 801a7dc:	0801bd49 	.word	0x0801bd49
 801a7e0:	0801bd6b 	.word	0x0801bd6b
 801a7e4:	0801bda3 	.word	0x0801bda3
 801a7e8:	0801bdc7 	.word	0x0801bdc7

0801a7ec <_cleanup_r>:
 801a7ec:	4901      	ldr	r1, [pc, #4]	; (801a7f4 <_cleanup_r+0x8>)
 801a7ee:	f000 b8c1 	b.w	801a974 <_fwalk_reent>
 801a7f2:	bf00      	nop
 801a7f4:	0801c0f5 	.word	0x0801c0f5

0801a7f8 <__sfmoreglue>:
 801a7f8:	b570      	push	{r4, r5, r6, lr}
 801a7fa:	2268      	movs	r2, #104	; 0x68
 801a7fc:	1e4d      	subs	r5, r1, #1
 801a7fe:	4355      	muls	r5, r2
 801a800:	460e      	mov	r6, r1
 801a802:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a806:	f7fd fe13 	bl	8018430 <_malloc_r>
 801a80a:	4604      	mov	r4, r0
 801a80c:	b140      	cbz	r0, 801a820 <__sfmoreglue+0x28>
 801a80e:	2100      	movs	r1, #0
 801a810:	e9c0 1600 	strd	r1, r6, [r0]
 801a814:	300c      	adds	r0, #12
 801a816:	60a0      	str	r0, [r4, #8]
 801a818:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a81c:	f7fd fd94 	bl	8018348 <memset>
 801a820:	4620      	mov	r0, r4
 801a822:	bd70      	pop	{r4, r5, r6, pc}

0801a824 <__sfp_lock_acquire>:
 801a824:	4801      	ldr	r0, [pc, #4]	; (801a82c <__sfp_lock_acquire+0x8>)
 801a826:	f000 bc38 	b.w	801b09a <__retarget_lock_acquire_recursive>
 801a82a:	bf00      	nop
 801a82c:	240311c5 	.word	0x240311c5

0801a830 <__sfp_lock_release>:
 801a830:	4801      	ldr	r0, [pc, #4]	; (801a838 <__sfp_lock_release+0x8>)
 801a832:	f000 bc33 	b.w	801b09c <__retarget_lock_release_recursive>
 801a836:	bf00      	nop
 801a838:	240311c5 	.word	0x240311c5

0801a83c <__sinit_lock_acquire>:
 801a83c:	4801      	ldr	r0, [pc, #4]	; (801a844 <__sinit_lock_acquire+0x8>)
 801a83e:	f000 bc2c 	b.w	801b09a <__retarget_lock_acquire_recursive>
 801a842:	bf00      	nop
 801a844:	240311c6 	.word	0x240311c6

0801a848 <__sinit_lock_release>:
 801a848:	4801      	ldr	r0, [pc, #4]	; (801a850 <__sinit_lock_release+0x8>)
 801a84a:	f000 bc27 	b.w	801b09c <__retarget_lock_release_recursive>
 801a84e:	bf00      	nop
 801a850:	240311c6 	.word	0x240311c6

0801a854 <__sinit>:
 801a854:	b510      	push	{r4, lr}
 801a856:	4604      	mov	r4, r0
 801a858:	f7ff fff0 	bl	801a83c <__sinit_lock_acquire>
 801a85c:	69a3      	ldr	r3, [r4, #24]
 801a85e:	b11b      	cbz	r3, 801a868 <__sinit+0x14>
 801a860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a864:	f7ff bff0 	b.w	801a848 <__sinit_lock_release>
 801a868:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a86c:	6523      	str	r3, [r4, #80]	; 0x50
 801a86e:	4b13      	ldr	r3, [pc, #76]	; (801a8bc <__sinit+0x68>)
 801a870:	4a13      	ldr	r2, [pc, #76]	; (801a8c0 <__sinit+0x6c>)
 801a872:	681b      	ldr	r3, [r3, #0]
 801a874:	62a2      	str	r2, [r4, #40]	; 0x28
 801a876:	42a3      	cmp	r3, r4
 801a878:	bf04      	itt	eq
 801a87a:	2301      	moveq	r3, #1
 801a87c:	61a3      	streq	r3, [r4, #24]
 801a87e:	4620      	mov	r0, r4
 801a880:	f000 f820 	bl	801a8c4 <__sfp>
 801a884:	6060      	str	r0, [r4, #4]
 801a886:	4620      	mov	r0, r4
 801a888:	f000 f81c 	bl	801a8c4 <__sfp>
 801a88c:	60a0      	str	r0, [r4, #8]
 801a88e:	4620      	mov	r0, r4
 801a890:	f000 f818 	bl	801a8c4 <__sfp>
 801a894:	2200      	movs	r2, #0
 801a896:	60e0      	str	r0, [r4, #12]
 801a898:	2104      	movs	r1, #4
 801a89a:	6860      	ldr	r0, [r4, #4]
 801a89c:	f7ff ff82 	bl	801a7a4 <std>
 801a8a0:	68a0      	ldr	r0, [r4, #8]
 801a8a2:	2201      	movs	r2, #1
 801a8a4:	2109      	movs	r1, #9
 801a8a6:	f7ff ff7d 	bl	801a7a4 <std>
 801a8aa:	68e0      	ldr	r0, [r4, #12]
 801a8ac:	2202      	movs	r2, #2
 801a8ae:	2112      	movs	r1, #18
 801a8b0:	f7ff ff78 	bl	801a7a4 <std>
 801a8b4:	2301      	movs	r3, #1
 801a8b6:	61a3      	str	r3, [r4, #24]
 801a8b8:	e7d2      	b.n	801a860 <__sinit+0xc>
 801a8ba:	bf00      	nop
 801a8bc:	08032ff8 	.word	0x08032ff8
 801a8c0:	0801a7ed 	.word	0x0801a7ed

0801a8c4 <__sfp>:
 801a8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a8c6:	4607      	mov	r7, r0
 801a8c8:	f7ff ffac 	bl	801a824 <__sfp_lock_acquire>
 801a8cc:	4b1e      	ldr	r3, [pc, #120]	; (801a948 <__sfp+0x84>)
 801a8ce:	681e      	ldr	r6, [r3, #0]
 801a8d0:	69b3      	ldr	r3, [r6, #24]
 801a8d2:	b913      	cbnz	r3, 801a8da <__sfp+0x16>
 801a8d4:	4630      	mov	r0, r6
 801a8d6:	f7ff ffbd 	bl	801a854 <__sinit>
 801a8da:	3648      	adds	r6, #72	; 0x48
 801a8dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a8e0:	3b01      	subs	r3, #1
 801a8e2:	d503      	bpl.n	801a8ec <__sfp+0x28>
 801a8e4:	6833      	ldr	r3, [r6, #0]
 801a8e6:	b30b      	cbz	r3, 801a92c <__sfp+0x68>
 801a8e8:	6836      	ldr	r6, [r6, #0]
 801a8ea:	e7f7      	b.n	801a8dc <__sfp+0x18>
 801a8ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a8f0:	b9d5      	cbnz	r5, 801a928 <__sfp+0x64>
 801a8f2:	4b16      	ldr	r3, [pc, #88]	; (801a94c <__sfp+0x88>)
 801a8f4:	60e3      	str	r3, [r4, #12]
 801a8f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a8fa:	6665      	str	r5, [r4, #100]	; 0x64
 801a8fc:	f000 fbcc 	bl	801b098 <__retarget_lock_init_recursive>
 801a900:	f7ff ff96 	bl	801a830 <__sfp_lock_release>
 801a904:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a908:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a90c:	6025      	str	r5, [r4, #0]
 801a90e:	61a5      	str	r5, [r4, #24]
 801a910:	2208      	movs	r2, #8
 801a912:	4629      	mov	r1, r5
 801a914:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a918:	f7fd fd16 	bl	8018348 <memset>
 801a91c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a920:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a924:	4620      	mov	r0, r4
 801a926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a928:	3468      	adds	r4, #104	; 0x68
 801a92a:	e7d9      	b.n	801a8e0 <__sfp+0x1c>
 801a92c:	2104      	movs	r1, #4
 801a92e:	4638      	mov	r0, r7
 801a930:	f7ff ff62 	bl	801a7f8 <__sfmoreglue>
 801a934:	4604      	mov	r4, r0
 801a936:	6030      	str	r0, [r6, #0]
 801a938:	2800      	cmp	r0, #0
 801a93a:	d1d5      	bne.n	801a8e8 <__sfp+0x24>
 801a93c:	f7ff ff78 	bl	801a830 <__sfp_lock_release>
 801a940:	230c      	movs	r3, #12
 801a942:	603b      	str	r3, [r7, #0]
 801a944:	e7ee      	b.n	801a924 <__sfp+0x60>
 801a946:	bf00      	nop
 801a948:	08032ff8 	.word	0x08032ff8
 801a94c:	ffff0001 	.word	0xffff0001

0801a950 <fiprintf>:
 801a950:	b40e      	push	{r1, r2, r3}
 801a952:	b503      	push	{r0, r1, lr}
 801a954:	4601      	mov	r1, r0
 801a956:	ab03      	add	r3, sp, #12
 801a958:	4805      	ldr	r0, [pc, #20]	; (801a970 <fiprintf+0x20>)
 801a95a:	f853 2b04 	ldr.w	r2, [r3], #4
 801a95e:	6800      	ldr	r0, [r0, #0]
 801a960:	9301      	str	r3, [sp, #4]
 801a962:	f001 f8b9 	bl	801bad8 <_vfiprintf_r>
 801a966:	b002      	add	sp, #8
 801a968:	f85d eb04 	ldr.w	lr, [sp], #4
 801a96c:	b003      	add	sp, #12
 801a96e:	4770      	bx	lr
 801a970:	24000060 	.word	0x24000060

0801a974 <_fwalk_reent>:
 801a974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a978:	4606      	mov	r6, r0
 801a97a:	4688      	mov	r8, r1
 801a97c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a980:	2700      	movs	r7, #0
 801a982:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a986:	f1b9 0901 	subs.w	r9, r9, #1
 801a98a:	d505      	bpl.n	801a998 <_fwalk_reent+0x24>
 801a98c:	6824      	ldr	r4, [r4, #0]
 801a98e:	2c00      	cmp	r4, #0
 801a990:	d1f7      	bne.n	801a982 <_fwalk_reent+0xe>
 801a992:	4638      	mov	r0, r7
 801a994:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a998:	89ab      	ldrh	r3, [r5, #12]
 801a99a:	2b01      	cmp	r3, #1
 801a99c:	d907      	bls.n	801a9ae <_fwalk_reent+0x3a>
 801a99e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a9a2:	3301      	adds	r3, #1
 801a9a4:	d003      	beq.n	801a9ae <_fwalk_reent+0x3a>
 801a9a6:	4629      	mov	r1, r5
 801a9a8:	4630      	mov	r0, r6
 801a9aa:	47c0      	blx	r8
 801a9ac:	4307      	orrs	r7, r0
 801a9ae:	3568      	adds	r5, #104	; 0x68
 801a9b0:	e7e9      	b.n	801a986 <_fwalk_reent+0x12>

0801a9b2 <rshift>:
 801a9b2:	6903      	ldr	r3, [r0, #16]
 801a9b4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801a9b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a9bc:	ea4f 1261 	mov.w	r2, r1, asr #5
 801a9c0:	f100 0414 	add.w	r4, r0, #20
 801a9c4:	dd45      	ble.n	801aa52 <rshift+0xa0>
 801a9c6:	f011 011f 	ands.w	r1, r1, #31
 801a9ca:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801a9ce:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801a9d2:	d10c      	bne.n	801a9ee <rshift+0x3c>
 801a9d4:	f100 0710 	add.w	r7, r0, #16
 801a9d8:	4629      	mov	r1, r5
 801a9da:	42b1      	cmp	r1, r6
 801a9dc:	d334      	bcc.n	801aa48 <rshift+0x96>
 801a9de:	1a9b      	subs	r3, r3, r2
 801a9e0:	009b      	lsls	r3, r3, #2
 801a9e2:	1eea      	subs	r2, r5, #3
 801a9e4:	4296      	cmp	r6, r2
 801a9e6:	bf38      	it	cc
 801a9e8:	2300      	movcc	r3, #0
 801a9ea:	4423      	add	r3, r4
 801a9ec:	e015      	b.n	801aa1a <rshift+0x68>
 801a9ee:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801a9f2:	f1c1 0820 	rsb	r8, r1, #32
 801a9f6:	40cf      	lsrs	r7, r1
 801a9f8:	f105 0e04 	add.w	lr, r5, #4
 801a9fc:	46a1      	mov	r9, r4
 801a9fe:	4576      	cmp	r6, lr
 801aa00:	46f4      	mov	ip, lr
 801aa02:	d815      	bhi.n	801aa30 <rshift+0x7e>
 801aa04:	1a9a      	subs	r2, r3, r2
 801aa06:	0092      	lsls	r2, r2, #2
 801aa08:	3a04      	subs	r2, #4
 801aa0a:	3501      	adds	r5, #1
 801aa0c:	42ae      	cmp	r6, r5
 801aa0e:	bf38      	it	cc
 801aa10:	2200      	movcc	r2, #0
 801aa12:	18a3      	adds	r3, r4, r2
 801aa14:	50a7      	str	r7, [r4, r2]
 801aa16:	b107      	cbz	r7, 801aa1a <rshift+0x68>
 801aa18:	3304      	adds	r3, #4
 801aa1a:	1b1a      	subs	r2, r3, r4
 801aa1c:	42a3      	cmp	r3, r4
 801aa1e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801aa22:	bf08      	it	eq
 801aa24:	2300      	moveq	r3, #0
 801aa26:	6102      	str	r2, [r0, #16]
 801aa28:	bf08      	it	eq
 801aa2a:	6143      	streq	r3, [r0, #20]
 801aa2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aa30:	f8dc c000 	ldr.w	ip, [ip]
 801aa34:	fa0c fc08 	lsl.w	ip, ip, r8
 801aa38:	ea4c 0707 	orr.w	r7, ip, r7
 801aa3c:	f849 7b04 	str.w	r7, [r9], #4
 801aa40:	f85e 7b04 	ldr.w	r7, [lr], #4
 801aa44:	40cf      	lsrs	r7, r1
 801aa46:	e7da      	b.n	801a9fe <rshift+0x4c>
 801aa48:	f851 cb04 	ldr.w	ip, [r1], #4
 801aa4c:	f847 cf04 	str.w	ip, [r7, #4]!
 801aa50:	e7c3      	b.n	801a9da <rshift+0x28>
 801aa52:	4623      	mov	r3, r4
 801aa54:	e7e1      	b.n	801aa1a <rshift+0x68>

0801aa56 <__hexdig_fun>:
 801aa56:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801aa5a:	2b09      	cmp	r3, #9
 801aa5c:	d802      	bhi.n	801aa64 <__hexdig_fun+0xe>
 801aa5e:	3820      	subs	r0, #32
 801aa60:	b2c0      	uxtb	r0, r0
 801aa62:	4770      	bx	lr
 801aa64:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801aa68:	2b05      	cmp	r3, #5
 801aa6a:	d801      	bhi.n	801aa70 <__hexdig_fun+0x1a>
 801aa6c:	3847      	subs	r0, #71	; 0x47
 801aa6e:	e7f7      	b.n	801aa60 <__hexdig_fun+0xa>
 801aa70:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801aa74:	2b05      	cmp	r3, #5
 801aa76:	d801      	bhi.n	801aa7c <__hexdig_fun+0x26>
 801aa78:	3827      	subs	r0, #39	; 0x27
 801aa7a:	e7f1      	b.n	801aa60 <__hexdig_fun+0xa>
 801aa7c:	2000      	movs	r0, #0
 801aa7e:	4770      	bx	lr

0801aa80 <__gethex>:
 801aa80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa84:	ed2d 8b02 	vpush	{d8}
 801aa88:	b089      	sub	sp, #36	; 0x24
 801aa8a:	ee08 0a10 	vmov	s16, r0
 801aa8e:	9304      	str	r3, [sp, #16]
 801aa90:	4bb4      	ldr	r3, [pc, #720]	; (801ad64 <__gethex+0x2e4>)
 801aa92:	681b      	ldr	r3, [r3, #0]
 801aa94:	9301      	str	r3, [sp, #4]
 801aa96:	4618      	mov	r0, r3
 801aa98:	468b      	mov	fp, r1
 801aa9a:	4690      	mov	r8, r2
 801aa9c:	f7e5 fc2a 	bl	80002f4 <strlen>
 801aaa0:	9b01      	ldr	r3, [sp, #4]
 801aaa2:	f8db 2000 	ldr.w	r2, [fp]
 801aaa6:	4403      	add	r3, r0
 801aaa8:	4682      	mov	sl, r0
 801aaaa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801aaae:	9305      	str	r3, [sp, #20]
 801aab0:	1c93      	adds	r3, r2, #2
 801aab2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801aab6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801aaba:	32fe      	adds	r2, #254	; 0xfe
 801aabc:	18d1      	adds	r1, r2, r3
 801aabe:	461f      	mov	r7, r3
 801aac0:	f813 0b01 	ldrb.w	r0, [r3], #1
 801aac4:	9100      	str	r1, [sp, #0]
 801aac6:	2830      	cmp	r0, #48	; 0x30
 801aac8:	d0f8      	beq.n	801aabc <__gethex+0x3c>
 801aaca:	f7ff ffc4 	bl	801aa56 <__hexdig_fun>
 801aace:	4604      	mov	r4, r0
 801aad0:	2800      	cmp	r0, #0
 801aad2:	d13a      	bne.n	801ab4a <__gethex+0xca>
 801aad4:	9901      	ldr	r1, [sp, #4]
 801aad6:	4652      	mov	r2, sl
 801aad8:	4638      	mov	r0, r7
 801aada:	f001 f978 	bl	801bdce <strncmp>
 801aade:	4605      	mov	r5, r0
 801aae0:	2800      	cmp	r0, #0
 801aae2:	d168      	bne.n	801abb6 <__gethex+0x136>
 801aae4:	f817 000a 	ldrb.w	r0, [r7, sl]
 801aae8:	eb07 060a 	add.w	r6, r7, sl
 801aaec:	f7ff ffb3 	bl	801aa56 <__hexdig_fun>
 801aaf0:	2800      	cmp	r0, #0
 801aaf2:	d062      	beq.n	801abba <__gethex+0x13a>
 801aaf4:	4633      	mov	r3, r6
 801aaf6:	7818      	ldrb	r0, [r3, #0]
 801aaf8:	2830      	cmp	r0, #48	; 0x30
 801aafa:	461f      	mov	r7, r3
 801aafc:	f103 0301 	add.w	r3, r3, #1
 801ab00:	d0f9      	beq.n	801aaf6 <__gethex+0x76>
 801ab02:	f7ff ffa8 	bl	801aa56 <__hexdig_fun>
 801ab06:	2301      	movs	r3, #1
 801ab08:	fab0 f480 	clz	r4, r0
 801ab0c:	0964      	lsrs	r4, r4, #5
 801ab0e:	4635      	mov	r5, r6
 801ab10:	9300      	str	r3, [sp, #0]
 801ab12:	463a      	mov	r2, r7
 801ab14:	4616      	mov	r6, r2
 801ab16:	3201      	adds	r2, #1
 801ab18:	7830      	ldrb	r0, [r6, #0]
 801ab1a:	f7ff ff9c 	bl	801aa56 <__hexdig_fun>
 801ab1e:	2800      	cmp	r0, #0
 801ab20:	d1f8      	bne.n	801ab14 <__gethex+0x94>
 801ab22:	9901      	ldr	r1, [sp, #4]
 801ab24:	4652      	mov	r2, sl
 801ab26:	4630      	mov	r0, r6
 801ab28:	f001 f951 	bl	801bdce <strncmp>
 801ab2c:	b980      	cbnz	r0, 801ab50 <__gethex+0xd0>
 801ab2e:	b94d      	cbnz	r5, 801ab44 <__gethex+0xc4>
 801ab30:	eb06 050a 	add.w	r5, r6, sl
 801ab34:	462a      	mov	r2, r5
 801ab36:	4616      	mov	r6, r2
 801ab38:	3201      	adds	r2, #1
 801ab3a:	7830      	ldrb	r0, [r6, #0]
 801ab3c:	f7ff ff8b 	bl	801aa56 <__hexdig_fun>
 801ab40:	2800      	cmp	r0, #0
 801ab42:	d1f8      	bne.n	801ab36 <__gethex+0xb6>
 801ab44:	1bad      	subs	r5, r5, r6
 801ab46:	00ad      	lsls	r5, r5, #2
 801ab48:	e004      	b.n	801ab54 <__gethex+0xd4>
 801ab4a:	2400      	movs	r4, #0
 801ab4c:	4625      	mov	r5, r4
 801ab4e:	e7e0      	b.n	801ab12 <__gethex+0x92>
 801ab50:	2d00      	cmp	r5, #0
 801ab52:	d1f7      	bne.n	801ab44 <__gethex+0xc4>
 801ab54:	7833      	ldrb	r3, [r6, #0]
 801ab56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801ab5a:	2b50      	cmp	r3, #80	; 0x50
 801ab5c:	d13b      	bne.n	801abd6 <__gethex+0x156>
 801ab5e:	7873      	ldrb	r3, [r6, #1]
 801ab60:	2b2b      	cmp	r3, #43	; 0x2b
 801ab62:	d02c      	beq.n	801abbe <__gethex+0x13e>
 801ab64:	2b2d      	cmp	r3, #45	; 0x2d
 801ab66:	d02e      	beq.n	801abc6 <__gethex+0x146>
 801ab68:	1c71      	adds	r1, r6, #1
 801ab6a:	f04f 0900 	mov.w	r9, #0
 801ab6e:	7808      	ldrb	r0, [r1, #0]
 801ab70:	f7ff ff71 	bl	801aa56 <__hexdig_fun>
 801ab74:	1e43      	subs	r3, r0, #1
 801ab76:	b2db      	uxtb	r3, r3
 801ab78:	2b18      	cmp	r3, #24
 801ab7a:	d82c      	bhi.n	801abd6 <__gethex+0x156>
 801ab7c:	f1a0 0210 	sub.w	r2, r0, #16
 801ab80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801ab84:	f7ff ff67 	bl	801aa56 <__hexdig_fun>
 801ab88:	1e43      	subs	r3, r0, #1
 801ab8a:	b2db      	uxtb	r3, r3
 801ab8c:	2b18      	cmp	r3, #24
 801ab8e:	d91d      	bls.n	801abcc <__gethex+0x14c>
 801ab90:	f1b9 0f00 	cmp.w	r9, #0
 801ab94:	d000      	beq.n	801ab98 <__gethex+0x118>
 801ab96:	4252      	negs	r2, r2
 801ab98:	4415      	add	r5, r2
 801ab9a:	f8cb 1000 	str.w	r1, [fp]
 801ab9e:	b1e4      	cbz	r4, 801abda <__gethex+0x15a>
 801aba0:	9b00      	ldr	r3, [sp, #0]
 801aba2:	2b00      	cmp	r3, #0
 801aba4:	bf14      	ite	ne
 801aba6:	2700      	movne	r7, #0
 801aba8:	2706      	moveq	r7, #6
 801abaa:	4638      	mov	r0, r7
 801abac:	b009      	add	sp, #36	; 0x24
 801abae:	ecbd 8b02 	vpop	{d8}
 801abb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abb6:	463e      	mov	r6, r7
 801abb8:	4625      	mov	r5, r4
 801abba:	2401      	movs	r4, #1
 801abbc:	e7ca      	b.n	801ab54 <__gethex+0xd4>
 801abbe:	f04f 0900 	mov.w	r9, #0
 801abc2:	1cb1      	adds	r1, r6, #2
 801abc4:	e7d3      	b.n	801ab6e <__gethex+0xee>
 801abc6:	f04f 0901 	mov.w	r9, #1
 801abca:	e7fa      	b.n	801abc2 <__gethex+0x142>
 801abcc:	230a      	movs	r3, #10
 801abce:	fb03 0202 	mla	r2, r3, r2, r0
 801abd2:	3a10      	subs	r2, #16
 801abd4:	e7d4      	b.n	801ab80 <__gethex+0x100>
 801abd6:	4631      	mov	r1, r6
 801abd8:	e7df      	b.n	801ab9a <__gethex+0x11a>
 801abda:	1bf3      	subs	r3, r6, r7
 801abdc:	3b01      	subs	r3, #1
 801abde:	4621      	mov	r1, r4
 801abe0:	2b07      	cmp	r3, #7
 801abe2:	dc0b      	bgt.n	801abfc <__gethex+0x17c>
 801abe4:	ee18 0a10 	vmov	r0, s16
 801abe8:	f000 fa78 	bl	801b0dc <_Balloc>
 801abec:	4604      	mov	r4, r0
 801abee:	b940      	cbnz	r0, 801ac02 <__gethex+0x182>
 801abf0:	4b5d      	ldr	r3, [pc, #372]	; (801ad68 <__gethex+0x2e8>)
 801abf2:	4602      	mov	r2, r0
 801abf4:	21de      	movs	r1, #222	; 0xde
 801abf6:	485d      	ldr	r0, [pc, #372]	; (801ad6c <__gethex+0x2ec>)
 801abf8:	f7fe ffbc 	bl	8019b74 <__assert_func>
 801abfc:	3101      	adds	r1, #1
 801abfe:	105b      	asrs	r3, r3, #1
 801ac00:	e7ee      	b.n	801abe0 <__gethex+0x160>
 801ac02:	f100 0914 	add.w	r9, r0, #20
 801ac06:	f04f 0b00 	mov.w	fp, #0
 801ac0a:	f1ca 0301 	rsb	r3, sl, #1
 801ac0e:	f8cd 9008 	str.w	r9, [sp, #8]
 801ac12:	f8cd b000 	str.w	fp, [sp]
 801ac16:	9306      	str	r3, [sp, #24]
 801ac18:	42b7      	cmp	r7, r6
 801ac1a:	d340      	bcc.n	801ac9e <__gethex+0x21e>
 801ac1c:	9802      	ldr	r0, [sp, #8]
 801ac1e:	9b00      	ldr	r3, [sp, #0]
 801ac20:	f840 3b04 	str.w	r3, [r0], #4
 801ac24:	eba0 0009 	sub.w	r0, r0, r9
 801ac28:	1080      	asrs	r0, r0, #2
 801ac2a:	0146      	lsls	r6, r0, #5
 801ac2c:	6120      	str	r0, [r4, #16]
 801ac2e:	4618      	mov	r0, r3
 801ac30:	f000 fb46 	bl	801b2c0 <__hi0bits>
 801ac34:	1a30      	subs	r0, r6, r0
 801ac36:	f8d8 6000 	ldr.w	r6, [r8]
 801ac3a:	42b0      	cmp	r0, r6
 801ac3c:	dd63      	ble.n	801ad06 <__gethex+0x286>
 801ac3e:	1b87      	subs	r7, r0, r6
 801ac40:	4639      	mov	r1, r7
 801ac42:	4620      	mov	r0, r4
 801ac44:	f000 fee7 	bl	801ba16 <__any_on>
 801ac48:	4682      	mov	sl, r0
 801ac4a:	b1a8      	cbz	r0, 801ac78 <__gethex+0x1f8>
 801ac4c:	1e7b      	subs	r3, r7, #1
 801ac4e:	1159      	asrs	r1, r3, #5
 801ac50:	f003 021f 	and.w	r2, r3, #31
 801ac54:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801ac58:	f04f 0a01 	mov.w	sl, #1
 801ac5c:	fa0a f202 	lsl.w	r2, sl, r2
 801ac60:	420a      	tst	r2, r1
 801ac62:	d009      	beq.n	801ac78 <__gethex+0x1f8>
 801ac64:	4553      	cmp	r3, sl
 801ac66:	dd05      	ble.n	801ac74 <__gethex+0x1f4>
 801ac68:	1eb9      	subs	r1, r7, #2
 801ac6a:	4620      	mov	r0, r4
 801ac6c:	f000 fed3 	bl	801ba16 <__any_on>
 801ac70:	2800      	cmp	r0, #0
 801ac72:	d145      	bne.n	801ad00 <__gethex+0x280>
 801ac74:	f04f 0a02 	mov.w	sl, #2
 801ac78:	4639      	mov	r1, r7
 801ac7a:	4620      	mov	r0, r4
 801ac7c:	f7ff fe99 	bl	801a9b2 <rshift>
 801ac80:	443d      	add	r5, r7
 801ac82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ac86:	42ab      	cmp	r3, r5
 801ac88:	da4c      	bge.n	801ad24 <__gethex+0x2a4>
 801ac8a:	ee18 0a10 	vmov	r0, s16
 801ac8e:	4621      	mov	r1, r4
 801ac90:	f000 fa64 	bl	801b15c <_Bfree>
 801ac94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ac96:	2300      	movs	r3, #0
 801ac98:	6013      	str	r3, [r2, #0]
 801ac9a:	27a3      	movs	r7, #163	; 0xa3
 801ac9c:	e785      	b.n	801abaa <__gethex+0x12a>
 801ac9e:	1e73      	subs	r3, r6, #1
 801aca0:	9a05      	ldr	r2, [sp, #20]
 801aca2:	9303      	str	r3, [sp, #12]
 801aca4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801aca8:	4293      	cmp	r3, r2
 801acaa:	d019      	beq.n	801ace0 <__gethex+0x260>
 801acac:	f1bb 0f20 	cmp.w	fp, #32
 801acb0:	d107      	bne.n	801acc2 <__gethex+0x242>
 801acb2:	9b02      	ldr	r3, [sp, #8]
 801acb4:	9a00      	ldr	r2, [sp, #0]
 801acb6:	f843 2b04 	str.w	r2, [r3], #4
 801acba:	9302      	str	r3, [sp, #8]
 801acbc:	2300      	movs	r3, #0
 801acbe:	9300      	str	r3, [sp, #0]
 801acc0:	469b      	mov	fp, r3
 801acc2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801acc6:	f7ff fec6 	bl	801aa56 <__hexdig_fun>
 801acca:	9b00      	ldr	r3, [sp, #0]
 801accc:	f000 000f 	and.w	r0, r0, #15
 801acd0:	fa00 f00b 	lsl.w	r0, r0, fp
 801acd4:	4303      	orrs	r3, r0
 801acd6:	9300      	str	r3, [sp, #0]
 801acd8:	f10b 0b04 	add.w	fp, fp, #4
 801acdc:	9b03      	ldr	r3, [sp, #12]
 801acde:	e00d      	b.n	801acfc <__gethex+0x27c>
 801ace0:	9b03      	ldr	r3, [sp, #12]
 801ace2:	9a06      	ldr	r2, [sp, #24]
 801ace4:	4413      	add	r3, r2
 801ace6:	42bb      	cmp	r3, r7
 801ace8:	d3e0      	bcc.n	801acac <__gethex+0x22c>
 801acea:	4618      	mov	r0, r3
 801acec:	9901      	ldr	r1, [sp, #4]
 801acee:	9307      	str	r3, [sp, #28]
 801acf0:	4652      	mov	r2, sl
 801acf2:	f001 f86c 	bl	801bdce <strncmp>
 801acf6:	9b07      	ldr	r3, [sp, #28]
 801acf8:	2800      	cmp	r0, #0
 801acfa:	d1d7      	bne.n	801acac <__gethex+0x22c>
 801acfc:	461e      	mov	r6, r3
 801acfe:	e78b      	b.n	801ac18 <__gethex+0x198>
 801ad00:	f04f 0a03 	mov.w	sl, #3
 801ad04:	e7b8      	b.n	801ac78 <__gethex+0x1f8>
 801ad06:	da0a      	bge.n	801ad1e <__gethex+0x29e>
 801ad08:	1a37      	subs	r7, r6, r0
 801ad0a:	4621      	mov	r1, r4
 801ad0c:	ee18 0a10 	vmov	r0, s16
 801ad10:	463a      	mov	r2, r7
 801ad12:	f000 fc3f 	bl	801b594 <__lshift>
 801ad16:	1bed      	subs	r5, r5, r7
 801ad18:	4604      	mov	r4, r0
 801ad1a:	f100 0914 	add.w	r9, r0, #20
 801ad1e:	f04f 0a00 	mov.w	sl, #0
 801ad22:	e7ae      	b.n	801ac82 <__gethex+0x202>
 801ad24:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801ad28:	42a8      	cmp	r0, r5
 801ad2a:	dd72      	ble.n	801ae12 <__gethex+0x392>
 801ad2c:	1b45      	subs	r5, r0, r5
 801ad2e:	42ae      	cmp	r6, r5
 801ad30:	dc36      	bgt.n	801ada0 <__gethex+0x320>
 801ad32:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801ad36:	2b02      	cmp	r3, #2
 801ad38:	d02a      	beq.n	801ad90 <__gethex+0x310>
 801ad3a:	2b03      	cmp	r3, #3
 801ad3c:	d02c      	beq.n	801ad98 <__gethex+0x318>
 801ad3e:	2b01      	cmp	r3, #1
 801ad40:	d11c      	bne.n	801ad7c <__gethex+0x2fc>
 801ad42:	42ae      	cmp	r6, r5
 801ad44:	d11a      	bne.n	801ad7c <__gethex+0x2fc>
 801ad46:	2e01      	cmp	r6, #1
 801ad48:	d112      	bne.n	801ad70 <__gethex+0x2f0>
 801ad4a:	9a04      	ldr	r2, [sp, #16]
 801ad4c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801ad50:	6013      	str	r3, [r2, #0]
 801ad52:	2301      	movs	r3, #1
 801ad54:	6123      	str	r3, [r4, #16]
 801ad56:	f8c9 3000 	str.w	r3, [r9]
 801ad5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ad5c:	2762      	movs	r7, #98	; 0x62
 801ad5e:	601c      	str	r4, [r3, #0]
 801ad60:	e723      	b.n	801abaa <__gethex+0x12a>
 801ad62:	bf00      	nop
 801ad64:	08033374 	.word	0x08033374
 801ad68:	08033299 	.word	0x08033299
 801ad6c:	0803330c 	.word	0x0803330c
 801ad70:	1e71      	subs	r1, r6, #1
 801ad72:	4620      	mov	r0, r4
 801ad74:	f000 fe4f 	bl	801ba16 <__any_on>
 801ad78:	2800      	cmp	r0, #0
 801ad7a:	d1e6      	bne.n	801ad4a <__gethex+0x2ca>
 801ad7c:	ee18 0a10 	vmov	r0, s16
 801ad80:	4621      	mov	r1, r4
 801ad82:	f000 f9eb 	bl	801b15c <_Bfree>
 801ad86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ad88:	2300      	movs	r3, #0
 801ad8a:	6013      	str	r3, [r2, #0]
 801ad8c:	2750      	movs	r7, #80	; 0x50
 801ad8e:	e70c      	b.n	801abaa <__gethex+0x12a>
 801ad90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ad92:	2b00      	cmp	r3, #0
 801ad94:	d1f2      	bne.n	801ad7c <__gethex+0x2fc>
 801ad96:	e7d8      	b.n	801ad4a <__gethex+0x2ca>
 801ad98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ad9a:	2b00      	cmp	r3, #0
 801ad9c:	d1d5      	bne.n	801ad4a <__gethex+0x2ca>
 801ad9e:	e7ed      	b.n	801ad7c <__gethex+0x2fc>
 801ada0:	1e6f      	subs	r7, r5, #1
 801ada2:	f1ba 0f00 	cmp.w	sl, #0
 801ada6:	d131      	bne.n	801ae0c <__gethex+0x38c>
 801ada8:	b127      	cbz	r7, 801adb4 <__gethex+0x334>
 801adaa:	4639      	mov	r1, r7
 801adac:	4620      	mov	r0, r4
 801adae:	f000 fe32 	bl	801ba16 <__any_on>
 801adb2:	4682      	mov	sl, r0
 801adb4:	117b      	asrs	r3, r7, #5
 801adb6:	2101      	movs	r1, #1
 801adb8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801adbc:	f007 071f 	and.w	r7, r7, #31
 801adc0:	fa01 f707 	lsl.w	r7, r1, r7
 801adc4:	421f      	tst	r7, r3
 801adc6:	4629      	mov	r1, r5
 801adc8:	4620      	mov	r0, r4
 801adca:	bf18      	it	ne
 801adcc:	f04a 0a02 	orrne.w	sl, sl, #2
 801add0:	1b76      	subs	r6, r6, r5
 801add2:	f7ff fdee 	bl	801a9b2 <rshift>
 801add6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801adda:	2702      	movs	r7, #2
 801addc:	f1ba 0f00 	cmp.w	sl, #0
 801ade0:	d048      	beq.n	801ae74 <__gethex+0x3f4>
 801ade2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801ade6:	2b02      	cmp	r3, #2
 801ade8:	d015      	beq.n	801ae16 <__gethex+0x396>
 801adea:	2b03      	cmp	r3, #3
 801adec:	d017      	beq.n	801ae1e <__gethex+0x39e>
 801adee:	2b01      	cmp	r3, #1
 801adf0:	d109      	bne.n	801ae06 <__gethex+0x386>
 801adf2:	f01a 0f02 	tst.w	sl, #2
 801adf6:	d006      	beq.n	801ae06 <__gethex+0x386>
 801adf8:	f8d9 0000 	ldr.w	r0, [r9]
 801adfc:	ea4a 0a00 	orr.w	sl, sl, r0
 801ae00:	f01a 0f01 	tst.w	sl, #1
 801ae04:	d10e      	bne.n	801ae24 <__gethex+0x3a4>
 801ae06:	f047 0710 	orr.w	r7, r7, #16
 801ae0a:	e033      	b.n	801ae74 <__gethex+0x3f4>
 801ae0c:	f04f 0a01 	mov.w	sl, #1
 801ae10:	e7d0      	b.n	801adb4 <__gethex+0x334>
 801ae12:	2701      	movs	r7, #1
 801ae14:	e7e2      	b.n	801addc <__gethex+0x35c>
 801ae16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ae18:	f1c3 0301 	rsb	r3, r3, #1
 801ae1c:	9315      	str	r3, [sp, #84]	; 0x54
 801ae1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ae20:	2b00      	cmp	r3, #0
 801ae22:	d0f0      	beq.n	801ae06 <__gethex+0x386>
 801ae24:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801ae28:	f104 0314 	add.w	r3, r4, #20
 801ae2c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801ae30:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801ae34:	f04f 0c00 	mov.w	ip, #0
 801ae38:	4618      	mov	r0, r3
 801ae3a:	f853 2b04 	ldr.w	r2, [r3], #4
 801ae3e:	f1b2 3fff 	cmp.w	r2, #4294967295
 801ae42:	d01c      	beq.n	801ae7e <__gethex+0x3fe>
 801ae44:	3201      	adds	r2, #1
 801ae46:	6002      	str	r2, [r0, #0]
 801ae48:	2f02      	cmp	r7, #2
 801ae4a:	f104 0314 	add.w	r3, r4, #20
 801ae4e:	d13f      	bne.n	801aed0 <__gethex+0x450>
 801ae50:	f8d8 2000 	ldr.w	r2, [r8]
 801ae54:	3a01      	subs	r2, #1
 801ae56:	42b2      	cmp	r2, r6
 801ae58:	d10a      	bne.n	801ae70 <__gethex+0x3f0>
 801ae5a:	1171      	asrs	r1, r6, #5
 801ae5c:	2201      	movs	r2, #1
 801ae5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ae62:	f006 061f 	and.w	r6, r6, #31
 801ae66:	fa02 f606 	lsl.w	r6, r2, r6
 801ae6a:	421e      	tst	r6, r3
 801ae6c:	bf18      	it	ne
 801ae6e:	4617      	movne	r7, r2
 801ae70:	f047 0720 	orr.w	r7, r7, #32
 801ae74:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ae76:	601c      	str	r4, [r3, #0]
 801ae78:	9b04      	ldr	r3, [sp, #16]
 801ae7a:	601d      	str	r5, [r3, #0]
 801ae7c:	e695      	b.n	801abaa <__gethex+0x12a>
 801ae7e:	4299      	cmp	r1, r3
 801ae80:	f843 cc04 	str.w	ip, [r3, #-4]
 801ae84:	d8d8      	bhi.n	801ae38 <__gethex+0x3b8>
 801ae86:	68a3      	ldr	r3, [r4, #8]
 801ae88:	459b      	cmp	fp, r3
 801ae8a:	db19      	blt.n	801aec0 <__gethex+0x440>
 801ae8c:	6861      	ldr	r1, [r4, #4]
 801ae8e:	ee18 0a10 	vmov	r0, s16
 801ae92:	3101      	adds	r1, #1
 801ae94:	f000 f922 	bl	801b0dc <_Balloc>
 801ae98:	4681      	mov	r9, r0
 801ae9a:	b918      	cbnz	r0, 801aea4 <__gethex+0x424>
 801ae9c:	4b1a      	ldr	r3, [pc, #104]	; (801af08 <__gethex+0x488>)
 801ae9e:	4602      	mov	r2, r0
 801aea0:	2184      	movs	r1, #132	; 0x84
 801aea2:	e6a8      	b.n	801abf6 <__gethex+0x176>
 801aea4:	6922      	ldr	r2, [r4, #16]
 801aea6:	3202      	adds	r2, #2
 801aea8:	f104 010c 	add.w	r1, r4, #12
 801aeac:	0092      	lsls	r2, r2, #2
 801aeae:	300c      	adds	r0, #12
 801aeb0:	f7fd fa3c 	bl	801832c <memcpy>
 801aeb4:	4621      	mov	r1, r4
 801aeb6:	ee18 0a10 	vmov	r0, s16
 801aeba:	f000 f94f 	bl	801b15c <_Bfree>
 801aebe:	464c      	mov	r4, r9
 801aec0:	6923      	ldr	r3, [r4, #16]
 801aec2:	1c5a      	adds	r2, r3, #1
 801aec4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801aec8:	6122      	str	r2, [r4, #16]
 801aeca:	2201      	movs	r2, #1
 801aecc:	615a      	str	r2, [r3, #20]
 801aece:	e7bb      	b.n	801ae48 <__gethex+0x3c8>
 801aed0:	6922      	ldr	r2, [r4, #16]
 801aed2:	455a      	cmp	r2, fp
 801aed4:	dd0b      	ble.n	801aeee <__gethex+0x46e>
 801aed6:	2101      	movs	r1, #1
 801aed8:	4620      	mov	r0, r4
 801aeda:	f7ff fd6a 	bl	801a9b2 <rshift>
 801aede:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801aee2:	3501      	adds	r5, #1
 801aee4:	42ab      	cmp	r3, r5
 801aee6:	f6ff aed0 	blt.w	801ac8a <__gethex+0x20a>
 801aeea:	2701      	movs	r7, #1
 801aeec:	e7c0      	b.n	801ae70 <__gethex+0x3f0>
 801aeee:	f016 061f 	ands.w	r6, r6, #31
 801aef2:	d0fa      	beq.n	801aeea <__gethex+0x46a>
 801aef4:	4453      	add	r3, sl
 801aef6:	f1c6 0620 	rsb	r6, r6, #32
 801aefa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801aefe:	f000 f9df 	bl	801b2c0 <__hi0bits>
 801af02:	42b0      	cmp	r0, r6
 801af04:	dbe7      	blt.n	801aed6 <__gethex+0x456>
 801af06:	e7f0      	b.n	801aeea <__gethex+0x46a>
 801af08:	08033299 	.word	0x08033299

0801af0c <L_shift>:
 801af0c:	f1c2 0208 	rsb	r2, r2, #8
 801af10:	0092      	lsls	r2, r2, #2
 801af12:	b570      	push	{r4, r5, r6, lr}
 801af14:	f1c2 0620 	rsb	r6, r2, #32
 801af18:	6843      	ldr	r3, [r0, #4]
 801af1a:	6804      	ldr	r4, [r0, #0]
 801af1c:	fa03 f506 	lsl.w	r5, r3, r6
 801af20:	432c      	orrs	r4, r5
 801af22:	40d3      	lsrs	r3, r2
 801af24:	6004      	str	r4, [r0, #0]
 801af26:	f840 3f04 	str.w	r3, [r0, #4]!
 801af2a:	4288      	cmp	r0, r1
 801af2c:	d3f4      	bcc.n	801af18 <L_shift+0xc>
 801af2e:	bd70      	pop	{r4, r5, r6, pc}

0801af30 <__match>:
 801af30:	b530      	push	{r4, r5, lr}
 801af32:	6803      	ldr	r3, [r0, #0]
 801af34:	3301      	adds	r3, #1
 801af36:	f811 4b01 	ldrb.w	r4, [r1], #1
 801af3a:	b914      	cbnz	r4, 801af42 <__match+0x12>
 801af3c:	6003      	str	r3, [r0, #0]
 801af3e:	2001      	movs	r0, #1
 801af40:	bd30      	pop	{r4, r5, pc}
 801af42:	f813 2b01 	ldrb.w	r2, [r3], #1
 801af46:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801af4a:	2d19      	cmp	r5, #25
 801af4c:	bf98      	it	ls
 801af4e:	3220      	addls	r2, #32
 801af50:	42a2      	cmp	r2, r4
 801af52:	d0f0      	beq.n	801af36 <__match+0x6>
 801af54:	2000      	movs	r0, #0
 801af56:	e7f3      	b.n	801af40 <__match+0x10>

0801af58 <__hexnan>:
 801af58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af5c:	680b      	ldr	r3, [r1, #0]
 801af5e:	115e      	asrs	r6, r3, #5
 801af60:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801af64:	f013 031f 	ands.w	r3, r3, #31
 801af68:	b087      	sub	sp, #28
 801af6a:	bf18      	it	ne
 801af6c:	3604      	addne	r6, #4
 801af6e:	2500      	movs	r5, #0
 801af70:	1f37      	subs	r7, r6, #4
 801af72:	4690      	mov	r8, r2
 801af74:	6802      	ldr	r2, [r0, #0]
 801af76:	9301      	str	r3, [sp, #4]
 801af78:	4682      	mov	sl, r0
 801af7a:	f846 5c04 	str.w	r5, [r6, #-4]
 801af7e:	46b9      	mov	r9, r7
 801af80:	463c      	mov	r4, r7
 801af82:	9502      	str	r5, [sp, #8]
 801af84:	46ab      	mov	fp, r5
 801af86:	7851      	ldrb	r1, [r2, #1]
 801af88:	1c53      	adds	r3, r2, #1
 801af8a:	9303      	str	r3, [sp, #12]
 801af8c:	b341      	cbz	r1, 801afe0 <__hexnan+0x88>
 801af8e:	4608      	mov	r0, r1
 801af90:	9205      	str	r2, [sp, #20]
 801af92:	9104      	str	r1, [sp, #16]
 801af94:	f7ff fd5f 	bl	801aa56 <__hexdig_fun>
 801af98:	2800      	cmp	r0, #0
 801af9a:	d14f      	bne.n	801b03c <__hexnan+0xe4>
 801af9c:	9904      	ldr	r1, [sp, #16]
 801af9e:	9a05      	ldr	r2, [sp, #20]
 801afa0:	2920      	cmp	r1, #32
 801afa2:	d818      	bhi.n	801afd6 <__hexnan+0x7e>
 801afa4:	9b02      	ldr	r3, [sp, #8]
 801afa6:	459b      	cmp	fp, r3
 801afa8:	dd13      	ble.n	801afd2 <__hexnan+0x7a>
 801afaa:	454c      	cmp	r4, r9
 801afac:	d206      	bcs.n	801afbc <__hexnan+0x64>
 801afae:	2d07      	cmp	r5, #7
 801afb0:	dc04      	bgt.n	801afbc <__hexnan+0x64>
 801afb2:	462a      	mov	r2, r5
 801afb4:	4649      	mov	r1, r9
 801afb6:	4620      	mov	r0, r4
 801afb8:	f7ff ffa8 	bl	801af0c <L_shift>
 801afbc:	4544      	cmp	r4, r8
 801afbe:	d950      	bls.n	801b062 <__hexnan+0x10a>
 801afc0:	2300      	movs	r3, #0
 801afc2:	f1a4 0904 	sub.w	r9, r4, #4
 801afc6:	f844 3c04 	str.w	r3, [r4, #-4]
 801afca:	f8cd b008 	str.w	fp, [sp, #8]
 801afce:	464c      	mov	r4, r9
 801afd0:	461d      	mov	r5, r3
 801afd2:	9a03      	ldr	r2, [sp, #12]
 801afd4:	e7d7      	b.n	801af86 <__hexnan+0x2e>
 801afd6:	2929      	cmp	r1, #41	; 0x29
 801afd8:	d156      	bne.n	801b088 <__hexnan+0x130>
 801afda:	3202      	adds	r2, #2
 801afdc:	f8ca 2000 	str.w	r2, [sl]
 801afe0:	f1bb 0f00 	cmp.w	fp, #0
 801afe4:	d050      	beq.n	801b088 <__hexnan+0x130>
 801afe6:	454c      	cmp	r4, r9
 801afe8:	d206      	bcs.n	801aff8 <__hexnan+0xa0>
 801afea:	2d07      	cmp	r5, #7
 801afec:	dc04      	bgt.n	801aff8 <__hexnan+0xa0>
 801afee:	462a      	mov	r2, r5
 801aff0:	4649      	mov	r1, r9
 801aff2:	4620      	mov	r0, r4
 801aff4:	f7ff ff8a 	bl	801af0c <L_shift>
 801aff8:	4544      	cmp	r4, r8
 801affa:	d934      	bls.n	801b066 <__hexnan+0x10e>
 801affc:	f1a8 0204 	sub.w	r2, r8, #4
 801b000:	4623      	mov	r3, r4
 801b002:	f853 1b04 	ldr.w	r1, [r3], #4
 801b006:	f842 1f04 	str.w	r1, [r2, #4]!
 801b00a:	429f      	cmp	r7, r3
 801b00c:	d2f9      	bcs.n	801b002 <__hexnan+0xaa>
 801b00e:	1b3b      	subs	r3, r7, r4
 801b010:	f023 0303 	bic.w	r3, r3, #3
 801b014:	3304      	adds	r3, #4
 801b016:	3401      	adds	r4, #1
 801b018:	3e03      	subs	r6, #3
 801b01a:	42b4      	cmp	r4, r6
 801b01c:	bf88      	it	hi
 801b01e:	2304      	movhi	r3, #4
 801b020:	4443      	add	r3, r8
 801b022:	2200      	movs	r2, #0
 801b024:	f843 2b04 	str.w	r2, [r3], #4
 801b028:	429f      	cmp	r7, r3
 801b02a:	d2fb      	bcs.n	801b024 <__hexnan+0xcc>
 801b02c:	683b      	ldr	r3, [r7, #0]
 801b02e:	b91b      	cbnz	r3, 801b038 <__hexnan+0xe0>
 801b030:	4547      	cmp	r7, r8
 801b032:	d127      	bne.n	801b084 <__hexnan+0x12c>
 801b034:	2301      	movs	r3, #1
 801b036:	603b      	str	r3, [r7, #0]
 801b038:	2005      	movs	r0, #5
 801b03a:	e026      	b.n	801b08a <__hexnan+0x132>
 801b03c:	3501      	adds	r5, #1
 801b03e:	2d08      	cmp	r5, #8
 801b040:	f10b 0b01 	add.w	fp, fp, #1
 801b044:	dd06      	ble.n	801b054 <__hexnan+0xfc>
 801b046:	4544      	cmp	r4, r8
 801b048:	d9c3      	bls.n	801afd2 <__hexnan+0x7a>
 801b04a:	2300      	movs	r3, #0
 801b04c:	f844 3c04 	str.w	r3, [r4, #-4]
 801b050:	2501      	movs	r5, #1
 801b052:	3c04      	subs	r4, #4
 801b054:	6822      	ldr	r2, [r4, #0]
 801b056:	f000 000f 	and.w	r0, r0, #15
 801b05a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801b05e:	6022      	str	r2, [r4, #0]
 801b060:	e7b7      	b.n	801afd2 <__hexnan+0x7a>
 801b062:	2508      	movs	r5, #8
 801b064:	e7b5      	b.n	801afd2 <__hexnan+0x7a>
 801b066:	9b01      	ldr	r3, [sp, #4]
 801b068:	2b00      	cmp	r3, #0
 801b06a:	d0df      	beq.n	801b02c <__hexnan+0xd4>
 801b06c:	f04f 32ff 	mov.w	r2, #4294967295
 801b070:	f1c3 0320 	rsb	r3, r3, #32
 801b074:	fa22 f303 	lsr.w	r3, r2, r3
 801b078:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801b07c:	401a      	ands	r2, r3
 801b07e:	f846 2c04 	str.w	r2, [r6, #-4]
 801b082:	e7d3      	b.n	801b02c <__hexnan+0xd4>
 801b084:	3f04      	subs	r7, #4
 801b086:	e7d1      	b.n	801b02c <__hexnan+0xd4>
 801b088:	2004      	movs	r0, #4
 801b08a:	b007      	add	sp, #28
 801b08c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b090 <_localeconv_r>:
 801b090:	4800      	ldr	r0, [pc, #0]	; (801b094 <_localeconv_r+0x4>)
 801b092:	4770      	bx	lr
 801b094:	240001b8 	.word	0x240001b8

0801b098 <__retarget_lock_init_recursive>:
 801b098:	4770      	bx	lr

0801b09a <__retarget_lock_acquire_recursive>:
 801b09a:	4770      	bx	lr

0801b09c <__retarget_lock_release_recursive>:
 801b09c:	4770      	bx	lr

0801b09e <__ascii_mbtowc>:
 801b09e:	b082      	sub	sp, #8
 801b0a0:	b901      	cbnz	r1, 801b0a4 <__ascii_mbtowc+0x6>
 801b0a2:	a901      	add	r1, sp, #4
 801b0a4:	b142      	cbz	r2, 801b0b8 <__ascii_mbtowc+0x1a>
 801b0a6:	b14b      	cbz	r3, 801b0bc <__ascii_mbtowc+0x1e>
 801b0a8:	7813      	ldrb	r3, [r2, #0]
 801b0aa:	600b      	str	r3, [r1, #0]
 801b0ac:	7812      	ldrb	r2, [r2, #0]
 801b0ae:	1e10      	subs	r0, r2, #0
 801b0b0:	bf18      	it	ne
 801b0b2:	2001      	movne	r0, #1
 801b0b4:	b002      	add	sp, #8
 801b0b6:	4770      	bx	lr
 801b0b8:	4610      	mov	r0, r2
 801b0ba:	e7fb      	b.n	801b0b4 <__ascii_mbtowc+0x16>
 801b0bc:	f06f 0001 	mvn.w	r0, #1
 801b0c0:	e7f8      	b.n	801b0b4 <__ascii_mbtowc+0x16>
	...

0801b0c4 <__malloc_lock>:
 801b0c4:	4801      	ldr	r0, [pc, #4]	; (801b0cc <__malloc_lock+0x8>)
 801b0c6:	f7ff bfe8 	b.w	801b09a <__retarget_lock_acquire_recursive>
 801b0ca:	bf00      	nop
 801b0cc:	240311c4 	.word	0x240311c4

0801b0d0 <__malloc_unlock>:
 801b0d0:	4801      	ldr	r0, [pc, #4]	; (801b0d8 <__malloc_unlock+0x8>)
 801b0d2:	f7ff bfe3 	b.w	801b09c <__retarget_lock_release_recursive>
 801b0d6:	bf00      	nop
 801b0d8:	240311c4 	.word	0x240311c4

0801b0dc <_Balloc>:
 801b0dc:	b570      	push	{r4, r5, r6, lr}
 801b0de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801b0e0:	4604      	mov	r4, r0
 801b0e2:	460d      	mov	r5, r1
 801b0e4:	b976      	cbnz	r6, 801b104 <_Balloc+0x28>
 801b0e6:	2010      	movs	r0, #16
 801b0e8:	f7fd f910 	bl	801830c <malloc>
 801b0ec:	4602      	mov	r2, r0
 801b0ee:	6260      	str	r0, [r4, #36]	; 0x24
 801b0f0:	b920      	cbnz	r0, 801b0fc <_Balloc+0x20>
 801b0f2:	4b18      	ldr	r3, [pc, #96]	; (801b154 <_Balloc+0x78>)
 801b0f4:	4818      	ldr	r0, [pc, #96]	; (801b158 <_Balloc+0x7c>)
 801b0f6:	2166      	movs	r1, #102	; 0x66
 801b0f8:	f7fe fd3c 	bl	8019b74 <__assert_func>
 801b0fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b100:	6006      	str	r6, [r0, #0]
 801b102:	60c6      	str	r6, [r0, #12]
 801b104:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801b106:	68f3      	ldr	r3, [r6, #12]
 801b108:	b183      	cbz	r3, 801b12c <_Balloc+0x50>
 801b10a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b10c:	68db      	ldr	r3, [r3, #12]
 801b10e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b112:	b9b8      	cbnz	r0, 801b144 <_Balloc+0x68>
 801b114:	2101      	movs	r1, #1
 801b116:	fa01 f605 	lsl.w	r6, r1, r5
 801b11a:	1d72      	adds	r2, r6, #5
 801b11c:	0092      	lsls	r2, r2, #2
 801b11e:	4620      	mov	r0, r4
 801b120:	f000 fc9a 	bl	801ba58 <_calloc_r>
 801b124:	b160      	cbz	r0, 801b140 <_Balloc+0x64>
 801b126:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b12a:	e00e      	b.n	801b14a <_Balloc+0x6e>
 801b12c:	2221      	movs	r2, #33	; 0x21
 801b12e:	2104      	movs	r1, #4
 801b130:	4620      	mov	r0, r4
 801b132:	f000 fc91 	bl	801ba58 <_calloc_r>
 801b136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b138:	60f0      	str	r0, [r6, #12]
 801b13a:	68db      	ldr	r3, [r3, #12]
 801b13c:	2b00      	cmp	r3, #0
 801b13e:	d1e4      	bne.n	801b10a <_Balloc+0x2e>
 801b140:	2000      	movs	r0, #0
 801b142:	bd70      	pop	{r4, r5, r6, pc}
 801b144:	6802      	ldr	r2, [r0, #0]
 801b146:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b14a:	2300      	movs	r3, #0
 801b14c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b150:	e7f7      	b.n	801b142 <_Balloc+0x66>
 801b152:	bf00      	nop
 801b154:	08033080 	.word	0x08033080
 801b158:	08033388 	.word	0x08033388

0801b15c <_Bfree>:
 801b15c:	b570      	push	{r4, r5, r6, lr}
 801b15e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801b160:	4605      	mov	r5, r0
 801b162:	460c      	mov	r4, r1
 801b164:	b976      	cbnz	r6, 801b184 <_Bfree+0x28>
 801b166:	2010      	movs	r0, #16
 801b168:	f7fd f8d0 	bl	801830c <malloc>
 801b16c:	4602      	mov	r2, r0
 801b16e:	6268      	str	r0, [r5, #36]	; 0x24
 801b170:	b920      	cbnz	r0, 801b17c <_Bfree+0x20>
 801b172:	4b09      	ldr	r3, [pc, #36]	; (801b198 <_Bfree+0x3c>)
 801b174:	4809      	ldr	r0, [pc, #36]	; (801b19c <_Bfree+0x40>)
 801b176:	218a      	movs	r1, #138	; 0x8a
 801b178:	f7fe fcfc 	bl	8019b74 <__assert_func>
 801b17c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b180:	6006      	str	r6, [r0, #0]
 801b182:	60c6      	str	r6, [r0, #12]
 801b184:	b13c      	cbz	r4, 801b196 <_Bfree+0x3a>
 801b186:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801b188:	6862      	ldr	r2, [r4, #4]
 801b18a:	68db      	ldr	r3, [r3, #12]
 801b18c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b190:	6021      	str	r1, [r4, #0]
 801b192:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b196:	bd70      	pop	{r4, r5, r6, pc}
 801b198:	08033080 	.word	0x08033080
 801b19c:	08033388 	.word	0x08033388

0801b1a0 <__multadd>:
 801b1a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b1a4:	690d      	ldr	r5, [r1, #16]
 801b1a6:	4607      	mov	r7, r0
 801b1a8:	460c      	mov	r4, r1
 801b1aa:	461e      	mov	r6, r3
 801b1ac:	f101 0c14 	add.w	ip, r1, #20
 801b1b0:	2000      	movs	r0, #0
 801b1b2:	f8dc 3000 	ldr.w	r3, [ip]
 801b1b6:	b299      	uxth	r1, r3
 801b1b8:	fb02 6101 	mla	r1, r2, r1, r6
 801b1bc:	0c1e      	lsrs	r6, r3, #16
 801b1be:	0c0b      	lsrs	r3, r1, #16
 801b1c0:	fb02 3306 	mla	r3, r2, r6, r3
 801b1c4:	b289      	uxth	r1, r1
 801b1c6:	3001      	adds	r0, #1
 801b1c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801b1cc:	4285      	cmp	r5, r0
 801b1ce:	f84c 1b04 	str.w	r1, [ip], #4
 801b1d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b1d6:	dcec      	bgt.n	801b1b2 <__multadd+0x12>
 801b1d8:	b30e      	cbz	r6, 801b21e <__multadd+0x7e>
 801b1da:	68a3      	ldr	r3, [r4, #8]
 801b1dc:	42ab      	cmp	r3, r5
 801b1de:	dc19      	bgt.n	801b214 <__multadd+0x74>
 801b1e0:	6861      	ldr	r1, [r4, #4]
 801b1e2:	4638      	mov	r0, r7
 801b1e4:	3101      	adds	r1, #1
 801b1e6:	f7ff ff79 	bl	801b0dc <_Balloc>
 801b1ea:	4680      	mov	r8, r0
 801b1ec:	b928      	cbnz	r0, 801b1fa <__multadd+0x5a>
 801b1ee:	4602      	mov	r2, r0
 801b1f0:	4b0c      	ldr	r3, [pc, #48]	; (801b224 <__multadd+0x84>)
 801b1f2:	480d      	ldr	r0, [pc, #52]	; (801b228 <__multadd+0x88>)
 801b1f4:	21b5      	movs	r1, #181	; 0xb5
 801b1f6:	f7fe fcbd 	bl	8019b74 <__assert_func>
 801b1fa:	6922      	ldr	r2, [r4, #16]
 801b1fc:	3202      	adds	r2, #2
 801b1fe:	f104 010c 	add.w	r1, r4, #12
 801b202:	0092      	lsls	r2, r2, #2
 801b204:	300c      	adds	r0, #12
 801b206:	f7fd f891 	bl	801832c <memcpy>
 801b20a:	4621      	mov	r1, r4
 801b20c:	4638      	mov	r0, r7
 801b20e:	f7ff ffa5 	bl	801b15c <_Bfree>
 801b212:	4644      	mov	r4, r8
 801b214:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b218:	3501      	adds	r5, #1
 801b21a:	615e      	str	r6, [r3, #20]
 801b21c:	6125      	str	r5, [r4, #16]
 801b21e:	4620      	mov	r0, r4
 801b220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b224:	08033299 	.word	0x08033299
 801b228:	08033388 	.word	0x08033388

0801b22c <__s2b>:
 801b22c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b230:	460c      	mov	r4, r1
 801b232:	4615      	mov	r5, r2
 801b234:	461f      	mov	r7, r3
 801b236:	2209      	movs	r2, #9
 801b238:	3308      	adds	r3, #8
 801b23a:	4606      	mov	r6, r0
 801b23c:	fb93 f3f2 	sdiv	r3, r3, r2
 801b240:	2100      	movs	r1, #0
 801b242:	2201      	movs	r2, #1
 801b244:	429a      	cmp	r2, r3
 801b246:	db09      	blt.n	801b25c <__s2b+0x30>
 801b248:	4630      	mov	r0, r6
 801b24a:	f7ff ff47 	bl	801b0dc <_Balloc>
 801b24e:	b940      	cbnz	r0, 801b262 <__s2b+0x36>
 801b250:	4602      	mov	r2, r0
 801b252:	4b19      	ldr	r3, [pc, #100]	; (801b2b8 <__s2b+0x8c>)
 801b254:	4819      	ldr	r0, [pc, #100]	; (801b2bc <__s2b+0x90>)
 801b256:	21ce      	movs	r1, #206	; 0xce
 801b258:	f7fe fc8c 	bl	8019b74 <__assert_func>
 801b25c:	0052      	lsls	r2, r2, #1
 801b25e:	3101      	adds	r1, #1
 801b260:	e7f0      	b.n	801b244 <__s2b+0x18>
 801b262:	9b08      	ldr	r3, [sp, #32]
 801b264:	6143      	str	r3, [r0, #20]
 801b266:	2d09      	cmp	r5, #9
 801b268:	f04f 0301 	mov.w	r3, #1
 801b26c:	6103      	str	r3, [r0, #16]
 801b26e:	dd16      	ble.n	801b29e <__s2b+0x72>
 801b270:	f104 0909 	add.w	r9, r4, #9
 801b274:	46c8      	mov	r8, r9
 801b276:	442c      	add	r4, r5
 801b278:	f818 3b01 	ldrb.w	r3, [r8], #1
 801b27c:	4601      	mov	r1, r0
 801b27e:	3b30      	subs	r3, #48	; 0x30
 801b280:	220a      	movs	r2, #10
 801b282:	4630      	mov	r0, r6
 801b284:	f7ff ff8c 	bl	801b1a0 <__multadd>
 801b288:	45a0      	cmp	r8, r4
 801b28a:	d1f5      	bne.n	801b278 <__s2b+0x4c>
 801b28c:	f1a5 0408 	sub.w	r4, r5, #8
 801b290:	444c      	add	r4, r9
 801b292:	1b2d      	subs	r5, r5, r4
 801b294:	1963      	adds	r3, r4, r5
 801b296:	42bb      	cmp	r3, r7
 801b298:	db04      	blt.n	801b2a4 <__s2b+0x78>
 801b29a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b29e:	340a      	adds	r4, #10
 801b2a0:	2509      	movs	r5, #9
 801b2a2:	e7f6      	b.n	801b292 <__s2b+0x66>
 801b2a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b2a8:	4601      	mov	r1, r0
 801b2aa:	3b30      	subs	r3, #48	; 0x30
 801b2ac:	220a      	movs	r2, #10
 801b2ae:	4630      	mov	r0, r6
 801b2b0:	f7ff ff76 	bl	801b1a0 <__multadd>
 801b2b4:	e7ee      	b.n	801b294 <__s2b+0x68>
 801b2b6:	bf00      	nop
 801b2b8:	08033299 	.word	0x08033299
 801b2bc:	08033388 	.word	0x08033388

0801b2c0 <__hi0bits>:
 801b2c0:	0c03      	lsrs	r3, r0, #16
 801b2c2:	041b      	lsls	r3, r3, #16
 801b2c4:	b9d3      	cbnz	r3, 801b2fc <__hi0bits+0x3c>
 801b2c6:	0400      	lsls	r0, r0, #16
 801b2c8:	2310      	movs	r3, #16
 801b2ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801b2ce:	bf04      	itt	eq
 801b2d0:	0200      	lsleq	r0, r0, #8
 801b2d2:	3308      	addeq	r3, #8
 801b2d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801b2d8:	bf04      	itt	eq
 801b2da:	0100      	lsleq	r0, r0, #4
 801b2dc:	3304      	addeq	r3, #4
 801b2de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801b2e2:	bf04      	itt	eq
 801b2e4:	0080      	lsleq	r0, r0, #2
 801b2e6:	3302      	addeq	r3, #2
 801b2e8:	2800      	cmp	r0, #0
 801b2ea:	db05      	blt.n	801b2f8 <__hi0bits+0x38>
 801b2ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801b2f0:	f103 0301 	add.w	r3, r3, #1
 801b2f4:	bf08      	it	eq
 801b2f6:	2320      	moveq	r3, #32
 801b2f8:	4618      	mov	r0, r3
 801b2fa:	4770      	bx	lr
 801b2fc:	2300      	movs	r3, #0
 801b2fe:	e7e4      	b.n	801b2ca <__hi0bits+0xa>

0801b300 <__lo0bits>:
 801b300:	6803      	ldr	r3, [r0, #0]
 801b302:	f013 0207 	ands.w	r2, r3, #7
 801b306:	4601      	mov	r1, r0
 801b308:	d00b      	beq.n	801b322 <__lo0bits+0x22>
 801b30a:	07da      	lsls	r2, r3, #31
 801b30c:	d423      	bmi.n	801b356 <__lo0bits+0x56>
 801b30e:	0798      	lsls	r0, r3, #30
 801b310:	bf49      	itett	mi
 801b312:	085b      	lsrmi	r3, r3, #1
 801b314:	089b      	lsrpl	r3, r3, #2
 801b316:	2001      	movmi	r0, #1
 801b318:	600b      	strmi	r3, [r1, #0]
 801b31a:	bf5c      	itt	pl
 801b31c:	600b      	strpl	r3, [r1, #0]
 801b31e:	2002      	movpl	r0, #2
 801b320:	4770      	bx	lr
 801b322:	b298      	uxth	r0, r3
 801b324:	b9a8      	cbnz	r0, 801b352 <__lo0bits+0x52>
 801b326:	0c1b      	lsrs	r3, r3, #16
 801b328:	2010      	movs	r0, #16
 801b32a:	b2da      	uxtb	r2, r3
 801b32c:	b90a      	cbnz	r2, 801b332 <__lo0bits+0x32>
 801b32e:	3008      	adds	r0, #8
 801b330:	0a1b      	lsrs	r3, r3, #8
 801b332:	071a      	lsls	r2, r3, #28
 801b334:	bf04      	itt	eq
 801b336:	091b      	lsreq	r3, r3, #4
 801b338:	3004      	addeq	r0, #4
 801b33a:	079a      	lsls	r2, r3, #30
 801b33c:	bf04      	itt	eq
 801b33e:	089b      	lsreq	r3, r3, #2
 801b340:	3002      	addeq	r0, #2
 801b342:	07da      	lsls	r2, r3, #31
 801b344:	d403      	bmi.n	801b34e <__lo0bits+0x4e>
 801b346:	085b      	lsrs	r3, r3, #1
 801b348:	f100 0001 	add.w	r0, r0, #1
 801b34c:	d005      	beq.n	801b35a <__lo0bits+0x5a>
 801b34e:	600b      	str	r3, [r1, #0]
 801b350:	4770      	bx	lr
 801b352:	4610      	mov	r0, r2
 801b354:	e7e9      	b.n	801b32a <__lo0bits+0x2a>
 801b356:	2000      	movs	r0, #0
 801b358:	4770      	bx	lr
 801b35a:	2020      	movs	r0, #32
 801b35c:	4770      	bx	lr
	...

0801b360 <__i2b>:
 801b360:	b510      	push	{r4, lr}
 801b362:	460c      	mov	r4, r1
 801b364:	2101      	movs	r1, #1
 801b366:	f7ff feb9 	bl	801b0dc <_Balloc>
 801b36a:	4602      	mov	r2, r0
 801b36c:	b928      	cbnz	r0, 801b37a <__i2b+0x1a>
 801b36e:	4b05      	ldr	r3, [pc, #20]	; (801b384 <__i2b+0x24>)
 801b370:	4805      	ldr	r0, [pc, #20]	; (801b388 <__i2b+0x28>)
 801b372:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801b376:	f7fe fbfd 	bl	8019b74 <__assert_func>
 801b37a:	2301      	movs	r3, #1
 801b37c:	6144      	str	r4, [r0, #20]
 801b37e:	6103      	str	r3, [r0, #16]
 801b380:	bd10      	pop	{r4, pc}
 801b382:	bf00      	nop
 801b384:	08033299 	.word	0x08033299
 801b388:	08033388 	.word	0x08033388

0801b38c <__multiply>:
 801b38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b390:	4691      	mov	r9, r2
 801b392:	690a      	ldr	r2, [r1, #16]
 801b394:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801b398:	429a      	cmp	r2, r3
 801b39a:	bfb8      	it	lt
 801b39c:	460b      	movlt	r3, r1
 801b39e:	460c      	mov	r4, r1
 801b3a0:	bfbc      	itt	lt
 801b3a2:	464c      	movlt	r4, r9
 801b3a4:	4699      	movlt	r9, r3
 801b3a6:	6927      	ldr	r7, [r4, #16]
 801b3a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801b3ac:	68a3      	ldr	r3, [r4, #8]
 801b3ae:	6861      	ldr	r1, [r4, #4]
 801b3b0:	eb07 060a 	add.w	r6, r7, sl
 801b3b4:	42b3      	cmp	r3, r6
 801b3b6:	b085      	sub	sp, #20
 801b3b8:	bfb8      	it	lt
 801b3ba:	3101      	addlt	r1, #1
 801b3bc:	f7ff fe8e 	bl	801b0dc <_Balloc>
 801b3c0:	b930      	cbnz	r0, 801b3d0 <__multiply+0x44>
 801b3c2:	4602      	mov	r2, r0
 801b3c4:	4b44      	ldr	r3, [pc, #272]	; (801b4d8 <__multiply+0x14c>)
 801b3c6:	4845      	ldr	r0, [pc, #276]	; (801b4dc <__multiply+0x150>)
 801b3c8:	f240 115d 	movw	r1, #349	; 0x15d
 801b3cc:	f7fe fbd2 	bl	8019b74 <__assert_func>
 801b3d0:	f100 0514 	add.w	r5, r0, #20
 801b3d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801b3d8:	462b      	mov	r3, r5
 801b3da:	2200      	movs	r2, #0
 801b3dc:	4543      	cmp	r3, r8
 801b3de:	d321      	bcc.n	801b424 <__multiply+0x98>
 801b3e0:	f104 0314 	add.w	r3, r4, #20
 801b3e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801b3e8:	f109 0314 	add.w	r3, r9, #20
 801b3ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801b3f0:	9202      	str	r2, [sp, #8]
 801b3f2:	1b3a      	subs	r2, r7, r4
 801b3f4:	3a15      	subs	r2, #21
 801b3f6:	f022 0203 	bic.w	r2, r2, #3
 801b3fa:	3204      	adds	r2, #4
 801b3fc:	f104 0115 	add.w	r1, r4, #21
 801b400:	428f      	cmp	r7, r1
 801b402:	bf38      	it	cc
 801b404:	2204      	movcc	r2, #4
 801b406:	9201      	str	r2, [sp, #4]
 801b408:	9a02      	ldr	r2, [sp, #8]
 801b40a:	9303      	str	r3, [sp, #12]
 801b40c:	429a      	cmp	r2, r3
 801b40e:	d80c      	bhi.n	801b42a <__multiply+0x9e>
 801b410:	2e00      	cmp	r6, #0
 801b412:	dd03      	ble.n	801b41c <__multiply+0x90>
 801b414:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801b418:	2b00      	cmp	r3, #0
 801b41a:	d05a      	beq.n	801b4d2 <__multiply+0x146>
 801b41c:	6106      	str	r6, [r0, #16]
 801b41e:	b005      	add	sp, #20
 801b420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b424:	f843 2b04 	str.w	r2, [r3], #4
 801b428:	e7d8      	b.n	801b3dc <__multiply+0x50>
 801b42a:	f8b3 a000 	ldrh.w	sl, [r3]
 801b42e:	f1ba 0f00 	cmp.w	sl, #0
 801b432:	d024      	beq.n	801b47e <__multiply+0xf2>
 801b434:	f104 0e14 	add.w	lr, r4, #20
 801b438:	46a9      	mov	r9, r5
 801b43a:	f04f 0c00 	mov.w	ip, #0
 801b43e:	f85e 2b04 	ldr.w	r2, [lr], #4
 801b442:	f8d9 1000 	ldr.w	r1, [r9]
 801b446:	fa1f fb82 	uxth.w	fp, r2
 801b44a:	b289      	uxth	r1, r1
 801b44c:	fb0a 110b 	mla	r1, sl, fp, r1
 801b450:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801b454:	f8d9 2000 	ldr.w	r2, [r9]
 801b458:	4461      	add	r1, ip
 801b45a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801b45e:	fb0a c20b 	mla	r2, sl, fp, ip
 801b462:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801b466:	b289      	uxth	r1, r1
 801b468:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801b46c:	4577      	cmp	r7, lr
 801b46e:	f849 1b04 	str.w	r1, [r9], #4
 801b472:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801b476:	d8e2      	bhi.n	801b43e <__multiply+0xb2>
 801b478:	9a01      	ldr	r2, [sp, #4]
 801b47a:	f845 c002 	str.w	ip, [r5, r2]
 801b47e:	9a03      	ldr	r2, [sp, #12]
 801b480:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801b484:	3304      	adds	r3, #4
 801b486:	f1b9 0f00 	cmp.w	r9, #0
 801b48a:	d020      	beq.n	801b4ce <__multiply+0x142>
 801b48c:	6829      	ldr	r1, [r5, #0]
 801b48e:	f104 0c14 	add.w	ip, r4, #20
 801b492:	46ae      	mov	lr, r5
 801b494:	f04f 0a00 	mov.w	sl, #0
 801b498:	f8bc b000 	ldrh.w	fp, [ip]
 801b49c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801b4a0:	fb09 220b 	mla	r2, r9, fp, r2
 801b4a4:	4492      	add	sl, r2
 801b4a6:	b289      	uxth	r1, r1
 801b4a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801b4ac:	f84e 1b04 	str.w	r1, [lr], #4
 801b4b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 801b4b4:	f8be 1000 	ldrh.w	r1, [lr]
 801b4b8:	0c12      	lsrs	r2, r2, #16
 801b4ba:	fb09 1102 	mla	r1, r9, r2, r1
 801b4be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801b4c2:	4567      	cmp	r7, ip
 801b4c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801b4c8:	d8e6      	bhi.n	801b498 <__multiply+0x10c>
 801b4ca:	9a01      	ldr	r2, [sp, #4]
 801b4cc:	50a9      	str	r1, [r5, r2]
 801b4ce:	3504      	adds	r5, #4
 801b4d0:	e79a      	b.n	801b408 <__multiply+0x7c>
 801b4d2:	3e01      	subs	r6, #1
 801b4d4:	e79c      	b.n	801b410 <__multiply+0x84>
 801b4d6:	bf00      	nop
 801b4d8:	08033299 	.word	0x08033299
 801b4dc:	08033388 	.word	0x08033388

0801b4e0 <__pow5mult>:
 801b4e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b4e4:	4615      	mov	r5, r2
 801b4e6:	f012 0203 	ands.w	r2, r2, #3
 801b4ea:	4606      	mov	r6, r0
 801b4ec:	460f      	mov	r7, r1
 801b4ee:	d007      	beq.n	801b500 <__pow5mult+0x20>
 801b4f0:	4c25      	ldr	r4, [pc, #148]	; (801b588 <__pow5mult+0xa8>)
 801b4f2:	3a01      	subs	r2, #1
 801b4f4:	2300      	movs	r3, #0
 801b4f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b4fa:	f7ff fe51 	bl	801b1a0 <__multadd>
 801b4fe:	4607      	mov	r7, r0
 801b500:	10ad      	asrs	r5, r5, #2
 801b502:	d03d      	beq.n	801b580 <__pow5mult+0xa0>
 801b504:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801b506:	b97c      	cbnz	r4, 801b528 <__pow5mult+0x48>
 801b508:	2010      	movs	r0, #16
 801b50a:	f7fc feff 	bl	801830c <malloc>
 801b50e:	4602      	mov	r2, r0
 801b510:	6270      	str	r0, [r6, #36]	; 0x24
 801b512:	b928      	cbnz	r0, 801b520 <__pow5mult+0x40>
 801b514:	4b1d      	ldr	r3, [pc, #116]	; (801b58c <__pow5mult+0xac>)
 801b516:	481e      	ldr	r0, [pc, #120]	; (801b590 <__pow5mult+0xb0>)
 801b518:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801b51c:	f7fe fb2a 	bl	8019b74 <__assert_func>
 801b520:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b524:	6004      	str	r4, [r0, #0]
 801b526:	60c4      	str	r4, [r0, #12]
 801b528:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801b52c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b530:	b94c      	cbnz	r4, 801b546 <__pow5mult+0x66>
 801b532:	f240 2171 	movw	r1, #625	; 0x271
 801b536:	4630      	mov	r0, r6
 801b538:	f7ff ff12 	bl	801b360 <__i2b>
 801b53c:	2300      	movs	r3, #0
 801b53e:	f8c8 0008 	str.w	r0, [r8, #8]
 801b542:	4604      	mov	r4, r0
 801b544:	6003      	str	r3, [r0, #0]
 801b546:	f04f 0900 	mov.w	r9, #0
 801b54a:	07eb      	lsls	r3, r5, #31
 801b54c:	d50a      	bpl.n	801b564 <__pow5mult+0x84>
 801b54e:	4639      	mov	r1, r7
 801b550:	4622      	mov	r2, r4
 801b552:	4630      	mov	r0, r6
 801b554:	f7ff ff1a 	bl	801b38c <__multiply>
 801b558:	4639      	mov	r1, r7
 801b55a:	4680      	mov	r8, r0
 801b55c:	4630      	mov	r0, r6
 801b55e:	f7ff fdfd 	bl	801b15c <_Bfree>
 801b562:	4647      	mov	r7, r8
 801b564:	106d      	asrs	r5, r5, #1
 801b566:	d00b      	beq.n	801b580 <__pow5mult+0xa0>
 801b568:	6820      	ldr	r0, [r4, #0]
 801b56a:	b938      	cbnz	r0, 801b57c <__pow5mult+0x9c>
 801b56c:	4622      	mov	r2, r4
 801b56e:	4621      	mov	r1, r4
 801b570:	4630      	mov	r0, r6
 801b572:	f7ff ff0b 	bl	801b38c <__multiply>
 801b576:	6020      	str	r0, [r4, #0]
 801b578:	f8c0 9000 	str.w	r9, [r0]
 801b57c:	4604      	mov	r4, r0
 801b57e:	e7e4      	b.n	801b54a <__pow5mult+0x6a>
 801b580:	4638      	mov	r0, r7
 801b582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b586:	bf00      	nop
 801b588:	080334d8 	.word	0x080334d8
 801b58c:	08033080 	.word	0x08033080
 801b590:	08033388 	.word	0x08033388

0801b594 <__lshift>:
 801b594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b598:	460c      	mov	r4, r1
 801b59a:	6849      	ldr	r1, [r1, #4]
 801b59c:	6923      	ldr	r3, [r4, #16]
 801b59e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801b5a2:	68a3      	ldr	r3, [r4, #8]
 801b5a4:	4607      	mov	r7, r0
 801b5a6:	4691      	mov	r9, r2
 801b5a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b5ac:	f108 0601 	add.w	r6, r8, #1
 801b5b0:	42b3      	cmp	r3, r6
 801b5b2:	db0b      	blt.n	801b5cc <__lshift+0x38>
 801b5b4:	4638      	mov	r0, r7
 801b5b6:	f7ff fd91 	bl	801b0dc <_Balloc>
 801b5ba:	4605      	mov	r5, r0
 801b5bc:	b948      	cbnz	r0, 801b5d2 <__lshift+0x3e>
 801b5be:	4602      	mov	r2, r0
 801b5c0:	4b2a      	ldr	r3, [pc, #168]	; (801b66c <__lshift+0xd8>)
 801b5c2:	482b      	ldr	r0, [pc, #172]	; (801b670 <__lshift+0xdc>)
 801b5c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 801b5c8:	f7fe fad4 	bl	8019b74 <__assert_func>
 801b5cc:	3101      	adds	r1, #1
 801b5ce:	005b      	lsls	r3, r3, #1
 801b5d0:	e7ee      	b.n	801b5b0 <__lshift+0x1c>
 801b5d2:	2300      	movs	r3, #0
 801b5d4:	f100 0114 	add.w	r1, r0, #20
 801b5d8:	f100 0210 	add.w	r2, r0, #16
 801b5dc:	4618      	mov	r0, r3
 801b5de:	4553      	cmp	r3, sl
 801b5e0:	db37      	blt.n	801b652 <__lshift+0xbe>
 801b5e2:	6920      	ldr	r0, [r4, #16]
 801b5e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b5e8:	f104 0314 	add.w	r3, r4, #20
 801b5ec:	f019 091f 	ands.w	r9, r9, #31
 801b5f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b5f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801b5f8:	d02f      	beq.n	801b65a <__lshift+0xc6>
 801b5fa:	f1c9 0e20 	rsb	lr, r9, #32
 801b5fe:	468a      	mov	sl, r1
 801b600:	f04f 0c00 	mov.w	ip, #0
 801b604:	681a      	ldr	r2, [r3, #0]
 801b606:	fa02 f209 	lsl.w	r2, r2, r9
 801b60a:	ea42 020c 	orr.w	r2, r2, ip
 801b60e:	f84a 2b04 	str.w	r2, [sl], #4
 801b612:	f853 2b04 	ldr.w	r2, [r3], #4
 801b616:	4298      	cmp	r0, r3
 801b618:	fa22 fc0e 	lsr.w	ip, r2, lr
 801b61c:	d8f2      	bhi.n	801b604 <__lshift+0x70>
 801b61e:	1b03      	subs	r3, r0, r4
 801b620:	3b15      	subs	r3, #21
 801b622:	f023 0303 	bic.w	r3, r3, #3
 801b626:	3304      	adds	r3, #4
 801b628:	f104 0215 	add.w	r2, r4, #21
 801b62c:	4290      	cmp	r0, r2
 801b62e:	bf38      	it	cc
 801b630:	2304      	movcc	r3, #4
 801b632:	f841 c003 	str.w	ip, [r1, r3]
 801b636:	f1bc 0f00 	cmp.w	ip, #0
 801b63a:	d001      	beq.n	801b640 <__lshift+0xac>
 801b63c:	f108 0602 	add.w	r6, r8, #2
 801b640:	3e01      	subs	r6, #1
 801b642:	4638      	mov	r0, r7
 801b644:	612e      	str	r6, [r5, #16]
 801b646:	4621      	mov	r1, r4
 801b648:	f7ff fd88 	bl	801b15c <_Bfree>
 801b64c:	4628      	mov	r0, r5
 801b64e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b652:	f842 0f04 	str.w	r0, [r2, #4]!
 801b656:	3301      	adds	r3, #1
 801b658:	e7c1      	b.n	801b5de <__lshift+0x4a>
 801b65a:	3904      	subs	r1, #4
 801b65c:	f853 2b04 	ldr.w	r2, [r3], #4
 801b660:	f841 2f04 	str.w	r2, [r1, #4]!
 801b664:	4298      	cmp	r0, r3
 801b666:	d8f9      	bhi.n	801b65c <__lshift+0xc8>
 801b668:	e7ea      	b.n	801b640 <__lshift+0xac>
 801b66a:	bf00      	nop
 801b66c:	08033299 	.word	0x08033299
 801b670:	08033388 	.word	0x08033388

0801b674 <__mcmp>:
 801b674:	b530      	push	{r4, r5, lr}
 801b676:	6902      	ldr	r2, [r0, #16]
 801b678:	690c      	ldr	r4, [r1, #16]
 801b67a:	1b12      	subs	r2, r2, r4
 801b67c:	d10e      	bne.n	801b69c <__mcmp+0x28>
 801b67e:	f100 0314 	add.w	r3, r0, #20
 801b682:	3114      	adds	r1, #20
 801b684:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801b688:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801b68c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801b690:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801b694:	42a5      	cmp	r5, r4
 801b696:	d003      	beq.n	801b6a0 <__mcmp+0x2c>
 801b698:	d305      	bcc.n	801b6a6 <__mcmp+0x32>
 801b69a:	2201      	movs	r2, #1
 801b69c:	4610      	mov	r0, r2
 801b69e:	bd30      	pop	{r4, r5, pc}
 801b6a0:	4283      	cmp	r3, r0
 801b6a2:	d3f3      	bcc.n	801b68c <__mcmp+0x18>
 801b6a4:	e7fa      	b.n	801b69c <__mcmp+0x28>
 801b6a6:	f04f 32ff 	mov.w	r2, #4294967295
 801b6aa:	e7f7      	b.n	801b69c <__mcmp+0x28>

0801b6ac <__mdiff>:
 801b6ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6b0:	460c      	mov	r4, r1
 801b6b2:	4606      	mov	r6, r0
 801b6b4:	4611      	mov	r1, r2
 801b6b6:	4620      	mov	r0, r4
 801b6b8:	4690      	mov	r8, r2
 801b6ba:	f7ff ffdb 	bl	801b674 <__mcmp>
 801b6be:	1e05      	subs	r5, r0, #0
 801b6c0:	d110      	bne.n	801b6e4 <__mdiff+0x38>
 801b6c2:	4629      	mov	r1, r5
 801b6c4:	4630      	mov	r0, r6
 801b6c6:	f7ff fd09 	bl	801b0dc <_Balloc>
 801b6ca:	b930      	cbnz	r0, 801b6da <__mdiff+0x2e>
 801b6cc:	4b3a      	ldr	r3, [pc, #232]	; (801b7b8 <__mdiff+0x10c>)
 801b6ce:	4602      	mov	r2, r0
 801b6d0:	f240 2132 	movw	r1, #562	; 0x232
 801b6d4:	4839      	ldr	r0, [pc, #228]	; (801b7bc <__mdiff+0x110>)
 801b6d6:	f7fe fa4d 	bl	8019b74 <__assert_func>
 801b6da:	2301      	movs	r3, #1
 801b6dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801b6e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6e4:	bfa4      	itt	ge
 801b6e6:	4643      	movge	r3, r8
 801b6e8:	46a0      	movge	r8, r4
 801b6ea:	4630      	mov	r0, r6
 801b6ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801b6f0:	bfa6      	itte	ge
 801b6f2:	461c      	movge	r4, r3
 801b6f4:	2500      	movge	r5, #0
 801b6f6:	2501      	movlt	r5, #1
 801b6f8:	f7ff fcf0 	bl	801b0dc <_Balloc>
 801b6fc:	b920      	cbnz	r0, 801b708 <__mdiff+0x5c>
 801b6fe:	4b2e      	ldr	r3, [pc, #184]	; (801b7b8 <__mdiff+0x10c>)
 801b700:	4602      	mov	r2, r0
 801b702:	f44f 7110 	mov.w	r1, #576	; 0x240
 801b706:	e7e5      	b.n	801b6d4 <__mdiff+0x28>
 801b708:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801b70c:	6926      	ldr	r6, [r4, #16]
 801b70e:	60c5      	str	r5, [r0, #12]
 801b710:	f104 0914 	add.w	r9, r4, #20
 801b714:	f108 0514 	add.w	r5, r8, #20
 801b718:	f100 0e14 	add.w	lr, r0, #20
 801b71c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801b720:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801b724:	f108 0210 	add.w	r2, r8, #16
 801b728:	46f2      	mov	sl, lr
 801b72a:	2100      	movs	r1, #0
 801b72c:	f859 3b04 	ldr.w	r3, [r9], #4
 801b730:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801b734:	fa1f f883 	uxth.w	r8, r3
 801b738:	fa11 f18b 	uxtah	r1, r1, fp
 801b73c:	0c1b      	lsrs	r3, r3, #16
 801b73e:	eba1 0808 	sub.w	r8, r1, r8
 801b742:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801b746:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801b74a:	fa1f f888 	uxth.w	r8, r8
 801b74e:	1419      	asrs	r1, r3, #16
 801b750:	454e      	cmp	r6, r9
 801b752:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801b756:	f84a 3b04 	str.w	r3, [sl], #4
 801b75a:	d8e7      	bhi.n	801b72c <__mdiff+0x80>
 801b75c:	1b33      	subs	r3, r6, r4
 801b75e:	3b15      	subs	r3, #21
 801b760:	f023 0303 	bic.w	r3, r3, #3
 801b764:	3304      	adds	r3, #4
 801b766:	3415      	adds	r4, #21
 801b768:	42a6      	cmp	r6, r4
 801b76a:	bf38      	it	cc
 801b76c:	2304      	movcc	r3, #4
 801b76e:	441d      	add	r5, r3
 801b770:	4473      	add	r3, lr
 801b772:	469e      	mov	lr, r3
 801b774:	462e      	mov	r6, r5
 801b776:	4566      	cmp	r6, ip
 801b778:	d30e      	bcc.n	801b798 <__mdiff+0xec>
 801b77a:	f10c 0203 	add.w	r2, ip, #3
 801b77e:	1b52      	subs	r2, r2, r5
 801b780:	f022 0203 	bic.w	r2, r2, #3
 801b784:	3d03      	subs	r5, #3
 801b786:	45ac      	cmp	ip, r5
 801b788:	bf38      	it	cc
 801b78a:	2200      	movcc	r2, #0
 801b78c:	441a      	add	r2, r3
 801b78e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801b792:	b17b      	cbz	r3, 801b7b4 <__mdiff+0x108>
 801b794:	6107      	str	r7, [r0, #16]
 801b796:	e7a3      	b.n	801b6e0 <__mdiff+0x34>
 801b798:	f856 8b04 	ldr.w	r8, [r6], #4
 801b79c:	fa11 f288 	uxtah	r2, r1, r8
 801b7a0:	1414      	asrs	r4, r2, #16
 801b7a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801b7a6:	b292      	uxth	r2, r2
 801b7a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801b7ac:	f84e 2b04 	str.w	r2, [lr], #4
 801b7b0:	1421      	asrs	r1, r4, #16
 801b7b2:	e7e0      	b.n	801b776 <__mdiff+0xca>
 801b7b4:	3f01      	subs	r7, #1
 801b7b6:	e7ea      	b.n	801b78e <__mdiff+0xe2>
 801b7b8:	08033299 	.word	0x08033299
 801b7bc:	08033388 	.word	0x08033388

0801b7c0 <__ulp>:
 801b7c0:	b082      	sub	sp, #8
 801b7c2:	ed8d 0b00 	vstr	d0, [sp]
 801b7c6:	9b01      	ldr	r3, [sp, #4]
 801b7c8:	4912      	ldr	r1, [pc, #72]	; (801b814 <__ulp+0x54>)
 801b7ca:	4019      	ands	r1, r3
 801b7cc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801b7d0:	2900      	cmp	r1, #0
 801b7d2:	dd05      	ble.n	801b7e0 <__ulp+0x20>
 801b7d4:	2200      	movs	r2, #0
 801b7d6:	460b      	mov	r3, r1
 801b7d8:	ec43 2b10 	vmov	d0, r2, r3
 801b7dc:	b002      	add	sp, #8
 801b7de:	4770      	bx	lr
 801b7e0:	4249      	negs	r1, r1
 801b7e2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801b7e6:	ea4f 5021 	mov.w	r0, r1, asr #20
 801b7ea:	f04f 0200 	mov.w	r2, #0
 801b7ee:	f04f 0300 	mov.w	r3, #0
 801b7f2:	da04      	bge.n	801b7fe <__ulp+0x3e>
 801b7f4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801b7f8:	fa41 f300 	asr.w	r3, r1, r0
 801b7fc:	e7ec      	b.n	801b7d8 <__ulp+0x18>
 801b7fe:	f1a0 0114 	sub.w	r1, r0, #20
 801b802:	291e      	cmp	r1, #30
 801b804:	bfda      	itte	le
 801b806:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801b80a:	fa20 f101 	lsrle.w	r1, r0, r1
 801b80e:	2101      	movgt	r1, #1
 801b810:	460a      	mov	r2, r1
 801b812:	e7e1      	b.n	801b7d8 <__ulp+0x18>
 801b814:	7ff00000 	.word	0x7ff00000

0801b818 <__b2d>:
 801b818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b81a:	6905      	ldr	r5, [r0, #16]
 801b81c:	f100 0714 	add.w	r7, r0, #20
 801b820:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801b824:	1f2e      	subs	r6, r5, #4
 801b826:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801b82a:	4620      	mov	r0, r4
 801b82c:	f7ff fd48 	bl	801b2c0 <__hi0bits>
 801b830:	f1c0 0320 	rsb	r3, r0, #32
 801b834:	280a      	cmp	r0, #10
 801b836:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801b8b4 <__b2d+0x9c>
 801b83a:	600b      	str	r3, [r1, #0]
 801b83c:	dc14      	bgt.n	801b868 <__b2d+0x50>
 801b83e:	f1c0 0e0b 	rsb	lr, r0, #11
 801b842:	fa24 f10e 	lsr.w	r1, r4, lr
 801b846:	42b7      	cmp	r7, r6
 801b848:	ea41 030c 	orr.w	r3, r1, ip
 801b84c:	bf34      	ite	cc
 801b84e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801b852:	2100      	movcs	r1, #0
 801b854:	3015      	adds	r0, #21
 801b856:	fa04 f000 	lsl.w	r0, r4, r0
 801b85a:	fa21 f10e 	lsr.w	r1, r1, lr
 801b85e:	ea40 0201 	orr.w	r2, r0, r1
 801b862:	ec43 2b10 	vmov	d0, r2, r3
 801b866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b868:	42b7      	cmp	r7, r6
 801b86a:	bf3a      	itte	cc
 801b86c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801b870:	f1a5 0608 	subcc.w	r6, r5, #8
 801b874:	2100      	movcs	r1, #0
 801b876:	380b      	subs	r0, #11
 801b878:	d017      	beq.n	801b8aa <__b2d+0x92>
 801b87a:	f1c0 0c20 	rsb	ip, r0, #32
 801b87e:	fa04 f500 	lsl.w	r5, r4, r0
 801b882:	42be      	cmp	r6, r7
 801b884:	fa21 f40c 	lsr.w	r4, r1, ip
 801b888:	ea45 0504 	orr.w	r5, r5, r4
 801b88c:	bf8c      	ite	hi
 801b88e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801b892:	2400      	movls	r4, #0
 801b894:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801b898:	fa01 f000 	lsl.w	r0, r1, r0
 801b89c:	fa24 f40c 	lsr.w	r4, r4, ip
 801b8a0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801b8a4:	ea40 0204 	orr.w	r2, r0, r4
 801b8a8:	e7db      	b.n	801b862 <__b2d+0x4a>
 801b8aa:	ea44 030c 	orr.w	r3, r4, ip
 801b8ae:	460a      	mov	r2, r1
 801b8b0:	e7d7      	b.n	801b862 <__b2d+0x4a>
 801b8b2:	bf00      	nop
 801b8b4:	3ff00000 	.word	0x3ff00000

0801b8b8 <__d2b>:
 801b8b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b8bc:	4689      	mov	r9, r1
 801b8be:	2101      	movs	r1, #1
 801b8c0:	ec57 6b10 	vmov	r6, r7, d0
 801b8c4:	4690      	mov	r8, r2
 801b8c6:	f7ff fc09 	bl	801b0dc <_Balloc>
 801b8ca:	4604      	mov	r4, r0
 801b8cc:	b930      	cbnz	r0, 801b8dc <__d2b+0x24>
 801b8ce:	4602      	mov	r2, r0
 801b8d0:	4b25      	ldr	r3, [pc, #148]	; (801b968 <__d2b+0xb0>)
 801b8d2:	4826      	ldr	r0, [pc, #152]	; (801b96c <__d2b+0xb4>)
 801b8d4:	f240 310a 	movw	r1, #778	; 0x30a
 801b8d8:	f7fe f94c 	bl	8019b74 <__assert_func>
 801b8dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801b8e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801b8e4:	bb35      	cbnz	r5, 801b934 <__d2b+0x7c>
 801b8e6:	2e00      	cmp	r6, #0
 801b8e8:	9301      	str	r3, [sp, #4]
 801b8ea:	d028      	beq.n	801b93e <__d2b+0x86>
 801b8ec:	4668      	mov	r0, sp
 801b8ee:	9600      	str	r6, [sp, #0]
 801b8f0:	f7ff fd06 	bl	801b300 <__lo0bits>
 801b8f4:	9900      	ldr	r1, [sp, #0]
 801b8f6:	b300      	cbz	r0, 801b93a <__d2b+0x82>
 801b8f8:	9a01      	ldr	r2, [sp, #4]
 801b8fa:	f1c0 0320 	rsb	r3, r0, #32
 801b8fe:	fa02 f303 	lsl.w	r3, r2, r3
 801b902:	430b      	orrs	r3, r1
 801b904:	40c2      	lsrs	r2, r0
 801b906:	6163      	str	r3, [r4, #20]
 801b908:	9201      	str	r2, [sp, #4]
 801b90a:	9b01      	ldr	r3, [sp, #4]
 801b90c:	61a3      	str	r3, [r4, #24]
 801b90e:	2b00      	cmp	r3, #0
 801b910:	bf14      	ite	ne
 801b912:	2202      	movne	r2, #2
 801b914:	2201      	moveq	r2, #1
 801b916:	6122      	str	r2, [r4, #16]
 801b918:	b1d5      	cbz	r5, 801b950 <__d2b+0x98>
 801b91a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801b91e:	4405      	add	r5, r0
 801b920:	f8c9 5000 	str.w	r5, [r9]
 801b924:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801b928:	f8c8 0000 	str.w	r0, [r8]
 801b92c:	4620      	mov	r0, r4
 801b92e:	b003      	add	sp, #12
 801b930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b934:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801b938:	e7d5      	b.n	801b8e6 <__d2b+0x2e>
 801b93a:	6161      	str	r1, [r4, #20]
 801b93c:	e7e5      	b.n	801b90a <__d2b+0x52>
 801b93e:	a801      	add	r0, sp, #4
 801b940:	f7ff fcde 	bl	801b300 <__lo0bits>
 801b944:	9b01      	ldr	r3, [sp, #4]
 801b946:	6163      	str	r3, [r4, #20]
 801b948:	2201      	movs	r2, #1
 801b94a:	6122      	str	r2, [r4, #16]
 801b94c:	3020      	adds	r0, #32
 801b94e:	e7e3      	b.n	801b918 <__d2b+0x60>
 801b950:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801b954:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801b958:	f8c9 0000 	str.w	r0, [r9]
 801b95c:	6918      	ldr	r0, [r3, #16]
 801b95e:	f7ff fcaf 	bl	801b2c0 <__hi0bits>
 801b962:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801b966:	e7df      	b.n	801b928 <__d2b+0x70>
 801b968:	08033299 	.word	0x08033299
 801b96c:	08033388 	.word	0x08033388

0801b970 <__ratio>:
 801b970:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b974:	4688      	mov	r8, r1
 801b976:	4669      	mov	r1, sp
 801b978:	4681      	mov	r9, r0
 801b97a:	f7ff ff4d 	bl	801b818 <__b2d>
 801b97e:	a901      	add	r1, sp, #4
 801b980:	4640      	mov	r0, r8
 801b982:	ec55 4b10 	vmov	r4, r5, d0
 801b986:	ee10 aa10 	vmov	sl, s0
 801b98a:	f7ff ff45 	bl	801b818 <__b2d>
 801b98e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801b992:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b996:	1a59      	subs	r1, r3, r1
 801b998:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b99c:	1ad3      	subs	r3, r2, r3
 801b99e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801b9a2:	ec57 6b10 	vmov	r6, r7, d0
 801b9a6:	2b00      	cmp	r3, #0
 801b9a8:	bfd6      	itet	le
 801b9aa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801b9ae:	462a      	movgt	r2, r5
 801b9b0:	463a      	movle	r2, r7
 801b9b2:	46ab      	mov	fp, r5
 801b9b4:	bfd6      	itet	le
 801b9b6:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801b9ba:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801b9be:	ee00 3a90 	vmovle	s1, r3
 801b9c2:	ec4b ab17 	vmov	d7, sl, fp
 801b9c6:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801b9ca:	b003      	add	sp, #12
 801b9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b9d0 <__copybits>:
 801b9d0:	3901      	subs	r1, #1
 801b9d2:	b570      	push	{r4, r5, r6, lr}
 801b9d4:	1149      	asrs	r1, r1, #5
 801b9d6:	6914      	ldr	r4, [r2, #16]
 801b9d8:	3101      	adds	r1, #1
 801b9da:	f102 0314 	add.w	r3, r2, #20
 801b9de:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801b9e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801b9e6:	1f05      	subs	r5, r0, #4
 801b9e8:	42a3      	cmp	r3, r4
 801b9ea:	d30c      	bcc.n	801ba06 <__copybits+0x36>
 801b9ec:	1aa3      	subs	r3, r4, r2
 801b9ee:	3b11      	subs	r3, #17
 801b9f0:	f023 0303 	bic.w	r3, r3, #3
 801b9f4:	3211      	adds	r2, #17
 801b9f6:	42a2      	cmp	r2, r4
 801b9f8:	bf88      	it	hi
 801b9fa:	2300      	movhi	r3, #0
 801b9fc:	4418      	add	r0, r3
 801b9fe:	2300      	movs	r3, #0
 801ba00:	4288      	cmp	r0, r1
 801ba02:	d305      	bcc.n	801ba10 <__copybits+0x40>
 801ba04:	bd70      	pop	{r4, r5, r6, pc}
 801ba06:	f853 6b04 	ldr.w	r6, [r3], #4
 801ba0a:	f845 6f04 	str.w	r6, [r5, #4]!
 801ba0e:	e7eb      	b.n	801b9e8 <__copybits+0x18>
 801ba10:	f840 3b04 	str.w	r3, [r0], #4
 801ba14:	e7f4      	b.n	801ba00 <__copybits+0x30>

0801ba16 <__any_on>:
 801ba16:	f100 0214 	add.w	r2, r0, #20
 801ba1a:	6900      	ldr	r0, [r0, #16]
 801ba1c:	114b      	asrs	r3, r1, #5
 801ba1e:	4298      	cmp	r0, r3
 801ba20:	b510      	push	{r4, lr}
 801ba22:	db11      	blt.n	801ba48 <__any_on+0x32>
 801ba24:	dd0a      	ble.n	801ba3c <__any_on+0x26>
 801ba26:	f011 011f 	ands.w	r1, r1, #31
 801ba2a:	d007      	beq.n	801ba3c <__any_on+0x26>
 801ba2c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801ba30:	fa24 f001 	lsr.w	r0, r4, r1
 801ba34:	fa00 f101 	lsl.w	r1, r0, r1
 801ba38:	428c      	cmp	r4, r1
 801ba3a:	d10b      	bne.n	801ba54 <__any_on+0x3e>
 801ba3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ba40:	4293      	cmp	r3, r2
 801ba42:	d803      	bhi.n	801ba4c <__any_on+0x36>
 801ba44:	2000      	movs	r0, #0
 801ba46:	bd10      	pop	{r4, pc}
 801ba48:	4603      	mov	r3, r0
 801ba4a:	e7f7      	b.n	801ba3c <__any_on+0x26>
 801ba4c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801ba50:	2900      	cmp	r1, #0
 801ba52:	d0f5      	beq.n	801ba40 <__any_on+0x2a>
 801ba54:	2001      	movs	r0, #1
 801ba56:	e7f6      	b.n	801ba46 <__any_on+0x30>

0801ba58 <_calloc_r>:
 801ba58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ba5a:	fba1 2402 	umull	r2, r4, r1, r2
 801ba5e:	b94c      	cbnz	r4, 801ba74 <_calloc_r+0x1c>
 801ba60:	4611      	mov	r1, r2
 801ba62:	9201      	str	r2, [sp, #4]
 801ba64:	f7fc fce4 	bl	8018430 <_malloc_r>
 801ba68:	9a01      	ldr	r2, [sp, #4]
 801ba6a:	4605      	mov	r5, r0
 801ba6c:	b930      	cbnz	r0, 801ba7c <_calloc_r+0x24>
 801ba6e:	4628      	mov	r0, r5
 801ba70:	b003      	add	sp, #12
 801ba72:	bd30      	pop	{r4, r5, pc}
 801ba74:	220c      	movs	r2, #12
 801ba76:	6002      	str	r2, [r0, #0]
 801ba78:	2500      	movs	r5, #0
 801ba7a:	e7f8      	b.n	801ba6e <_calloc_r+0x16>
 801ba7c:	4621      	mov	r1, r4
 801ba7e:	f7fc fc63 	bl	8018348 <memset>
 801ba82:	e7f4      	b.n	801ba6e <_calloc_r+0x16>

0801ba84 <__sfputc_r>:
 801ba84:	6893      	ldr	r3, [r2, #8]
 801ba86:	3b01      	subs	r3, #1
 801ba88:	2b00      	cmp	r3, #0
 801ba8a:	b410      	push	{r4}
 801ba8c:	6093      	str	r3, [r2, #8]
 801ba8e:	da08      	bge.n	801baa2 <__sfputc_r+0x1e>
 801ba90:	6994      	ldr	r4, [r2, #24]
 801ba92:	42a3      	cmp	r3, r4
 801ba94:	db01      	blt.n	801ba9a <__sfputc_r+0x16>
 801ba96:	290a      	cmp	r1, #10
 801ba98:	d103      	bne.n	801baa2 <__sfputc_r+0x1e>
 801ba9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ba9e:	f000 b9ab 	b.w	801bdf8 <__swbuf_r>
 801baa2:	6813      	ldr	r3, [r2, #0]
 801baa4:	1c58      	adds	r0, r3, #1
 801baa6:	6010      	str	r0, [r2, #0]
 801baa8:	7019      	strb	r1, [r3, #0]
 801baaa:	4608      	mov	r0, r1
 801baac:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bab0:	4770      	bx	lr

0801bab2 <__sfputs_r>:
 801bab2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bab4:	4606      	mov	r6, r0
 801bab6:	460f      	mov	r7, r1
 801bab8:	4614      	mov	r4, r2
 801baba:	18d5      	adds	r5, r2, r3
 801babc:	42ac      	cmp	r4, r5
 801babe:	d101      	bne.n	801bac4 <__sfputs_r+0x12>
 801bac0:	2000      	movs	r0, #0
 801bac2:	e007      	b.n	801bad4 <__sfputs_r+0x22>
 801bac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bac8:	463a      	mov	r2, r7
 801baca:	4630      	mov	r0, r6
 801bacc:	f7ff ffda 	bl	801ba84 <__sfputc_r>
 801bad0:	1c43      	adds	r3, r0, #1
 801bad2:	d1f3      	bne.n	801babc <__sfputs_r+0xa>
 801bad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801bad8 <_vfiprintf_r>:
 801bad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801badc:	460d      	mov	r5, r1
 801bade:	b09d      	sub	sp, #116	; 0x74
 801bae0:	4614      	mov	r4, r2
 801bae2:	4698      	mov	r8, r3
 801bae4:	4606      	mov	r6, r0
 801bae6:	b118      	cbz	r0, 801baf0 <_vfiprintf_r+0x18>
 801bae8:	6983      	ldr	r3, [r0, #24]
 801baea:	b90b      	cbnz	r3, 801baf0 <_vfiprintf_r+0x18>
 801baec:	f7fe feb2 	bl	801a854 <__sinit>
 801baf0:	4b89      	ldr	r3, [pc, #548]	; (801bd18 <_vfiprintf_r+0x240>)
 801baf2:	429d      	cmp	r5, r3
 801baf4:	d11b      	bne.n	801bb2e <_vfiprintf_r+0x56>
 801baf6:	6875      	ldr	r5, [r6, #4]
 801baf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bafa:	07d9      	lsls	r1, r3, #31
 801bafc:	d405      	bmi.n	801bb0a <_vfiprintf_r+0x32>
 801bafe:	89ab      	ldrh	r3, [r5, #12]
 801bb00:	059a      	lsls	r2, r3, #22
 801bb02:	d402      	bmi.n	801bb0a <_vfiprintf_r+0x32>
 801bb04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bb06:	f7ff fac8 	bl	801b09a <__retarget_lock_acquire_recursive>
 801bb0a:	89ab      	ldrh	r3, [r5, #12]
 801bb0c:	071b      	lsls	r3, r3, #28
 801bb0e:	d501      	bpl.n	801bb14 <_vfiprintf_r+0x3c>
 801bb10:	692b      	ldr	r3, [r5, #16]
 801bb12:	b9eb      	cbnz	r3, 801bb50 <_vfiprintf_r+0x78>
 801bb14:	4629      	mov	r1, r5
 801bb16:	4630      	mov	r0, r6
 801bb18:	f000 f9e0 	bl	801bedc <__swsetup_r>
 801bb1c:	b1c0      	cbz	r0, 801bb50 <_vfiprintf_r+0x78>
 801bb1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bb20:	07dc      	lsls	r4, r3, #31
 801bb22:	d50e      	bpl.n	801bb42 <_vfiprintf_r+0x6a>
 801bb24:	f04f 30ff 	mov.w	r0, #4294967295
 801bb28:	b01d      	add	sp, #116	; 0x74
 801bb2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb2e:	4b7b      	ldr	r3, [pc, #492]	; (801bd1c <_vfiprintf_r+0x244>)
 801bb30:	429d      	cmp	r5, r3
 801bb32:	d101      	bne.n	801bb38 <_vfiprintf_r+0x60>
 801bb34:	68b5      	ldr	r5, [r6, #8]
 801bb36:	e7df      	b.n	801baf8 <_vfiprintf_r+0x20>
 801bb38:	4b79      	ldr	r3, [pc, #484]	; (801bd20 <_vfiprintf_r+0x248>)
 801bb3a:	429d      	cmp	r5, r3
 801bb3c:	bf08      	it	eq
 801bb3e:	68f5      	ldreq	r5, [r6, #12]
 801bb40:	e7da      	b.n	801baf8 <_vfiprintf_r+0x20>
 801bb42:	89ab      	ldrh	r3, [r5, #12]
 801bb44:	0598      	lsls	r0, r3, #22
 801bb46:	d4ed      	bmi.n	801bb24 <_vfiprintf_r+0x4c>
 801bb48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bb4a:	f7ff faa7 	bl	801b09c <__retarget_lock_release_recursive>
 801bb4e:	e7e9      	b.n	801bb24 <_vfiprintf_r+0x4c>
 801bb50:	2300      	movs	r3, #0
 801bb52:	9309      	str	r3, [sp, #36]	; 0x24
 801bb54:	2320      	movs	r3, #32
 801bb56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bb5a:	f8cd 800c 	str.w	r8, [sp, #12]
 801bb5e:	2330      	movs	r3, #48	; 0x30
 801bb60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801bd24 <_vfiprintf_r+0x24c>
 801bb64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bb68:	f04f 0901 	mov.w	r9, #1
 801bb6c:	4623      	mov	r3, r4
 801bb6e:	469a      	mov	sl, r3
 801bb70:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bb74:	b10a      	cbz	r2, 801bb7a <_vfiprintf_r+0xa2>
 801bb76:	2a25      	cmp	r2, #37	; 0x25
 801bb78:	d1f9      	bne.n	801bb6e <_vfiprintf_r+0x96>
 801bb7a:	ebba 0b04 	subs.w	fp, sl, r4
 801bb7e:	d00b      	beq.n	801bb98 <_vfiprintf_r+0xc0>
 801bb80:	465b      	mov	r3, fp
 801bb82:	4622      	mov	r2, r4
 801bb84:	4629      	mov	r1, r5
 801bb86:	4630      	mov	r0, r6
 801bb88:	f7ff ff93 	bl	801bab2 <__sfputs_r>
 801bb8c:	3001      	adds	r0, #1
 801bb8e:	f000 80aa 	beq.w	801bce6 <_vfiprintf_r+0x20e>
 801bb92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bb94:	445a      	add	r2, fp
 801bb96:	9209      	str	r2, [sp, #36]	; 0x24
 801bb98:	f89a 3000 	ldrb.w	r3, [sl]
 801bb9c:	2b00      	cmp	r3, #0
 801bb9e:	f000 80a2 	beq.w	801bce6 <_vfiprintf_r+0x20e>
 801bba2:	2300      	movs	r3, #0
 801bba4:	f04f 32ff 	mov.w	r2, #4294967295
 801bba8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bbac:	f10a 0a01 	add.w	sl, sl, #1
 801bbb0:	9304      	str	r3, [sp, #16]
 801bbb2:	9307      	str	r3, [sp, #28]
 801bbb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bbb8:	931a      	str	r3, [sp, #104]	; 0x68
 801bbba:	4654      	mov	r4, sl
 801bbbc:	2205      	movs	r2, #5
 801bbbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bbc2:	4858      	ldr	r0, [pc, #352]	; (801bd24 <_vfiprintf_r+0x24c>)
 801bbc4:	f7e4 fba4 	bl	8000310 <memchr>
 801bbc8:	9a04      	ldr	r2, [sp, #16]
 801bbca:	b9d8      	cbnz	r0, 801bc04 <_vfiprintf_r+0x12c>
 801bbcc:	06d1      	lsls	r1, r2, #27
 801bbce:	bf44      	itt	mi
 801bbd0:	2320      	movmi	r3, #32
 801bbd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bbd6:	0713      	lsls	r3, r2, #28
 801bbd8:	bf44      	itt	mi
 801bbda:	232b      	movmi	r3, #43	; 0x2b
 801bbdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bbe0:	f89a 3000 	ldrb.w	r3, [sl]
 801bbe4:	2b2a      	cmp	r3, #42	; 0x2a
 801bbe6:	d015      	beq.n	801bc14 <_vfiprintf_r+0x13c>
 801bbe8:	9a07      	ldr	r2, [sp, #28]
 801bbea:	4654      	mov	r4, sl
 801bbec:	2000      	movs	r0, #0
 801bbee:	f04f 0c0a 	mov.w	ip, #10
 801bbf2:	4621      	mov	r1, r4
 801bbf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bbf8:	3b30      	subs	r3, #48	; 0x30
 801bbfa:	2b09      	cmp	r3, #9
 801bbfc:	d94e      	bls.n	801bc9c <_vfiprintf_r+0x1c4>
 801bbfe:	b1b0      	cbz	r0, 801bc2e <_vfiprintf_r+0x156>
 801bc00:	9207      	str	r2, [sp, #28]
 801bc02:	e014      	b.n	801bc2e <_vfiprintf_r+0x156>
 801bc04:	eba0 0308 	sub.w	r3, r0, r8
 801bc08:	fa09 f303 	lsl.w	r3, r9, r3
 801bc0c:	4313      	orrs	r3, r2
 801bc0e:	9304      	str	r3, [sp, #16]
 801bc10:	46a2      	mov	sl, r4
 801bc12:	e7d2      	b.n	801bbba <_vfiprintf_r+0xe2>
 801bc14:	9b03      	ldr	r3, [sp, #12]
 801bc16:	1d19      	adds	r1, r3, #4
 801bc18:	681b      	ldr	r3, [r3, #0]
 801bc1a:	9103      	str	r1, [sp, #12]
 801bc1c:	2b00      	cmp	r3, #0
 801bc1e:	bfbb      	ittet	lt
 801bc20:	425b      	neglt	r3, r3
 801bc22:	f042 0202 	orrlt.w	r2, r2, #2
 801bc26:	9307      	strge	r3, [sp, #28]
 801bc28:	9307      	strlt	r3, [sp, #28]
 801bc2a:	bfb8      	it	lt
 801bc2c:	9204      	strlt	r2, [sp, #16]
 801bc2e:	7823      	ldrb	r3, [r4, #0]
 801bc30:	2b2e      	cmp	r3, #46	; 0x2e
 801bc32:	d10c      	bne.n	801bc4e <_vfiprintf_r+0x176>
 801bc34:	7863      	ldrb	r3, [r4, #1]
 801bc36:	2b2a      	cmp	r3, #42	; 0x2a
 801bc38:	d135      	bne.n	801bca6 <_vfiprintf_r+0x1ce>
 801bc3a:	9b03      	ldr	r3, [sp, #12]
 801bc3c:	1d1a      	adds	r2, r3, #4
 801bc3e:	681b      	ldr	r3, [r3, #0]
 801bc40:	9203      	str	r2, [sp, #12]
 801bc42:	2b00      	cmp	r3, #0
 801bc44:	bfb8      	it	lt
 801bc46:	f04f 33ff 	movlt.w	r3, #4294967295
 801bc4a:	3402      	adds	r4, #2
 801bc4c:	9305      	str	r3, [sp, #20]
 801bc4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801bd34 <_vfiprintf_r+0x25c>
 801bc52:	7821      	ldrb	r1, [r4, #0]
 801bc54:	2203      	movs	r2, #3
 801bc56:	4650      	mov	r0, sl
 801bc58:	f7e4 fb5a 	bl	8000310 <memchr>
 801bc5c:	b140      	cbz	r0, 801bc70 <_vfiprintf_r+0x198>
 801bc5e:	2340      	movs	r3, #64	; 0x40
 801bc60:	eba0 000a 	sub.w	r0, r0, sl
 801bc64:	fa03 f000 	lsl.w	r0, r3, r0
 801bc68:	9b04      	ldr	r3, [sp, #16]
 801bc6a:	4303      	orrs	r3, r0
 801bc6c:	3401      	adds	r4, #1
 801bc6e:	9304      	str	r3, [sp, #16]
 801bc70:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bc74:	482c      	ldr	r0, [pc, #176]	; (801bd28 <_vfiprintf_r+0x250>)
 801bc76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801bc7a:	2206      	movs	r2, #6
 801bc7c:	f7e4 fb48 	bl	8000310 <memchr>
 801bc80:	2800      	cmp	r0, #0
 801bc82:	d03f      	beq.n	801bd04 <_vfiprintf_r+0x22c>
 801bc84:	4b29      	ldr	r3, [pc, #164]	; (801bd2c <_vfiprintf_r+0x254>)
 801bc86:	bb1b      	cbnz	r3, 801bcd0 <_vfiprintf_r+0x1f8>
 801bc88:	9b03      	ldr	r3, [sp, #12]
 801bc8a:	3307      	adds	r3, #7
 801bc8c:	f023 0307 	bic.w	r3, r3, #7
 801bc90:	3308      	adds	r3, #8
 801bc92:	9303      	str	r3, [sp, #12]
 801bc94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc96:	443b      	add	r3, r7
 801bc98:	9309      	str	r3, [sp, #36]	; 0x24
 801bc9a:	e767      	b.n	801bb6c <_vfiprintf_r+0x94>
 801bc9c:	fb0c 3202 	mla	r2, ip, r2, r3
 801bca0:	460c      	mov	r4, r1
 801bca2:	2001      	movs	r0, #1
 801bca4:	e7a5      	b.n	801bbf2 <_vfiprintf_r+0x11a>
 801bca6:	2300      	movs	r3, #0
 801bca8:	3401      	adds	r4, #1
 801bcaa:	9305      	str	r3, [sp, #20]
 801bcac:	4619      	mov	r1, r3
 801bcae:	f04f 0c0a 	mov.w	ip, #10
 801bcb2:	4620      	mov	r0, r4
 801bcb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bcb8:	3a30      	subs	r2, #48	; 0x30
 801bcba:	2a09      	cmp	r2, #9
 801bcbc:	d903      	bls.n	801bcc6 <_vfiprintf_r+0x1ee>
 801bcbe:	2b00      	cmp	r3, #0
 801bcc0:	d0c5      	beq.n	801bc4e <_vfiprintf_r+0x176>
 801bcc2:	9105      	str	r1, [sp, #20]
 801bcc4:	e7c3      	b.n	801bc4e <_vfiprintf_r+0x176>
 801bcc6:	fb0c 2101 	mla	r1, ip, r1, r2
 801bcca:	4604      	mov	r4, r0
 801bccc:	2301      	movs	r3, #1
 801bcce:	e7f0      	b.n	801bcb2 <_vfiprintf_r+0x1da>
 801bcd0:	ab03      	add	r3, sp, #12
 801bcd2:	9300      	str	r3, [sp, #0]
 801bcd4:	462a      	mov	r2, r5
 801bcd6:	4b16      	ldr	r3, [pc, #88]	; (801bd30 <_vfiprintf_r+0x258>)
 801bcd8:	a904      	add	r1, sp, #16
 801bcda:	4630      	mov	r0, r6
 801bcdc:	f7fc fcac 	bl	8018638 <_printf_float>
 801bce0:	4607      	mov	r7, r0
 801bce2:	1c78      	adds	r0, r7, #1
 801bce4:	d1d6      	bne.n	801bc94 <_vfiprintf_r+0x1bc>
 801bce6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bce8:	07d9      	lsls	r1, r3, #31
 801bcea:	d405      	bmi.n	801bcf8 <_vfiprintf_r+0x220>
 801bcec:	89ab      	ldrh	r3, [r5, #12]
 801bcee:	059a      	lsls	r2, r3, #22
 801bcf0:	d402      	bmi.n	801bcf8 <_vfiprintf_r+0x220>
 801bcf2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bcf4:	f7ff f9d2 	bl	801b09c <__retarget_lock_release_recursive>
 801bcf8:	89ab      	ldrh	r3, [r5, #12]
 801bcfa:	065b      	lsls	r3, r3, #25
 801bcfc:	f53f af12 	bmi.w	801bb24 <_vfiprintf_r+0x4c>
 801bd00:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bd02:	e711      	b.n	801bb28 <_vfiprintf_r+0x50>
 801bd04:	ab03      	add	r3, sp, #12
 801bd06:	9300      	str	r3, [sp, #0]
 801bd08:	462a      	mov	r2, r5
 801bd0a:	4b09      	ldr	r3, [pc, #36]	; (801bd30 <_vfiprintf_r+0x258>)
 801bd0c:	a904      	add	r1, sp, #16
 801bd0e:	4630      	mov	r0, r6
 801bd10:	f7fc ff1e 	bl	8018b50 <_printf_i>
 801bd14:	e7e4      	b.n	801bce0 <_vfiprintf_r+0x208>
 801bd16:	bf00      	nop
 801bd18:	080332cc 	.word	0x080332cc
 801bd1c:	080332ec 	.word	0x080332ec
 801bd20:	080332ac 	.word	0x080332ac
 801bd24:	080334e4 	.word	0x080334e4
 801bd28:	080334ee 	.word	0x080334ee
 801bd2c:	08018639 	.word	0x08018639
 801bd30:	0801bab3 	.word	0x0801bab3
 801bd34:	080334ea 	.word	0x080334ea

0801bd38 <nan>:
 801bd38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801bd40 <nan+0x8>
 801bd3c:	4770      	bx	lr
 801bd3e:	bf00      	nop
 801bd40:	00000000 	.word	0x00000000
 801bd44:	7ff80000 	.word	0x7ff80000

0801bd48 <__sread>:
 801bd48:	b510      	push	{r4, lr}
 801bd4a:	460c      	mov	r4, r1
 801bd4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bd50:	f000 fa84 	bl	801c25c <_read_r>
 801bd54:	2800      	cmp	r0, #0
 801bd56:	bfab      	itete	ge
 801bd58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801bd5a:	89a3      	ldrhlt	r3, [r4, #12]
 801bd5c:	181b      	addge	r3, r3, r0
 801bd5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801bd62:	bfac      	ite	ge
 801bd64:	6563      	strge	r3, [r4, #84]	; 0x54
 801bd66:	81a3      	strhlt	r3, [r4, #12]
 801bd68:	bd10      	pop	{r4, pc}

0801bd6a <__swrite>:
 801bd6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd6e:	461f      	mov	r7, r3
 801bd70:	898b      	ldrh	r3, [r1, #12]
 801bd72:	05db      	lsls	r3, r3, #23
 801bd74:	4605      	mov	r5, r0
 801bd76:	460c      	mov	r4, r1
 801bd78:	4616      	mov	r6, r2
 801bd7a:	d505      	bpl.n	801bd88 <__swrite+0x1e>
 801bd7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bd80:	2302      	movs	r3, #2
 801bd82:	2200      	movs	r2, #0
 801bd84:	f000 f9f2 	bl	801c16c <_lseek_r>
 801bd88:	89a3      	ldrh	r3, [r4, #12]
 801bd8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bd8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801bd92:	81a3      	strh	r3, [r4, #12]
 801bd94:	4632      	mov	r2, r6
 801bd96:	463b      	mov	r3, r7
 801bd98:	4628      	mov	r0, r5
 801bd9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bd9e:	f000 b88b 	b.w	801beb8 <_write_r>

0801bda2 <__sseek>:
 801bda2:	b510      	push	{r4, lr}
 801bda4:	460c      	mov	r4, r1
 801bda6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bdaa:	f000 f9df 	bl	801c16c <_lseek_r>
 801bdae:	1c43      	adds	r3, r0, #1
 801bdb0:	89a3      	ldrh	r3, [r4, #12]
 801bdb2:	bf15      	itete	ne
 801bdb4:	6560      	strne	r0, [r4, #84]	; 0x54
 801bdb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801bdba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801bdbe:	81a3      	strheq	r3, [r4, #12]
 801bdc0:	bf18      	it	ne
 801bdc2:	81a3      	strhne	r3, [r4, #12]
 801bdc4:	bd10      	pop	{r4, pc}

0801bdc6 <__sclose>:
 801bdc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bdca:	f000 b8fd 	b.w	801bfc8 <_close_r>

0801bdce <strncmp>:
 801bdce:	b510      	push	{r4, lr}
 801bdd0:	b17a      	cbz	r2, 801bdf2 <strncmp+0x24>
 801bdd2:	4603      	mov	r3, r0
 801bdd4:	3901      	subs	r1, #1
 801bdd6:	1884      	adds	r4, r0, r2
 801bdd8:	f813 0b01 	ldrb.w	r0, [r3], #1
 801bddc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801bde0:	4290      	cmp	r0, r2
 801bde2:	d101      	bne.n	801bde8 <strncmp+0x1a>
 801bde4:	42a3      	cmp	r3, r4
 801bde6:	d101      	bne.n	801bdec <strncmp+0x1e>
 801bde8:	1a80      	subs	r0, r0, r2
 801bdea:	bd10      	pop	{r4, pc}
 801bdec:	2800      	cmp	r0, #0
 801bdee:	d1f3      	bne.n	801bdd8 <strncmp+0xa>
 801bdf0:	e7fa      	b.n	801bde8 <strncmp+0x1a>
 801bdf2:	4610      	mov	r0, r2
 801bdf4:	e7f9      	b.n	801bdea <strncmp+0x1c>
	...

0801bdf8 <__swbuf_r>:
 801bdf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bdfa:	460e      	mov	r6, r1
 801bdfc:	4614      	mov	r4, r2
 801bdfe:	4605      	mov	r5, r0
 801be00:	b118      	cbz	r0, 801be0a <__swbuf_r+0x12>
 801be02:	6983      	ldr	r3, [r0, #24]
 801be04:	b90b      	cbnz	r3, 801be0a <__swbuf_r+0x12>
 801be06:	f7fe fd25 	bl	801a854 <__sinit>
 801be0a:	4b21      	ldr	r3, [pc, #132]	; (801be90 <__swbuf_r+0x98>)
 801be0c:	429c      	cmp	r4, r3
 801be0e:	d12b      	bne.n	801be68 <__swbuf_r+0x70>
 801be10:	686c      	ldr	r4, [r5, #4]
 801be12:	69a3      	ldr	r3, [r4, #24]
 801be14:	60a3      	str	r3, [r4, #8]
 801be16:	89a3      	ldrh	r3, [r4, #12]
 801be18:	071a      	lsls	r2, r3, #28
 801be1a:	d52f      	bpl.n	801be7c <__swbuf_r+0x84>
 801be1c:	6923      	ldr	r3, [r4, #16]
 801be1e:	b36b      	cbz	r3, 801be7c <__swbuf_r+0x84>
 801be20:	6923      	ldr	r3, [r4, #16]
 801be22:	6820      	ldr	r0, [r4, #0]
 801be24:	1ac0      	subs	r0, r0, r3
 801be26:	6963      	ldr	r3, [r4, #20]
 801be28:	b2f6      	uxtb	r6, r6
 801be2a:	4283      	cmp	r3, r0
 801be2c:	4637      	mov	r7, r6
 801be2e:	dc04      	bgt.n	801be3a <__swbuf_r+0x42>
 801be30:	4621      	mov	r1, r4
 801be32:	4628      	mov	r0, r5
 801be34:	f000 f95e 	bl	801c0f4 <_fflush_r>
 801be38:	bb30      	cbnz	r0, 801be88 <__swbuf_r+0x90>
 801be3a:	68a3      	ldr	r3, [r4, #8]
 801be3c:	3b01      	subs	r3, #1
 801be3e:	60a3      	str	r3, [r4, #8]
 801be40:	6823      	ldr	r3, [r4, #0]
 801be42:	1c5a      	adds	r2, r3, #1
 801be44:	6022      	str	r2, [r4, #0]
 801be46:	701e      	strb	r6, [r3, #0]
 801be48:	6963      	ldr	r3, [r4, #20]
 801be4a:	3001      	adds	r0, #1
 801be4c:	4283      	cmp	r3, r0
 801be4e:	d004      	beq.n	801be5a <__swbuf_r+0x62>
 801be50:	89a3      	ldrh	r3, [r4, #12]
 801be52:	07db      	lsls	r3, r3, #31
 801be54:	d506      	bpl.n	801be64 <__swbuf_r+0x6c>
 801be56:	2e0a      	cmp	r6, #10
 801be58:	d104      	bne.n	801be64 <__swbuf_r+0x6c>
 801be5a:	4621      	mov	r1, r4
 801be5c:	4628      	mov	r0, r5
 801be5e:	f000 f949 	bl	801c0f4 <_fflush_r>
 801be62:	b988      	cbnz	r0, 801be88 <__swbuf_r+0x90>
 801be64:	4638      	mov	r0, r7
 801be66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801be68:	4b0a      	ldr	r3, [pc, #40]	; (801be94 <__swbuf_r+0x9c>)
 801be6a:	429c      	cmp	r4, r3
 801be6c:	d101      	bne.n	801be72 <__swbuf_r+0x7a>
 801be6e:	68ac      	ldr	r4, [r5, #8]
 801be70:	e7cf      	b.n	801be12 <__swbuf_r+0x1a>
 801be72:	4b09      	ldr	r3, [pc, #36]	; (801be98 <__swbuf_r+0xa0>)
 801be74:	429c      	cmp	r4, r3
 801be76:	bf08      	it	eq
 801be78:	68ec      	ldreq	r4, [r5, #12]
 801be7a:	e7ca      	b.n	801be12 <__swbuf_r+0x1a>
 801be7c:	4621      	mov	r1, r4
 801be7e:	4628      	mov	r0, r5
 801be80:	f000 f82c 	bl	801bedc <__swsetup_r>
 801be84:	2800      	cmp	r0, #0
 801be86:	d0cb      	beq.n	801be20 <__swbuf_r+0x28>
 801be88:	f04f 37ff 	mov.w	r7, #4294967295
 801be8c:	e7ea      	b.n	801be64 <__swbuf_r+0x6c>
 801be8e:	bf00      	nop
 801be90:	080332cc 	.word	0x080332cc
 801be94:	080332ec 	.word	0x080332ec
 801be98:	080332ac 	.word	0x080332ac

0801be9c <__ascii_wctomb>:
 801be9c:	b149      	cbz	r1, 801beb2 <__ascii_wctomb+0x16>
 801be9e:	2aff      	cmp	r2, #255	; 0xff
 801bea0:	bf85      	ittet	hi
 801bea2:	238a      	movhi	r3, #138	; 0x8a
 801bea4:	6003      	strhi	r3, [r0, #0]
 801bea6:	700a      	strbls	r2, [r1, #0]
 801bea8:	f04f 30ff 	movhi.w	r0, #4294967295
 801beac:	bf98      	it	ls
 801beae:	2001      	movls	r0, #1
 801beb0:	4770      	bx	lr
 801beb2:	4608      	mov	r0, r1
 801beb4:	4770      	bx	lr
	...

0801beb8 <_write_r>:
 801beb8:	b538      	push	{r3, r4, r5, lr}
 801beba:	4d07      	ldr	r5, [pc, #28]	; (801bed8 <_write_r+0x20>)
 801bebc:	4604      	mov	r4, r0
 801bebe:	4608      	mov	r0, r1
 801bec0:	4611      	mov	r1, r2
 801bec2:	2200      	movs	r2, #0
 801bec4:	602a      	str	r2, [r5, #0]
 801bec6:	461a      	mov	r2, r3
 801bec8:	f7e6 faba 	bl	8002440 <_write>
 801becc:	1c43      	adds	r3, r0, #1
 801bece:	d102      	bne.n	801bed6 <_write_r+0x1e>
 801bed0:	682b      	ldr	r3, [r5, #0]
 801bed2:	b103      	cbz	r3, 801bed6 <_write_r+0x1e>
 801bed4:	6023      	str	r3, [r4, #0]
 801bed6:	bd38      	pop	{r3, r4, r5, pc}
 801bed8:	240311c8 	.word	0x240311c8

0801bedc <__swsetup_r>:
 801bedc:	4b32      	ldr	r3, [pc, #200]	; (801bfa8 <__swsetup_r+0xcc>)
 801bede:	b570      	push	{r4, r5, r6, lr}
 801bee0:	681d      	ldr	r5, [r3, #0]
 801bee2:	4606      	mov	r6, r0
 801bee4:	460c      	mov	r4, r1
 801bee6:	b125      	cbz	r5, 801bef2 <__swsetup_r+0x16>
 801bee8:	69ab      	ldr	r3, [r5, #24]
 801beea:	b913      	cbnz	r3, 801bef2 <__swsetup_r+0x16>
 801beec:	4628      	mov	r0, r5
 801beee:	f7fe fcb1 	bl	801a854 <__sinit>
 801bef2:	4b2e      	ldr	r3, [pc, #184]	; (801bfac <__swsetup_r+0xd0>)
 801bef4:	429c      	cmp	r4, r3
 801bef6:	d10f      	bne.n	801bf18 <__swsetup_r+0x3c>
 801bef8:	686c      	ldr	r4, [r5, #4]
 801befa:	89a3      	ldrh	r3, [r4, #12]
 801befc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bf00:	0719      	lsls	r1, r3, #28
 801bf02:	d42c      	bmi.n	801bf5e <__swsetup_r+0x82>
 801bf04:	06dd      	lsls	r5, r3, #27
 801bf06:	d411      	bmi.n	801bf2c <__swsetup_r+0x50>
 801bf08:	2309      	movs	r3, #9
 801bf0a:	6033      	str	r3, [r6, #0]
 801bf0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801bf10:	81a3      	strh	r3, [r4, #12]
 801bf12:	f04f 30ff 	mov.w	r0, #4294967295
 801bf16:	e03e      	b.n	801bf96 <__swsetup_r+0xba>
 801bf18:	4b25      	ldr	r3, [pc, #148]	; (801bfb0 <__swsetup_r+0xd4>)
 801bf1a:	429c      	cmp	r4, r3
 801bf1c:	d101      	bne.n	801bf22 <__swsetup_r+0x46>
 801bf1e:	68ac      	ldr	r4, [r5, #8]
 801bf20:	e7eb      	b.n	801befa <__swsetup_r+0x1e>
 801bf22:	4b24      	ldr	r3, [pc, #144]	; (801bfb4 <__swsetup_r+0xd8>)
 801bf24:	429c      	cmp	r4, r3
 801bf26:	bf08      	it	eq
 801bf28:	68ec      	ldreq	r4, [r5, #12]
 801bf2a:	e7e6      	b.n	801befa <__swsetup_r+0x1e>
 801bf2c:	0758      	lsls	r0, r3, #29
 801bf2e:	d512      	bpl.n	801bf56 <__swsetup_r+0x7a>
 801bf30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bf32:	b141      	cbz	r1, 801bf46 <__swsetup_r+0x6a>
 801bf34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bf38:	4299      	cmp	r1, r3
 801bf3a:	d002      	beq.n	801bf42 <__swsetup_r+0x66>
 801bf3c:	4630      	mov	r0, r6
 801bf3e:	f7fc fa0b 	bl	8018358 <_free_r>
 801bf42:	2300      	movs	r3, #0
 801bf44:	6363      	str	r3, [r4, #52]	; 0x34
 801bf46:	89a3      	ldrh	r3, [r4, #12]
 801bf48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801bf4c:	81a3      	strh	r3, [r4, #12]
 801bf4e:	2300      	movs	r3, #0
 801bf50:	6063      	str	r3, [r4, #4]
 801bf52:	6923      	ldr	r3, [r4, #16]
 801bf54:	6023      	str	r3, [r4, #0]
 801bf56:	89a3      	ldrh	r3, [r4, #12]
 801bf58:	f043 0308 	orr.w	r3, r3, #8
 801bf5c:	81a3      	strh	r3, [r4, #12]
 801bf5e:	6923      	ldr	r3, [r4, #16]
 801bf60:	b94b      	cbnz	r3, 801bf76 <__swsetup_r+0x9a>
 801bf62:	89a3      	ldrh	r3, [r4, #12]
 801bf64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801bf68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bf6c:	d003      	beq.n	801bf76 <__swsetup_r+0x9a>
 801bf6e:	4621      	mov	r1, r4
 801bf70:	4630      	mov	r0, r6
 801bf72:	f000 f933 	bl	801c1dc <__smakebuf_r>
 801bf76:	89a0      	ldrh	r0, [r4, #12]
 801bf78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bf7c:	f010 0301 	ands.w	r3, r0, #1
 801bf80:	d00a      	beq.n	801bf98 <__swsetup_r+0xbc>
 801bf82:	2300      	movs	r3, #0
 801bf84:	60a3      	str	r3, [r4, #8]
 801bf86:	6963      	ldr	r3, [r4, #20]
 801bf88:	425b      	negs	r3, r3
 801bf8a:	61a3      	str	r3, [r4, #24]
 801bf8c:	6923      	ldr	r3, [r4, #16]
 801bf8e:	b943      	cbnz	r3, 801bfa2 <__swsetup_r+0xc6>
 801bf90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801bf94:	d1ba      	bne.n	801bf0c <__swsetup_r+0x30>
 801bf96:	bd70      	pop	{r4, r5, r6, pc}
 801bf98:	0781      	lsls	r1, r0, #30
 801bf9a:	bf58      	it	pl
 801bf9c:	6963      	ldrpl	r3, [r4, #20]
 801bf9e:	60a3      	str	r3, [r4, #8]
 801bfa0:	e7f4      	b.n	801bf8c <__swsetup_r+0xb0>
 801bfa2:	2000      	movs	r0, #0
 801bfa4:	e7f7      	b.n	801bf96 <__swsetup_r+0xba>
 801bfa6:	bf00      	nop
 801bfa8:	24000060 	.word	0x24000060
 801bfac:	080332cc 	.word	0x080332cc
 801bfb0:	080332ec 	.word	0x080332ec
 801bfb4:	080332ac 	.word	0x080332ac

0801bfb8 <abort>:
 801bfb8:	b508      	push	{r3, lr}
 801bfba:	2006      	movs	r0, #6
 801bfbc:	f000 f988 	bl	801c2d0 <raise>
 801bfc0:	2001      	movs	r0, #1
 801bfc2:	f7e7 f86e 	bl	80030a2 <_exit>
	...

0801bfc8 <_close_r>:
 801bfc8:	b538      	push	{r3, r4, r5, lr}
 801bfca:	4d06      	ldr	r5, [pc, #24]	; (801bfe4 <_close_r+0x1c>)
 801bfcc:	2300      	movs	r3, #0
 801bfce:	4604      	mov	r4, r0
 801bfd0:	4608      	mov	r0, r1
 801bfd2:	602b      	str	r3, [r5, #0]
 801bfd4:	f7e7 f88c 	bl	80030f0 <_close>
 801bfd8:	1c43      	adds	r3, r0, #1
 801bfda:	d102      	bne.n	801bfe2 <_close_r+0x1a>
 801bfdc:	682b      	ldr	r3, [r5, #0]
 801bfde:	b103      	cbz	r3, 801bfe2 <_close_r+0x1a>
 801bfe0:	6023      	str	r3, [r4, #0]
 801bfe2:	bd38      	pop	{r3, r4, r5, pc}
 801bfe4:	240311c8 	.word	0x240311c8

0801bfe8 <__sflush_r>:
 801bfe8:	898a      	ldrh	r2, [r1, #12]
 801bfea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bfee:	4605      	mov	r5, r0
 801bff0:	0710      	lsls	r0, r2, #28
 801bff2:	460c      	mov	r4, r1
 801bff4:	d458      	bmi.n	801c0a8 <__sflush_r+0xc0>
 801bff6:	684b      	ldr	r3, [r1, #4]
 801bff8:	2b00      	cmp	r3, #0
 801bffa:	dc05      	bgt.n	801c008 <__sflush_r+0x20>
 801bffc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801bffe:	2b00      	cmp	r3, #0
 801c000:	dc02      	bgt.n	801c008 <__sflush_r+0x20>
 801c002:	2000      	movs	r0, #0
 801c004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c008:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c00a:	2e00      	cmp	r6, #0
 801c00c:	d0f9      	beq.n	801c002 <__sflush_r+0x1a>
 801c00e:	2300      	movs	r3, #0
 801c010:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c014:	682f      	ldr	r7, [r5, #0]
 801c016:	602b      	str	r3, [r5, #0]
 801c018:	d032      	beq.n	801c080 <__sflush_r+0x98>
 801c01a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c01c:	89a3      	ldrh	r3, [r4, #12]
 801c01e:	075a      	lsls	r2, r3, #29
 801c020:	d505      	bpl.n	801c02e <__sflush_r+0x46>
 801c022:	6863      	ldr	r3, [r4, #4]
 801c024:	1ac0      	subs	r0, r0, r3
 801c026:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c028:	b10b      	cbz	r3, 801c02e <__sflush_r+0x46>
 801c02a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c02c:	1ac0      	subs	r0, r0, r3
 801c02e:	2300      	movs	r3, #0
 801c030:	4602      	mov	r2, r0
 801c032:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c034:	6a21      	ldr	r1, [r4, #32]
 801c036:	4628      	mov	r0, r5
 801c038:	47b0      	blx	r6
 801c03a:	1c43      	adds	r3, r0, #1
 801c03c:	89a3      	ldrh	r3, [r4, #12]
 801c03e:	d106      	bne.n	801c04e <__sflush_r+0x66>
 801c040:	6829      	ldr	r1, [r5, #0]
 801c042:	291d      	cmp	r1, #29
 801c044:	d82c      	bhi.n	801c0a0 <__sflush_r+0xb8>
 801c046:	4a2a      	ldr	r2, [pc, #168]	; (801c0f0 <__sflush_r+0x108>)
 801c048:	40ca      	lsrs	r2, r1
 801c04a:	07d6      	lsls	r6, r2, #31
 801c04c:	d528      	bpl.n	801c0a0 <__sflush_r+0xb8>
 801c04e:	2200      	movs	r2, #0
 801c050:	6062      	str	r2, [r4, #4]
 801c052:	04d9      	lsls	r1, r3, #19
 801c054:	6922      	ldr	r2, [r4, #16]
 801c056:	6022      	str	r2, [r4, #0]
 801c058:	d504      	bpl.n	801c064 <__sflush_r+0x7c>
 801c05a:	1c42      	adds	r2, r0, #1
 801c05c:	d101      	bne.n	801c062 <__sflush_r+0x7a>
 801c05e:	682b      	ldr	r3, [r5, #0]
 801c060:	b903      	cbnz	r3, 801c064 <__sflush_r+0x7c>
 801c062:	6560      	str	r0, [r4, #84]	; 0x54
 801c064:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c066:	602f      	str	r7, [r5, #0]
 801c068:	2900      	cmp	r1, #0
 801c06a:	d0ca      	beq.n	801c002 <__sflush_r+0x1a>
 801c06c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c070:	4299      	cmp	r1, r3
 801c072:	d002      	beq.n	801c07a <__sflush_r+0x92>
 801c074:	4628      	mov	r0, r5
 801c076:	f7fc f96f 	bl	8018358 <_free_r>
 801c07a:	2000      	movs	r0, #0
 801c07c:	6360      	str	r0, [r4, #52]	; 0x34
 801c07e:	e7c1      	b.n	801c004 <__sflush_r+0x1c>
 801c080:	6a21      	ldr	r1, [r4, #32]
 801c082:	2301      	movs	r3, #1
 801c084:	4628      	mov	r0, r5
 801c086:	47b0      	blx	r6
 801c088:	1c41      	adds	r1, r0, #1
 801c08a:	d1c7      	bne.n	801c01c <__sflush_r+0x34>
 801c08c:	682b      	ldr	r3, [r5, #0]
 801c08e:	2b00      	cmp	r3, #0
 801c090:	d0c4      	beq.n	801c01c <__sflush_r+0x34>
 801c092:	2b1d      	cmp	r3, #29
 801c094:	d001      	beq.n	801c09a <__sflush_r+0xb2>
 801c096:	2b16      	cmp	r3, #22
 801c098:	d101      	bne.n	801c09e <__sflush_r+0xb6>
 801c09a:	602f      	str	r7, [r5, #0]
 801c09c:	e7b1      	b.n	801c002 <__sflush_r+0x1a>
 801c09e:	89a3      	ldrh	r3, [r4, #12]
 801c0a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c0a4:	81a3      	strh	r3, [r4, #12]
 801c0a6:	e7ad      	b.n	801c004 <__sflush_r+0x1c>
 801c0a8:	690f      	ldr	r7, [r1, #16]
 801c0aa:	2f00      	cmp	r7, #0
 801c0ac:	d0a9      	beq.n	801c002 <__sflush_r+0x1a>
 801c0ae:	0793      	lsls	r3, r2, #30
 801c0b0:	680e      	ldr	r6, [r1, #0]
 801c0b2:	bf08      	it	eq
 801c0b4:	694b      	ldreq	r3, [r1, #20]
 801c0b6:	600f      	str	r7, [r1, #0]
 801c0b8:	bf18      	it	ne
 801c0ba:	2300      	movne	r3, #0
 801c0bc:	eba6 0807 	sub.w	r8, r6, r7
 801c0c0:	608b      	str	r3, [r1, #8]
 801c0c2:	f1b8 0f00 	cmp.w	r8, #0
 801c0c6:	dd9c      	ble.n	801c002 <__sflush_r+0x1a>
 801c0c8:	6a21      	ldr	r1, [r4, #32]
 801c0ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c0cc:	4643      	mov	r3, r8
 801c0ce:	463a      	mov	r2, r7
 801c0d0:	4628      	mov	r0, r5
 801c0d2:	47b0      	blx	r6
 801c0d4:	2800      	cmp	r0, #0
 801c0d6:	dc06      	bgt.n	801c0e6 <__sflush_r+0xfe>
 801c0d8:	89a3      	ldrh	r3, [r4, #12]
 801c0da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c0de:	81a3      	strh	r3, [r4, #12]
 801c0e0:	f04f 30ff 	mov.w	r0, #4294967295
 801c0e4:	e78e      	b.n	801c004 <__sflush_r+0x1c>
 801c0e6:	4407      	add	r7, r0
 801c0e8:	eba8 0800 	sub.w	r8, r8, r0
 801c0ec:	e7e9      	b.n	801c0c2 <__sflush_r+0xda>
 801c0ee:	bf00      	nop
 801c0f0:	20400001 	.word	0x20400001

0801c0f4 <_fflush_r>:
 801c0f4:	b538      	push	{r3, r4, r5, lr}
 801c0f6:	690b      	ldr	r3, [r1, #16]
 801c0f8:	4605      	mov	r5, r0
 801c0fa:	460c      	mov	r4, r1
 801c0fc:	b913      	cbnz	r3, 801c104 <_fflush_r+0x10>
 801c0fe:	2500      	movs	r5, #0
 801c100:	4628      	mov	r0, r5
 801c102:	bd38      	pop	{r3, r4, r5, pc}
 801c104:	b118      	cbz	r0, 801c10e <_fflush_r+0x1a>
 801c106:	6983      	ldr	r3, [r0, #24]
 801c108:	b90b      	cbnz	r3, 801c10e <_fflush_r+0x1a>
 801c10a:	f7fe fba3 	bl	801a854 <__sinit>
 801c10e:	4b14      	ldr	r3, [pc, #80]	; (801c160 <_fflush_r+0x6c>)
 801c110:	429c      	cmp	r4, r3
 801c112:	d11b      	bne.n	801c14c <_fflush_r+0x58>
 801c114:	686c      	ldr	r4, [r5, #4]
 801c116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c11a:	2b00      	cmp	r3, #0
 801c11c:	d0ef      	beq.n	801c0fe <_fflush_r+0xa>
 801c11e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c120:	07d0      	lsls	r0, r2, #31
 801c122:	d404      	bmi.n	801c12e <_fflush_r+0x3a>
 801c124:	0599      	lsls	r1, r3, #22
 801c126:	d402      	bmi.n	801c12e <_fflush_r+0x3a>
 801c128:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c12a:	f7fe ffb6 	bl	801b09a <__retarget_lock_acquire_recursive>
 801c12e:	4628      	mov	r0, r5
 801c130:	4621      	mov	r1, r4
 801c132:	f7ff ff59 	bl	801bfe8 <__sflush_r>
 801c136:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c138:	07da      	lsls	r2, r3, #31
 801c13a:	4605      	mov	r5, r0
 801c13c:	d4e0      	bmi.n	801c100 <_fflush_r+0xc>
 801c13e:	89a3      	ldrh	r3, [r4, #12]
 801c140:	059b      	lsls	r3, r3, #22
 801c142:	d4dd      	bmi.n	801c100 <_fflush_r+0xc>
 801c144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c146:	f7fe ffa9 	bl	801b09c <__retarget_lock_release_recursive>
 801c14a:	e7d9      	b.n	801c100 <_fflush_r+0xc>
 801c14c:	4b05      	ldr	r3, [pc, #20]	; (801c164 <_fflush_r+0x70>)
 801c14e:	429c      	cmp	r4, r3
 801c150:	d101      	bne.n	801c156 <_fflush_r+0x62>
 801c152:	68ac      	ldr	r4, [r5, #8]
 801c154:	e7df      	b.n	801c116 <_fflush_r+0x22>
 801c156:	4b04      	ldr	r3, [pc, #16]	; (801c168 <_fflush_r+0x74>)
 801c158:	429c      	cmp	r4, r3
 801c15a:	bf08      	it	eq
 801c15c:	68ec      	ldreq	r4, [r5, #12]
 801c15e:	e7da      	b.n	801c116 <_fflush_r+0x22>
 801c160:	080332cc 	.word	0x080332cc
 801c164:	080332ec 	.word	0x080332ec
 801c168:	080332ac 	.word	0x080332ac

0801c16c <_lseek_r>:
 801c16c:	b538      	push	{r3, r4, r5, lr}
 801c16e:	4d07      	ldr	r5, [pc, #28]	; (801c18c <_lseek_r+0x20>)
 801c170:	4604      	mov	r4, r0
 801c172:	4608      	mov	r0, r1
 801c174:	4611      	mov	r1, r2
 801c176:	2200      	movs	r2, #0
 801c178:	602a      	str	r2, [r5, #0]
 801c17a:	461a      	mov	r2, r3
 801c17c:	f7e6 ffdf 	bl	800313e <_lseek>
 801c180:	1c43      	adds	r3, r0, #1
 801c182:	d102      	bne.n	801c18a <_lseek_r+0x1e>
 801c184:	682b      	ldr	r3, [r5, #0]
 801c186:	b103      	cbz	r3, 801c18a <_lseek_r+0x1e>
 801c188:	6023      	str	r3, [r4, #0]
 801c18a:	bd38      	pop	{r3, r4, r5, pc}
 801c18c:	240311c8 	.word	0x240311c8

0801c190 <__swhatbuf_r>:
 801c190:	b570      	push	{r4, r5, r6, lr}
 801c192:	460e      	mov	r6, r1
 801c194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c198:	2900      	cmp	r1, #0
 801c19a:	b096      	sub	sp, #88	; 0x58
 801c19c:	4614      	mov	r4, r2
 801c19e:	461d      	mov	r5, r3
 801c1a0:	da08      	bge.n	801c1b4 <__swhatbuf_r+0x24>
 801c1a2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801c1a6:	2200      	movs	r2, #0
 801c1a8:	602a      	str	r2, [r5, #0]
 801c1aa:	061a      	lsls	r2, r3, #24
 801c1ac:	d410      	bmi.n	801c1d0 <__swhatbuf_r+0x40>
 801c1ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c1b2:	e00e      	b.n	801c1d2 <__swhatbuf_r+0x42>
 801c1b4:	466a      	mov	r2, sp
 801c1b6:	f000 f8a7 	bl	801c308 <_fstat_r>
 801c1ba:	2800      	cmp	r0, #0
 801c1bc:	dbf1      	blt.n	801c1a2 <__swhatbuf_r+0x12>
 801c1be:	9a01      	ldr	r2, [sp, #4]
 801c1c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c1c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c1c8:	425a      	negs	r2, r3
 801c1ca:	415a      	adcs	r2, r3
 801c1cc:	602a      	str	r2, [r5, #0]
 801c1ce:	e7ee      	b.n	801c1ae <__swhatbuf_r+0x1e>
 801c1d0:	2340      	movs	r3, #64	; 0x40
 801c1d2:	2000      	movs	r0, #0
 801c1d4:	6023      	str	r3, [r4, #0]
 801c1d6:	b016      	add	sp, #88	; 0x58
 801c1d8:	bd70      	pop	{r4, r5, r6, pc}
	...

0801c1dc <__smakebuf_r>:
 801c1dc:	898b      	ldrh	r3, [r1, #12]
 801c1de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c1e0:	079d      	lsls	r5, r3, #30
 801c1e2:	4606      	mov	r6, r0
 801c1e4:	460c      	mov	r4, r1
 801c1e6:	d507      	bpl.n	801c1f8 <__smakebuf_r+0x1c>
 801c1e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c1ec:	6023      	str	r3, [r4, #0]
 801c1ee:	6123      	str	r3, [r4, #16]
 801c1f0:	2301      	movs	r3, #1
 801c1f2:	6163      	str	r3, [r4, #20]
 801c1f4:	b002      	add	sp, #8
 801c1f6:	bd70      	pop	{r4, r5, r6, pc}
 801c1f8:	ab01      	add	r3, sp, #4
 801c1fa:	466a      	mov	r2, sp
 801c1fc:	f7ff ffc8 	bl	801c190 <__swhatbuf_r>
 801c200:	9900      	ldr	r1, [sp, #0]
 801c202:	4605      	mov	r5, r0
 801c204:	4630      	mov	r0, r6
 801c206:	f7fc f913 	bl	8018430 <_malloc_r>
 801c20a:	b948      	cbnz	r0, 801c220 <__smakebuf_r+0x44>
 801c20c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c210:	059a      	lsls	r2, r3, #22
 801c212:	d4ef      	bmi.n	801c1f4 <__smakebuf_r+0x18>
 801c214:	f023 0303 	bic.w	r3, r3, #3
 801c218:	f043 0302 	orr.w	r3, r3, #2
 801c21c:	81a3      	strh	r3, [r4, #12]
 801c21e:	e7e3      	b.n	801c1e8 <__smakebuf_r+0xc>
 801c220:	4b0d      	ldr	r3, [pc, #52]	; (801c258 <__smakebuf_r+0x7c>)
 801c222:	62b3      	str	r3, [r6, #40]	; 0x28
 801c224:	89a3      	ldrh	r3, [r4, #12]
 801c226:	6020      	str	r0, [r4, #0]
 801c228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c22c:	81a3      	strh	r3, [r4, #12]
 801c22e:	9b00      	ldr	r3, [sp, #0]
 801c230:	6163      	str	r3, [r4, #20]
 801c232:	9b01      	ldr	r3, [sp, #4]
 801c234:	6120      	str	r0, [r4, #16]
 801c236:	b15b      	cbz	r3, 801c250 <__smakebuf_r+0x74>
 801c238:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c23c:	4630      	mov	r0, r6
 801c23e:	f000 f875 	bl	801c32c <_isatty_r>
 801c242:	b128      	cbz	r0, 801c250 <__smakebuf_r+0x74>
 801c244:	89a3      	ldrh	r3, [r4, #12]
 801c246:	f023 0303 	bic.w	r3, r3, #3
 801c24a:	f043 0301 	orr.w	r3, r3, #1
 801c24e:	81a3      	strh	r3, [r4, #12]
 801c250:	89a0      	ldrh	r0, [r4, #12]
 801c252:	4305      	orrs	r5, r0
 801c254:	81a5      	strh	r5, [r4, #12]
 801c256:	e7cd      	b.n	801c1f4 <__smakebuf_r+0x18>
 801c258:	0801a7ed 	.word	0x0801a7ed

0801c25c <_read_r>:
 801c25c:	b538      	push	{r3, r4, r5, lr}
 801c25e:	4d07      	ldr	r5, [pc, #28]	; (801c27c <_read_r+0x20>)
 801c260:	4604      	mov	r4, r0
 801c262:	4608      	mov	r0, r1
 801c264:	4611      	mov	r1, r2
 801c266:	2200      	movs	r2, #0
 801c268:	602a      	str	r2, [r5, #0]
 801c26a:	461a      	mov	r2, r3
 801c26c:	f7e6 ff23 	bl	80030b6 <_read>
 801c270:	1c43      	adds	r3, r0, #1
 801c272:	d102      	bne.n	801c27a <_read_r+0x1e>
 801c274:	682b      	ldr	r3, [r5, #0]
 801c276:	b103      	cbz	r3, 801c27a <_read_r+0x1e>
 801c278:	6023      	str	r3, [r4, #0]
 801c27a:	bd38      	pop	{r3, r4, r5, pc}
 801c27c:	240311c8 	.word	0x240311c8

0801c280 <_raise_r>:
 801c280:	291f      	cmp	r1, #31
 801c282:	b538      	push	{r3, r4, r5, lr}
 801c284:	4604      	mov	r4, r0
 801c286:	460d      	mov	r5, r1
 801c288:	d904      	bls.n	801c294 <_raise_r+0x14>
 801c28a:	2316      	movs	r3, #22
 801c28c:	6003      	str	r3, [r0, #0]
 801c28e:	f04f 30ff 	mov.w	r0, #4294967295
 801c292:	bd38      	pop	{r3, r4, r5, pc}
 801c294:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801c296:	b112      	cbz	r2, 801c29e <_raise_r+0x1e>
 801c298:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c29c:	b94b      	cbnz	r3, 801c2b2 <_raise_r+0x32>
 801c29e:	4620      	mov	r0, r4
 801c2a0:	f000 f830 	bl	801c304 <_getpid_r>
 801c2a4:	462a      	mov	r2, r5
 801c2a6:	4601      	mov	r1, r0
 801c2a8:	4620      	mov	r0, r4
 801c2aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c2ae:	f000 b817 	b.w	801c2e0 <_kill_r>
 801c2b2:	2b01      	cmp	r3, #1
 801c2b4:	d00a      	beq.n	801c2cc <_raise_r+0x4c>
 801c2b6:	1c59      	adds	r1, r3, #1
 801c2b8:	d103      	bne.n	801c2c2 <_raise_r+0x42>
 801c2ba:	2316      	movs	r3, #22
 801c2bc:	6003      	str	r3, [r0, #0]
 801c2be:	2001      	movs	r0, #1
 801c2c0:	e7e7      	b.n	801c292 <_raise_r+0x12>
 801c2c2:	2400      	movs	r4, #0
 801c2c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c2c8:	4628      	mov	r0, r5
 801c2ca:	4798      	blx	r3
 801c2cc:	2000      	movs	r0, #0
 801c2ce:	e7e0      	b.n	801c292 <_raise_r+0x12>

0801c2d0 <raise>:
 801c2d0:	4b02      	ldr	r3, [pc, #8]	; (801c2dc <raise+0xc>)
 801c2d2:	4601      	mov	r1, r0
 801c2d4:	6818      	ldr	r0, [r3, #0]
 801c2d6:	f7ff bfd3 	b.w	801c280 <_raise_r>
 801c2da:	bf00      	nop
 801c2dc:	24000060 	.word	0x24000060

0801c2e0 <_kill_r>:
 801c2e0:	b538      	push	{r3, r4, r5, lr}
 801c2e2:	4d07      	ldr	r5, [pc, #28]	; (801c300 <_kill_r+0x20>)
 801c2e4:	2300      	movs	r3, #0
 801c2e6:	4604      	mov	r4, r0
 801c2e8:	4608      	mov	r0, r1
 801c2ea:	4611      	mov	r1, r2
 801c2ec:	602b      	str	r3, [r5, #0]
 801c2ee:	f7e6 fec8 	bl	8003082 <_kill>
 801c2f2:	1c43      	adds	r3, r0, #1
 801c2f4:	d102      	bne.n	801c2fc <_kill_r+0x1c>
 801c2f6:	682b      	ldr	r3, [r5, #0]
 801c2f8:	b103      	cbz	r3, 801c2fc <_kill_r+0x1c>
 801c2fa:	6023      	str	r3, [r4, #0]
 801c2fc:	bd38      	pop	{r3, r4, r5, pc}
 801c2fe:	bf00      	nop
 801c300:	240311c8 	.word	0x240311c8

0801c304 <_getpid_r>:
 801c304:	f7e6 beb5 	b.w	8003072 <_getpid>

0801c308 <_fstat_r>:
 801c308:	b538      	push	{r3, r4, r5, lr}
 801c30a:	4d07      	ldr	r5, [pc, #28]	; (801c328 <_fstat_r+0x20>)
 801c30c:	2300      	movs	r3, #0
 801c30e:	4604      	mov	r4, r0
 801c310:	4608      	mov	r0, r1
 801c312:	4611      	mov	r1, r2
 801c314:	602b      	str	r3, [r5, #0]
 801c316:	f7e6 fef7 	bl	8003108 <_fstat>
 801c31a:	1c43      	adds	r3, r0, #1
 801c31c:	d102      	bne.n	801c324 <_fstat_r+0x1c>
 801c31e:	682b      	ldr	r3, [r5, #0]
 801c320:	b103      	cbz	r3, 801c324 <_fstat_r+0x1c>
 801c322:	6023      	str	r3, [r4, #0]
 801c324:	bd38      	pop	{r3, r4, r5, pc}
 801c326:	bf00      	nop
 801c328:	240311c8 	.word	0x240311c8

0801c32c <_isatty_r>:
 801c32c:	b538      	push	{r3, r4, r5, lr}
 801c32e:	4d06      	ldr	r5, [pc, #24]	; (801c348 <_isatty_r+0x1c>)
 801c330:	2300      	movs	r3, #0
 801c332:	4604      	mov	r4, r0
 801c334:	4608      	mov	r0, r1
 801c336:	602b      	str	r3, [r5, #0]
 801c338:	f7e6 fef6 	bl	8003128 <_isatty>
 801c33c:	1c43      	adds	r3, r0, #1
 801c33e:	d102      	bne.n	801c346 <_isatty_r+0x1a>
 801c340:	682b      	ldr	r3, [r5, #0]
 801c342:	b103      	cbz	r3, 801c346 <_isatty_r+0x1a>
 801c344:	6023      	str	r3, [r4, #0]
 801c346:	bd38      	pop	{r3, r4, r5, pc}
 801c348:	240311c8 	.word	0x240311c8

0801c34c <_init>:
 801c34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c34e:	bf00      	nop
 801c350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c352:	bc08      	pop	{r3}
 801c354:	469e      	mov	lr, r3
 801c356:	4770      	bx	lr

0801c358 <_fini>:
 801c358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c35a:	bf00      	nop
 801c35c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c35e:	bc08      	pop	{r3}
 801c360:	469e      	mov	lr, r3
 801c362:	4770      	bx	lr
